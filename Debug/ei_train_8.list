
ei_train_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021098  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052c4  08021270  08021270  00031270  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026534  08026534  00042610  2**0
                  CONTENTS
  4 .ARM          00000008  08026534  08026534  00036534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802653c  0802653c  00042610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802653c  0802653c  0003653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08026544  08026544  00036544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002610  20000000  0802654c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20002610  08028b5c  00042610  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d44  08028b5c  00042d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00042610  2**0
                  CONTENTS, READONLY
 12 .debug_info   00121ae6  00000000  00000000  00042640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00013083  00000000  00000000  00164126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000051b8  00000000  00000000  001771b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004fd0  00000000  00000000  0017c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033bf8  00000000  00000000  00181338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005b3fb  00000000  00000000  001b4f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bfdc  00000000  00000000  0021032b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0039c307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000187e0  00000000  00000000  0039c358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002610 	.word	0x20002610
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021250 	.word	0x08021250

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002614 	.word	0x20002614
 800020c:	08021250 	.word	0x08021250

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2uiz>:
 8000bfc:	004a      	lsls	r2, r1, #1
 8000bfe:	d211      	bcs.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c04:	d211      	bcs.n	8000c2a <__aeabi_d2uiz+0x2e>
 8000c06:	d50d      	bpl.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c10:	d40e      	bmi.n	8000c30 <__aeabi_d2uiz+0x34>
 8000c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2e:	d102      	bne.n	8000c36 <__aeabi_d2uiz+0x3a>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2f>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c44:	bf24      	itt	cs
 8000c46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4e:	d90d      	bls.n	8000c6c <__aeabi_d2f+0x30>
 8000c50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c64:	bf08      	it	eq
 8000c66:	f020 0001 	biceq.w	r0, r0, #1
 8000c6a:	4770      	bx	lr
 8000c6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c70:	d121      	bne.n	8000cb6 <__aeabi_d2f+0x7a>
 8000c72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c76:	bfbc      	itt	lt
 8000c78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	4770      	bxlt	lr
 8000c7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c86:	f1c2 0218 	rsb	r2, r2, #24
 8000c8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c92:	fa20 f002 	lsr.w	r0, r0, r2
 8000c96:	bf18      	it	ne
 8000c98:	f040 0001 	orrne.w	r0, r0, #1
 8000c9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca8:	ea40 000c 	orr.w	r0, r0, ip
 8000cac:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb4:	e7cc      	b.n	8000c50 <__aeabi_d2f+0x14>
 8000cb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cba:	d107      	bne.n	8000ccc <__aeabi_d2f+0x90>
 8000cbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cca:	4770      	bxne	lr
 8000ccc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_ldivmod>:
 8000cdc:	b97b      	cbnz	r3, 8000cfe <__aeabi_ldivmod+0x22>
 8000cde:	b972      	cbnz	r2, 8000cfe <__aeabi_ldivmod+0x22>
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	bfbe      	ittt	lt
 8000ce4:	2000      	movlt	r0, #0
 8000ce6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cea:	e006      	blt.n	8000cfa <__aeabi_ldivmod+0x1e>
 8000cec:	bf08      	it	eq
 8000cee:	2800      	cmpeq	r0, #0
 8000cf0:	bf1c      	itt	ne
 8000cf2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfa:	f000 b9f5 	b.w	80010e8 <__aeabi_idiv0>
 8000cfe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d02:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d06:	2900      	cmp	r1, #0
 8000d08:	db09      	blt.n	8000d1e <__aeabi_ldivmod+0x42>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db1a      	blt.n	8000d44 <__aeabi_ldivmod+0x68>
 8000d0e:	f000 f883 	bl	8000e18 <__udivmoddi4>
 8000d12:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1a:	b004      	add	sp, #16
 8000d1c:	4770      	bx	lr
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db1b      	blt.n	8000d60 <__aeabi_ldivmod+0x84>
 8000d28:	f000 f876 	bl	8000e18 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	4770      	bx	lr
 8000d44:	4252      	negs	r2, r2
 8000d46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4a:	f000 f865 	bl	8000e18 <__udivmoddi4>
 8000d4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d56:	b004      	add	sp, #16
 8000d58:	4240      	negs	r0, r0
 8000d5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5e:	4770      	bx	lr
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	f000 f857 	bl	8000e18 <__udivmoddi4>
 8000d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d72:	b004      	add	sp, #16
 8000d74:	4252      	negs	r2, r2
 8000d76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_uldivmod>:
 8000d7c:	b953      	cbnz	r3, 8000d94 <__aeabi_uldivmod+0x18>
 8000d7e:	b94a      	cbnz	r2, 8000d94 <__aeabi_uldivmod+0x18>
 8000d80:	2900      	cmp	r1, #0
 8000d82:	bf08      	it	eq
 8000d84:	2800      	cmpeq	r0, #0
 8000d86:	bf1c      	itt	ne
 8000d88:	f04f 31ff 	movne.w	r1, #4294967295
 8000d8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d90:	f000 b9aa 	b.w	80010e8 <__aeabi_idiv0>
 8000d94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d9c:	f000 f83c 	bl	8000e18 <__udivmoddi4>
 8000da0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da8:	b004      	add	sp, #16
 8000daa:	4770      	bx	lr

08000dac <__aeabi_d2lz>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	2200      	movs	r2, #0
 8000db0:	2300      	movs	r3, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	460d      	mov	r5, r1
 8000db6:	f7ff febb 	bl	8000b30 <__aeabi_dcmplt>
 8000dba:	b928      	cbnz	r0, 8000dc8 <__aeabi_d2lz+0x1c>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc4:	f000 b80a 	b.w	8000ddc <__aeabi_d2ulz>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dce:	f000 f805 	bl	8000ddc <__aeabi_d2ulz>
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop

08000ddc <__aeabi_d2ulz>:
 8000ddc:	b5d0      	push	{r4, r6, r7, lr}
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__aeabi_d2ulz+0x34>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	4606      	mov	r6, r0
 8000de4:	460f      	mov	r7, r1
 8000de6:	f7ff fc31 	bl	800064c <__aeabi_dmul>
 8000dea:	f7ff ff07 	bl	8000bfc <__aeabi_d2uiz>
 8000dee:	4604      	mov	r4, r0
 8000df0:	f7ff fbb2 	bl	8000558 <__aeabi_ui2d>
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <__aeabi_d2ulz+0x38>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f7ff fc28 	bl	800064c <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4630      	mov	r0, r6
 8000e02:	4639      	mov	r1, r7
 8000e04:	f7ff fa6a 	bl	80002dc <__aeabi_dsub>
 8000e08:	f7ff fef8 	bl	8000bfc <__aeabi_d2uiz>
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e10:	3df00000 	.word	0x3df00000
 8000e14:	41f00000 	.word	0x41f00000

08000e18 <__udivmoddi4>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	9d08      	ldr	r5, [sp, #32]
 8000e1e:	4604      	mov	r4, r0
 8000e20:	468e      	mov	lr, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d14d      	bne.n	8000ec2 <__udivmoddi4+0xaa>
 8000e26:	428a      	cmp	r2, r1
 8000e28:	4694      	mov	ip, r2
 8000e2a:	d969      	bls.n	8000f00 <__udivmoddi4+0xe8>
 8000e2c:	fab2 f282 	clz	r2, r2
 8000e30:	b152      	cbz	r2, 8000e48 <__udivmoddi4+0x30>
 8000e32:	fa01 f302 	lsl.w	r3, r1, r2
 8000e36:	f1c2 0120 	rsb	r1, r2, #32
 8000e3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e42:	ea41 0e03 	orr.w	lr, r1, r3
 8000e46:	4094      	lsls	r4, r2
 8000e48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e4c:	0c21      	lsrs	r1, r4, #16
 8000e4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e52:	fa1f f78c 	uxth.w	r7, ip
 8000e56:	fb08 e316 	mls	r3, r8, r6, lr
 8000e5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5e:	fb06 f107 	mul.w	r1, r6, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d90a      	bls.n	8000e7c <__udivmoddi4+0x64>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6e:	f080 811f 	bcs.w	80010b0 <__udivmoddi4+0x298>
 8000e72:	4299      	cmp	r1, r3
 8000e74:	f240 811c 	bls.w	80010b0 <__udivmoddi4+0x298>
 8000e78:	3e02      	subs	r6, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1a5b      	subs	r3, r3, r1
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e8c:	fb00 f707 	mul.w	r7, r0, r7
 8000e90:	42a7      	cmp	r7, r4
 8000e92:	d90a      	bls.n	8000eaa <__udivmoddi4+0x92>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9c:	f080 810a 	bcs.w	80010b4 <__udivmoddi4+0x29c>
 8000ea0:	42a7      	cmp	r7, r4
 8000ea2:	f240 8107 	bls.w	80010b4 <__udivmoddi4+0x29c>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eae:	1be4      	subs	r4, r4, r7
 8000eb0:	2600      	movs	r6, #0
 8000eb2:	b11d      	cbz	r5, 8000ebc <__udivmoddi4+0xa4>
 8000eb4:	40d4      	lsrs	r4, r2
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d909      	bls.n	8000eda <__udivmoddi4+0xc2>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	f000 80ef 	beq.w	80010aa <__udivmoddi4+0x292>
 8000ecc:	2600      	movs	r6, #0
 8000ece:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	fab3 f683 	clz	r6, r3
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d14a      	bne.n	8000f78 <__udivmoddi4+0x160>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xd4>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 80f9 	bhi.w	80010de <__udivmoddi4+0x2c6>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb61 0303 	sbc.w	r3, r1, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	469e      	mov	lr, r3
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d0e0      	beq.n	8000ebc <__udivmoddi4+0xa4>
 8000efa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efe:	e7dd      	b.n	8000ebc <__udivmoddi4+0xa4>
 8000f00:	b902      	cbnz	r2, 8000f04 <__udivmoddi4+0xec>
 8000f02:	deff      	udf	#255	; 0xff
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	f040 8092 	bne.w	8001032 <__udivmoddi4+0x21a>
 8000f0e:	eba1 010c 	sub.w	r1, r1, ip
 8000f12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f16:	fa1f fe8c 	uxth.w	lr, ip
 8000f1a:	2601      	movs	r6, #1
 8000f1c:	0c20      	lsrs	r0, r4, #16
 8000f1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f22:	fb07 1113 	mls	r1, r7, r3, r1
 8000f26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f2a:	fb0e f003 	mul.w	r0, lr, r3
 8000f2e:	4288      	cmp	r0, r1
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x12c>
 8000f32:	eb1c 0101 	adds.w	r1, ip, r1
 8000f36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x12a>
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	f200 80cb 	bhi.w	80010d8 <__udivmoddi4+0x2c0>
 8000f42:	4643      	mov	r3, r8
 8000f44:	1a09      	subs	r1, r1, r0
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f54:	fb0e fe00 	mul.w	lr, lr, r0
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x156>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d202      	bcs.n	8000f6c <__udivmoddi4+0x154>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	f200 80bb 	bhi.w	80010e2 <__udivmoddi4+0x2ca>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	eba4 040e 	sub.w	r4, r4, lr
 8000f72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f76:	e79c      	b.n	8000eb2 <__udivmoddi4+0x9a>
 8000f78:	f1c6 0720 	rsb	r7, r6, #32
 8000f7c:	40b3      	lsls	r3, r6
 8000f7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f86:	fa20 f407 	lsr.w	r4, r0, r7
 8000f8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	40f9      	lsrs	r1, r7
 8000f92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f96:	fa00 f306 	lsl.w	r3, r0, r6
 8000f9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9e:	0c20      	lsrs	r0, r4, #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fac:	fb08 f00e 	mul.w	r0, r8, lr
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb6:	d90b      	bls.n	8000fd0 <__udivmoddi4+0x1b8>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc0:	f080 8088 	bcs.w	80010d4 <__udivmoddi4+0x2bc>
 8000fc4:	4288      	cmp	r0, r1
 8000fc6:	f240 8085 	bls.w	80010d4 <__udivmoddi4+0x2bc>
 8000fca:	f1a8 0802 	sub.w	r8, r8, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000fdc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fe0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe4:	458e      	cmp	lr, r1
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x1e2>
 8000fe8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ff0:	d26c      	bcs.n	80010cc <__udivmoddi4+0x2b4>
 8000ff2:	458e      	cmp	lr, r1
 8000ff4:	d96a      	bls.n	80010cc <__udivmoddi4+0x2b4>
 8000ff6:	3802      	subs	r0, #2
 8000ff8:	4461      	add	r1, ip
 8000ffa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffe:	fba0 9402 	umull	r9, r4, r0, r2
 8001002:	eba1 010e 	sub.w	r1, r1, lr
 8001006:	42a1      	cmp	r1, r4
 8001008:	46c8      	mov	r8, r9
 800100a:	46a6      	mov	lr, r4
 800100c:	d356      	bcc.n	80010bc <__udivmoddi4+0x2a4>
 800100e:	d053      	beq.n	80010b8 <__udivmoddi4+0x2a0>
 8001010:	b15d      	cbz	r5, 800102a <__udivmoddi4+0x212>
 8001012:	ebb3 0208 	subs.w	r2, r3, r8
 8001016:	eb61 010e 	sbc.w	r1, r1, lr
 800101a:	fa01 f707 	lsl.w	r7, r1, r7
 800101e:	fa22 f306 	lsr.w	r3, r2, r6
 8001022:	40f1      	lsrs	r1, r6
 8001024:	431f      	orrs	r7, r3
 8001026:	e9c5 7100 	strd	r7, r1, [r5]
 800102a:	2600      	movs	r6, #0
 800102c:	4631      	mov	r1, r6
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	f1c2 0320 	rsb	r3, r2, #32
 8001036:	40d8      	lsrs	r0, r3
 8001038:	fa0c fc02 	lsl.w	ip, ip, r2
 800103c:	fa21 f303 	lsr.w	r3, r1, r3
 8001040:	4091      	lsls	r1, r2
 8001042:	4301      	orrs	r1, r0
 8001044:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001048:	fa1f fe8c 	uxth.w	lr, ip
 800104c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001050:	fb07 3610 	mls	r6, r7, r0, r3
 8001054:	0c0b      	lsrs	r3, r1, #16
 8001056:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800105a:	fb00 f60e 	mul.w	r6, r0, lr
 800105e:	429e      	cmp	r6, r3
 8001060:	fa04 f402 	lsl.w	r4, r4, r2
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x260>
 8001066:	eb1c 0303 	adds.w	r3, ip, r3
 800106a:	f100 38ff 	add.w	r8, r0, #4294967295
 800106e:	d22f      	bcs.n	80010d0 <__udivmoddi4+0x2b8>
 8001070:	429e      	cmp	r6, r3
 8001072:	d92d      	bls.n	80010d0 <__udivmoddi4+0x2b8>
 8001074:	3802      	subs	r0, #2
 8001076:	4463      	add	r3, ip
 8001078:	1b9b      	subs	r3, r3, r6
 800107a:	b289      	uxth	r1, r1
 800107c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001080:	fb07 3316 	mls	r3, r7, r6, r3
 8001084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001088:	fb06 f30e 	mul.w	r3, r6, lr
 800108c:	428b      	cmp	r3, r1
 800108e:	d908      	bls.n	80010a2 <__udivmoddi4+0x28a>
 8001090:	eb1c 0101 	adds.w	r1, ip, r1
 8001094:	f106 38ff 	add.w	r8, r6, #4294967295
 8001098:	d216      	bcs.n	80010c8 <__udivmoddi4+0x2b0>
 800109a:	428b      	cmp	r3, r1
 800109c:	d914      	bls.n	80010c8 <__udivmoddi4+0x2b0>
 800109e:	3e02      	subs	r6, #2
 80010a0:	4461      	add	r1, ip
 80010a2:	1ac9      	subs	r1, r1, r3
 80010a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a8:	e738      	b.n	8000f1c <__udivmoddi4+0x104>
 80010aa:	462e      	mov	r6, r5
 80010ac:	4628      	mov	r0, r5
 80010ae:	e705      	b.n	8000ebc <__udivmoddi4+0xa4>
 80010b0:	4606      	mov	r6, r0
 80010b2:	e6e3      	b.n	8000e7c <__udivmoddi4+0x64>
 80010b4:	4618      	mov	r0, r3
 80010b6:	e6f8      	b.n	8000eaa <__udivmoddi4+0x92>
 80010b8:	454b      	cmp	r3, r9
 80010ba:	d2a9      	bcs.n	8001010 <__udivmoddi4+0x1f8>
 80010bc:	ebb9 0802 	subs.w	r8, r9, r2
 80010c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c4:	3801      	subs	r0, #1
 80010c6:	e7a3      	b.n	8001010 <__udivmoddi4+0x1f8>
 80010c8:	4646      	mov	r6, r8
 80010ca:	e7ea      	b.n	80010a2 <__udivmoddi4+0x28a>
 80010cc:	4620      	mov	r0, r4
 80010ce:	e794      	b.n	8000ffa <__udivmoddi4+0x1e2>
 80010d0:	4640      	mov	r0, r8
 80010d2:	e7d1      	b.n	8001078 <__udivmoddi4+0x260>
 80010d4:	46d0      	mov	r8, sl
 80010d6:	e77b      	b.n	8000fd0 <__udivmoddi4+0x1b8>
 80010d8:	3b02      	subs	r3, #2
 80010da:	4461      	add	r1, ip
 80010dc:	e732      	b.n	8000f44 <__udivmoddi4+0x12c>
 80010de:	4630      	mov	r0, r6
 80010e0:	e709      	b.n	8000ef6 <__udivmoddi4+0xde>
 80010e2:	4464      	add	r4, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e742      	b.n	8000f6e <__udivmoddi4+0x156>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4798      	blx	r3
    }
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	731a      	strb	r2, [r3, #12]
 80011b4:	e00e      	b.n	80011d4 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f012 ff84 	bl	80140d0 <_Z9ei_callocjj>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <_ZN2ei9ei_matrixD1Ev+0x22>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7b1b      	ldrb	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f012 ff70 	bl	80140ec <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	731a      	strb	r2, [r3, #12]
 8001236:	e00d      	b.n	8001254 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f012 ff44 	bl	80140d0 <_Z9ei_callocjj>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7b1b      	ldrb	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f012 ff30 	bl	80140ec <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
 800129a:	e7fe      	b.n	800129a <_ZSt25__throw_bad_function_callv+0x4>

0800129c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80012ba:	213c      	movs	r1, #60	; 0x3c
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80012be:	f01e fd15 	bl	801fcec <__assert_func>

	if(align && size)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01f      	beq.n	8001308 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01c      	beq.n	8001308 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4413      	add	r3, r2
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f012 fef7 	bl	80140d0 <_Z9ei_callocjj>
 80012e2:	60f8      	str	r0, [r7, #12]

		if(p)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00e      	beq.n	8001308 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	425b      	negs	r3, r3
 80012f6:	4013      	ands	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3b02      	subs	r3, #2
 8001304:	b292      	uxth	r2, r2
 8001306:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001308:	697b      	ldr	r3, [r7, #20]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08021270 	.word	0x08021270
 8001318:	0802128c 	.word	0x0802128c
 800131c:	080212c4 	.word	0x080212c4

08001320 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001332:	215f      	movs	r1, #95	; 0x5f
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001336:	f01e fcd9 	bl	801fcec <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001340:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	425b      	negs	r3, r3
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f012 fecd 	bl	80140ec <_Z7ei_freePv>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	08021348 	.word	0x08021348
 8001360:	0802134c 	.word	0x0802134c
 8001364:	080212c4 	.word	0x080212c4

08001368 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001372:	ed97 0a01 	vldr	s0, [r7, #4]
 8001376:	f01d fb55 	bl	801ea24 <expf>
 800137a:	eef0 7a40 	vmov.f32	s15, s0
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001392:	ed97 0a01 	vldr	s0, [r7, #4]
 8001396:	f01d fab1 	bl	801e8fc <roundf>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff feca 	bl	800114c <_ZNSt14_Function_baseD1Ev>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f9f2 	bl	80027b6 <_ZNSt8functionIFijjPfEEC1Ev>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZN2ei11ei_signal_tD1Ev>:
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffde 	bl	80013a8 <_ZNSt8functionIFijjPfEED1Ev>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b098      	sub	sp, #96	; 0x60
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001410:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8001414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001416:	4979      	ldr	r1, [pc, #484]	; (80015fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x204>)
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe ff49 	bl	80002b0 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8001428:	2303      	movs	r3, #3
 800142a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	6892      	ldr	r2, [r2, #8]
 8001436:	fb02 f103 	mul.w	r1, r2, r3
 800143a:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	4299      	cmp	r1, r3
 8001448:	d015      	beq.n	8001476 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	6892      	ldr	r2, [r2, #8]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	4619      	mov	r1, r3
 8001458:	4869      	ldr	r0, [pc, #420]	; (8001600 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x208>)
 800145a:	f000 ffb7 	bl	80023cc <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 800145e:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	4619      	mov	r1, r3
 800146c:	4865      	ldr	r0, [pc, #404]	; (8001604 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x20c>)
 800146e:	f000 ffad 	bl	80023cc <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001472:	4c65      	ldr	r4, [pc, #404]	; (8001608 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x210>)
 8001474:	e0bc      	b.n	80015f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>
    }

    size_t output_ix = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001486:	2300      	movs	r3, #0
 8001488:	65bb      	str	r3, [r7, #88]	; 0x58
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001490:	429a      	cmp	r2, r3
 8001492:	f080 80ac 	bcs.w	80015ee <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f6>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149c:	d803      	bhi.n	80014a6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	e001      	b.n	80014aa <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb2>
 80014a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	461a      	mov	r2, r3
 80014b0:	f107 0014 	add.w	r0, r7, #20
 80014b4:	2300      	movs	r3, #0
 80014b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014b8:	f7ff fe6c 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xd0>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80014c2:	4c52      	ldr	r4, [pc, #328]	; (800160c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x214>)
 80014c4:	2500      	movs	r5, #0
 80014c6:	e086      	b.n	80015d6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014d0:	f001 f943 	bl	800275a <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	657b      	str	r3, [r7, #84]	; 0x54
 80014d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014dc:	429a      	cmp	r2, r3
 80014de:	d275      	bcs.n	80015cc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d4>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80014f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001504:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001610 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x218>
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b2db      	uxtb	r3, r3
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800151e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001610 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x218>
 8001522:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001526:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800152a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800152c:	b2db      	uxtb	r3, r3
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001536:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001610 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x218>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8001542:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001546:	2b03      	cmp	r3, #3
 8001548:	d11b      	bne.n	8001582 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18a>
                output_matrix->buffer[output_ix++] = r;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001550:	1c59      	adds	r1, r3, #1
 8001552:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800155a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800156c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e020      	b.n	80015c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001582:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001586:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001614 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21c>
 800158a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800158e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001592:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001618 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x220>
 8001596:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800159a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015a2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800161c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x224>
 80015a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	65f9      	str	r1, [r7, #92]	; 0x5c
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80015c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c6:	3301      	adds	r3, #1
 80015c8:	657b      	str	r3, [r7, #84]	; 0x54
 80015ca:	e785      	b.n	80014d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe0>
            }
        }

        bytes_left -= elements_to_read;
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
 80015d4:	2501      	movs	r5, #1
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fe05 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 80015e0:	2d01      	cmp	r5, #1
 80015e2:	d105      	bne.n	80015f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80015e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80015ec:	e74d      	b.n	800148a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x92>
    }

    return EIDSP_OK;
 80015ee:	2400      	movs	r4, #0
}
 80015f0:	4623      	mov	r3, r4
 80015f2:	4618      	mov	r0, r3
 80015f4:	3760      	adds	r7, #96	; 0x60
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bdb0      	pop	{r4, r5, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	0802162c 	.word	0x0802162c
 8001600:	08021638 	.word	0x08021638
 8001604:	08021650 	.word	0x08021650
 8001608:	fffffc14 	.word	0xfffffc14
 800160c:	fffffc16 	.word	0xfffffc16
 8001610:	437f0000 	.word	0x437f0000
 8001614:	3e991687 	.word	0x3e991687
 8001618:	3f1645a2 	.word	0x3f1645a2
 800161c:	3de978d5 	.word	0x3de978d5

08001620 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b09e      	sub	sp, #120	; 0x78
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	ca07      	ldmia	r2, {r0, r1, r2}
 8001638:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	4980      	ldr	r1, [pc, #512]	; (8001840 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x220>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fe35 	bl	80002b0 <strcmp>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x30>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 8001650:	2303      	movs	r3, #3
 8001652:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	6892      	ldr	r2, [r2, #8]
 800165e:	fb02 f103 	mul.w	r1, r2, r3
 8001662:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4299      	cmp	r1, r3
 8001670:	d015      	beq.n	800169e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x7e>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	6892      	ldr	r2, [r2, #8]
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	4619      	mov	r1, r3
 8001680:	4870      	ldr	r0, [pc, #448]	; (8001844 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x224>)
 8001682:	f000 fea3 	bl	80023cc <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 8001686:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4619      	mov	r1, r3
 8001694:	486c      	ldr	r0, [pc, #432]	; (8001848 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x228>)
 8001696:	f000 fe99 	bl	80023cc <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800169a:	4c6c      	ldr	r4, [pc, #432]	; (800184c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x22c>)
 800169c:	e0cb      	b.n	8001836 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x216>
    }

    size_t output_ix = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	673b      	str	r3, [r7, #112]	; 0x70

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 80016a2:	f644 438b 	movw	r3, #19595	; 0x4c8b
 80016a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 80016a8:	f249 6345 	movw	r3, #38469	; 0x9645
 80016ac:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 80016ae:	f641 532f 	movw	r3, #7471	; 0x1d2f
 80016b2:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80016b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016ca:	429a      	cmp	r2, r3
 80016cc:	f080 80b2 	bcs.w	8001834 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x214>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d803      	bhi.n	80016e0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xc0>
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	e001      	b.n	80016e4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xc4>
 80016e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e4:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	461a      	mov	r2, r3
 80016ea:	f107 0014 	add.w	r0, r7, #20
 80016ee:	2300      	movs	r3, #0
 80016f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80016f2:	f7ff fd4f 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xe2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80016fc:	4c54      	ldr	r4, [pc, #336]	; (8001850 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x230>)
 80016fe:	2500      	movs	r5, #0
 8001700:	e08c      	b.n	800181c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x1fc>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001708:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800170a:	f001 f826 	bl	800275a <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800170e:	2300      	movs	r3, #0
 8001710:	657b      	str	r3, [r7, #84]	; 0x54
 8001712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001716:	429a      	cmp	r2, r3
 8001718:	d27b      	bcs.n	8001812 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x1f2>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172a:	ee17 3a90 	vmov	r3, s15
 800172e:	653b      	str	r3, [r7, #80]	; 0x50

            if (channel_count == 3) {
 8001730:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001734:	2b03      	cmp	r3, #3
 8001736:	d12f      	bne.n	8001798 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x178>
                // fast code path
                if (EI_CLASSIFIER_TFLITE_INPUT_SCALE == 0.003921568859368563f && EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT == -128) {
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8001738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800173a:	0c1b      	lsrs	r3, r3, #16
 800173c:	b2db      	uxtb	r3, r3
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8001740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	b2db      	uxtb	r3, r3
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8001748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800174a:	b2db      	uxtb	r3, r3
 800174c:	637b      	str	r3, [r7, #52]	; 0x34

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800174e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3b80      	subs	r3, #128	; 0x80
 8001754:	b2d8      	uxtb	r0, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	6739      	str	r1, [r7, #112]	; 0x70
 8001760:	4413      	add	r3, r2
 8001762:	b242      	sxtb	r2, r0
 8001764:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3b80      	subs	r3, #128	; 0x80
 800176c:	b2d8      	uxtb	r0, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001774:	1c59      	adds	r1, r3, #1
 8001776:	6739      	str	r1, [r7, #112]	; 0x70
 8001778:	4413      	add	r3, r2
 800177a:	b242      	sxtb	r2, r0
 800177c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3b80      	subs	r3, #128	; 0x80
 8001784:	b2d8      	uxtb	r0, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800178c:	1c59      	adds	r1, r3, #1
 800178e:	6739      	str	r1, [r7, #112]	; 0x70
 8001790:	4413      	add	r3, r2
 8001792:	b242      	sxtb	r2, r0
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e038      	b.n	800180a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x1ea>
                }
            }
            else {
                // fast code path
                if (EI_CLASSIFIER_TFLITE_INPUT_SCALE == 0.003921568859368563f && EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT == -128) {
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8001798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179a:	0c1b      	lsrs	r3, r3, #16
 800179c:	b2db      	uxtb	r3, r3
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 80017a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 80017a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 80017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b0:	f644 428b 	movw	r2, #19595	; 0x4c8b
 80017b4:	fb03 f202 	mul.w	r2, r3, r2
 80017b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ba:	f249 6145 	movw	r1, #38469	; 0x9645
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	441a      	add	r2, r3
 80017c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c6:	f641 512f 	movw	r1, #7471	; 0x1d2f
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
                    gray >>= 16; // scale down to int8_t
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	141b      	asrs	r3, r3, #16
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
                    gray += EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT;
 80017d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017da:	3b80      	subs	r3, #128	; 0x80
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
                    if (gray < - 128) gray = -128;
 80017de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e0:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80017e4:	da03      	bge.n	80017ee <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x1ce>
 80017e6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80017ea:	643b      	str	r3, [r7, #64]	; 0x40
 80017ec:	e004      	b.n	80017f8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x1d8>
                    else if (gray > 127) gray = 127;
 80017ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f0:	2b7f      	cmp	r3, #127	; 0x7f
 80017f2:	dd01      	ble.n	80017f8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x1d8>
 80017f4:	237f      	movs	r3, #127	; 0x7f
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	6739      	str	r1, [r7, #112]	; 0x70
 8001802:	4413      	add	r3, r2
 8001804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001806:	b252      	sxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800180a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180c:	3301      	adds	r3, #1
 800180e:	657b      	str	r3, [r7, #84]	; 0x54
 8001810:	e77f      	b.n	8001712 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xf2>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                }
            }
        }

        bytes_left -= elements_to_read;
 8001812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	2501      	movs	r5, #1
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fce2 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8001826:	2d01      	cmp	r5, #1
 8001828:	d105      	bne.n	8001836 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x216>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001832:	e747      	b.n	80016c4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xa4>
    }

    return EIDSP_OK;
 8001834:	2400      	movs	r4, #0
}
 8001836:	4623      	mov	r3, r4
 8001838:	4618      	mov	r0, r3
 800183a:	3778      	adds	r7, #120	; 0x78
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	0802162c 	.word	0x0802162c
 8001844:	08021638 	.word	0x08021638
 8001848:	08021650 	.word	0x08021650
 800184c:	fffffc14 	.word	0xfffffc14
 8001850:	fffffc16 	.word	0xfffffc16

08001854 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	330c      	adds	r3, #12
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fda2 	bl	80013c2 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	f000 f82a 	bl	80018f8 <_ZN14SignalWithAxes8get_dataEjjPf>
 80018a4:	4603      	mov	r3, r0
        };
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e015      	b.n	80018f0 <_ZN14SignalWithAxes10get_signalEv+0x42>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6892      	ldr	r2, [r2, #8]
 80018ce:	fb03 f202 	mul.w	r2, r3, r2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	61da      	str	r2, [r3, #28]
        };
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f103 020c 	add.w	r2, r3, #12
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f000 ff92 	bl	8002810 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	330c      	adds	r3, #12
    }
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	4413      	add	r3, r2
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	429a      	cmp	r2, r3
 8001930:	d228      	bcs.n	8001984 <_ZN14SignalWithAxes8get_dataEjjPf+0x8c>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	d21d      	bcs.n	800197c <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	18d1      	adds	r1, r2, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	627a      	str	r2, [r7, #36]	; 0x24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	2201      	movs	r2, #1
 8001964:	f000 fef9 	bl	800275a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8001968:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <_ZN14SignalWithAxes8get_dataEjjPf+0x7c>
                    return r;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	e008      	b.n	8001986 <_ZN14SignalWithAxes8get_dataEjjPf+0x8e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3301      	adds	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	e7dc      	b.n	8001936 <_ZN14SignalWithAxes8get_dataEjjPf+0x3e>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	3301      	adds	r3, #1
 8001980:	623b      	str	r3, [r7, #32]
 8001982:	e7d0      	b.n	8001926 <_ZN14SignalWithAxes8get_dataEjjPf+0x2e>
                }
            }
        }

        return 0;
 8001984:	2300      	movs	r3, #0
    }
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6178      	str	r0, [r7, #20]
 8001998:	6139      	str	r1, [r7, #16]
 800199a:	ed87 0a03 	vstr	s0, [r7, #12]
 800199e:	edc7 0a02 	vstr	s1, [r7, #8]
 80019a2:	4613      	mov	r3, r2
 80019a4:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d837      	bhi.n	8001a20 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x98>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x9c>)
 80019e8:	f000 fcf0 	bl	80023cc <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80019ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80019f0:	f012 fa5e 	bl	8013eb0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0xa0>)
 80019f6:	f000 fce9 	bl	80023cc <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x98>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e7c4      	b.n	80019aa <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x1a>
    }
}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	08021680 	.word	0x08021680
 8001a30:	08021688 	.word	0x08021688

08001a34 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d82a      	bhi.n	8001aa2 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]

        if (debug) {
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00e      	beq.n	8001a7c <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x78>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x7c>)
 8001a6a:	f000 fcaf 	bl	80023cc <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001a6e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a72:	f012 fa1d 	bl	8013eb0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8001a76:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x80>)
 8001a78:	f000 fca8 	bl	80023cc <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x78>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	3304      	adds	r3, #4
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e7d1      	b.n	8001a46 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x12>
    }
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	08021680 	.word	0x08021680
 8001ab4:	08021688 	.word	0x08021688

08001ab8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>:
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8001ac6:	483f      	ldr	r0, [pc, #252]	; (8001bc4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x10c>)
 8001ac8:	f01b f83a 	bl	801cb40 <_Z18trained_model_initPFPvjjE>
 8001acc:	4603      	mov	r3, r0
 8001ace:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	483b      	ldr	r0, [pc, #236]	; (8001bc8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x110>)
 8001adc:	f000 fc76 	bl	80023cc <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8001ae0:	f06f 0305 	mvn.w	r3, #5
 8001ae4:	e06a      	b.n	8001bbc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x104>
    }

    *ctx_start_us = ei_read_timer_us();
 8001ae6:	f012 f9d1 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	e9c1 2300 	strd	r2, r3, [r1]

    static bool tflite_first_run = true;

    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f01b fa8b 	bl	801d010 <_Z19trained_model_inputi>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f01b fa97 	bl	801d034 <_Z20trained_model_outputi>
 8001b06:	4602      	mov	r2, r0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
    *output_scores = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_SCORE_TENSOR);
    *output_labels = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x114>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d052      	beq.n	8001bba <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x102>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	d005      	beq.n	8001b2a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x72>
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x118>)
 8001b20:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001b22:	2163      	movs	r1, #99	; 0x63
 8001b24:	482c      	ldr	r0, [pc, #176]	; (8001bd8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001b26:	f01e f8e1 	bl	801fcec <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d005      	beq.n	8001b40 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x88>
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x124>)
 8001b36:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001b38:	2164      	movs	r1, #100	; 0x64
 8001b3a:	4827      	ldr	r0, [pc, #156]	; (8001bd8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001b3c:	f01e f8d6 	bl	801fcec <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b48:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001be0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x128>
 8001b4c:	eef4 7a47 	vcmp.f32	s15, s14
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d005      	beq.n	8001b62 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xaa>
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8001b58:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001b5a:	216b      	movs	r1, #107	; 0x6b
 8001b5c:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001b5e:	f01e f8c5 	bl	801fcec <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001b6c:	d005      	beq.n	8001b7a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xc2>
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x130>)
 8001b70:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001b72:	216c      	movs	r1, #108	; 0x6c
 8001b74:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001b76:	f01e f8b9 	bl	801fcec <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b82:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001bec <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x134>
 8001b86:	eef4 7a47 	vcmp.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d005      	beq.n	8001b9c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xe4>
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x138>)
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001b94:	216f      	movs	r1, #111	; 0x6f
 8001b96:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001b98:	f01e f8a8 	bl	801fcec <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001ba6:	d005      	beq.n	8001bb4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xfc>
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x13c>)
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8001bac:	2170      	movs	r1, #112	; 0x70
 8001bae:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8001bb0:	f01e f89c 	bl	801fcec <__assert_func>
        }
#endif
        tflite_first_run = false;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x114>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800129d 	.word	0x0800129d
 8001bc8:	0802168c 	.word	0x0802168c
 8001bcc:	20000028 	.word	0x20000028
 8001bd0:	080216c0 	.word	0x080216c0
 8001bd4:	080216f8 	.word	0x080216f8
 8001bd8:	08021760 	.word	0x08021760
 8001bdc:	080217f4 	.word	0x080217f4
 8001be0:	3b808081 	.word	0x3b808081
 8001be4:	0802182c 	.word	0x0802182c
 8001be8:	08021868 	.word	0x08021868
 8001bec:	3b800000 	.word	0x3b800000
 8001bf0:	080218ac 	.word	0x080218ac
 8001bf4:	080218ec 	.word	0x080218ec

08001bf8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>:
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
    if(trained_model_invoke() != kTfLiteOk) {
 8001c06:	f01b fa27 	bl	801d058 <_Z20trained_model_invokev>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0x28>
        return EI_IMPULSE_TFLITE_ERROR;
 8001c1a:	f06f 0302 	mvn.w	r3, #2
 8001c1e:	e060      	b.n	8001ce2 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8001c20:	f012 f934 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001c24:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8001c28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c30:	1a84      	subs	r4, r0, r2
 8001c32:	eb61 0503 	sbc.w	r5, r1, r3
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c42:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	f7ff f845 	bl	8000cdc <__aeabi_ldivmod>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	621a      	str	r2, [r3, #32]

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8001c5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4820      	ldr	r0, [pc, #128]	; (8001cec <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf4>)
 8001c6a:	f000 fbaf 	bl	80023cc <_Z9ei_printfPKcz>
    }
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb6>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6859      	ldr	r1, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c98:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	eef0 0a47 	vmov.f32	s1, s14
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ca8:	f7ff fe72 	bl	8001990 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb>
 8001cac:	e007      	b.n	8001cbe <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xc6>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cba:	f7ff febb 	bl	8001a34 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb>
    }
#endif

    trained_model_reset(ei_aligned_free);
 8001cbe:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf8>)
 8001cc0:	f01b fa00 	bl	801d0c4 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8001cc4:	f012 f8da 	bl	8013e7c <_Z29ei_run_impulse_check_canceledv>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f113 0f02 	cmn.w	r3, #2
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xe8>
        return EI_IMPULSE_CANCELED;
 8001cda:	f06f 0301 	mvn.w	r3, #1
 8001cde:	e000      	b.n	8001ce2 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    return EI_IMPULSE_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	08021934 	.word	0x08021934
 8001cf0:	08001321 	.word	0x08001321

08001cf4 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b092      	sub	sp, #72	; 0x48
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	71fb      	strb	r3, [r7, #7]
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
 8001d02:	f012 f8c3 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x154>)
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fda7 	bl	8002870 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d2e:	f107 0018 	add.w	r0, r7, #24
 8001d32:	f7ff fec1 	bl	8001ab8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8001d3c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x56>
        return init_res;
 8001d44:	f997 403b 	ldrsb.w	r4, [r7, #59]	; 0x3b
 8001d48:	e073      	b.n	8001e32 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fdc4 	bl	80028dc <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8001d54:	6378      	str	r0, [r7, #52]	; 0x34
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b09      	cmp	r3, #9
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6892      	ldr	r2, [r2, #8]
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d239      	bcs.n	8001df0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xfc>
        // Quantize the input if it is int8
        if (int8_input) {
 8001d7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d025      	beq.n	8001dd0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xdc>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d9c:	eeb0 0a66 	vmov.f32	s0, s13
 8001da0:	f7ff faf2 	bl	8001388 <_ZSt5roundf>
 8001da4:	eeb0 7a40 	vmov.f32	s14, s0
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dbe:	4413      	add	r3, r2
 8001dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc4:	edc7 7a00 	vstr	s15, [r7]
 8001dc8:	783a      	ldrb	r2, [r7, #0]
 8001dca:	b252      	sxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e00b      	b.n	8001de8 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xf4>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	601a      	str	r2, [r3, #0]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8001de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dea:	3301      	adds	r3, #1
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dee:	e7bc      	b.n	8001d6a <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x76>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8001df0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e00:	f7ff fefa 	bl	8001bf8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8001e0a:	f012 f83f 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e12:	1a84      	subs	r4, r0, r2
 8001e14:	eb61 0503 	sbc.w	r5, r1, r3
 8001e18:	4622      	mov	r2, r4
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    if (run_res != EI_IMPULSE_OK) {
 8001e22:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13c>
        return run_res;
 8001e2a:	f997 4032 	ldrsb.w	r4, [r7, #50]	; 0x32
 8001e2e:	e000      	b.n	8001e32 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
    }

    return EI_IMPULSE_OK;
 8001e30:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd2f 	bl	800289a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3740      	adds	r7, #64	; 0x40
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	08001321 	.word	0x08001321
 8001e4c:	00000000 	.word	0x00000000

08001e50 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8001e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e54:	b099      	sub	sp, #100	; 0x64
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71fb      	strb	r3, [r7, #7]
    memset(result, 0, sizeof(ei_impulse_result_t));
 8001e60:	2248      	movs	r2, #72	; 0x48
 8001e62:	2100      	movs	r1, #0
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f01d ffdf 	bl	801fe28 <memset>
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1e8>)
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fcf9 	bl	8002870 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e86:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001e8a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001e8e:	f7ff fe13 	bl	8001ab8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        &output_labels,
        &output_scores,
    #endif
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8001e98:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x56>
        return init_res;
 8001ea0:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8001ea4:	e0b7      	b.n	8002016 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1c6>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d002      	beq.n	8001eb4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x64>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8001eae:	f06f 0408 	mvn.w	r4, #8
 8001eb2:	e0b0      	b.n	8002016 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1c6>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8001eb4:	f011 ffea 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001eb8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f107 0010 	add.w	r0, r7, #16
 8001ec4:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 8001ec8:	2101      	movs	r1, #1
 8001eca:	f7ff f9a4 	bl	8001216 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ec>)
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8002040 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f0>
 8001eda:	4619      	mov	r1, r3
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fb9f 	bl	8001620 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8001ee2:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != EIDSP_OK) {
 8001ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa8>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8001eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001eec:	4855      	ldr	r0, [pc, #340]	; (8002044 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>)
 8001eee:	f000 fa6d 	bl	80023cc <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8001ef2:	f06f 0404 	mvn.w	r4, #4
 8001ef6:	e089      	b.n	800200c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1bc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8001ef8:	f011 ffc0 	bl	8013e7c <_Z29ei_run_impulse_check_canceledv>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f113 0f02 	cmn.w	r3, #2
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        return EI_IMPULSE_CANCELED;
 8001f0e:	f06f 0401 	mvn.w	r4, #1
 8001f12:	e07b      	b.n	800200c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1bc>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8001f14:	f011 ffba 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f1c:	ebb0 0802 	subs.w	r8, r0, r2
 8001f20:	eb61 0903 	sbc.w	r9, r1, r3
 8001f24:	4642      	mov	r2, r8
 8001f26:	464b      	mov	r3, r9
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe fece 	bl	8000cdc <__aeabi_ldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	61da      	str	r2, [r3, #28]

    if (debug) {
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02e      	beq.n	8001fac <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x15c>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4619      	mov	r1, r3
 8001f54:	483c      	ldr	r0, [pc, #240]	; (8002048 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f8>)
 8001f56:	f000 fa39 	bl	80023cc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d21f      	bcs.n	8001fa6 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x156>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f70:	3380      	adds	r3, #128	; 0x80
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fb00 	bl	8000578 <__aeabi_i2d>
 8001f78:	a32d      	add	r3, pc, #180	; (adr r3, 8002030 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1e0>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fb65 	bl	800064c <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe57 	bl	8000c3c <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	ee00 3a10 	vmov	s0, r3
 8001f94:	f011 ff8c 	bl	8013eb0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8001f98:	482c      	ldr	r0, [pc, #176]	; (800204c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1fc>)
 8001f9a:	f000 fa17 	bl	80023cc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8001fa4:	e7db      	b.n	8001f5e <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x10e>
        }
        ei_printf("\n");
 8001fa6:	482a      	ldr	r0, [pc, #168]	; (8002050 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x200>)
 8001fa8:	f000 fa10 	bl	80023cc <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8001fac:	f011 ff6e 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8001fb8:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8001fbc:	6abe      	ldr	r6, [r7, #40]	; 0x28
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        output_labels,
        output_scores,
    #endif
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fc8a 	bl	80028dc <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8001fc8:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	4649      	mov	r1, r9
 8001fda:	f7ff fe0d 	bl	8001bf8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8001fe4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1a2>
        return run_res;
 8001fec:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 8001ff0:	e00c      	b.n	800200c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1bc>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8001ff2:	f011 ff4b 	bl	8013e8c <_Z16ei_read_timer_usv>
 8001ff6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ffa:	1a84      	subs	r4, r0, r2
 8001ffc:	eb61 0503 	sbc.w	r5, r1, r3
 8002000:	4622      	mov	r2, r4
 8002002:	462b      	mov	r3, r5
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    return EI_IMPULSE_OK;
 800200a:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f92a 	bl	800126a <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fc3d 	bl	800289a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8002020:	4623      	mov	r3, r4
 8002022:	4618      	mov	r0, r3
 8002024:	375c      	adds	r7, #92	; 0x5c
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800202c:	f3af 8000 	nop.w
 8002030:	20000000 	.word	0x20000000
 8002034:	3f701010 	.word	0x3f701010
 8002038:	08001321 	.word	0x08001321
 800203c:	20000014 	.word	0x20000014
 8002040:	00000000 	.word	0x00000000
 8002044:	08021954 	.word	0x08021954
 8002048:	0802197c 	.word	0x0802197c
 800204c:	08021990 	.word	0x08021990
 8002050:	08021688 	.word	0x08021688

08002054 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	330c      	adds	r3, #12
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f9bb 	bl	80013dc <_ZN2ei11ei_signal_tD1Ev>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
#if (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL)

    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	461a      	mov	r2, r3
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff fe35 	bl	8001cf4 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
 800208a:	4603      	mov	r3, r0
 800208c:	75fb      	strb	r3, [r7, #23]
    if (run_res != EI_IMPULSE_OK) {
 800208e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <run_inference+0x2c>
        return run_res;
 8002096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800209a:	e00e      	b.n	80020ba <run_inference+0x4a>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800209c:	f011 feee 	bl	8013e7c <_Z29ei_run_impulse_check_canceledv>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f113 0f02 	cmn.w	r3, #2
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 80020b2:	f06f 0301 	mvn.w	r3, #1
 80020b6:	e000      	b.n	80020ba <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80020c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020c8:	b0a1      	sub	sp, #132	; 0x84
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)

    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 80020d6:	f000 f901 	bl	80022dc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <run_classifier+0x38>
        return run_classifier_image_quantized(signal, result, debug);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f907 	bl	8002304 <run_classifier_image_quantized>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461e      	mov	r6, r3
 80020fa:	e0d8      	b.n	80022ae <run_classifier+0x1ea>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80020fc:	2248      	movs	r2, #72	; 0x48
 80020fe:	2100      	movs	r1, #0
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f01d fe91 	bl	801fe28 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8002106:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800210a:	2300      	movs	r3, #0
 800210c:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 8002110:	2101      	movs	r1, #1
 8002112:	f7ff f83f 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8002116:	f011 feb9 	bl	8013e8c <_Z16ei_read_timer_usv>
 800211a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8002122:	2300      	movs	r3, #0
 8002124:	67bb      	str	r3, [r7, #120]	; 0x78
 8002126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002128:	2b00      	cmp	r3, #0
 800212a:	d16d      	bne.n	8002208 <run_classifier+0x144>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 800212c:	4963      	ldr	r1, [pc, #396]	; (80022bc <run_classifier+0x1f8>)
 800212e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800213e:	461d      	mov	r5, r3
 8002140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8002148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800214a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214c:	4413      	add	r3, r2
 800214e:	f5b3 5fd8 	cmp.w	r3, #6912	; 0x1b00
 8002152:	d905      	bls.n	8002160 <run_classifier+0x9c>
            ei_printf("ERR: Would write outside feature buffer\n");
 8002154:	485a      	ldr	r0, [pc, #360]	; (80022c0 <run_classifier+0x1fc>)
 8002156:	f000 f939 	bl	80023cc <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800215a:	f06f 0604 	mvn.w	r6, #4
 800215e:	e0a0      	b.n	80022a2 <run_classifier+0x1de>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8002160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002162:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800216e:	460a      	mov	r2, r1
 8002170:	2101      	movs	r1, #1
 8002172:	f7ff f80f 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8002176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	f107 0010 	add.w	r0, r7, #16
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	f7ff fb68 	bl	8001854 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8002184:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fb8f 	bl	80018ae <_ZN14SignalWithAxes10get_signalEv>
 8002190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002196:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80022c4 <run_classifier+0x200>
 800219a:	4619      	mov	r1, r3
 800219c:	47a0      	blx	r4
 800219e:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 80021a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <run_classifier+0xf2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 80021a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021a8:	4847      	ldr	r0, [pc, #284]	; (80022c8 <run_classifier+0x204>)
 80021aa:	f000 f90f 	bl	80023cc <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80021ae:	f06f 0604 	mvn.w	r6, #4
 80021b2:	2400      	movs	r4, #0
 80021b4:	e013      	b.n	80021de <run_classifier+0x11a>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80021b6:	f011 fe61 	bl	8013e7c <_Z29ei_run_impulse_check_canceledv>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f113 0f02 	cmn.w	r3, #2
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <run_classifier+0x110>
            return EI_IMPULSE_CANCELED;
 80021cc:	f06f 0601 	mvn.w	r6, #1
 80021d0:	2400      	movs	r4, #0
 80021d2:	e004      	b.n	80021de <run_classifier+0x11a>
        }

        out_features_index += block.n_output_features;
 80021d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021d8:	4413      	add	r3, r2
 80021da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021dc:	2401      	movs	r4, #1
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff36 	bl	8002054 <_ZN14SignalWithAxesD1Ev>
 80021e8:	2c01      	cmp	r4, #1
 80021ea:	d001      	beq.n	80021f0 <run_classifier+0x12c>
 80021ec:	2400      	movs	r4, #0
 80021ee:	e000      	b.n	80021f2 <run_classifier+0x12e>
 80021f0:	2401      	movs	r4, #1
 80021f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fff7 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 80021fc:	2c01      	cmp	r4, #1
 80021fe:	d150      	bne.n	80022a2 <run_classifier+0x1de>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8002200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002202:	3301      	adds	r3, #1
 8002204:	67bb      	str	r3, [r7, #120]	; 0x78
 8002206:	e78e      	b.n	8002126 <run_classifier+0x62>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002208:	f011 fe40 	bl	8013e8c <_Z16ei_read_timer_usv>
 800220c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002210:	ebb0 0802 	subs.w	r8, r0, r2
 8002214:	eb61 0903 	sbc.w	r9, r1, r3
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	f7fe fd54 	bl	8000cdc <__aeabi_ldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	61da      	str	r2, [r3, #28]

    if (debug) {
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01f      	beq.n	8002282 <run_classifier+0x1be>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4619      	mov	r1, r3
 8002248:	4820      	ldr	r0, [pc, #128]	; (80022cc <run_classifier+0x208>)
 800224a:	f000 f8bf 	bl	80023cc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800224e:	2300      	movs	r3, #0
 8002250:	677b      	str	r3, [r7, #116]	; 0x74
 8002252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002254:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <run_classifier+0x1b8>
            ei_printf_float(features_matrix.buffer[ix]);
 800225a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800225c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	eeb0 0a67 	vmov.f32	s0, s15
 800226a:	f011 fe21 	bl	8013eb0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800226e:	4818      	ldr	r0, [pc, #96]	; (80022d0 <run_classifier+0x20c>)
 8002270:	f000 f8ac 	bl	80023cc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002276:	3301      	adds	r3, #1
 8002278:	677b      	str	r3, [r7, #116]	; 0x74
 800227a:	e7ea      	b.n	8002252 <run_classifier+0x18e>
        }
        ei_printf("\n");
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <run_classifier+0x210>)
 800227e:	f000 f8a5 	bl	80023cc <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <run_classifier+0x1ca>
        ei_printf("Running neural network...\n");
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <run_classifier+0x214>)
 800228a:	f000 f89f 	bl	80023cc <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff feea 	bl	8002070 <run_inference>
 800229c:	4603      	mov	r3, r0
 800229e:	461e      	mov	r6, r3
 80022a0:	e000      	b.n	80022a4 <run_classifier+0x1e0>
            return EI_IMPULSE_DSP_ERROR;
 80022a2:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 80022a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ff9e 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
}
 80022ae:	4633      	mov	r3, r6
 80022b0:	4618      	mov	r0, r3
 80022b2:	3784      	adds	r7, #132	; 0x84
 80022b4:	46bd      	mov	sp, r7
 80022b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ba:	bf00      	nop
 80022bc:	20000014 	.word	0x20000014
 80022c0:	08021994 	.word	0x08021994
 80022c4:	00000000 	.word	0x00000000
 80022c8:	08021954 	.word	0x08021954
 80022cc:	0802197c 	.word	0x0802197c
 80022d0:	08021990 	.word	0x08021990
 80022d4:	08021688 	.word	0x08021688
 80022d8:	08021a24 	.word	0x08021a24

080022dc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x20>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x24>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d002      	beq.n	80022f0 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x14>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80022ea:	f06f 0308 	mvn.w	r3, #8
 80022ee:	e000      	b.n	80022f2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x16>
    }

    return EI_IMPULSE_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	20000014 	.word	0x20000014
 8002300:	080013f9 	.word	0x080013f9

08002304 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 8002312:	f7ff ffe3 	bl	80022dc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 800231a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <run_classifier_image_quantized+0x24>
        return verify_res;
 8002322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002326:	e00c      	b.n	8002342 <run_classifier_image_quantized+0x3e>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8002328:	2248      	movs	r2, #72	; 0x48
 800232a:	2100      	movs	r1, #0
 800232c:	68b8      	ldr	r0, [r7, #8]
 800232e:	f01d fd7b 	bl	801fe28 <memset>

#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#else

    return run_nn_inference_image_quantized(signal, result, debug);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	461a      	mov	r2, r3
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff fd89 	bl	8001e50 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>
 800233e:	4603      	mov	r3, r0
 8002340:	bf00      	nop
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <_Z17get_feature_data0jjPf>:
static float features1[] = {
		0xd6d4bf, 0xd4d0ba, 0xd2ceba, 0xd2d1ba, 0xd4d0ba, 0xd4cfb7, 0xd2cdb1, 0xd1ccaf, 0xd1cdb0, 0xd2cdb0, 0xd2ceb1, 0xd4d0b3, 0xd4d0b3, 0xd6d2b5, 0xd6d2b5, 0xd7d3b6, 0xd7d3b6, 0xd8d4b7, 0xd8d4b7, 0xd8d4b7, 0xd8d4b7, 0xd7d3b6, 0xd8d3b7, 0xd6d2b5, 0xd7d3b6, 0xd7d3b6, 0xd7d3b7, 0xd5d2b5, 0xd3ceb1, 0xcfcaab, 0xcdc8a7, 0xccc6a6, 0xcdc9ab, 0xd2cdb4, 0xd4d1bb, 0xd5d1bc, 0xd4d1bc, 0xd2cfb9, 0xcfcbb2, 0xccc7ab, 0xcbc5a8, 0xcac3a7, 0xc8c2a5, 0xc4c1a2, 0xc4c0a2, 0xc6c0a2, 0xc6bea0, 0xc8c0a1, 0xdbddc9, 0xdcdeca, 0xdbd7c4, 0xd8d4be, 0xd5d2b8, 0xd6d1b7, 0xd8d4b8, 0xd8d4b8, 0xd6d2b6, 0xd6d2b5, 0xd6d2b5, 0xd7d3b6, 0xd8d4b7, 0xd8d4b7, 0xd9d5b8, 0xdad6b9, 0xdad6b9, 0xdad6b9, 0xdad6b9, 0xd9d5b8, 0xd8d4b7, 0xd7d3b6, 0xd7d4b6, 0xd6d2b5, 0xd4d0b3, 0xd2ceae, 0xcdc9a9, 0xcbc5a6, 0xcbc6a7, 0xccc7aa, 0xcecab0, 0xd4cfba, 0xd3d1bc, 0xd3d0b8, 0xd1ceb5, 0xd0ccb0, 0xcec9ac, 0xccc7a9, 0xccc6a9, 0xcbc5a8, 0xc7c0a4, 0xc7c0a4, 0xc8c2a4, 0xcac4a4, 0xcdc6a6, 0xcec9a8, 0xd0cba9, 0xd0cbab, 0xd7d3b9, 0xdad8c0, 0xdfddc8, 0xe0dfcc, 0xdedcc8, 0xdcd9c3, 0xdad6bb, 0xd9d5b9, 0xdad6bb, 0xdcd7bc, 0xdbd7ba, 0xdad6b9, 0xdad6b9, 0xdad6b9, 0xdad6b9, 0xdbd7ba, 0xdbd7ba, 0xdbd7ba, 0xdad6b9, 0xdad7ba, 0xdad6b9, 0xd7d3b6, 0xd2ceaf, 0xcfc9a9, 0xccc5a5, 0xcac5a7, 0xcdc8ac, 0xcfcab1, 0xd1cdb6, 0xd2cfb9, 0xd0cdb5, 0xcec9af, 0xcecaac, 0xcec8ab, 0xcec8ab, 0xcfcaad, 0xcfcaad, 0xcdc8ac, 0xcdc5aa, 0xcbc6a9, 0xcdc8a8, 0xcfc8a8, 0xcecaa8, 0xd0ccaa, 0xd2cead, 0xd4d0b0, 0xd6d2b3, 0xddd8bb, 0xd8d3ba, 0xd9d4b9, 0xd9d5b7, 0xdbd9be, 0xe0ddc6, 0xe1e0cc, 0xe2e1cd, 0xe0dfc8, 0xdddac1, 0xdcd9bc, 0xddd9bc, 0xddd8bc, 0xdcd8bb, 0xdad6b9, 0xdad6b9, 0xdad6b9, 0xdad6b9, 0xd9d5b8, 0xd7d3b6, 0xd4ceaf, 0xcfc9a8, 0xccc6a6, 0xcac5a7, 0xcdc7ac, 0xd0ccb4, 0xd1cdb5, 0xd1cdb6, 0xcfcab1, 0xcbc7ac, 0xcbc5a8, 0xcbc4a8, 0xcbc5a8, 0xccc8ab, 0xd1ccaf, 0xd1ccaf, 0xd1ccaf, 0xd1ccaf, 0xcfcaad, 0xcdc8ab, 0xcbc6a9, 0xd4cfaf, 0xd5d1b1, 0xdad6b5, 0xdedaba, 0xe3e0bf, 0xe5e2bf, 0xe4e2bf, 0xe3e3c1, 0xd9d4be, 0xdbd6bf, 0xdcd7bc, 0xdbd8b9, 0xdad8b8, 0xdcdabc, 0xdfdcc1, 0xe1e0c9, 0xe3e4ce, 0xe2e1c8, 0xdfddc2, 0xdcd9bc, 0xdbd8ba, 0xdbd7b8, 0xd8d4b5, 0xd5d1b2, 0xd1cdac, 0xcec9a8, 0xccc7a6, 0xccc7a9, 0xcec7ab, 0xd0cbb2, 0xd0ccb5, 0xcdcbb0, 0xcdc9ad, 0xcbc7aa, 0xc9c4a7, 0xc8c1a5, 0xc9c1a5, 0xc9c2a5, 0xcac4a5, 0xcbc6a7, 0xd1caa9, 0xd4ceb1, 0xd1cdb0, 0xd2cdb0, 0xd1cdb0, 0xd0cbae, 0xccc8ab, 0xcbc5a8, 0xd4d0b0, 0xd9d6b7, 0xe9e8c9, 0xefeecf, 0xf0f0d2, 0xe4e3c2, 0xe2dfc1, 0xe7e5d0, 0xdad5bf, 0xdcd8c1, 0xdcd8c1, 0xdddabf, 0xdedbbd, 0xdddabc, 0xdedbbb, 0xdedbbc, 0xdedcbd, 0xe1dec3, 0xe2e0c9, 0xe3dfc5, 0xddd9ba, 0xd2ceab, 0xcdc7a3, 0xcdc8a6, 0xcfcbaa, 0xd1cdb0, 0xd1cdb1, 0xd1ccb2, 0xcecab0, 0xccc8ab, 0xc9c6a7, 0xc8c6a6, 0xc8c6a7, 0xc9c5a5, 0xcac4a4, 0xcbc5a6, 0xcdc7a7, 0xcec9a9, 0xd0cbaa, 0xd0caa9, 0xd4cda8, 0xd5d1b2, 0xd4d0b3, 0xd4d0b3, 0xd4cfb2, 0xd1ccaf, 0xcdc8ab, 0xccc6a9, 0xd5d2b2, 0xdad7b9, 0xeaeace, 0xeeefd4, 0xededd3, 0xe6e5c7, 0xe6eae1, 0xebf0f2, 0xdad8c1, 0xdad9c1, 0xdbdac3, 0xdedbc4, 0xdfdac1, 0xe0dcbf, 0xe0ddbe, 0xe0ddbe, 0xe0ddbe, 0xdedbbb, 0xdedabb, 0xdddabb, 0xd7d3b1, 0xd0caa8, 0xd0ccac, 0xd1ceae, 0xd1cdae, 0xcecbac, 0xcbc8a9, 0xc8c5a4, 0xc8c5a5, 0xc9c6a5, 0xcac6a5, 0xcac5a2, 0xcdc5a4, 0xcfc9a8, 0xd2cdac, 0xd2ceaf, 0xd6d1b3, 0xd6d0af, 0xd1caa8, 0xd1ccad, 0xd4d0ac, 0xd7d2b4, 0xd6d2b6, 0xd6d2b6, 0xd6d2b5, 0xd3ceb1, 0xcec9ac, 0xcdc8aa, 0xd7d3b5, 0xdbd9bc, 0xececd3, 0xf0f0da, 0xefefd7, 0xe8e4c8, 0xe5e8de, 0xe8eee4, 0xdad9c1, 0xdbdac2, 0xdcdbc3, 0xdedbc5, 0xdddcc5, 0xe0dec1, 0xe1dfbf, 0xe2dfc0, 0xe2dfc0, 0xe2dfc0, 0xe1debf, 0xdddaba, 0xd4cfaa, 0xcac39a, 0xcac19e, 0xcec6a3, 0xccc8a4, 0xcac7a4, 0xcac5a4, 0xccc6a4, 0xcbc7a3, 0xcdc6a4, 0xd1cbab, 0xd6d2b4, 0xdbd6b9, 0xdedac0, 0xe1dfc4, 0xe2e0c3, 0xdcd9b5, 0xcfc69e, 0xcfc8a3, 0xd3d0b3, 0xd5d1ae, 0xd8d4b5, 0xd7d3b7, 0xd6d2b6, 0xd7d3b7, 0xd4d0b5, 0xd0cbaf, 0xcdc8ac, 0xd8d4b6, 0xdddbbc, 0xededd7, 0xf2f2de, 0xf0f0d9, 0xe8e6cb, 0xe6eada, 0xf3f5f0, 0xd9d9c2, 0xdcdcc3, 0xdedec5, 0xdfdfc7, 0xdeddc6, 0xe0dfc6, 0xe0e0c4, 0xe2e1c3, 0xe4e1c1, 0xe4e1c2, 0xe4e1c1, 0xe2dfc1, 0xd9d4b1, 0xcdc59c, 0xcbc29e, 0xcec8a7, 0xcccaa9, 0xd0cca7, 0xd1caa5, 0xd2cba8, 0xd7d2af, 0xdad6b4, 0xdfdcbd, 0xe3e1c4, 0xe6e3c6, 0xe4e1c2, 0xe4e2c8, 0xe9e6d1, 0xedecdd, 0xe3dfca, 0xe1dfca, 0xdedcc4, 0xd6d1af, 0xdad5b6, 0xd8d5b9, 0xd7d2bc, 0xd7d3b7, 0xd5d1b6, 0xd1cbb3, 0xcec8ae, 0xdad6b7, 0xdedcbf, 0xeeeed8, 0xf5f4e1, 0xf1f1db, 0xe9e7ce, 0xeeede3, 0xfffdff, 0xdfdec7, 0xdddcc5, 0xdeddc5, 0xdfdfc5, 0xe1dfc6, 0xe2e0c8, 0xe3e1c8, 0xe3e1c8, 0xe4e1c5, 0xe5e2c4, 0xe5e2c4, 0xe5e3c3, 0xdcd7b5, 0xcec69d, 0xcec7a2, 0xcecbaa, 0xcecbaa, 0xd0cdaa, 0xdbd7b7, 0xe5e2c2, 0xe8e6c3, 0xe0dcb8, 0xe1dec2, 0xebead8, 0xefefe2, 0xe7e5d3, 0xf4f2eb, 0xfcf9fc, 0xfefcff, 0xefeee4, 0xecece2, 0xe5e3d2, 0xd7d2b0, 0xdbd6b8, 0xd9d5bc, 0xd8d4bd, 0xd7d1bb, 0xd4cfb6, 0xd1cbb2, 0xcec8af, 0xdad6b9, 0xdddbbe, 0xeeeed8, 0xf5f4e1, 0xf3f4e1, 0xedebd4, 0xe3e3d4, 0xe9ece1, 0xcbc9b1, 0xddddc7, 0xe2e4ce, 0xe6e5ce, 0xe5e3ca, 0xe3e1c8, 0xe4e2c9, 0xe5e3ca, 0xe5e3ca, 0xe5e4ca, 0xe6e5c9, 0xe7e4c7, 0xdcd8b5, 0xcfc79e, 0xccc7a2, 0xcecbab, 0xcfccab, 0xd1ccaa, 0xdfdcbd, 0xecebd0, 0xe9eacd, 0xe5e2c8, 0xf4f4ef, 0xfbfbfd, 0xfbfbfb, 0xeceae0, 0xf5f4f0, 0xfbfafb, 0xfcfbfb, 0xefede3, 0xebece0, 0xe4e3d3, 0xd7d3b1, 0xdbd7b8, 0xdad6bf, 0xdbd7c1, 0xded9c3, 0xdcd7c0, 0xd8d5bc, 0xcfccb3, 0xddd9bd, 0xd6d1b3, 0xe2e3cd, 0xf7f9ea, 0xf7f8e9, 0xecebd6, 0xe6e3d0, 0xebecda, 0x967a48, 0xa48955, 0xb2a076, 0xbbb293, 0xd4cfb3, 0xe6e4cb, 0xe6e5cb, 0xe6e5cb, 0xe6e4cb, 0xe8e5ce, 0xe8e6ce, 0xe9e6cb, 0xdedab7, 0xcfc79e, 0xcec8a4, 0xcfccac, 0xd0cdac, 0xd2cdac, 0xe0debf, 0xedefd7, 0xebecd4, 0xe5e5cb, 0xf5f5f2, 0xfaf9fa, 0xfafafa, 0xebe9de, 0xf5f4f1, 0xfdfdff, 0xfdfdff, 0xf0eee5, 0xedede5, 0xe5e3d1, 0xd7d3b1, 0xdbd7ba, 0xd5d0bc, 0xc9c3ad, 0xb0ab95, 0x98907c, 0x817765, 0xb2aa92, 0xe3e0c4, 0xd3cdb4, 0xdeddcb, 0xfbfcf0, 0xf7f8e9, 0xedecd6, 0xf0f0e7, 0xfefeff, 0x4b4127, 0x69552d, 0x8a6f39, 0x8b6d33, 0xb1a178, 0xe8e7ce, 0xe5e5cc, 0xe6e8cf, 0xe7e9cd, 0xe8e9ce, 0xe9e9cf, 0xeae8cd, 0xdfdab8, 0xcfc79e, 0xcbc9a4, 0xcfccad, 0xcfccae, 0xd2ceac, 0xe0e0c2, 0xeff1db, 0xedecd7, 0xe5e6cb, 0xf9faf7, 0xfdfdff, 0xfbfbfb, 0xe9e6db, 0xedece4, 0xf1f1e9, 0xf0f0e8, 0xe3e3d2, 0xeaeadf, 0xdedbc9, 0xd9d5b3, 0xcbc6a7, 0x55493e, 0x332e2a, 0x2e2a25, 0x201c1f, 0x2a231f, 0xa0967b, 0xe5e2c7, 0xd5cfb6, 0xdbdac8, 0xfafbef, 0xf8f8e8, 0xededd8, 0xeeefe5, 0xfafaf9, 0x313731, 0x1e2327, 0x2c2e2c, 0x8f733d, 0xc9b98c, 0xe5e3cb, 0xe5e4cd, 0xe7e6d1, 0xe7e8d1, 0xe9ebd1, 0xeaedcf, 0xe9eace, 0xddd9b7, 0xcec69d, 0xcbc7a3, 0xd0cdac, 0xd2cfb0, 0xd2cead, 0xe0dfc3, 0xeef0db, 0xeff1dc, 0xe4e2c9, 0xe7e7d8, 0xe9e8de, 0xe8e9dc, 0xdfdecc, 0xe6e6d9, 0xedede2, 0xf3f2ea, 0xe8e7d9, 0xe4e5d6, 0xdad6c2, 0xdad5b4, 0xc9c1a0, 0x352b24, 0x2e2a27, 0x614d32, 0x2f2927, 0x2c2623, 0xa1967c, 0xe4e1c9, 0xd7d1b9, 0xd9d8c8, 0xf7faef, 0xf8f9eb, 0xf0f0dc, 0xedefe0, 0xf8f8fa, 0x545442, 0x302f28, 0x363932, 0x9c8044, 0xcfbe8f, 0xe4e3cc, 0xe4e6cf, 0xe5e7d3, 0xe5ead4, 0xe7ecd6, 0xe8ebd2, 0xe9ebce, 0xdcd8b6, 0xccc49a, 0xccc9a5, 0xcbcaad, 0xc6c3a7, 0xd3cfad, 0xdbd7bc, 0xf1f2dd, 0xf4f6e1, 0xe4e4ca, 0xefeee4, 0xf4f4f0, 0xf7f6f3, 0xeae8de, 0xf7f7f4, 0xfdfdff, 0xfeffff, 0xf0efe6, 0xeaeadf, 0xdddac4, 0xd9d4b3, 0xcdc5a4, 0x40352b, 0x3a2f28, 0x67492e, 0x2e2927, 0x272321, 0x9c9276, 0xe6e2ca, 0xdad4bb, 0xd8d8c6, 0xf5fbee, 0xf7faeb, 0xf1f1de, 0xedece0, 0xfbfbfc, 0x41382e, 0x35332e, 0x474338, 0x9f8144, 0xcdc195, 0xe4e3ce, 0xe4e5ce, 0xe5e8d3, 0xe6ebd5, 0xe5ecd6, 0xe6ecd4, 0xebebd0, 0xdbd7b4, 0xcac49a, 0xc1bb98, 0xa49166, 0x9a8962, 0xcfccab, 0xdad6b9, 0xf3f4df, 0xf4f3df, 0xe7e7d0, 0xfafaf8, 0xfbfbfc, 0xfdfcfe, 0xedebe3, 0xf6f6f3, 0xfbfafa, 0xfcfbfd, 0xf0ede4, 0xe9eade, 0xdcd9c3, 0xd8d4b3, 0xcfc7a6, 0x463a2e, 0x252124, 0x382d27, 0x1f2024, 0x25201f, 0x978d72, 0xe4e4ca, 0xddd7be, 0xd6d6c4, 0xf4f9ec, 0xf9fbed, 0xf1f3df, 0xedecde, 0xe8eaee, 0x38322b, 0x453e33, 0x655a44, 0x92773f, 0xc4b892, 0xe3e2cc, 0xe3e4cd, 0xe3e5d0, 0xe9edd7, 0xeaefd9, 0xe8edd6, 0xebecd1, 0xdad6b1, 0xc9c198, 0xbdb08d, 0x937542, 0x907749, 0xcecba9, 0xdad6ba, 0xf3f4e3, 0xf4f5e3, 0xe7e6d0, 0xf8f9f5, 0xfafafa, 0xfbfafc, 0xeceae2, 0xf6f5f3, 0xfbfbfb, 0xfcfcfe, 0xefede5, 0xe8e8dc, 0xdcd9c2, 0xd8d4b2, 0xd1c8a8, 0x4a3d31, 0x212225, 0x322f29, 0x141922, 0x1f1d1e, 0x94896e, 0xe5e4ca, 0xe1dbc2, 0xd5d5c3, 0xf3f7eb, 0xf8fbee, 0xf1f2df, 0xeaecdd, 0xf3f5f6, 0x3d382e, 0x544534, 0x524839, 0xa3894a, 0xd2c69e, 0xdfddc4, 0xdfdec8, 0xe6e5d1, 0xb1b29e, 0xcac9b5, 0xeceed6, 0xecedd1, 0xdad5b1, 0xcbc098, 0xbfb290, 0x7b6540, 0x85714b, 0xcfccaa, 0xd9d5ba, 0xf4f5e7, 0xf3f5e5, 0xebe8d1, 0xe6ecec, 0xe9f4f6, 0xfeffff, 0xebeade, 0xf6f4f4, 0xfbfbfc, 0xfcfcfe, 0xefede5, 0xe8e7db, 0xdbd8c1, 0xd8d4b2, 0xd4cbab, 0x473c32, 0x35352c, 0x322f2b, 0xf1522, 0x131418, 0x8b8068, 0xe5e5ca, 0xe2ddc2, 0xd4d3c0, 0xf2f5eb, 0xf9fcef, 0xf3f4e2, 0xe6e8d6, 0xe8ebe7, 0x544531, 0x51402f, 0x3a3530, 0xad9154, 0xd3c89d, 0xdcdabe, 0xdddcc4, 0xe4e1cc, 0xb0aa93, 0xb7b49a, 0xa2a08b, 0xe8e8cc, 0xd9d5b1, 0xc8bf95, 0xc5bc9b, 0xb4ab89, 0xb8b290, 0xcecbaa, 0xd8d5b9, 0xf4f5e7, 0xf3f5e5, 0xede8d1, 0xdce5e8, 0xe2eef3, 0xfbfefc, 0xe4e6d7, 0xf2f3ec, 0xf8faf7, 0xfcfdfb, 0xefede3, 0xe4e4d7, 0xdbd8bf, 0xd9d4b3, 0xd6cead, 0x574838, 0x322c21, 0x29241f, 0x393128, 0x41372b, 0x938971, 0xe2e0c6, 0xe1ddc3, 0xd2d1be, 0xf2f6ea, 0xf9fbef, 0xf2f3df, 0xebedde, 0xe4e9e7, 0x7b673e, 0x685537, 0x665a3f, 0xa68a4c, 0xcbc29d, 0xe1dec8, 0xe1dec9, 0xdddcc2, 0xdedcc1, 0xdbdabf, 0xc5c3a8, 0xebebce, 0xd7d3ae, 0xc6bd95, 0xc4bb99, 0x82755b, 0x8d8165, 0xd0cdab, 0xd6d3b8, 0xf3f4e6, 0xf3f5e5, 0xeae6ce, 0xe7ebe4, 0xeef2ef, 0xfbfdfa, 0xe5e4d2, 0xf0f3ec, 0xf4fafb, 0xf7fcfe, 0xecebe3, 0xe3e2d2, 0xdad7bf, 0xd9d4b2, 0xddd8b8, 0xc0b99c, 0xc0b69f, 0xc0b9a2, 0xcbc5ab, 0xcdc5ad, 0xc9c3aa, 0xd9d7bb, 0xe3ddc7, 0xd0cebc, 0xf0f4e6, 0xf8fbef, 0xf2f3e2, 0xebecda, 0xf1f6f3, 0x927744, 0xa28449, 0x9e8247, 0x896c35, 0xc2b998, 0xe4e1d0, 0xe1deca, 0xe1dfc9, 0xe2e3ce, 0xe0dfc6, 0xe7e7ca, 0xeaeacf, 0xd7d2ad, 0xc7bb97, 0xc3b593, 0x403324, 0x5b4b37, 0xd2cdaa, 0xd6d2b7, 0xf3f4e6, 0xf3f5e4, 0xe8e5cd, 0xf4f6f1, 0xf9fcfb, 0xfcfefe, 0xe5e5d3, 0xf2f4ed, 0xf5fbfb, 0xf3fcfe, 0xe6e9e1, 0xe4e4d2, 0xdedbc4, 0xd8d4b2, 0xe1debd, 0xe1dec0, 0xe0ddc2, 0xdfdbc4, 0xd9d5bd, 0xd6d0b6, 0xcec8ac, 0xd7d4b7, 0xe2dec2, 0xcfcdb7, 0xf0f2e4, 0xfbfcf3, 0xf4f4e2, 0xe6e8d4, 0xf6fbfa, 0xb5af99, 0xb6b09c, 0xb5af97, 0xbeb79d, 0xd6d3bb, 0xe6e3cf, 0xe0deca, 0xe1ddca, 0xe4e5d2, 0xd9d7be, 0xe5e3c7, 0xe8e9ce, 0xd5cfad, 0xc6b995, 0xc2b797, 0x978869, 0x9e8f72, 0xcdc8a9, 0xd3cfb1, 0xf0f2df, 0xf5f7e7, 0xe8e5ce, 0xf4f6f0, 0xfafcfb, 0xfafefe, 0xe4e3d3, 0xecf1ea, 0xf3fafb, 0xeef8fa, 0xe6e8df, 0xe3e2d0, 0xdedbc4, 0xd8d4b1, 0xe1dcbd, 0xdddabb, 0xdad6b9, 0xd9d5b8, 0xd6d1b6, 0xd1cbb1, 0xc9c3a7, 0xd4d0b4, 0xdddabb, 0xc9c8b1, 0xf0f3e6, 0xf8faee, 0xeff0db, 0xe5e5d2, 0xf5f7f3, 0xd4d2be, 0xd3d1be, 0xd4d2bf, 0xd9d8c5, 0xd6d4c3, 0xc6c4b5, 0xe0ddc9, 0xdddac7, 0xe1e1cd, 0xd3d2bb, 0xe6e5cd, 0xe7e7cd, 0xd5d0ad, 0xc5b693, 0xc1b797, 0xafa381, 0xafa380, 0xcbc3a5, 0xd3ceb2, 0xf1f3e3, 0xf3f4e2, 0xe7e4cc, 0xf2f5f0, 0xf6fbfd, 0xfcfeff, 0xe5e2d1, 0xebf0e9, 0xeff6f7, 0xf1f8fa, 0xe8eae0, 0xdfdecb, 0xdfdbc4, 0xdad3b1, 0xe0ddbc, 0xdddabb, 0xdad6b9, 0xd8d4b7, 0xd4cfb3, 0xcec9ac, 0xccc7aa, 0xd6d1b4, 0xdcd9ba, 0xc7c6b1, 0xf4f7ec, 0xfefff4, 0xfafaea, 0xf0f0db, 0xebede8, 0xbebeaa, 0xd6d8c3, 0xcfcdb9, 0xd2d3c1, 0xb6bcb6, 0x929c9e, 0xe2e2d0, 0xeae9d4, 0xeef0da, 0xdddcc6, 0xeae8d3, 0xe7e6cf, 0xd5cead, 0xcbbd96, 0xcabf9e, 0xa7966c, 0xa39268, 0xd2caaa, 0xd6d1b2, 0xf1f3e3, 0xf5f5e5, 0xeae6cf, 0xeaede7, 0xe6f0f1, 0xeef8f9, 0xe2e2ce, 0xe6e9df, 0xe7ecea, 0xebf1f0, 0xe3e6da, 0xe4e3d1, 0xe2ddca, 0xd9d4b1, 0xdedbbb, 0xdbd8ba, 0xd7d3b7, 0xd5d1b4, 0xd3cfb2, 0xc2bb9f, 0x978a70, 0xafa78e, 0xbdb79a, 0xbbb49a, 0xd9d6ca, 0xd3d2c5, 0xa19c8e, 0x867b6a, 0xd8d7ce, 0xb9b39e, 0xbab5a3, 0xada493, 0xaea596, 0x9e968f, 0x716e70, 0xaca597, 0xb8b7a7, 0xaeb1a0, 0xafad9a, 0xdbd9c3, 0xebe9cc, 0xaaa88d, 0x615e4e, 0x85826f, 0x817b67, 0x867c69, 0x7b7a6a, 0xb8b59e, 0xf6f6e3, 0xf2f2e1, 0xe7e5cd, 0xe8ebe0, 0xe7ebe8, 0xe9ebea, 0xe3e0cd, 0xefeee0, 0xeaece9, 0xe8ede9, 0xdbdfd6, 0xdedbc5, 0xe2dec8, 0xd9d4b2, 0xddd9b8, 0xd9d6b8, 0xd5d1b4, 0xd2ceb1, 0xd3ceb2, 0xb7ae92, 0x58432c, 0x553f29, 0x5c442b, 0x6b4f2f, 0x5f472f, 0x5a442c, 0x362513, 0x6b5f56, 0xedf0eb, 0x5a3d35, 0x43332a, 0x221f1f, 0x271f20, 0x2a2121, 0x362523, 0x392821, 0x372923, 0xf1215, 0x3e4039, 0xb2aa88, 0xbcb491, 0x908a6d, 0xe1416, 0x412, 0x362a23, 0x695036, 0x4d3c2a, 0x908d7d, 0xf6f7e5, 0xf1f2dd, 0xe6e3ca, 0xeff2ec, 0xe7e9ee, 0xdcd6de, 0xe2e0ce, 0xf4f3ea, 0xd0d7da, 0xb2bdc8, 0xc1cbd0, 0xded9bf, 0xe1ddc7, 0xd8d3af, 0xdbd6b5, 0xd7d3b7, 0xd5d1b4, 0xd3ceb1, 0xb5ac89, 0x968866, 0x664b32, 0x624625, 0x634626, 0x604022, 0x5e4222, 0x604121, 0x432c1a, 0x7d6e5a, 0xb9b39c, 0x200a0c, 0x241211, 0x101313, 0x40d15, 0xe1117, 0x4f3c29, 0x795f3a, 0x806339, 0x6a5032, 0x473b2e, 0x968c66, 0x8f8663, 0x857c5d, 0x38372f, 0x90b13, 0x513a25, 0x8c6b3c, 0x8d6c3c, 0x9c8b6a, 0xeaebd7, 0xf1f1dc, 0xe5e3ca, 0xe8ebe5, 0xdde9eb, 0xe6eff1, 0xdfdfcb, 0xdfe1d9, 0xc2ced3, 0xd0d5d9, 0xb6bcbb, 0xd8d8bf, 0xe2dec6, 0xd7d0ab, 0xd8d1b0, 0xd5d1b5, 0xcbc6aa, 0xc7c0a3, 0xa49672, 0x80704d, 0x6b5234, 0x5b4325, 0x614826, 0x604725, 0x5a4024, 0x574022, 0x4d3520, 0x584b37, 0x736a49, 0x4c4133, 0x4a4739, 0x3a3a2d, 0x50c12, 0x241717, 0x684d2e, 0x8b6a3e, 0x896e3f, 0x8b6b3f, 0x7b5f39, 0x7a6d4f, 0x8e8561, 0x746e54, 0x554d39, 0x90d13, 0x36281f, 0x765932, 0x7e6238, 0x91754c, 0xccc4a9, 0xf2f0dc, 0xeae7cd, 0xc4c8c2, 0xb6c4c8, 0xddebef, 0xd7dac9, 0xe2e2d8, 0xbac5ce, 0xc4cfd9, 0xaeb5b3, 0xdcdbc3, 0xe5e0c7, 0xd5cda8, 0xdbd5b2, 0xbab598, 0x9e9782, 0xc8c5af, 0xa8a481, 0x8e7f60, 0x6b4d2b, 0x664927, 0x5b3e22, 0x5d4022, 0x715229, 0x674a25, 0x3d291c, 0x554834, 0x686447, 0x898360, 0x7c795e, 0x5a5846, 0x111517, 0x110e13, 0x59442e, 0x85653b, 0x745a35, 0x7c6239, 0x8a693c, 0x75613e, 0x857c5c, 0x787354, 0x5d5844, 0x15181a, 0xf1014, 0x4f3825, 0x81623b, 0x765632, 0x7d7062, 0xeeefd8, 0xe9e3c9, 0xd4dad3, 0xccd8db, 0xdae4e9, 0xd9dbcc, 0xe4e7e0, 0xccd8de, 0xbacad6, 0xc5cfcc, 0xd9d6ba, 0xc9c6a9, 0xcbc5a1, 0xb6b58c, 0xaeaa8b, 0xc0bca6, 0xc1c1ad, 0x93987e, 0xa3a283, 0x5c4224, 0x523416, 0x593b1c, 0x4f321a, 0x50331a, 0x462d18, 0x3a2518, 0x4b4030, 0x5f5c44, 0x847b5d, 0x7b7559, 0x686550, 0x2b2c26, 0x40911, 0x35231a, 0x614522, 0x84653a, 0x8d6b3b, 0x7e5f36, 0x624a2d, 0x72684f, 0x7e7857, 0x64604b, 0x302f28, 0x30a12, 0xe0d15, 0x2d1f17, 0x2c1d14, 0x17181d, 0x858777, 0xa59d82, 0x9f9781, 0xa09981, 0xa59a76, 0xd0c59b, 0xe4e4cf, 0xdddecd, 0xe9ead7, 0xdcddc6, 0xbfbea5, 0xc5c5b1, 0xbcbb9e, 0xb0b18c, 0xd5d2a8, 0x969676, 0x6f775e, 0x8f9471, 0xa3a577, 0x645d47, 0x5f5241, 0x78633d, 0x614c2e, 0x403223, 0x433422, 0x2d1e12, 0x3f3225, 0x52513f, 0x7a7455, 0x757055, 0x6b6953, 0x3e4033, 0x3070d, 0x110f14, 0x37261e, 0x5a4027, 0x5c4428, 0x533c22, 0x211514, 0x303027, 0x756f4f, 0x635e49, 0x403b2f, 0x111312, 0x282c28, 0x565649, 0x79776c, 0x8e928c, 0xa1a398, 0xb2af9e, 0xb4b2a0, 0xb6b4a1, 0xbbb79d, 0xd0cbab, 0xe5e2cf, 0xedebd5, 0xcfc5a7, 0xc8c1a3, 0xd0d1bf, 0xcac9b2, 0xc7c5a2, 0xcfcdac, 0x888f70, 0x4f5c4a, 0x7b7d57, 0x9f9961, 0xc4be84, 0xafad97, 0xcdcbb9, 0xdedbd1, 0xcfcab8, 0xbdb79b, 0xa49a7e, 0x897e66, 0x635846, 0x434237, 0x827e5f, 0x878266, 0x87846b, 0x86846b, 0x3c4037, 0x60b, 0x30d, 0x1a1314, 0x322721, 0x383129, 0x48473d, 0x5d5c4e, 0x8a8467, 0x858169, 0x6b6a5a, 0x7b7862, 0x9f957a, 0xaca482, 0xb7ae8c, 0xc6bfa1, 0xd4d1b9, 0xd6d5c1, 0xc7c2a7, 0xc2bc9d, 0xc1b798, 0xb5a985, 0xb6a984, 0xc6b993, 0xa29069, 0x887860, 0xa7a388, 0x5a5a4c, 0x676b55, 0x6a7152, 0x222d1a, 0x26332f, 0x909378, 0x7a7641, 0xabaa80, 0xacae8d, 0xc2c3aa, 0xb7ab88, 0xa39771, 0xa5997a, 0xafa280, 0xbeb28c, 0xa69a7a, 0x7a7565, 0xa19d7e, 0xa6a081, 0xc8c296, 0xe7e2b3, 0xd8d4a9, 0x5d6052, 0x4a4c3d, 0x78775f, 0x949275, 0xafa989, 0xbdb695, 0xc2ba9a, 0xc0ba9b, 0xc4bf9f, 0xc9c4a6, 0xc9c3a8, 0xc1ba9f, 0xb7b192, 0xaca383, 0xa19676, 0xa09775, 0xaca383, 0x9f9370, 0x978b68, 0xa0936d, 0xa39469, 0x9d8e63, 0xb19d6c, 0xa18d5b, 0x67543c, 0x948765, 0x21261c, 0x121a15, 0xd1714, 0xd1916, 0x101a13, 0x2a3123, 0x717348, 0x908e67, 0x9f996e, 0x958b6a, 0x82744f, 0x918668, 0x998e71, 0x958869, 0x92815c, 0x7e7457, 0x8b8364, 0x827e67, 0x8d8669, 0xc1b98c, 0xe1dbb0, 0xeae7bc, 0xc3bf98, 0x9a906d, 0xc2bb9a, 0xc7c2a4, 0xc9c5a8, 0xc6c2a5, 0xbfbb9e, 0xbab596, 0xb6ad8b, 0xb5ac8b, 0xafa583, 0xab9f7c, 0xa89e79, 0xa59978, 0x9e906f, 0x887d5d, 0x8e805d, 0x988864, 0x8f815e, 0x8f805a, 0x94845a, 0x988657, 0xa6915f, 0x6b583f, 0x655443, 0xab9f85, 0x838377, 0x56584d, 0x40443a, 0x4b4a43, 0x605d53, 0x686653, 0x6a6b4b, 0x5f593a, 0x595437, 0x796a4c, 0x84714e, 0x5f7778, 0x518a9d, 0x557b83, 0x7b6f53, 0x5f543b, 0x6c6546, 0x6d6754, 0x7f795e, 0xbdb588, 0xe4e2b3, 0xd8d5a8, 0xb2ad88, 0xaba584, 0xd1cead, 0xe4e5c7, 0xe5e5c6, 0xdfddbd, 0xc1bc99, 0xb3aa89, 0xa59a77, 0xa39674, 0x9e946f, 0x968869, 0x918464, 0x8e8061, 0x938663, 0x7c7152, 0x726648, 0x847754, 0x827754, 0x847755, 0x8d8061, 0xa49978, 0xb8a97e, 0xbab099, 0xcdcabf, 0xb6b2a4, 0xc2bcac, 0x7b7667, 0x6c6b5f, 0x81776a, 0x71695b, 0x7d7e62, 0x948660, 0x716951, 0x5f5b48, 0x655e4b, 0x6d644e, 0x4e5e5f, 0x3b7b99, 0x5f8ea2, 0x716d5c, 0x555040, 0x57533c, 0x4e483b, 0x4e4738, 0x736d53, 0x989272, 0x9b9475, 0x9e997a, 0xada886, 0xb1ab89, 0xc4bc99, 0xdfdbb6, 0xe6e5bb, 0xc6be92, 0x9e916e, 0x9a8e6b, 0x968967, 0x938562, 0x8e7f61, 0x8b7e5f, 0x8a7e5c, 0x887c5b, 0x6f6549, 0x766e53, 0x8f8563, 0xa09574, 0xbab6a4, 0x9b9b93, 0xa5a49b, 0xaea792, 0xaba794, 0xcdcac0, 0xb9b7ac, 0xb7b29e, 0x8f866d, 0x565247, 0x5d5a4e, 0x63604f, 0x474731, 0x686148, 0x534b3c, 0x33281b, 0x32281b, 0x392d23, 0x474a46, 0x305a6b, 0x425f70, 0xa3a79b, 0xada686, 0x766b48, 0x676453, 0x686453, 0x686351, 0x75705a, 0x8b836a, 0x8e886d, 0x908a6b, 0x948a6a, 0x978b66, 0xd5d0a3, 0xd5cea1, 0xa69872, 0x938564, 0x928563, 0x8d805d, 0x7c7051, 0x766a4f, 0x776d4e, 0x766e50, 0x7b7356, 0x8d8262, 0x998c68, 0x897f65, 0x9d9a95, 0xe9e9e3, 0xabaea7, 0x868b85, 0x838479, 0x808176, 0xc5c4bd, 0xb7b6ab, 0xbfb9a7, 0xaea994, 0x4f4840, 0x898778, 0x928e7d, 0x847f6e, 0x65604f, 0x68624e, 0x605a47, 0x5b5240, 0x55462f, 0x3c5057, 0x36657e, 0x8ea5aa, 0xd9d2ae, 0xb0a378, 0x857753, 0x6b6855, 0x706c59, 0x736e59, 0x77725c, 0x878169, 0x847f67, 0x7f775b, 0x887c5d, 0x968a67, 0xc1b787, 0x9e916a, 0x887b59, 0x887b59, 0x7c7050, 0x6d6548, 0x6e684d, 0x756c52, 0x847b5d, 0x8c8063, 0x8c8061, 0x8c7f5d, 0x93855f, 0x665d43, 0x5a5543, 0xa5a18e, 0xccc9be, 0xd0d0c2, 0xc5c5b4, 0xc8c9bd, 0xcccdc4, 0xd6d7cf, 0xd2d0c3, 0xdeddd0, 0xa19b8e, 0xb5b3a3, 0xd0cebf, 0xb7b39c, 0x7e765d, 0x786f59, 0xa59e82, 0xb8b298, 0x897d67, 0x3c3d3b, 0x9aa9a8, 0xd1cbad, 0x7f7656, 0xaea782, 0x7e6f4b, 0x6d6a57, 0x706b59, 0x746e5a, 0x716d57, 0x6b6653, 0x726d58, 0x857d61, 0x877a5b, 0x817453, 0x7f724f, 0x706547, 0x6c6347, 0x756b4d, 0x857c5e, 0x877e61, 0x877d5f, 0x887e5e, 0x87795b, 0x847859, 0x817556, 0x786b4d, 0x584a2f, 0x776f60, 0xa8a38b, 0x685e4a, 0x918673, 0xab9f87, 0xad9c78, 0xc7bea2, 0xd9d7c6, 0xd2cfbc, 0xd3cebb, 0xd8d6c5, 0xd8d7c7, 0xdad8cb, 0xdfddcf, 0xc4c1b1, 0xaaab98, 0x929385, 0x7e7e74, 0x616056, 0x4f4d42, 0x87877b, 0xddd5b1, 0x605339, 0x3b382e, 0xa8a488, 0x352d1e, 0x6f6b58, 0x726d5a, 0x75705c, 0x74705b, 0x615e4d, 0x5b5847, 0x635e49, 0x625841, 0x8d845e, 0x979271, 0x797458, 0x8b8363, 0x928764, 0x8f8364, 0x8b7d60, 0x807759, 0x7b7556, 0x797051, 0x5f563d, 0x443b2a, 0x362920, 0x291f13, 0x837e70, 0xbcb49b, 0x847254, 0x958261, 0x998660, 0x99855c, 0xa99777, 0xc6bea9, 0xc0bcac, 0x8e8870, 0xb8b49c, 0xc2ba9d, 0xa7a086, 0x999381, 0xb6b1a1, 0xcbbeb0, 0xd1c7b3, 0xd0c9b3, 0x9d957e, 0x98927f, 0x958c78, 0x917e56, 0x695536, 0x7c6e53, 0xb4ad8f, 0x68593e, 0x6d6855, 0x726c5a, 0x746f5b, 0x7a755e, 0x807b65, 0x787460, 0x736d56, 0x898060, 0xb1a57f, 0xbdb58e, 0x8e8464, 0x8b7e5e, 0x8b7e5d, 0x8b7d5d, 0x7e7253, 0x686146, 0x48412d, 0x2d261b, 0x281f1a, 0x372e26, 0x5a5040, 0x71624a, 0xa69d86, 0xbeb59b, 0x907c5c, 0x8c7957, 0x85724b, 0x938262, 0xb6b09e, 0xd0d1c5, 0x88867b, 0x59584d, 0x6e6c5c, 0x565041, 0x4a412e, 0x564b37, 0x6d6148, 0x837152, 0x84704d, 0x847352, 0xa08d64, 0x93886d, 0x918469, 0xa18757, 0xa58958, 0xa48d62, 0xbeb393, 0x967f54, 0x6e6957, 0x716c59, 0x746f59, 0x77725d, 0x7b7661, 0x7d7863, 0x857e63, 0x908261, 0x978967, 0x968866, 0x897c5d, 0x897b5c, 0x7a6e50, 0x5d523b, 0x3a3123, 0x1d1811, 0x262019, 0x403930, 0x635a48, 0x7d7159, 0x8a7b5f, 0x897659, 0xaba18b, 0xbcb59b, 0x887551, 0x8c7a59, 0xa49a81, 0x918f81, 0xa1a49e, 0xa7abaa, 0x4f565a, 0x3c4349, 0x41443e, 0x2e2f2b, 0x2a2b23, 0x373128, 0x362f27, 0x363228, 0x695f4b, 0x836c58, 0x5c5240, 0x929181, 0xa9a18b, 0x7d7153, 0x867956, 0x94896a, 0xb7af92, 0xa38a5e, 0x433e34, 0x565142, 0x696350, 0x726d58, 0x7a755f, 0x7d7862, 0x807a60, 0x908363, 0x938663, 0x837657, 0x706448, 0x4a3f2d, 0x2c2519, 0x1f1812, 0x2f2922, 0x514a3c, 0x6f6450, 0x83765e, 0x8d7c61, 0x8f7d62, 0x907f63, 0x8d7b5c, 0xa69b83, 0xb5ad92, 0x95886e, 0xa4a090, 0x737368, 0x686a60, 0x8e8d86, 0x56524f, 0x383e40, 0x323939, 0x2b3233, 0x2d3535, 0x313836, 0x2e3432, 0x2e3333, 0x3a3b36, 0x54524b, 0x8a7f70, 0x7a796f, 0xafb2a5, 0xc1bdab, 0x4b4a41, 0x2d291f, 0x7a7e71, 0xc2b997, 0xad986d, 0x555143, 0x3e3a31, 0x2d2922, 0x383429, 0x403a2c, 0x585241, 0x7e765d, 0x837556, 0x5f523a, 0x382c20, 0x251b14, 0x2a2119, 0x3f372c, 0x635a48, 0x7b6f59, 0x87785f, 0x8d7c60, 0x8f7e62, 0x917f64, 0x918065, 0x938266, 0x99886a, 0x88795f, 0xa8a18e, 0xa1a49b, 0x585851, 0x898e88, 0xeff6f6, 0xafb1b0, 0x2e241a, 0x463526, 0x403327, 0x3b322a, 0x36332e, 0x2d302c, 0x242a29, 0x433828, 0x3d2e1f, 0x161715, 0x5a5d54, 0x717574, 0x9b9e96, 0xd3d0bc, 0x68665a, 0x4e4f43, 0xc2bda3, 0xb09e73, 0xae9c74, 0x7f735c, 0x746b57, 0x666051, 0x564e43, 0x403a31, 0x3a2f27, 0x4f3828, 0x43281b, 0x261812, 0x372e25, 0x564a3c, 0x6f644f, 0x85775e, 0x8d7d61, 0x918064, 0x938167, 0x948368, 0x958468, 0x978769, 0x9a896b, 0x9a8c6d, 0xa09173, 0x94866c, 0x87816f, 0xb5b6aa, 0xbec3b8, 0xecf0eb, 0xffffff, 0xb6bebe, 0xb1418, 0x309, 0xe0d0f, 0x1f1813, 0x292019, 0x30271f, 0x483928, 0x432f1e, 0x1f1f1e, 0x363731, 0x2f2d2b, 0x151918, 0x888a81, 0xc6c0a9, 0x3c3b2e, 0x9da08e, 0xc2b58f, 0x9b8863, 0xae9d74, 0x897a60, 0x88785e, 0x82755e, 0x7c715b, 0x776d5a, 0x6f6959, 0x452a1e, 0x2d0d07, 0x544939, 0x7a6f5b, 0x8a7b63, 0x908165, 0x938366, 0x968569, 0x97866a, 0x998869, 0x9b8a6b, 0x9c8c6b, 0xa39371, 0xa79776, 0xa9987b, 0xaa9b7e, 0xa8997d, 0x8c826a, 0x726a58, 0x898675, 0x9f9d90, 0xc0c0b4, 0xc9cbc0, 0xa4a69b, 0x7e837b, 0x4b534f, 0x1d2629, 0x91216, 0x50a0f, 0xa0909, 0x205, 0x1f2321, 0x45453d, 0x242220, 0xc0e0f, 0x70736d, 0xbeb9a5, 0x767769, 0xcfc8aa, 0xa2906b, 0xad9c76, 0xb1a077, 0x918367, 0x908166, 0x8f8065, 0x8d7f64, 0x8a7a61, 0x8a7e67, 0x665443, 0x5a4537, 0x897b64, 0x938268, 0x938367, 0x978569, 0x99876c, 0x9b8a6d, 0x9d8d6d, 0x9f8f6d, 0xa29270, 0xa69675, 0xab9b79, 0xb0a080, 0xb3a284, 0xb6a689, 0xac9b7d, 0xa19170, 0x9c8d6e, 0x918569, 0x887d65, 0x796f5c, 0x7e7867, 0x928f7e, 0xa29f91, 0xb0afa0, 0xbfbfaf, 0xaeb0a2, 0x81877e, 0x555e59, 0x3c403a, 0x353530, 0x2a2b26, 0x25221d, 0x181511, 0x6e7068, 0xd2cfb8, 0xc2c1a8, 0xb3a47e, 0xa3906c, 0xb3a17b, 0xb3a27d, 0x97886a, 0x97886c, 0x99896d, 0x9b8b70, 0x9b8b70, 0x9c8d6f, 0x9f9073, 0xa29374, 0x9f8d6f, 0x9e8d6f, 0x9f8f70, 0x9e8e6e, 0x9f8f6f, 0xa29270, 0xa39371, 0xa79775, 0xab9b79, 0xae9e7d, 0xb0a081, 0xb4a384, 0xb5a487, 0xb4a387, 0xab9b79, 0xad9d7d, 0xb09f7f, 0xad9d7b, 0xab9b79, 0xaa9978, 0xa29373, 0x8d7f65, 0x766b53, 0x736a55, 0x716c5b, 0x817c6d, 0xa29d8c, 0xc7c4b4, 0xcbcdbe, 0xb5b7aa, 0x9fa294, 0x7f8376, 0x575a51, 0x626155, 0xaba38a, 0xc2b995, 0x9b8864, 0xb09e7a, 0xb2a17c, 0xb4a482
};
*/
//Fire
int get_feature_data0(size_t offset, size_t length, float *out_ptr) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features0 + offset, length * sizeof(float));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <_Z17get_feature_data0jjPf+0x2c>)
 800235e:	1899      	adds	r1, r3, r2
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	461a      	mov	r2, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f01d fd36 	bl	801fdd8 <memcpy>
    return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000002c 	.word	0x2000002c

0800237c <_Z6vprintPKcSt9__va_list>:

#include <stdarg.h>
//#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0b4      	sub	sp, #208	; 0xd0
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8002386:	f107 0308 	add.w	r3, r7, #8
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	f01e fa2e 	bl	80207f0 <vsiprintf>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	bfcc      	ite	gt
 800239a:	2301      	movgt	r3, #1
 800239c:	2300      	movle	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <_Z6vprintPKcSt9__va_list+0x44>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fd ff8b 	bl	80002c4 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	f107 0108 	add.w	r1, r7, #8
 80023b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_Z6vprintPKcSt9__va_list+0x4c>)
 80023bc:	f002 fb6d 	bl	8004a9a <HAL_UART_Transmit>
    }
}
 80023c0:	bf00      	nop
 80023c2:	37d0      	adds	r7, #208	; 0xd0
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20002638 	.word	0x20002638

080023cc <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 80023cc:	b40f      	push	{r0, r1, r2, r3}
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	6938      	ldr	r0, [r7, #16]
 80023de:	f7ff ffcd 	bl	800237c <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023ec:	b004      	add	sp, #16
 80023ee:	4770      	bx	lr

080023f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b09a      	sub	sp, #104	; 0x68
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f6:	f001 f9d5 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023fa:	f000 f87d 	bl	80024f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023fe:	f000 f939 	bl	8002674 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002402:	f000 f909 	bl	8002618 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 8002406:	f000 f8ef 	bl	80025e8 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  //Fire
	  	  signal_t signal0;
 800240a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe ffd7 	bl	80013c2 <_ZN2ei11ei_signal_tC1Ev>
	  	  signal0.total_length = sizeof(features0) / sizeof(features0[0]);
 8002414:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002418:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  signal0.get_data = &get_feature_data0;
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <main+0xe8>)
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f9d1 	bl	80027d0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
	  	  ei_impulse_result_t result0 = { 0 };
 800242e:	463b      	mov	r3, r7
 8002430:	2248      	movs	r2, #72	; 0x48
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f01d fcf7 	bl	801fe28 <memset>
	  			EI_IMPULSE_ERROR res0 = run_classifier(&signal0, &result0, false);
 800243a:	4639      	mov	r1, r7
 800243c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002440:	2200      	movs	r2, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fe3e 	bl	80020c4 <run_classifier>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	  			ei_printf("run_classifier returned: %d\n", res0);
 800244e:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8002452:	4619      	mov	r1, r3
 8002454:	4821      	ldr	r0, [pc, #132]	; (80024dc <main+0xec>)
 8002456:	f7ff ffb9 	bl	80023cc <_Z9ei_printfPKcz>
	  			ei_printf("Predictions (Classification: %d ms.):",
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	4619      	mov	r1, r3
 800245e:	4820      	ldr	r0, [pc, #128]	; (80024e0 <main+0xf0>)
 8002460:	f7ff ffb4 	bl	80023cc <_Z9ei_printfPKcz>
	  				result0.timing.classification);

	  			// print the predictions
	  			ei_printf("[");
 8002464:	481f      	ldr	r0, [pc, #124]	; (80024e4 <main+0xf4>)
 8002466:	f7ff ffb1 	bl	80023cc <_Z9ei_printfPKcz>
	  			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800246a:	2300      	movs	r3, #0
 800246c:	667b      	str	r3, [r7, #100]	; 0x64
 800246e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002470:	2b01      	cmp	r3, #1
 8002472:	d814      	bhi.n	800249e <main+0xae>
	  				ei_printf_float(result0.classification[ix].value);
 8002474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3368      	adds	r3, #104	; 0x68
 800247a:	443b      	add	r3, r7
 800247c:	3b64      	subs	r3, #100	; 0x64
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	eeb0 0a67 	vmov.f32	s0, s15
 8002486:	f011 fd13 	bl	8013eb0 <_Z15ei_printf_floatf>
	  		#if EI_CLASSIFIER_HAS_ANOMALY == 1
	  				ei_printf(", ");
	  		#else
	  				if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 800248a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248c:	2b01      	cmp	r3, #1
 800248e:	d002      	beq.n	8002496 <main+0xa6>
	  					ei_printf(", ");
 8002490:	4815      	ldr	r0, [pc, #84]	; (80024e8 <main+0xf8>)
 8002492:	f7ff ff9b 	bl	80023cc <_Z9ei_printfPKcz>
	  			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002498:	3301      	adds	r3, #1
 800249a:	667b      	str	r3, [r7, #100]	; 0x64
 800249c:	e7e7      	b.n	800246e <main+0x7e>
	  		#endif
	  			}
	  		#if EI_CLASSIFIER_HAS_ANOMALY == 1
	  			ei_printf_float(result0.anomaly);
	  		#endif
	  			ei_printf("]\n");
 800249e:	4813      	ldr	r0, [pc, #76]	; (80024ec <main+0xfc>)
 80024a0:	f7ff ff94 	bl	80023cc <_Z9ei_printfPKcz>

	  		if(result0.classification[0].value > result0.classification[1].value)
 80024a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	dd03      	ble.n	80024be <main+0xce>
	  			ei_printf("Fire Detected!\n");
 80024b6:	480e      	ldr	r0, [pc, #56]	; (80024f0 <main+0x100>)
 80024b8:	f7ff ff88 	bl	80023cc <_Z9ei_printfPKcz>
 80024bc:	e002      	b.n	80024c4 <main+0xd4>
	  		else
	  			ei_printf("No Fire!\n");
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <main+0x104>)
 80024c0:	f7ff ff84 	bl	80023cc <_Z9ei_printfPKcz>
	  		HAL_Delay(5000);
 80024c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80024c8:	f001 f9de 	bl	8003888 <HAL_Delay>
	  	  signal_t signal0;
 80024cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ff83 	bl	80013dc <_ZN2ei11ei_signal_tD1Ev>

    /* USER CODE BEGIN 3 */
  }
 80024d6:	e798      	b.n	800240a <main+0x1a>
 80024d8:	0800234d 	.word	0x0800234d
 80024dc:	08021a68 	.word	0x08021a68
 80024e0:	08021a88 	.word	0x08021a88
 80024e4:	08021ab0 	.word	0x08021ab0
 80024e8:	08021ab4 	.word	0x08021ab4
 80024ec:	08021ab8 	.word	0x08021ab8
 80024f0:	08021abc 	.word	0x08021abc
 80024f4:	08021acc 	.word	0x08021acc

080024f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	; 0x50
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	2234      	movs	r2, #52	; 0x34
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f01d fc8e 	bl	801fe28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <_Z18SystemClock_Configv+0xe8>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a2e      	ldr	r2, [pc, #184]	; (80025e0 <_Z18SystemClock_Configv+0xe8>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <_Z18SystemClock_Configv+0xe8>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002538:	2300      	movs	r3, #0
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <_Z18SystemClock_Configv+0xec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002544:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <_Z18SystemClock_Configv+0xec>)
 8002546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <_Z18SystemClock_Configv+0xec>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002558:	2302      	movs	r3, #2
 800255a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255c:	2301      	movs	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002560:	2310      	movs	r3, #16
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002564:	2302      	movs	r3, #2
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002568:	2300      	movs	r3, #0
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800256c:	2310      	movs	r3, #16
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002576:	2304      	movs	r3, #4
 8002578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800257a:	2302      	movs	r3, #2
 800257c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800257e:	2302      	movs	r3, #2
 8002580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002582:	f107 031c 	add.w	r3, r7, #28
 8002586:	4618      	mov	r0, r3
 8002588:	f001 ff9c 	bl	80044c4 <HAL_RCC_OscConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 800259c:	f000 f8d8 	bl	8002750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a0:	230f      	movs	r3, #15
 80025a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a4:	2302      	movs	r3, #2
 80025a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fc37 	bl	8003e30 <HAL_RCC_ClockConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80025d2:	f000 f8bd 	bl	8002750 <Error_Handler>
  }
}
 80025d6:	bf00      	nop
 80025d8:	3750      	adds	r7, #80	; 0x50
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40007000 	.word	0x40007000

080025e8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_ZL11MX_CRC_Initv+0x28>)
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <_ZL11MX_CRC_Initv+0x2c>)
 80025f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <_ZL11MX_CRC_Initv+0x28>)
 80025f4:	f001 fa51 	bl	8003a9a <HAL_CRC_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8002608:	f000 f8a2 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20002630 	.word	0x20002630
 8002614:	40023000 	.word	0x40023000

08002618 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 800261e:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002650:	f002 f9d6 	bl	8004a00 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002664:	f000 f874 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20002638 	.word	0x20002638
 8002670:	40004400 	.word	0x40004400

08002674 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a2c      	ldr	r2, [pc, #176]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a25      	ldr	r2, [pc, #148]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <_ZL12MX_GPIO_Initv+0xd0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2120      	movs	r1, #32
 80026fe:	4812      	ldr	r0, [pc, #72]	; (8002748 <_ZL12MX_GPIO_Initv+0xd4>)
 8002700:	f001 fb7c 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800270a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	480c      	ldr	r0, [pc, #48]	; (800274c <_ZL12MX_GPIO_Initv+0xd8>)
 800271c:	f001 f9da 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002720:	2320      	movs	r3, #32
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4804      	ldr	r0, [pc, #16]	; (8002748 <_ZL12MX_GPIO_Initv+0xd4>)
 8002738:	f001 f9cc 	bl	8003ad4 <HAL_GPIO_Init>

}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020800 	.word	0x40020800

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002758:	e7fe      	b.n	8002758 <Error_Handler+0x8>

0800275a <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800275a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fd00 	bl	8001172 <_ZNKSt14_Function_base8_M_emptyEv>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8002778:	f7fe fd8d 	bl	8001296 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68dc      	ldr	r4, [r3, #12]
 8002780:	68fd      	ldr	r5, [r7, #12]
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f8d6 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800278c:	4606      	mov	r6, r0
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f8d1 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002796:	4680      	mov	r8, r0
 8002798:	463b      	mov	r3, r7
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8d7 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4642      	mov	r2, r8
 80027a4:	4631      	mov	r1, r6
 80027a6:	4628      	mov	r0, r5
 80027a8:	47a0      	blx	r4
 80027aa:	4603      	mov	r3, r0
    }
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027b6 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fcb5 	bl	8001130 <_ZNSt14_Function_baseC1Ev>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f000 f8c2 	bl	8002964 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 80027e0:	4603      	mov	r3, r0
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f8c6 	bl	800297c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f87d 	bl	80028f6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fdd1 	bl	80013a8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002806:	687b      	ldr	r3, [r7, #4]
	}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f000 f8d8 	bl	80029d0 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8002820:	4602      	mov	r2, r0
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f8dd 	bl	80029e8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f85e 	bl	80028f6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fdb2 	bl	80013a8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002844:	687b      	ldr	r3, [r7, #4]
	}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f8f6 	bl	8002a52 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 800287c:	68fc      	ldr	r4, [r7, #12]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f8dc 	bl	8002a3c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ffdf 	bl	800284e <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}

0800289a <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f8ea 	bl	8002a7e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80028aa:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f8ef 	bl	8002a98 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	681c      	ldr	r4, [r3, #0]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f8f7 	bl	8002ab2 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80028c4:	4603      	mov	r3, r0
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	47a0      	blx	r4
	__ptr = pointer();
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
      }
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f8ee 	bl	8002ac8 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f8f7 	bl	8002afa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 0208 	add.w	r2, r3, #8
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	3308      	adds	r3, #8
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 f920 	bl	8002b5e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f103 020c 	add.w	r2, r3, #12
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 f941 	bl	8002bb2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fbd1 	bl	8001130 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f92d 	bl	8002bf0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00f      	beq.n	80029bc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800299c:	687c      	ldr	r4, [r7, #4]
 800299e:	463b      	mov	r3, r7
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f935 	bl	8002c10 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f000 f93b 	bl	8002c26 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80029b4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80029ba:	609a      	str	r2, [r3, #8]
      }
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	08002c4b 	.word	0x08002c4b
 80029cc:	08002c8d 	.word	0x08002c8d

080029d0 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fb9b 	bl	8001130 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80029fa:	463b      	mov	r3, r7
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f964 	bl	8002cca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00f      	beq.n	8002a28 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002a08:	687c      	ldr	r4, [r7, #4]
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f967 	bl	8002ce0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4620      	mov	r0, r4
 8002a18:	f000 f96d 	bl	8002cf6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8002a20:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8002a26:	609a      	str	r2, [r3, #8]
      }
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08002d1b 	.word	0x08002d1b
 8002a38:	08002d5d 	.word	0x08002d5d

08002a3c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8002a52:	b590      	push	{r4, r7, lr}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8002a5e:	68fc      	ldr	r4, [r7, #12]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f99a 	bl	8002d9a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 f99e 	bl	8002db0 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}

08002a7e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f9aa 	bl	8002de2 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f9aa 	bl	8002dfc <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f99f 	bl	8002e16 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffed 	bl	8002ae4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b14:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	f7ff ffe3 	bl	8002ae4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b26:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ffd8 	bl	8002ae4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002b34:	4602      	mov	r2, r0
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ffed 	bl	8002b48 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002b74:	6838      	ldr	r0, [r7, #0]
 8002b76:	f7ff ffe7 	bl	8002b48 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffde 	bl	8002b48 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	601a      	str	r2, [r3, #0]
    }
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ffed 	bl	8002b9c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002bc8:	6838      	ldr	r0, [r7, #0]
 8002bca:	f7ff ffe7 	bl	8002b9c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ffde 	bl	8002b9c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8002be0:	4603      	mov	r3, r0
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	601a      	str	r2, [r3, #0]
    }
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002c26:	b590      	push	{r4, r7, lr}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002c30:	6838      	ldr	r0, [r7, #0]
 8002c32:	f7ff ffed 	bl	8002c10 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f90b 	bl	8002e58 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}

08002c4a <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f916 	bl	8002e8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	68b8      	ldr	r0, [r7, #8]
 8002c62:	f7ff fe69 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002c66:	4605      	mov	r5, r0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fe65 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002c6e:	4606      	mov	r6, r0
 8002c70:	6838      	ldr	r0, [r7, #0]
 8002c72:	f7ff fe6c 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4632      	mov	r2, r6
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f000 f915 	bl	8002eac <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8002c82:	4603      	mov	r3, r0
      }
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c8c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d109      	bne.n	8002cb4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f928 	bl	8002ef6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	68b8      	ldr	r0, [r7, #8]
 8002caa:	f000 f8ee 	bl	8002e8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6023      	str	r3, [r4, #0]
	    break;
 8002cb2:	e005      	b.n	8002cc0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f927 	bl	8002f0e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8002cc0:	2300      	movs	r3, #0
      }
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f7ff ffed 	bl	8002ce0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4622      	mov	r2, r4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f929 	bl	8002f64 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}

08002d1a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f934 	bl	8002f96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f7ff fe01 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002d36:	4605      	mov	r5, r0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fdfd 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002d3e:	4606      	mov	r6, r0
 8002d40:	6838      	ldr	r0, [r7, #0]
 8002d42:	f7ff fe04 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4632      	mov	r2, r6
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f000 f933 	bl	8002fb8 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8002d52:	4603      	mov	r3, r0
      }
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d109      	bne.n	8002d84 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f946 	bl	8003002 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8002d76:	4604      	mov	r4, r0
 8002d78:	68b8      	ldr	r0, [r7, #8]
 8002d7a:	f000 f90c 	bl	8002f96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6023      	str	r3, [r4, #0]
	    break;
 8002d82:	e005      	b.n	8002d90 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f945 	bl	800301a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8002d90:	2300      	movs	r3, #0
      }
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}

08002d9a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8002dbc:	68fc      	ldr	r4, [r7, #12]
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f000 f956 	bl	8003070 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffe7 	bl	8002d9a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 f957 	bl	8003086 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bdb0      	pop	{r4, r5, r7, pc}

08002de2 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f968 	bl	80030c2 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f967 	bl	80030da <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f967 	bl	80030f4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d201      	bcs.n	8002e4a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	e000      	b.n	8002e4c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002e4a:	687b      	ldr	r3, [r7, #4]
    }
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002e64:	68b8      	ldr	r0, [r7, #8]
 8002e66:	f7ff fed3 	bl	8002c10 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	681c      	ldr	r4, [r3, #0]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7fe f948 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4619      	mov	r1, r3
 8002e78:	2004      	movs	r0, #4
 8002e7a:	f7fe f937 	bl	80010ec <_ZnwjPv>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	601c      	str	r4, [r3, #0]
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f93a 	bl	800310c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8002e98:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f942 	bl	8003124 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	bf00      	nop
	}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f93c 	bl	800313a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	68b8      	ldr	r0, [r7, #8]
 8002ec6:	f7ff fd37 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002eca:	4605      	mov	r5, r0
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fd33 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	6838      	ldr	r0, [r7, #0]
 8002ed6:	f7ff fd3a 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002eda:	4603      	mov	r3, r0
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	4633      	mov	r3, r6
 8002ee0:	462a      	mov	r2, r5
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	f000 f933 	bl	8003150 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8002eea:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ef6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f900 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002f0e:	b5b0      	push	{r4, r5, r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d016      	beq.n	8002f50 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	dc19      	bgt.n	8002f5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d002      	beq.n	8002f30 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d00a      	beq.n	8002f44 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8002f2e:	e014      	b.n	8002f5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff ffe0 	bl	8002ef6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8002f36:	4604      	mov	r4, r0
 8002f38:	68b8      	ldr	r0, [r7, #8]
 8002f3a:	f7ff ffa6 	bl	8002e8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6023      	str	r3, [r4, #0]
	      break;
 8002f42:	e00a      	b.n	8002f5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002f44:	462a      	mov	r2, r5
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f925 	bl	8003198 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8002f4e:	e004      	b.n	8002f5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002f50:	4621      	mov	r1, r4
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f939 	bl	80031ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002f58:	bf00      	nop
	  return false;
 8002f5a:	2300      	movs	r3, #0
	}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bdb0      	pop	{r4, r5, r7, pc}

08002f64 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002f70:	68b8      	ldr	r0, [r7, #8]
 8002f72:	f7ff feb5 	bl	8002ce0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8002f76:	4604      	mov	r4, r0
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7fe f8c3 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4619      	mov	r1, r3
 8002f82:	2004      	movs	r0, #4
 8002f84:	f7fe f8b2 	bl	80010ec <_ZnwjPv>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd90      	pop	{r4, r7, pc}

08002f96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f91f 	bl	80031e2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8002fa4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f927 	bl	80031fa <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8002fac:	4603      	mov	r3, r0
 8002fae:	bf00      	nop
	}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f921 	bl	8003210 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8002fce:	4604      	mov	r4, r0
 8002fd0:	68b8      	ldr	r0, [r7, #8]
 8002fd2:	f7ff fcb1 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fcad 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002fde:	4606      	mov	r6, r0
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f7ff fcb4 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4633      	mov	r3, r6
 8002fec:	462a      	mov	r2, r5
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	f000 f918 	bl	8003226 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8002ff6:	4603      	mov	r3, r0
    }
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003002 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe f87a 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8003010:	4603      	mov	r3, r0
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800301a:	b5b0      	push	{r4, r5, r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	4613      	mov	r3, r2
 8003026:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d016      	beq.n	800305c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 800302e:	2b03      	cmp	r3, #3
 8003030:	dc19      	bgt.n	8003066 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8003036:	2b02      	cmp	r3, #2
 8003038:	d00a      	beq.n	8003050 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 800303a:	e014      	b.n	8003066 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ffe0 	bl	8003002 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8003042:	4604      	mov	r4, r0
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7ff ffa6 	bl	8002f96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800304a:	4603      	mov	r3, r0
 800304c:	6023      	str	r3, [r4, #0]
	      break;
 800304e:	e00a      	b.n	8003066 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003050:	462a      	mov	r2, r5
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f90a 	bl	800326e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 800305a:	e004      	b.n	8003066 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800305c:	4621      	mov	r1, r4
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f91e 	bl	80032a0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003064:	bf00      	nop
	  return false;
 8003066:	2300      	movs	r3, #0
	}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}

08003070 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8003086:	b590      	push	{r4, r7, lr}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8003092:	68fc      	ldr	r4, [r7, #12]
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fe80 	bl	8002d9a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800309a:	4603      	mov	r3, r0
 800309c:	4619      	mov	r1, r3
 800309e:	4620      	mov	r0, r4
 80030a0:	f000 f90a 	bl	80032b8 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1d1c      	adds	r4, r3, #4
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f7ff ffe1 	bl	8003070 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4619      	mov	r1, r3
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 f913 	bl	80032de <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}

080030c2 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f918 	bl	8003300 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f919 	bl	800331c <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f919 	bl	8003334 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8003102:	4603      	mov	r3, r0
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fe f800 	bl	800111a <_ZNKSt9_Any_data9_M_accessEv>
 800311a:	4603      	mov	r3, r0
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	7338      	strb	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800315e:	68b8      	ldr	r0, [r7, #8]
 8003160:	f7ff ffeb 	bl	800313a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003164:	4603      	mov	r3, r0
 8003166:	681c      	ldr	r4, [r3, #0]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff fbe5 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800316e:	4603      	mov	r3, r0
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f7ff fbe0 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003178:	4603      	mov	r3, r0
 800317a:	681e      	ldr	r6, [r3, #0]
 800317c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800317e:	f7ff fbe6 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003182:	4603      	mov	r3, r0
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4631      	mov	r1, r6
 800318a:	4628      	mov	r0, r5
 800318c:	47a0      	blx	r4
 800318e:	4603      	mov	r3, r0
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003198 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80031a4:	68b8      	ldr	r0, [r7, #8]
 80031a6:	f7ff ffb1 	bl	800310c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80031aa:	4603      	mov	r3, r0
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7fd ffa8 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4619      	mov	r1, r3
 80031b8:	2004      	movs	r0, #4
 80031ba:	f7fd ff97 	bl	80010ec <_ZnwjPv>
 80031be:	4603      	mov	r3, r0
 80031c0:	601c      	str	r4, [r3, #0]
	}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}

080031ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8cf 	bl	8003378 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fd ff95 	bl	800111a <_ZNKSt9_Any_data9_M_accessEv>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	7338      	strb	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003234:	68b8      	ldr	r0, [r7, #8]
 8003236:	f7ff ffeb 	bl	8003210 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800323a:	4606      	mov	r6, r0
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fb7b 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003242:	4603      	mov	r3, r0
 8003244:	681c      	ldr	r4, [r3, #0]
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	f7ff fb76 	bl	8002938 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800324c:	4603      	mov	r3, r0
 800324e:	681d      	ldr	r5, [r3, #0]
 8003250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003252:	f7ff fb7c 	bl	800294e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003256:	4603      	mov	r3, r0
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	462a      	mov	r2, r5
 800325c:	4621      	mov	r1, r4
 800325e:	4630      	mov	r0, r6
 8003260:	f7fe fb12 	bl	8001888 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8003264:	4603      	mov	r3, r0
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800326e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800326e:	b590      	push	{r4, r7, lr}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800327a:	68b8      	ldr	r0, [r7, #8]
 800327c:	f7ff ffb1 	bl	80031e2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8003280:	4604      	mov	r4, r0
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7fd ff3e 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8003288:	4603      	mov	r3, r0
 800328a:	4619      	mov	r1, r3
 800328c:	2004      	movs	r0, #4
 800328e:	f7fd ff2d 	bl	80010ec <_ZnwjPv>
 8003292:	4602      	mov	r2, r0
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	6013      	str	r3, [r2, #0]
	}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}

080032a0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f870 	bl	8003390 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80032c2:	687c      	ldr	r4, [r7, #4]
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f7ff fd68 	bl	8002d9a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4619      	mov	r1, r3
 80032ce:	4620      	mov	r0, r4
 80032d0:	f000 f86a 	bl	80033a8 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd90      	pop	{r4, r7, pc}

080032de <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80032e8:	6838      	ldr	r0, [r7, #0]
 80032ea:	f7ff fec1 	bl	8003070 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80032ee:	4603      	mov	r3, r0
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f85c 	bl	80033ca <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8003312:	4603      	mov	r3, r0
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f85b 	bl	80033e0 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800332a:	4603      	mov	r3, r0
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f85a 	bl	80033fa <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8003346:	4603      	mov	r3, r0
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d201      	bcs.n	800336a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	e000      	b.n	800336c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800336a:	687b      	ldr	r3, [r7, #4]
    }
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7fd febf 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8003386:	4603      	mov	r3, r0
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd feb3 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f7ff fcf1 	bl	8002d9a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80033b8:	4603      	mov	r3, r0
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f810 	bl	8003410 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_MspInit+0x4c>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_MspInit+0x4c>)
 8003438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_MspInit+0x4c>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_MspInit+0x4c>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a08      	ldr	r2, [pc, #32]	; (8003474 <HAL_MspInit+0x4c>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_MspInit+0x4c>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003466:	2007      	movs	r0, #7
 8003468:	f000 fae4 	bl	8003a34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_CRC_MspInit+0x3c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10d      	bne.n	80034a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_CRC_MspInit+0x40>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_CRC_MspInit+0x40>)
 8003494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_CRC_MspInit+0x40>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023000 	.word	0x40023000
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_UART_MspInit+0x84>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d12b      	bne.n	8003536 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_UART_MspInit+0x88>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_UART_MspInit+0x88>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_UART_MspInit+0x88>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_UART_MspInit+0x88>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_UART_MspInit+0x88>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_UART_MspInit+0x88>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003516:	230c      	movs	r3, #12
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003526:	2307      	movs	r3, #7
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <HAL_UART_MspInit+0x8c>)
 8003532:	f000 facf 	bl	8003ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40004400 	.word	0x40004400
 8003544:	40023800 	.word	0x40023800
 8003548:	40020000 	.word	0x40020000

0800354c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <NMI_Handler+0x4>

08003552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003556:	e7fe      	b.n	8003556 <HardFault_Handler+0x4>

08003558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800355c:	e7fe      	b.n	800355c <MemManage_Handler+0x4>

0800355e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003562:	e7fe      	b.n	8003562 <BusFault_Handler+0x4>

08003564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003568:	e7fe      	b.n	8003568 <UsageFault_Handler+0x4>

0800356a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003598:	f000 f956 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
	return 1;
 80035a4:	2301      	movs	r3, #1
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_kill>:

int _kill(int pid, int sig)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035ba:	f01c fbbd 	bl	801fd38 <__errno>
 80035be:	4603      	mov	r3, r0
 80035c0:	2216      	movs	r2, #22
 80035c2:	601a      	str	r2, [r3, #0]
	return -1;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_exit>:

void _exit (int status)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffe7 	bl	80035b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035e2:	e7fe      	b.n	80035e2 <_exit+0x12>

080035e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e00a      	b.n	800360c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035f6:	f3af 8000 	nop.w
 80035fa:	4601      	mov	r1, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	60ba      	str	r2, [r7, #8]
 8003602:	b2ca      	uxtb	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	dbf0      	blt.n	80035f6 <_read+0x12>
	}

return len;
 8003614:	687b      	ldr	r3, [r7, #4]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e009      	b.n	8003644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	60ba      	str	r2, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf1      	blt.n	8003630 <_write+0x12>
	}
	return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_close>:

int _close(int file)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	return -1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800367e:	605a      	str	r2, [r3, #4]
	return 0;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_isatty>:

int _isatty(int file)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	return 1;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
	return 0;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <_sbrk+0x5c>)
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <_sbrk+0x60>)
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <_sbrk+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <_sbrk+0x64>)
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <_sbrk+0x68>)
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f0:	f01c fb22 	bl	801fd38 <__errno>
 80036f4:	4603      	mov	r3, r0
 80036f6:	220c      	movs	r2, #12
 80036f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	e009      	b.n	8003714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <_sbrk+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <_sbrk+0x64>)
 8003710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20020000 	.word	0x20020000
 8003720:	00000400 	.word	0x00000400
 8003724:	2000267c 	.word	0x2000267c
 8003728:	20002d48 	.word	0x20002d48

0800372c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <SystemInit+0x20>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <SystemInit+0x20>)
 8003738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800373c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003758:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800375c:	e002      	b.n	8003764 <LoopCopyDataInit>

0800375e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003762:	3304      	adds	r3, #4

08003764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003768:	d3f9      	bcc.n	800375e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800376c:	4c0b      	ldr	r4, [pc, #44]	; (800379c <LoopFillZerobss+0x26>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003770:	e001      	b.n	8003776 <LoopFillZerobss>

08003772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003774:	3204      	adds	r2, #4

08003776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003778:	d3fb      	bcc.n	8003772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800377a:	f7ff ffd7 	bl	800372c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f01c faf3 	bl	801fd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7fe fe35 	bl	80023f0 <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800378c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003790:	20002610 	.word	0x20002610
  ldr r2, =_sidata
 8003794:	0802654c 	.word	0x0802654c
  ldr r2, =_sbss
 8003798:	20002610 	.word	0x20002610
  ldr r4, =_ebss
 800379c:	20002d44 	.word	0x20002d44

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 f931 	bl	8003a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fe26 	bl	8003428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f93b 	bl	8003a82 <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f000 f911 	bl	8003a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000242c 	.word	0x2000242c
 8003840:	20002434 	.word	0x20002434
 8003844:	20002430 	.word	0x20002430

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20002434 	.word	0x20002434
 800386c:	20002680 	.word	0x20002680

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20002680 	.word	0x20002680

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20002434 	.word	0x20002434

080038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db0a      	blt.n	800395e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	490c      	ldr	r1, [pc, #48]	; (8003980 <__NVIC_SetPriority+0x4c>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	0112      	lsls	r2, r2, #4
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	440b      	add	r3, r1
 8003958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800395c:	e00a      	b.n	8003974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <__NVIC_SetPriority+0x50>)
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	3b04      	subs	r3, #4
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	440b      	add	r3, r1
 8003972:	761a      	strb	r2, [r3, #24]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000e100 	.word	0xe000e100
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f1c3 0307 	rsb	r3, r3, #7
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	bf28      	it	cs
 80039a6:	2304      	movcs	r3, #4
 80039a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d902      	bls.n	80039b8 <NVIC_EncodePriority+0x30>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3b03      	subs	r3, #3
 80039b6:	e000      	b.n	80039ba <NVIC_EncodePriority+0x32>
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	401a      	ands	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d0:	f04f 31ff 	mov.w	r1, #4294967295
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43d9      	mvns	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	4313      	orrs	r3, r2
         );
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a00:	d301      	bcc.n	8003a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00f      	b.n	8003a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <SysTick_Config+0x40>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a0e:	210f      	movs	r1, #15
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	f7ff ff8e 	bl	8003934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <SysTick_Config+0x40>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <SysTick_Config+0x40>)
 8003a20:	2207      	movs	r2, #7
 8003a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	e000e010 	.word	0xe000e010

08003a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff47 	bl	80038d0 <__NVIC_SetPriorityGrouping>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	4603      	mov	r3, r0
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff ff5c 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ff8e 	bl	8003988 <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff5d 	bl	8003934 <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ffb0 	bl	80039f0 <SysTick_Config>
 8003a90:	4603      	mov	r3, r0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e00e      	b.n	8003aca <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	795b      	ldrb	r3, [r3, #5]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fcdb 	bl	8003478 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	; 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	e165      	b.n	8003dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af0:	2201      	movs	r2, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	f040 8154 	bne.w	8003db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d005      	beq.n	8003b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d130      	bne.n	8003b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 0201 	and.w	r2, r3, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d017      	beq.n	8003bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d123      	bne.n	8003c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	08da      	lsrs	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3208      	adds	r2, #8
 8003bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	220f      	movs	r2, #15
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	08da      	lsrs	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3208      	adds	r2, #8
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80ae 	beq.w	8003db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_GPIO_Init+0x300>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a5c      	ldr	r2, [pc, #368]	; (8003dd4 <HAL_GPIO_Init+0x300>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <HAL_GPIO_Init+0x300>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c76:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_GPIO_Init+0x304>)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	220f      	movs	r2, #15
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4f      	ldr	r2, [pc, #316]	; (8003ddc <HAL_GPIO_Init+0x308>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d025      	beq.n	8003cee <HAL_GPIO_Init+0x21a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4e      	ldr	r2, [pc, #312]	; (8003de0 <HAL_GPIO_Init+0x30c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01f      	beq.n	8003cea <HAL_GPIO_Init+0x216>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4d      	ldr	r2, [pc, #308]	; (8003de4 <HAL_GPIO_Init+0x310>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d019      	beq.n	8003ce6 <HAL_GPIO_Init+0x212>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4c      	ldr	r2, [pc, #304]	; (8003de8 <HAL_GPIO_Init+0x314>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0x20e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4b      	ldr	r2, [pc, #300]	; (8003dec <HAL_GPIO_Init+0x318>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00d      	beq.n	8003cde <HAL_GPIO_Init+0x20a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_GPIO_Init+0x31c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <HAL_GPIO_Init+0x206>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a49      	ldr	r2, [pc, #292]	; (8003df4 <HAL_GPIO_Init+0x320>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_GPIO_Init+0x202>
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	e00c      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e00a      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003cda:	2305      	movs	r3, #5
 8003cdc:	e008      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e004      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x21c>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f002 0203 	and.w	r2, r2, #3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4093      	lsls	r3, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d00:	4935      	ldr	r1, [pc, #212]	; (8003dd8 <HAL_GPIO_Init+0x304>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0e:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d32:	4a31      	ldr	r2, [pc, #196]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d38:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_GPIO_Init+0x324>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	f67f ae96 	bls.w	8003af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40013800 	.word	0x40013800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	40020800 	.word	0x40020800
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40021400 	.word	0x40021400
 8003df4:	40021800 	.word	0x40021800
 8003df8:	40013c00 	.word	0x40013c00

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e18:	e003      	b.n	8003e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0cc      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b68      	ldr	r3, [pc, #416]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d90c      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b63      	ldr	r3, [pc, #396]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0b8      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e84:	4b59      	ldr	r3, [pc, #356]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a58      	ldr	r2, [pc, #352]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e9c:	4b53      	ldr	r3, [pc, #332]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea8:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	494d      	ldr	r1, [pc, #308]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d044      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d119      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07f      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06f      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e067      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0e:	4b37      	ldr	r3, [pc, #220]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 0203 	bic.w	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4934      	ldr	r1, [pc, #208]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f20:	f7ff fca6 	bl	8003870 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7ff fca2 	bl	8003870 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e04f      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 020c 	and.w	r2, r3, #12
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1eb      	bne.n	8003f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d20c      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e032      	b.n	8003fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4916      	ldr	r1, [pc, #88]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	490e      	ldr	r1, [pc, #56]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fb6:	f000 f855 	bl	8004064 <HAL_RCC_GetSysClockFreq>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	490a      	ldr	r1, [pc, #40]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	5ccb      	ldrb	r3, [r1, r3]
 8003fca:	fa22 f303 	lsr.w	r3, r2, r3
 8003fce:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fc06 	bl	80037e8 <HAL_InitTick>

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023c00 	.word	0x40023c00
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	0802349c 	.word	0x0802349c
 8003ff4:	2000242c 	.word	0x2000242c
 8003ff8:	20002430 	.word	0x20002430

08003ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <HAL_RCC_GetHCLKFreq+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	2000242c 	.word	0x2000242c

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004018:	f7ff fff0 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0a9b      	lsrs	r3, r3, #10
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40023800 	.word	0x40023800
 8004038:	080234ac 	.word	0x080234ac

0800403c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004040:	f7ff ffdc 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	0b5b      	lsrs	r3, r3, #13
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4903      	ldr	r1, [pc, #12]	; (8004060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	080234ac 	.word	0x080234ac

08004064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004068:	b0ae      	sub	sp, #184	; 0xb8
 800406a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408a:	4bcb      	ldr	r3, [pc, #812]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b0c      	cmp	r3, #12
 8004094:	f200 8206 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x440>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080044a5 	.word	0x080044a5
 80040a8:	080044a5 	.word	0x080044a5
 80040ac:	080044a5 	.word	0x080044a5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080044a5 	.word	0x080044a5
 80040b8:	080044a5 	.word	0x080044a5
 80040bc:	080044a5 	.word	0x080044a5
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080044a5 	.word	0x080044a5
 80040c8:	080044a5 	.word	0x080044a5
 80040cc:	080044a5 	.word	0x080044a5
 80040d0:	080042d5 	.word	0x080042d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4bb9      	ldr	r3, [pc, #740]	; (80043bc <HAL_RCC_GetSysClockFreq+0x358>)
 80040d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80040da:	e1e7      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040dc:	4bb8      	ldr	r3, [pc, #736]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040e2:	e1e3      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e4:	4bb4      	ldr	r3, [pc, #720]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f0:	4bb1      	ldr	r3, [pc, #708]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d071      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fc:	4bae      	ldr	r3, [pc, #696]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004108:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800410c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800411e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004122:	4622      	mov	r2, r4
 8004124:	462b      	mov	r3, r5
 8004126:	f04f 0000 	mov.w	r0, #0
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	0159      	lsls	r1, r3, #5
 8004130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004134:	0150      	lsls	r0, r2, #5
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4621      	mov	r1, r4
 800413c:	1a51      	subs	r1, r2, r1
 800413e:	6439      	str	r1, [r7, #64]	; 0x40
 8004140:	4629      	mov	r1, r5
 8004142:	eb63 0301 	sbc.w	r3, r3, r1
 8004146:	647b      	str	r3, [r7, #68]	; 0x44
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004154:	4649      	mov	r1, r9
 8004156:	018b      	lsls	r3, r1, #6
 8004158:	4641      	mov	r1, r8
 800415a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800415e:	4641      	mov	r1, r8
 8004160:	018a      	lsls	r2, r1, #6
 8004162:	4641      	mov	r1, r8
 8004164:	1a51      	subs	r1, r2, r1
 8004166:	63b9      	str	r1, [r7, #56]	; 0x38
 8004168:	4649      	mov	r1, r9
 800416a:	eb63 0301 	sbc.w	r3, r3, r1
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800417c:	4649      	mov	r1, r9
 800417e:	00cb      	lsls	r3, r1, #3
 8004180:	4641      	mov	r1, r8
 8004182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004186:	4641      	mov	r1, r8
 8004188:	00ca      	lsls	r2, r1, #3
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	4603      	mov	r3, r0
 8004190:	4622      	mov	r2, r4
 8004192:	189b      	adds	r3, r3, r2
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
 8004196:	462b      	mov	r3, r5
 8004198:	460a      	mov	r2, r1
 800419a:	eb42 0303 	adc.w	r3, r2, r3
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ac:	4629      	mov	r1, r5
 80041ae:	024b      	lsls	r3, r1, #9
 80041b0:	4621      	mov	r1, r4
 80041b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041b6:	4621      	mov	r1, r4
 80041b8:	024a      	lsls	r2, r1, #9
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041d0:	f7fc fdd4 	bl	8000d7c <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041de:	e067      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e0:	4b75      	ldr	r3, [pc, #468]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80041f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041fa:	2300      	movs	r3, #0
 80041fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004202:	4622      	mov	r2, r4
 8004204:	462b      	mov	r3, r5
 8004206:	f04f 0000 	mov.w	r0, #0
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	0159      	lsls	r1, r3, #5
 8004210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004214:	0150      	lsls	r0, r2, #5
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4621      	mov	r1, r4
 800421c:	1a51      	subs	r1, r2, r1
 800421e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004220:	4629      	mov	r1, r5
 8004222:	eb63 0301 	sbc.w	r3, r3, r1
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004234:	4649      	mov	r1, r9
 8004236:	018b      	lsls	r3, r1, #6
 8004238:	4641      	mov	r1, r8
 800423a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800423e:	4641      	mov	r1, r8
 8004240:	018a      	lsls	r2, r1, #6
 8004242:	4641      	mov	r1, r8
 8004244:	ebb2 0a01 	subs.w	sl, r2, r1
 8004248:	4649      	mov	r1, r9
 800424a:	eb63 0b01 	sbc.w	fp, r3, r1
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800425a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800425e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004262:	4692      	mov	sl, r2
 8004264:	469b      	mov	fp, r3
 8004266:	4623      	mov	r3, r4
 8004268:	eb1a 0303 	adds.w	r3, sl, r3
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	462b      	mov	r3, r5
 8004270:	eb4b 0303 	adc.w	r3, fp, r3
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004282:	4629      	mov	r1, r5
 8004284:	028b      	lsls	r3, r1, #10
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800428c:	4621      	mov	r1, r4
 800428e:	028a      	lsls	r2, r1, #10
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004298:	2200      	movs	r2, #0
 800429a:	673b      	str	r3, [r7, #112]	; 0x70
 800429c:	677a      	str	r2, [r7, #116]	; 0x74
 800429e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042a2:	f7fc fd6b 	bl	8000d7c <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4613      	mov	r3, r2
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b0:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042d2:	e0eb      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e0:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d06b      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	2200      	movs	r2, #0
 80042f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004300:	2300      	movs	r3, #0
 8004302:	667b      	str	r3, [r7, #100]	; 0x64
 8004304:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004308:	4622      	mov	r2, r4
 800430a:	462b      	mov	r3, r5
 800430c:	f04f 0000 	mov.w	r0, #0
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	0159      	lsls	r1, r3, #5
 8004316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431a:	0150      	lsls	r0, r2, #5
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4621      	mov	r1, r4
 8004322:	1a51      	subs	r1, r2, r1
 8004324:	61b9      	str	r1, [r7, #24]
 8004326:	4629      	mov	r1, r5
 8004328:	eb63 0301 	sbc.w	r3, r3, r1
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800433a:	4659      	mov	r1, fp
 800433c:	018b      	lsls	r3, r1, #6
 800433e:	4651      	mov	r1, sl
 8004340:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004344:	4651      	mov	r1, sl
 8004346:	018a      	lsls	r2, r1, #6
 8004348:	4651      	mov	r1, sl
 800434a:	ebb2 0801 	subs.w	r8, r2, r1
 800434e:	4659      	mov	r1, fp
 8004350:	eb63 0901 	sbc.w	r9, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004360:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004364:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004368:	4690      	mov	r8, r2
 800436a:	4699      	mov	r9, r3
 800436c:	4623      	mov	r3, r4
 800436e:	eb18 0303 	adds.w	r3, r8, r3
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004388:	4629      	mov	r1, r5
 800438a:	024b      	lsls	r3, r1, #9
 800438c:	4621      	mov	r1, r4
 800438e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004392:	4621      	mov	r1, r4
 8004394:	024a      	lsls	r2, r1, #9
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800439e:	2200      	movs	r2, #0
 80043a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043a8:	f7fc fce8 	bl	8000d7c <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b6:	e065      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x420>
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_GetSysClockFreq+0x458>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	099b      	lsrs	r3, r3, #6
 80043ca:	2200      	movs	r2, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	4611      	mov	r1, r2
 80043d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043d4:	653b      	str	r3, [r7, #80]	; 0x50
 80043d6:	2300      	movs	r3, #0
 80043d8:	657b      	str	r3, [r7, #84]	; 0x54
 80043da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80043de:	4642      	mov	r2, r8
 80043e0:	464b      	mov	r3, r9
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	0159      	lsls	r1, r3, #5
 80043ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f0:	0150      	lsls	r0, r2, #5
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4641      	mov	r1, r8
 80043f8:	1a51      	subs	r1, r2, r1
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	4649      	mov	r1, r9
 80043fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004410:	4659      	mov	r1, fp
 8004412:	018b      	lsls	r3, r1, #6
 8004414:	4651      	mov	r1, sl
 8004416:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800441a:	4651      	mov	r1, sl
 800441c:	018a      	lsls	r2, r1, #6
 800441e:	4651      	mov	r1, sl
 8004420:	1a54      	subs	r4, r2, r1
 8004422:	4659      	mov	r1, fp
 8004424:	eb63 0501 	sbc.w	r5, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	00eb      	lsls	r3, r5, #3
 8004432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004436:	00e2      	lsls	r2, r4, #3
 8004438:	4614      	mov	r4, r2
 800443a:	461d      	mov	r5, r3
 800443c:	4643      	mov	r3, r8
 800443e:	18e3      	adds	r3, r4, r3
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	464b      	mov	r3, r9
 8004444:	eb45 0303 	adc.w	r3, r5, r3
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004456:	4629      	mov	r1, r5
 8004458:	028b      	lsls	r3, r1, #10
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004460:	4621      	mov	r1, r4
 8004462:	028a      	lsls	r2, r1, #10
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800446c:	2200      	movs	r2, #0
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004470:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004472:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004476:	f7fc fc81 	bl	8000d7c <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4613      	mov	r3, r2
 8004480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCC_GetSysClockFreq+0x458>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0f1b      	lsrs	r3, r3, #28
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044a2:	e003      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	37b8      	adds	r7, #184	; 0xb8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	00f42400 	.word	0x00f42400

080044c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e28d      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8083 	beq.w	80045ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044e4:	4b94      	ldr	r3, [pc, #592]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d019      	beq.n	8004524 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044f0:	4b91      	ldr	r3, [pc, #580]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044fc:	4b8e      	ldr	r3, [pc, #568]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004508:	d00c      	beq.n	8004524 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b8b      	ldr	r3, [pc, #556]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d112      	bne.n	800453c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004516:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004522:	d10b      	bne.n	800453c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	4b84      	ldr	r3, [pc, #528]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d05b      	beq.n	80045e8 <HAL_RCC_OscConfig+0x124>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d157      	bne.n	80045e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e25a      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x90>
 8004546:	4b7c      	ldr	r3, [pc, #496]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a7b      	ldr	r2, [pc, #492]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e01d      	b.n	8004590 <HAL_RCC_OscConfig+0xcc>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0xb4>
 800455e:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4b73      	ldr	r3, [pc, #460]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a72      	ldr	r2, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0xcc>
 8004578:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6b      	ldr	r2, [pc, #428]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7ff f96a 	bl	8003870 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a0:	f7ff f966 	bl	8003870 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e21f      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	4b61      	ldr	r3, [pc, #388]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0xdc>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7ff f956 	bl	8003870 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c8:	f7ff f952 	bl	8003870 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e20b      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x104>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d06f      	beq.n	80046d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045f6:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004602:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800460a:	2b08      	cmp	r3, #8
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800460e:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d11c      	bne.n	8004660 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_RCC_OscConfig+0x186>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e1d3      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4937      	ldr	r1, [pc, #220]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	e03a      	b.n	80046d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <HAL_RCC_OscConfig+0x278>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7ff f8ff 	bl	8003870 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004676:	f7ff f8fb 	bl	8003870 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1b4      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b28      	ldr	r3, [pc, #160]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4925      	ldr	r1, [pc, #148]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	e015      	b.n	80046d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCC_OscConfig+0x278>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7ff f8de 	bl	8003870 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b8:	f7ff f8da 	bl	8003870 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e193      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d036      	beq.n	8004750 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_RCC_OscConfig+0x27c>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7ff f8be 	bl	8003870 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f8:	f7ff f8ba 	bl	8003870 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e173      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_OscConfig+0x274>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x234>
 8004716:	e01b      	b.n	8004750 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_RCC_OscConfig+0x27c>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471e:	f7ff f8a7 	bl	8003870 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	e00e      	b.n	8004744 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004726:	f7ff f8a3 	bl	8003870 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d907      	bls.n	8004744 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e15c      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
 8004738:	40023800 	.word	0x40023800
 800473c:	42470000 	.word	0x42470000
 8004740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b8a      	ldr	r3, [pc, #552]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ea      	bne.n	8004726 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8097 	beq.w	800488c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b83      	ldr	r3, [pc, #524]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b7f      	ldr	r3, [pc, #508]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	4a7e      	ldr	r2, [pc, #504]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	; 0x40
 800477e:	4b7c      	ldr	r3, [pc, #496]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b79      	ldr	r3, [pc, #484]	; (8004974 <HAL_RCC_OscConfig+0x4b0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479a:	4b76      	ldr	r3, [pc, #472]	; (8004974 <HAL_RCC_OscConfig+0x4b0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a75      	ldr	r2, [pc, #468]	; (8004974 <HAL_RCC_OscConfig+0x4b0>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7ff f863 	bl	8003870 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7ff f85f 	bl	8003870 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e118      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b6c      	ldr	r3, [pc, #432]	; (8004974 <HAL_RCC_OscConfig+0x4b0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x31e>
 80047d4:	4b66      	ldr	r3, [pc, #408]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	e01c      	b.n	800481c <HAL_RCC_OscConfig+0x358>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x340>
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	4a60      	ldr	r2, [pc, #384]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	6713      	str	r3, [r2, #112]	; 0x70
 80047f6:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a5d      	ldr	r2, [pc, #372]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0x358>
 8004804:	4b5a      	ldr	r3, [pc, #360]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a59      	ldr	r2, [pc, #356]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	4b57      	ldr	r3, [pc, #348]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a56      	ldr	r2, [pc, #344]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004816:	f023 0304 	bic.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7ff f824 	bl	8003870 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7ff f820 	bl	8003870 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0d7      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0ee      	beq.n	800482c <HAL_RCC_OscConfig+0x368>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7ff f80e 	bl	8003870 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7ff f80a 	bl	8003870 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0c1      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	4b40      	ldr	r3, [pc, #256]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ee      	bne.n	8004858 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80ad 	beq.w	80049f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004896:	4b36      	ldr	r3, [pc, #216]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d060      	beq.n	8004964 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d145      	bne.n	8004936 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b33      	ldr	r3, [pc, #204]	; (8004978 <HAL_RCC_OscConfig+0x4b4>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fe ffde 	bl	8003870 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fe ffda 	bl	8003870 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e093      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b29      	ldr	r3, [pc, #164]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	071b      	lsls	r3, r3, #28
 8004902:	491b      	ldr	r1, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x4b4>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7fe ffaf 	bl	8003870 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004916:	f7fe ffab 	bl	8003870 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e064      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x452>
 8004934:	e05c      	b.n	80049f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <HAL_RCC_OscConfig+0x4b4>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fe ff98 	bl	8003870 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004944:	f7fe ff94 	bl	8003870 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04d      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_OscConfig+0x4ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x480>
 8004962:	e045      	b.n	80049f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d107      	bne.n	800497c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e040      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000
 8004978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <HAL_RCC_OscConfig+0x538>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d030      	beq.n	80049ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d129      	bne.n	80049ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d122      	bne.n	80049ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d119      	bne.n	80049ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d10f      	bne.n	80049ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800

08004a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e03f      	b.n	8004a92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fe fd48 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f929 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af02      	add	r7, sp, #8
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d17c      	bne.n	8004bb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Transmit+0x2c>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e075      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x3e>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e06e      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aee:	f7fe febf 	bl	8003870 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Transmit+0x82>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b2c:	e02a      	b.n	8004b84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2180      	movs	r1, #128	; 0x80
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f840 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e036      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	3302      	adds	r3, #2
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e007      	b.n	8004b76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	3301      	adds	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1cf      	bne.n	8004b2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2140      	movs	r1, #64	; 0x40
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f810 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e006      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b090      	sub	sp, #64	; 0x40
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e050      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d04c      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
 8004bde:	f7fe fe47 	bl	8003870 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d241      	bcs.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c0e:	637a      	str	r2, [r7, #52]	; 0x34
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e5      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	613b      	str	r3, [r7, #16]
   return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c42:	623a      	str	r2, [r7, #32]
 8004c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d09f      	beq.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3740      	adds	r7, #64	; 0x40
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b0c0      	sub	sp, #256	; 0x100
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	68d9      	ldr	r1, [r3, #12]
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	ea40 0301 	orr.w	r3, r0, r1
 8004cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cf4:	f021 010c 	bic.w	r1, r1, #12
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d02:	430b      	orrs	r3, r1
 8004d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d16:	6999      	ldr	r1, [r3, #24]
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	ea40 0301 	orr.w	r3, r0, r1
 8004d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b8f      	ldr	r3, [pc, #572]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d005      	beq.n	8004d3c <UART_SetConfig+0xa0>
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <UART_SetConfig+0x2d0>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d104      	bne.n	8004d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7ff f97e 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8004d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d44:	e003      	b.n	8004d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d46:	f7ff f965 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8004d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	f040 810c 	bne.w	8004f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d76:	415b      	adcs	r3, r3
 8004d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d7e:	4621      	mov	r1, r4
 8004d80:	eb12 0801 	adds.w	r8, r2, r1
 8004d84:	4629      	mov	r1, r5
 8004d86:	eb43 0901 	adc.w	r9, r3, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	eb18 0303 	adds.w	r3, r8, r3
 8004da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dac:	462b      	mov	r3, r5
 8004dae:	eb49 0303 	adc.w	r3, r9, r3
 8004db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	18db      	adds	r3, r3, r3
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004de0:	f7fb ffcc 	bl	8000d7c <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4b61      	ldr	r3, [pc, #388]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004dea:	fba3 2302 	umull	r2, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	011c      	lsls	r4, r3, #4
 8004df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e14:	4641      	mov	r1, r8
 8004e16:	eb12 0a01 	adds.w	sl, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e34:	4692      	mov	sl, r2
 8004e36:	469b      	mov	fp, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e42:	464b      	mov	r3, r9
 8004e44:	eb4b 0303 	adc.w	r3, fp, r3
 8004e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e60:	460b      	mov	r3, r1
 8004e62:	18db      	adds	r3, r3, r3
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
 8004e66:	4613      	mov	r3, r2
 8004e68:	eb42 0303 	adc.w	r3, r2, r3
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e76:	f7fb ff81 	bl	8000d7c <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004e82:	fba3 2301 	umull	r2, r3, r3, r1
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2264      	movs	r2, #100	; 0x64
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	1acb      	subs	r3, r1, r3
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e96:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004e98:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ea4:	441c      	add	r4, r3
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	1891      	adds	r1, r2, r2
 8004ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ec0:	415b      	adcs	r3, r3
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec8:	4641      	mov	r1, r8
 8004eca:	1851      	adds	r1, r2, r1
 8004ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ece:	4649      	mov	r1, r9
 8004ed0:	414b      	adcs	r3, r1
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	00cb      	lsls	r3, r1, #3
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eea:	4651      	mov	r1, sl
 8004eec:	00ca      	lsls	r2, r1, #3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	189b      	adds	r3, r3, r2
 8004ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004efc:	464b      	mov	r3, r9
 8004efe:	460a      	mov	r2, r1
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	4613      	mov	r3, r2
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f32:	f7fb ff23 	bl	8000d7c <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f003 0207 	and.w	r2, r3, #7
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4422      	add	r2, r4
 8004f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f64:	e105      	b.n	8005172 <UART_SetConfig+0x4d6>
 8004f66:	bf00      	nop
 8004f68:	40011000 	.word	0x40011000
 8004f6c:	40011400 	.word	0x40011400
 8004f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f86:	4642      	mov	r2, r8
 8004f88:	464b      	mov	r3, r9
 8004f8a:	1891      	adds	r1, r2, r2
 8004f8c:	6239      	str	r1, [r7, #32]
 8004f8e:	415b      	adcs	r3, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f96:	4641      	mov	r1, r8
 8004f98:	1854      	adds	r4, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0501 	adc.w	r5, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	00eb      	lsls	r3, r5, #3
 8004faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fae:	00e2      	lsls	r2, r4, #3
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	18e3      	adds	r3, r4, r3
 8004fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	eb45 0303 	adc.w	r3, r5, r3
 8004fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fec:	4621      	mov	r1, r4
 8004fee:	008a      	lsls	r2, r1, #2
 8004ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ff4:	f7fb fec2 	bl	8000d7c <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b60      	ldr	r3, [pc, #384]	; (8005180 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011c      	lsls	r4, r3, #4
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	1891      	adds	r1, r2, r2
 800501e:	61b9      	str	r1, [r7, #24]
 8005020:	415b      	adcs	r3, r3
 8005022:	61fb      	str	r3, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	4641      	mov	r1, r8
 800502a:	1851      	adds	r1, r2, r1
 800502c:	6139      	str	r1, [r7, #16]
 800502e:	4649      	mov	r1, r9
 8005030:	414b      	adcs	r3, r1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005040:	4659      	mov	r1, fp
 8005042:	00cb      	lsls	r3, r1, #3
 8005044:	4651      	mov	r1, sl
 8005046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504a:	4651      	mov	r1, sl
 800504c:	00ca      	lsls	r2, r1, #3
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	4603      	mov	r3, r0
 8005054:	4642      	mov	r2, r8
 8005056:	189b      	adds	r3, r3, r2
 8005058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800505c:	464b      	mov	r3, r9
 800505e:	460a      	mov	r2, r1
 8005060:	eb42 0303 	adc.w	r3, r2, r3
 8005064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	67bb      	str	r3, [r7, #120]	; 0x78
 8005072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005080:	4649      	mov	r1, r9
 8005082:	008b      	lsls	r3, r1, #2
 8005084:	4641      	mov	r1, r8
 8005086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508a:	4641      	mov	r1, r8
 800508c:	008a      	lsls	r2, r1, #2
 800508e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005092:	f7fb fe73 	bl	8000d7c <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <UART_SetConfig+0x4e4>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	; 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	3332      	adds	r3, #50	; 0x32
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <UART_SetConfig+0x4e4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ba:	441c      	add	r4, r3
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	673b      	str	r3, [r7, #112]	; 0x70
 80050c4:	677a      	str	r2, [r7, #116]	; 0x74
 80050c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050da:	4641      	mov	r1, r8
 80050dc:	1851      	adds	r1, r2, r1
 80050de:	6039      	str	r1, [r7, #0]
 80050e0:	4649      	mov	r1, r9
 80050e2:	414b      	adcs	r3, r1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050f2:	4659      	mov	r1, fp
 80050f4:	00cb      	lsls	r3, r1, #3
 80050f6:	4651      	mov	r1, sl
 80050f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fc:	4651      	mov	r1, sl
 80050fe:	00ca      	lsls	r2, r1, #3
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	4603      	mov	r3, r0
 8005106:	4642      	mov	r2, r8
 8005108:	189b      	adds	r3, r3, r2
 800510a:	66bb      	str	r3, [r7, #104]	; 0x68
 800510c:	464b      	mov	r3, r9
 800510e:	460a      	mov	r2, r1
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	663b      	str	r3, [r7, #96]	; 0x60
 8005120:	667a      	str	r2, [r7, #100]	; 0x64
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800512e:	4649      	mov	r1, r9
 8005130:	008b      	lsls	r3, r1, #2
 8005132:	4641      	mov	r1, r8
 8005134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005138:	4641      	mov	r1, r8
 800513a:	008a      	lsls	r2, r1, #2
 800513c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005140:	f7fb fe1c 	bl	8000d7c <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <UART_SetConfig+0x4e4>)
 800514a:	fba3 1302 	umull	r1, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2164      	movs	r1, #100	; 0x64
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	3332      	adds	r3, #50	; 0x32
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <UART_SetConfig+0x4e4>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4422      	add	r2, r4
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	bf00      	nop
 8005174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	51eb851f 	.word	0x51eb851f

08005184 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	; 0x38
 8005188:	af08      	add	r7, sp, #32
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 80051a2:	23fd      	movs	r3, #253	; 0xfd
 80051a4:	75fb      	strb	r3, [r7, #23]
        goto out;
 80051a6:	e015      	b.n	80051d4 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	9306      	str	r3, [sp, #24]
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	9305      	str	r3, [sp, #20]
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f87d 	bl	80052ca <arm_convolve_s8>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 80051d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	6892      	ldr	r2, [r2, #8]
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	6852      	ldr	r2, [r2, #4]
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 800520c:	b5b0      	push	{r4, r5, r7, lr}
 800520e:	b092      	sub	sp, #72	; 0x48
 8005210:	af0a      	add	r7, sp, #40	; 0x28
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <arm_convolve_1x1_s8_fast+0x3a>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <arm_convolve_1x1_s8_fast+0x3a>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800523a:	2b01      	cmp	r3, #1
 800523c:	d103      	bne.n	8005246 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d002      	beq.n	800524c <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8005246:	f06f 0302 	mvn.w	r3, #2
 800524a:	e02f      	b.n	80052ac <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	6852      	ldr	r2, [r2, #4]
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8005262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	6840      	ldr	r0, [r0, #4]
 800527e:	68bc      	ldr	r4, [r7, #8]
 8005280:	6a24      	ldr	r4, [r4, #32]
 8005282:	68bd      	ldr	r5, [r7, #8]
 8005284:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8005286:	9508      	str	r5, [sp, #32]
 8005288:	9407      	str	r4, [sp, #28]
 800528a:	9006      	str	r0, [sp, #24]
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	6979      	ldr	r1, [r7, #20]
 8005290:	9104      	str	r1, [sp, #16]
 8005292:	69b9      	ldr	r1, [r7, #24]
 8005294:	9103      	str	r1, [sp, #12]
 8005296:	69f9      	ldr	r1, [r7, #28]
 8005298:	9102      	str	r1, [sp, #8]
 800529a:	9201      	str	r2, [sp, #4]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a6:	f002 fcaa 	bl	8007bfe <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bdb0      	pop	{r4, r5, r7, pc}

080052b4 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 80052ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ce:	b0dd      	sub	sp, #372	; 0x174
 80052d0:	af08      	add	r7, sp, #32
 80052d2:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 80052d6:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
 80052da:	6030      	str	r0, [r6, #0]
 80052dc:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80052e0:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80052e4:	6001      	str	r1, [r0, #0]
 80052e6:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80052ea:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80052ee:	600a      	str	r2, [r1, #0]
 80052f0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80052f4:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80052f8:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 80052fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80052fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    const uint16_t input_batches = input_dims->n;
 800530a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800530e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
    const uint16_t input_x = input_dims->w;
 800531a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800531e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    const uint16_t input_y = input_dims->h;
 800532a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800532e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    const uint16_t input_ch = input_dims->c;
 800533a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800533e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    const uint16_t kernel_x = filter_dims->w;
 800534a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t kernel_y = filter_dims->h;
 8005354:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t output_x = output_dims->w;
 800535e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t output_y = output_dims->h;
 8005368:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t output_ch = output_dims->c;
 8005372:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

    const uint16_t pad_x = conv_params->padding.w;
 800537c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005380:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t pad_y = conv_params->padding.h;
 800538c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005390:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t stride_x = conv_params->stride.w;
 800539c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80053a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t stride_y = conv_params->stride.h;
 80053ac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80053b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const int32_t input_offset = conv_params->input_offset;
 80053bc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80053c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    const int32_t out_offset = conv_params->output_offset;
 80053cc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80053d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 80053dc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80053e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_activation_max = conv_params->activation.max;
 80053ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80053f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t *output_mult = quant_params->multiplier;
 80053fc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005400:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    int32_t *output_shift = quant_params->shift;
 800540c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005410:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800541c:	2300      	movs	r3, #0
 800541e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005422:	e37f      	b.n	8005b24 <arm_convolve_s8+0x85a>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 8005424:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005428:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q7_t *out = output_data;
 800542c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005430:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800543a:	e0da      	b.n	80055f2 <arm_convolve_s8+0x328>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005442:	e0ca      	b.n	80055da <arm_convolve_s8+0x310>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8005444:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005448:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800544c:	fb03 f202 	mul.w	r2, r3, r2
 8005450:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800545a:	e065      	b.n	8005528 <arm_convolve_s8+0x25e>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 800545c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8005460:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005464:	fb03 f202 	mul.w	r2, r3, r2
 8005468:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005472:	e044      	b.n	80054fe <arm_convolve_s8+0x234>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 8005474:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005478:	2b00      	cmp	r3, #0
 800547a:	db0f      	blt.n	800549c <arm_convolve_s8+0x1d2>
 800547c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8005480:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005484:	429a      	cmp	r2, r3
 8005486:	da09      	bge.n	800549c <arm_convolve_s8+0x1d2>
 8005488:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800548c:	2b00      	cmp	r3, #0
 800548e:	db05      	blt.n	800549c <arm_convolve_s8+0x1d2>
 8005490:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005494:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005498:	429a      	cmp	r2, r3
 800549a:	db09      	blt.n	80054b0 <arm_convolve_s8+0x1e6>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800549c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	461a      	mov	r2, r3
 80054a4:	2100      	movs	r1, #0
 80054a6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80054aa:	f01a fcbd 	bl	801fe28 <memset>
 80054ae:	e019      	b.n	80054e4 <arm_convolve_s8+0x21a>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 80054b0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80054b4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80054b8:	fb03 f202 	mul.w	r2, r3, r2
 80054bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80054c0:	4413      	add	r3, r2
 80054c2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80054d0:	1898      	adds	r0, r3, r2
 80054d2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80054d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054da:	b21b      	sxth	r3, r3
 80054dc:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80054e0:	f009 ffea 	bl	800f4b8 <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 80054e4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80054ee:	4413      	add	r3, r2
 80054f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                         i_ker_x++)
 80054f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80054f8:	3301      	adds	r3, #1
 80054fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 80054fe:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8005502:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005506:	fb03 f202 	mul.w	r2, r3, r2
 800550a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8005514:	4413      	add	r3, r2
 8005516:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800551a:	429a      	cmp	r2, r3
 800551c:	dbaa      	blt.n	8005474 <arm_convolve_s8+0x1aa>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800551e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005522:	3301      	adds	r3, #1
 8005524:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005528:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800552c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005530:	fb03 f202 	mul.w	r2, r3, r2
 8005534:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005538:	1ad2      	subs	r2, r2, r3
 800553a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800553e:	4413      	add	r3, r2
 8005540:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005544:	429a      	cmp	r2, r3
 8005546:	db89      	blt.n	800545c <arm_convolve_s8+0x192>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8005548:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800554c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005562:	4413      	add	r3, r2
 8005564:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005568:	429a      	cmp	r2, r3
 800556a:	d131      	bne.n	80055d0 <arm_convolve_s8+0x306>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800556c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005570:	b21b      	sxth	r3, r3
 8005572:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005576:	b212      	sxth	r2, r2
 8005578:	f8b7 0118 	ldrh.w	r0, [r7, #280]	; 0x118
 800557c:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8005580:	fb10 f101 	smulbb	r1, r0, r1
 8005584:	b289      	uxth	r1, r1
 8005586:	f8b7 0116 	ldrh.w	r0, [r7, #278]	; 0x116
 800558a:	fb10 f101 	smulbb	r1, r0, r1
 800558e:	b289      	uxth	r1, r1
 8005590:	f8b7 610e 	ldrh.w	r6, [r7, #270]	; 0x10e
 8005594:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8005598:	9006      	str	r0, [sp, #24]
 800559a:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 800559e:	9005      	str	r0, [sp, #20]
 80055a0:	9104      	str	r1, [sp, #16]
 80055a2:	9203      	str	r2, [sp, #12]
 80055a4:	9302      	str	r3, [sp, #8]
 80055a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055b6:	4632      	mov	r2, r6
 80055b8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80055bc:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80055c0:	f000 fba3 	bl	8005d0a <arm_nn_mat_mult_kernel_s8_s16>
 80055c4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 80055c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 80055d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80055d4:	3301      	adds	r3, #1
 80055d6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80055da:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80055de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f6ff af2e 	blt.w	8005444 <arm_convolve_s8+0x17a>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80055e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80055f2:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80055f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80055fa:	429a      	cmp	r2, r3
 80055fc:	f6ff af1e 	blt.w	800543c <arm_convolve_s8+0x172>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8005600:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005608:	429a      	cmp	r2, r3
 800560a:	f000 8266 	beq.w	8005ada <arm_convolve_s8+0x810>
        {
            const q7_t *ker_a = filter_data;
 800560e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005612:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            int i;

            for (i = 0; i < output_ch; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800561c:	e256      	b.n	8005acc <arm_convolve_s8+0x802>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                if (bias_data)
 8005624:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <arm_convolve_s8+0x374>
                {
                    sum = bias_data[i];
 800562c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005636:	4413      	add	r3, r2
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 800563e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005642:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005646:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800564a:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 800564c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005650:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8005654:	fb02 f303 	mul.w	r3, r2, r3
 8005658:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	109b      	asrs	r3, r3, #2
 8005662:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

                while (col_count)
 8005666:	e102      	b.n	800586e <arm_convolve_s8+0x5a4>
 8005668:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800566c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005670:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800567a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800567e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800568e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80056a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ae:	601a      	str	r2, [r3, #0]

    return (val);
 80056b0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80056ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 80056be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056c6:	2308      	movs	r3, #8
 80056c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 80056cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (op2 == 0U)
 80056d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <arm_convolve_s8+0x41c>
  {
    return op1;
 80056e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056e4:	e005      	b.n	80056f2 <arm_convolve_s8+0x428>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80056e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80056ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ee:	fa62 f303 	ror.w	r3, r2, r3
 80056f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80056f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056fa:	fa2f f383 	sxtb16	r3, r3
 80056fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8005702:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q31_t inAbuf2 = __SXTB16(inA);
 800570a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800570e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005716:	fa2f f383 	sxtb16	r3, r3
 800571a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 800571e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8005726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800572a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800572e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800573a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800573e:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8005742:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005746:	461a      	mov	r2, r3
 8005748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800574c:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800574e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005752:	67bb      	str	r3, [r7, #120]	; 0x78
 8005754:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005758:	677b      	str	r3, [r7, #116]	; 0x74
 800575a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800575e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8005762:	673b      	str	r3, [r7, #112]	; 0x70
 8005764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005766:	461a      	mov	r2, r3
 8005768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800576c:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 800576e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005776:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8005778:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800577c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q15, 4);
 8005784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005792:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005796:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	1d1a      	adds	r2, r3, #4
 80057a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057a4:	601a      	str	r2, [r3, #0]
    return (val);
 80057a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80057aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80057ae:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 80057b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 80057b4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80057b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057c8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80057cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80057d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057dc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80057e0:	fb23 1302 	smlad	r3, r3, r2, r1
 80057e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 80057e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 80057f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005806:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800580a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800580c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005818:	601a      	str	r2, [r3, #0]
    return (val);
 800581a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800581e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005822:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8005824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8005828:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800582c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800583c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8005840:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8005844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800584c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005850:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8005854:	fb23 1302 	smlad	r3, r3, r2, r1
 8005858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 800585c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    col_count--;
 8005864:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8005868:	3b01      	subs	r3, #1
 800586a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 800586e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f aef8 	bne.w	8005668 <arm_convolve_s8+0x39e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8005878:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800587c:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005880:	fb12 f303 	smulbb	r3, r2, r3
 8005884:	b29b      	uxth	r3, r3
 8005886:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800588a:	fb12 f303 	smulbb	r3, r2, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8005898:	e025      	b.n	80058e6 <arm_convolve_s8+0x61c>
                {
                    q7_t ker_a1 = *ker_a++;
 800589a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
                    q15_t ip_b1 = *ip_as_col++;
 80058aa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80058ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	1c99      	adds	r1, r3, #2
 80058b6:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80058ba:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80058be:	6011      	str	r1, [r2, #0]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
                    sum += ker_a1 * ip_b1;
 80058c6:	f997 30eb 	ldrsb.w	r3, [r7, #235]	; 0xeb
 80058ca:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80058d6:	4413      	add	r3, r2
 80058d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    col_count--;
 80058dc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80058e0:	3b01      	subs	r3, #1
 80058e2:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 80058e6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1d5      	bne.n	800589a <arm_convolve_s8+0x5d0>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 80058ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80058f8:	4413      	add	r3, r2
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005906:	440b      	add	r3, r1
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800590e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8005910:	66ba      	str	r2, [r7, #104]	; 0x68
 8005912:	667b      	str	r3, [r7, #100]	; 0x64
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800591a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	663b      	str	r3, [r7, #96]	; 0x60
 8005922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005924:	65fb      	str	r3, [r7, #92]	; 0x5c
    q31_t result = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	65bb      	str	r3, [r7, #88]	; 0x58
    mult.word.low = 1 << 30;
 800592a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800592e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005936:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8005938:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800593c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005944:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005948:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800594a:	17c8      	asrs	r0, r1, #31
 800594c:	4688      	mov	r8, r1
 800594e:	4681      	mov	r9, r0
 8005950:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005952:	17c8      	asrs	r0, r1, #31
 8005954:	468a      	mov	sl, r1
 8005956:	4683      	mov	fp, r0
 8005958:	fb0a f009 	mul.w	r0, sl, r9
 800595c:	fb08 f10b 	mul.w	r1, r8, fp
 8005960:	4401      	add	r1, r0
 8005962:	fba8 450a 	umull	r4, r5, r8, sl
 8005966:	4429      	add	r1, r5
 8005968:	460d      	mov	r5, r1
 800596a:	1911      	adds	r1, r2, r4
 800596c:	6039      	str	r1, [r7, #0]
 800596e:	416b      	adcs	r3, r5
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005976:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 800597a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	0fc2      	lsrs	r2, r0, #31
 8005988:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800598c:	17cb      	asrs	r3, r1, #31
 800598e:	4613      	mov	r3, r2
 8005990:	65bb      	str	r3, [r7, #88]	; 0x58
    return result;
 8005992:	6dba      	ldr	r2, [r7, #88]	; 0x58
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	dc02      	bgt.n	80059a0 <arm_convolve_s8+0x6d6>
 800599a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599c:	425b      	negs	r3, r3
 800599e:	e000      	b.n	80059a2 <arm_convolve_s8+0x6d8>
 80059a0:	2300      	movs	r3, #0
 80059a2:	657a      	str	r2, [r7, #84]	; 0x54
 80059a4:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80059a8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80059ac:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80059ae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80059ba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059c2:	2201      	movs	r2, #1
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	409a      	lsls	r2, r3
 80059c8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d0:	3a01      	subs	r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80059d4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059dc:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80059e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80059e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	400a      	ands	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80059ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f4:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80059f8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80059fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	fa41 f202 	asr.w	r2, r1, r2
 8005a04:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8005a06:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a0e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8005a12:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	1052      	asrs	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8005a1c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	da0a      	bge.n	8005a40 <arm_convolve_s8+0x776>
        threshold++;
 8005a2a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a32:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8005a36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8005a40:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a44:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8005a48:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	dd0a      	ble.n	8005a6e <arm_convolve_s8+0x7a4>
        result++;
 8005a58:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a60:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8005a64:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	3201      	adds	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
    return result;
 8005a6e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a76:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005a78:	bf00      	nop
 8005a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum += out_offset;
 8005a7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a86:	4413      	add	r3, r2
 8005a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MAX(sum, out_activation_min);
 8005a8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005a90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bfb8      	it	lt
 8005a98:	4613      	movlt	r3, r2
 8005a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MIN(sum, out_activation_max);
 8005a9e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	bfa8      	it	ge
 8005aaa:	4613      	movge	r3, r2
 8005aac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                *out++ = (q7_t)sum;
 8005ab0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005aba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005abe:	b252      	sxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 8005ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005acc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8005ad0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	f6ff ada2 	blt.w	800561e <arm_convolve_s8+0x354>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8005ada:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005ade:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8005af4:	4413      	add	r3, r2
 8005af6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        output_data += (output_x * output_y * output_ch);
 8005afa:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8005afe:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005b14:	4413      	add	r3, r2
 8005b16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8005b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005b24:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8005b28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	f6ff ac79 	blt.w	8005424 <arm_convolve_s8+0x15a>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b40 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	6892      	ldr	r2, [r2, #8]
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af08      	add	r7, sp, #32
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12f      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d12b      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d125      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d121      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d11d      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d119      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d115      	bne.n	8005be2 <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	9306      	str	r3, [sp, #24]
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	9305      	str	r3, [sp, #20]
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fb17 	bl	800520c <arm_convolve_1x1_s8_fast>
 8005bde:	4603      	mov	r3, r0
 8005be0:	e040      	b.n	8005c64 <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d127      	bne.n	8005c3a <arm_convolve_wrapper_s8+0xce>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d123      	bne.n	8005c3a <arm_convolve_wrapper_s8+0xce>
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11f      	bne.n	8005c3a <arm_convolve_wrapper_s8+0xce>
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d115      	bne.n	8005c3a <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	9306      	str	r3, [sp, #24]
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	9305      	str	r3, [sp, #20]
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	9302      	str	r3, [sp, #8]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff faa7 	bl	8005184 <arm_convolve_1_x_n_s8>
 8005c36:	4603      	mov	r3, r0
 8005c38:	e014      	b.n	8005c64 <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	9306      	str	r3, [sp, #24]
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	9305      	str	r3, [sp, #20]
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	9303      	str	r3, [sp, #12]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fb34 	bl	80052ca <arm_convolve_s8>
 8005c62:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d11e      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11a      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d114      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d110      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10c      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d108      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d104      	bne.n	8005cc0 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 8005cb6:	68b8      	ldr	r0, [r7, #8]
 8005cb8:	f7ff fafc 	bl	80052b4 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	e020      	b.n	8005d02 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d117      	bne.n	8005cf8 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d113      	bne.n	8005cf8 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d10f      	bne.n	8005cf8 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	68b8      	ldr	r0, [r7, #8]
 8005cf0:	f7ff fa76 	bl	80051e0 <arm_convolve_1_x_n_s8_get_buffer_size>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	e004      	b.n	8005d02 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	68b8      	ldr	r0, [r7, #8]
 8005cfc:	f7ff ff20 	bl	8005b40 <arm_convolve_s8_get_buffer_size>
 8005d00:	4603      	mov	r3, r0
    }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 8005d0a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d0e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 8005d18:	f5a4 746f 	sub.w	r4, r4, #956	; 0x3bc
 8005d1c:	6020      	str	r0, [r4, #0]
 8005d1e:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 8005d22:	f5a0 7070 	sub.w	r0, r0, #960	; 0x3c0
 8005d26:	6001      	str	r1, [r0, #0]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8005d2e:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d38:	f2a3 32c2 	subw	r2, r3, #962	; 0x3c2
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 8005d40:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d44:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8005d4e:	4413      	add	r3, r2
 8005d50:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
    const int32_t *bias = output_bias;
 8005d54:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8005d58:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

    uint16_t row_count = output_ch / 2;
 8005d5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d60:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    const q7_t *ip_a0 = input_a;
 8005d6c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d70:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
    /* this loop over rows in A */
    while (row_count)
 8005d7a:	f001 b92e 	b.w	8006fda <arm_nn_mat_mult_kernel_s8_s16+0x12d0>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 8005d7e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d82:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 8005d86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d8a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8005d92:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005d96:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	441a      	add	r2, r3
 8005da4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005da8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005dac:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8005dae:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 8005db2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005db6:	4413      	add	r3, r2
 8005db8:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 8005dbc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        q31_t ch_0_out_1 = *bias++;
 8005dc6:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8005dca:	1d13      	adds	r3, r2, #4
 8005dcc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        q31_t ch_1_out_0 = *bias;
 8005dd6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        q31_t ch_1_out_1 = *bias++;
 8005de0:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8005de4:	1d13      	adds	r3, r2, #4
 8005de6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

        uint16_t col_count = num_col_a / 4;
 8005df0:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        /* accumulate over the vector */
        while (col_count)
 8005dfa:	e35f      	b.n	80064bc <arm_nn_mat_mult_kernel_s8_s16+0x7b2>
 8005dfc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e00:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8005e04:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005e08:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8005e0a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e1e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8005e22:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005e24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e28:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	1d1a      	adds	r2, r3, #4
 8005e32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	601a      	str	r2, [r3, #0]
    return (val);
 8005e3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e42:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8005e46:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8005e48:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8005e4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e50:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8005e54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e58:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8005e5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e6e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8005e72:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005e74:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e86:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	601a      	str	r2, [r3, #0]
    return (val);
 8005e8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005e92:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8005e96:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8005e98:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8005e9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ea0:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8005ea4:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005eae:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8005eb2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ebc:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8005ec0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005eca:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8005ece:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005ed2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8005ed4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ee8:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8005eec:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005eee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	601a      	str	r2, [r3, #0]
    return (val);
 8005f08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f0c:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8005f10:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8005f12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8005f1c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f34:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8005f38:	2308      	movs	r3, #8
 8005f3a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8005f3c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f40:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8005f44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f48:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8005f54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f58:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d105      	bne.n	8005f6e <arm_nn_mat_mult_kernel_s8_s16+0x264>
    return op1;
 8005f62:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f66:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	e00a      	b.n	8005f84 <arm_nn_mat_mult_kernel_s8_s16+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005f6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f72:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8005f76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	41da      	rors	r2, r3
 8005f84:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005f8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005f92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	fa2f f283 	sxtb16	r2, r3
 8005f9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005fa4:	601a      	str	r2, [r3, #0]
  return(result);
 8005fa6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005faa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fb4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005fb8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8005fba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005fcc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005fce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fd2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	fa2f f283 	sxtb16	r2, r3
 8005fdc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fe0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005fe4:	601a      	str	r2, [r3, #0]
  return(result);
 8005fe6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005fea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ff4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ff8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8005ffa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8005ffe:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 8006002:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006012:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8006016:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800601a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006026:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006030:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 800603a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800603e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006048:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006054:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800605c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006060:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8006064:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006068:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006074:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8006078:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800607c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006088:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006092:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 800609c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80060a0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80060aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80060b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	601a      	str	r2, [r3, #0]
    return source;
 80060be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80060c2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80060c6:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 80060c8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80060cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80060d0:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 80060d4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80060de:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 80060e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060e6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80060ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80060ee:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    memcpy(&val, *in_q7, 4);
 80060f2:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006100:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8006104:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8006106:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8006112:	601a      	str	r2, [r3, #0]
    return (val);
 8006114:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006118:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800611c:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800611e:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8006122:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8006126:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800612a:	2308      	movs	r3, #8
 800612c:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  op2 %= 32U;
 8006130:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  if (op2 == 0U)
 800613c:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <arm_nn_mat_mult_kernel_s8_s16+0x440>
    return op1;
 8006144:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8006148:	e005      	b.n	8006156 <arm_nn_mat_mult_kernel_s8_s16+0x44c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800614a:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 800614e:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8006152:	fa62 f303 	ror.w	r3, r2, r3
 8006156:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800615a:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800615e:	fa2f f383 	sxtb16	r3, r3
 8006162:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
  return(result);
 8006166:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800616a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    q31_t inAbuf2 = __SXTB16(inA);
 800616e:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8006172:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006176:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800617a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800617c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006180:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	fa2f f283 	sxtb16	r2, r3
 800618a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006192:	601a      	str	r2, [r3, #0]
  return(result);
 8006194:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a6:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80061a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061ac:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80061b0:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061ba:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80061be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 80061e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80061f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80061fc:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80061fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006202:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8006206:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006216:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800621a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006224:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800622e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8006238:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800623c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006246:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8006252:	601a      	str	r2, [r3, #0]
    return source;
 8006254:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006258:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800625c:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 800625e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8006262:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006266:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4619      	mov	r1, r3
 800626e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8006272:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8006276:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 800627a:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 800627e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006282:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 8006286:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 800628a:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800628e:	fb21 3302 	smlad	r3, r1, r2, r3
 8006292:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  return(result);
 8006296:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800629a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 800629e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80062a2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4619      	mov	r1, r3
 80062aa:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80062ae:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80062b2:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 80062b6:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 80062ba:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80062be:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 80062c2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80062c6:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80062ca:	fb21 3302 	smlad	r3, r1, r2, r3
 80062ce:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 80062d2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80062d6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 80062da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80062de:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4619      	mov	r1, r3
 80062e6:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80062ea:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80062ee:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 80062f2:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 80062f6:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80062fa:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 80062fe:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8006302:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8006306:	fb21 3302 	smlad	r3, r1, r2, r3
 800630a:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  return(result);
 800630e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8006312:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8006316:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800631a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4619      	mov	r1, r3
 8006322:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8006326:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800632a:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 800632e:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 8006332:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006336:	f8d7 13d4 	ldr.w	r1, [r7, #980]	; 0x3d4
 800633a:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 800633e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006342:	fb21 3302 	smlad	r3, r1, r2, r3
 8006346:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
  return(result);
 800634a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800634e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8006352:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8006356:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    memcpy(&val, *in_q15, 4);
 800635a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006368:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800636c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800636e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800637a:	601a      	str	r2, [r3, #0]
    return (val);
 800637c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006380:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8006384:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8006386:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800638a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800638e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
    memcpy(&val, *in_q15, 4);
 8006392:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80063a0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80063a4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80063a6:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	1d1a      	adds	r2, r3, #4
 80063ae:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80063b2:	601a      	str	r2, [r3, #0]
    return (val);
 80063b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80063b8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80063bc:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80063be:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 80063c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80063c6:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80063d2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80063d6:	f8c7 13ec 	str.w	r1, [r7, #1004]	; 0x3ec
 80063da:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 80063de:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80063e2:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 80063e6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80063ea:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80063ee:	fb21 3302 	smlad	r3, r1, r2, r3
 80063f2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  return(result);
 80063f6:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80063fa:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 80063fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006402:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4619      	mov	r1, r3
 800640a:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800640e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006412:	f8c7 13fc 	str.w	r1, [r7, #1020]	; 0x3fc
 8006416:	f8c7 23f8 	str.w	r2, [r7, #1016]	; 0x3f8
 800641a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800641e:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8006422:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8006426:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800642a:	fb21 3302 	smlad	r3, r1, r2, r3
 800642e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  return(result);
 8006432:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8006436:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 800643a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800643e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800644a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800644e:	f8c7 140c 	str.w	r1, [r7, #1036]	; 0x40c
 8006452:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 8006456:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800645a:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800645e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8006462:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8006466:	fb21 3302 	smlad	r3, r1, r2, r3
 800646a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  return(result);
 800646e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8006472:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8006476:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800647a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8006486:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800648a:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 800648e:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8006492:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006496:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 800649a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800649e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80064a2:	fb21 3302 	smlad	r3, r1, r2, r3
 80064a6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  return(result);
 80064aa:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80064ae:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

            col_count--;
 80064b2:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80064b6:	3b01      	subs	r3, #1
 80064b8:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 80064bc:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f47f ac9b 	bne.w	8005dfc <arm_nn_mat_mult_kernel_s8_s16+0xf2>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 80064c6:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 80064d2:	e05c      	b.n	800658e <arm_nn_mat_mult_kernel_s8_s16+0x884>
        {
            q7_t a0 = *ip_a0++;
 80064d4:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80064d8:	1c53      	adds	r3, r2, #1
 80064da:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80064de:	7813      	ldrb	r3, [r2, #0]
 80064e0:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
            q15_t b0 = *ip_b0++;
 80064e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80064e8:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	1c8a      	adds	r2, r1, #2
 80064f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80064f4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	880b      	ldrh	r3, [r1, #0]
 80064fc:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
            q7_t a1 = *ip_a1++;
 8006500:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8006504:	1c53      	adds	r3, r2, #1
 8006506:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800650a:	7813      	ldrb	r3, [r2, #0]
 800650c:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
            q15_t b1 = *ip_b1++;
 8006510:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006514:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	1c8a      	adds	r2, r1, #2
 800651c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006520:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	880b      	ldrh	r3, [r1, #0]
 8006528:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428

            ch_0_out_0 += a0 * b0;
 800652c:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 8006530:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 8006534:	fb03 f202 	mul.w	r2, r3, r2
 8006538:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800653c:	4413      	add	r3, r2
 800653e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 += a0 * b1;
 8006542:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 8006546:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 800654a:	fb03 f202 	mul.w	r2, r3, r2
 800654e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006552:	4413      	add	r3, r2
 8006554:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 += a1 * b0;
 8006558:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 800655c:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 8006560:	fb03 f202 	mul.w	r2, r3, r2
 8006564:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8006568:	4413      	add	r3, r2
 800656a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 += a1 * b1;
 800656e:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 8006572:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 8006576:	fb03 f202 	mul.w	r2, r3, r2
 800657a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800657e:	4413      	add	r3, r2
 8006580:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
            col_count--;
 8006584:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8006588:	3b01      	subs	r3, #1
 800658a:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 800658e:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8006592:	2b00      	cmp	r3, #0
 8006594:	d19e      	bne.n	80064d4 <arm_nn_mat_mult_kernel_s8_s16+0x7ca>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8006596:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065a0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6819      	ldr	r1, [r3, #0]
 80065a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065ac:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80065b0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065ba:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80065be:	6018      	str	r0, [r3, #0]
 80065c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80065c8:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80065ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065ce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80065d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	fa03 f202 	lsl.w	r2, r3, r2
 80065e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065ea:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065f4:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80065f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065fc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8006604:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006608:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800660c:	2300      	movs	r3, #0
 800660e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8006610:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006614:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8006618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800661c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800661e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006622:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8006626:	2300      	movs	r3, #0
 8006628:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800662a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800662e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006632:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	17da      	asrs	r2, r3, #31
 800663a:	66bb      	str	r3, [r7, #104]	; 0x68
 800663c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800663e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006642:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	17da      	asrs	r2, r3, #31
 800664a:	663b      	str	r3, [r7, #96]	; 0x60
 800664c:	667a      	str	r2, [r7, #100]	; 0x64
 800664e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006652:	fb02 f203 	mul.w	r2, r2, r3
 8006656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006658:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800665a:	fb04 f303 	mul.w	r3, r4, r3
 800665e:	4413      	add	r3, r2
 8006660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006662:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8006664:	fba2 4204 	umull	r4, r2, r2, r4
 8006668:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800666c:	4622      	mov	r2, r4
 800666e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8006672:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006676:	4413      	add	r3, r2
 8006678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800667c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006680:	18c3      	adds	r3, r0, r3
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
 8006684:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006688:	eb41 0303 	adc.w	r3, r1, r3
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
 800668e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006692:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    result = (int32_t)(mult.long_long >> 31);
 8006696:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800669a:	f04f 0000 	mov.w	r0, #0
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	0fd0      	lsrs	r0, r2, #31
 80066a4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80066a8:	17d9      	asrs	r1, r3, #31
 80066aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066ae:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80066b2:	4603      	mov	r3, r0
 80066b4:	6013      	str	r3, [r2, #0]
    return result;
 80066b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066ba:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80066be:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80066c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dc06      	bgt.n	80066dc <arm_nn_mat_mult_kernel_s8_s16+0x9d2>
 80066ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	425a      	negs	r2, r3
 80066da:	e000      	b.n	80066de <arm_nn_mat_mult_kernel_s8_s16+0x9d4>
 80066dc:	2200      	movs	r2, #0
 80066de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066e2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80066e6:	6019      	str	r1, [r3, #0]
 80066e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066ec:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80066f0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80066f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066f6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80066fa:	2300      	movs	r3, #0
 80066fc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80066fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006702:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8006706:	2201      	movs	r2, #1
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	fa02 f103 	lsl.w	r1, r2, r3
 800670e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006712:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8006716:	1e4b      	subs	r3, r1, #1
 8006718:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800671a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800671e:	f5a3 710b 	sub.w	r1, r3, #556	; 0x22c
 8006722:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006726:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800672a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800672e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4013      	ands	r3, r2
 8006738:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800673a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800673e:	f5a3 7109 	sub.w	r1, r3, #548	; 0x224
 8006742:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006746:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800674a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800674e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	fa42 f303 	asr.w	r3, r2, r3
 800675a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800675c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006760:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8006764:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006768:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	105b      	asrs	r3, r3, #1
 8006770:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8006772:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006776:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	da0a      	bge.n	8006796 <arm_nn_mat_mult_kernel_s8_s16+0xa8c>
        threshold++;
 8006780:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006784:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8006788:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800678c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8006796:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800679a:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800679e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067a2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	dd0a      	ble.n	80067c4 <arm_nn_mat_mult_kernel_s8_s16+0xaba>
        result++;
 80067ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067b2:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80067b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067ba:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	6013      	str	r3, [r2, #0]
    return result;
 80067c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067c8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80067cc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80067ce:	bf00      	nop
 80067d0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 += out_offset;
 80067d4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80067d8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80067dc:	4413      	add	r3, r2
 80067de:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80067e2:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 80067e6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bfb8      	it	lt
 80067ee:	4613      	movlt	r3, r2
 80067f0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80067f4:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 80067f8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bfa8      	it	ge
 8006800:	4613      	movge	r3, r2
 8006802:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        *out_0++ = (q7_t)ch_0_out_0;
 8006806:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 800680a:	1c53      	adds	r3, r2, #1
 800680c:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8006810:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8006814:	b25b      	sxtb	r3, r3
 8006816:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8006818:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006822:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800682e:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8006832:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800683c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006846:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800684a:	6019      	str	r1, [r3, #0]
 800684c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006850:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800685a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800685e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	fa03 f202 	lsl.w	r2, r3, r2
 8006868:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800686c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006876:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 800687a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800687e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8006886:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800688a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800688e:	2300      	movs	r3, #0
 8006890:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8006892:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006896:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800689a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800689e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80068a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068a4:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80068a8:	2300      	movs	r3, #0
 80068aa:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80068ac:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80068b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	17da      	asrs	r2, r3, #31
 80068bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	17da      	asrs	r2, r3, #31
 80068cc:	673b      	str	r3, [r7, #112]	; 0x70
 80068ce:	677a      	str	r2, [r7, #116]	; 0x74
 80068d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068d4:	fb02 f203 	mul.w	r2, r2, r3
 80068d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068da:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80068dc:	fb04 f303 	mul.w	r3, r4, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068e4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068e6:	fba2 5604 	umull	r5, r6, r2, r4
 80068ea:	4433      	add	r3, r6
 80068ec:	461e      	mov	r6, r3
 80068ee:	1943      	adds	r3, r0, r5
 80068f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f2:	eb41 0306 	adc.w	r3, r1, r6
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80068fc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    result = (int32_t)(mult.long_long >> 31);
 8006900:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f04f 0100 	mov.w	r1, #0
 800690c:	0fd0      	lsrs	r0, r2, #31
 800690e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8006912:	17d9      	asrs	r1, r3, #31
 8006914:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006918:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800691c:	4603      	mov	r3, r0
 800691e:	6013      	str	r3, [r2, #0]
    return result;
 8006920:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006924:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006928:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800692a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800692e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc06      	bgt.n	8006946 <arm_nn_mat_mult_kernel_s8_s16+0xc3c>
 8006938:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800693c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	425a      	negs	r2, r3
 8006944:	e000      	b.n	8006948 <arm_nn_mat_mult_kernel_s8_s16+0xc3e>
 8006946:	2200      	movs	r2, #0
 8006948:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800694c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006956:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800695a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800695c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006960:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8006964:	2300      	movs	r3, #0
 8006966:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006968:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800696c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006970:	2201      	movs	r2, #1
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	fa02 f103 	lsl.w	r1, r2, r3
 8006978:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800697c:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8006980:	1e4b      	subs	r3, r1, #1
 8006982:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8006984:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006988:	f5a3 71fe 	sub.w	r1, r3, #508	; 0x1fc
 800698c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006990:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8006994:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006998:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4013      	ands	r3, r2
 80069a2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80069a4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069a8:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 80069ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069b0:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 80069b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069b8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fa42 f303 	asr.w	r3, r2, r3
 80069c4:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80069c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069ca:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80069ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	105b      	asrs	r3, r3, #1
 80069da:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80069dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069e0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da0a      	bge.n	8006a00 <arm_nn_mat_mult_kernel_s8_s16+0xcf6>
        threshold++;
 80069ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069ee:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80069f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069f6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3301      	adds	r3, #1
 80069fe:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8006a00:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a04:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8006a08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a0c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	dd0a      	ble.n	8006a2e <arm_nn_mat_mult_kernel_s8_s16+0xd24>
        result++;
 8006a18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a1c:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8006a20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a24:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]
    return result;
 8006a2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a32:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8006a36:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006a38:	bf00      	nop
 8006a3a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 += out_offset;
 8006a3e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8006a42:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8006a46:	4413      	add	r3, r2
 8006a48:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8006a4c:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8006a50:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006a54:	4293      	cmp	r3, r2
 8006a56:	bfb8      	it	lt
 8006a58:	4613      	movlt	r3, r2
 8006a5a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8006a5e:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8006a62:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bfa8      	it	ge
 8006a6a:	4613      	movge	r3, r2
 8006a6c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        *out_1++ = (q7_t)ch_0_out_1;
 8006a70:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8006a74:	1c53      	adds	r3, r2, #1
 8006a76:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8006a7a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8006a82:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8006a86:	3304      	adds	r3, #4
 8006a88:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 8006a8c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a90:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8006a94:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a98:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8006aa2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006aac:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ab8:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8006abc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ac6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006aca:	6018      	str	r0, [r3, #0]
 8006acc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ad0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006ad4:	6019      	str	r1, [r3, #0]
 8006ad6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ada:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8006ae4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ae8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	fa03 f202 	lsl.w	r2, r3, r2
 8006af2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006af6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b00:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8006b04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8006b10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b14:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8006b18:	2300      	movs	r3, #0
 8006b1a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8006b1c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b20:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8006b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b28:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8006b2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b2e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8006b32:	2300      	movs	r3, #0
 8006b34:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006b36:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006b3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	17da      	asrs	r2, r3, #31
 8006b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b4a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b4e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	17da      	asrs	r2, r3, #31
 8006b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b5e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b6a:	fb02 f203 	mul.w	r2, r2, r3
 8006b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b72:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8006b76:	fb04 f303 	mul.w	r3, r4, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006b80:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006b84:	fba2 ab04 	umull	sl, fp, r2, r4
 8006b88:	445b      	add	r3, fp
 8006b8a:	469b      	mov	fp, r3
 8006b8c:	eb10 030a 	adds.w	r3, r0, sl
 8006b90:	643b      	str	r3, [r7, #64]	; 0x40
 8006b92:	eb41 030b 	adc.w	r3, r1, fp
 8006b96:	647b      	str	r3, [r7, #68]	; 0x44
 8006b98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006b9c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    result = (int32_t)(mult.long_long >> 31);
 8006ba0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	0fd0      	lsrs	r0, r2, #31
 8006bae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8006bb2:	17d9      	asrs	r1, r3, #31
 8006bb4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bb8:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	6013      	str	r3, [r2, #0]
    return result;
 8006bc0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006bc8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006bca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dc06      	bgt.n	8006be6 <arm_nn_mat_mult_kernel_s8_s16+0xedc>
 8006bd8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bdc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	425a      	negs	r2, r3
 8006be4:	e000      	b.n	8006be8 <arm_nn_mat_mult_kernel_s8_s16+0xede>
 8006be6:	2200      	movs	r2, #0
 8006be8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006bf0:	6019      	str	r1, [r3, #0]
 8006bf2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bf6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006bfa:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8006bfc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c00:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8006c04:	2300      	movs	r3, #0
 8006c06:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006c08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006c10:	2201      	movs	r2, #1
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	fa02 f103 	lsl.w	r1, r2, r3
 8006c18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c1c:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8006c20:	1e4b      	subs	r3, r1, #1
 8006c22:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8006c24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c28:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8006c2c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c30:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8006c34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c38:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4013      	ands	r3, r2
 8006c42:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8006c44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c48:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8006c4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c50:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8006c54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	fa42 f303 	asr.w	r3, r2, r3
 8006c64:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8006c66:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c6a:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8006c6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c72:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	105b      	asrs	r3, r3, #1
 8006c7a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8006c7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c80:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da0a      	bge.n	8006ca0 <arm_nn_mat_mult_kernel_s8_s16+0xf96>
        threshold++;
 8006c8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c8e:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8006c92:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c96:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8006ca0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ca4:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8006ca8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	dd0a      	ble.n	8006cce <arm_nn_mat_mult_kernel_s8_s16+0xfc4>
        result++;
 8006cb8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cbc:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8006cc0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cc4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	6013      	str	r3, [r2, #0]
    return result;
 8006cce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006cd6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006cd8:	bf00      	nop
 8006cda:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 += out_offset;
 8006cde:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8006ce2:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8006cec:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8006cf0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	bfb8      	it	lt
 8006cf8:	4613      	movlt	r3, r2
 8006cfa:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8006cfe:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8006d02:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8006d06:	4293      	cmp	r3, r2
 8006d08:	bfa8      	it	ge
 8006d0a:	4613      	movge	r3, r2
 8006d0c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        *out_0++ = (q7_t)ch_1_out_0;
 8006d10:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8006d14:	1c53      	adds	r3, r2, #1
 8006d16:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8006d1a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8006d22:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d2c:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d38:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8006d3c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d46:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006d4a:	6018      	str	r0, [r3, #0]
 8006d4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d50:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006d54:	6019      	str	r1, [r3, #0]
 8006d56:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d5a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8006d64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	fa03 f202 	lsl.w	r2, r3, r2
 8006d72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d76:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d80:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8006d84:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d88:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8006d90:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d94:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8006d9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006da0:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8006da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006da8:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8006daa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dae:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8006db2:	2300      	movs	r3, #0
 8006db4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006db6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8006dba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dbe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	17da      	asrs	r2, r3, #31
 8006dc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006dce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	17da      	asrs	r2, r3, #31
 8006dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006dea:	fb02 f203 	mul.w	r2, r2, r3
 8006dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006df2:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8006df6:	fb04 f303 	mul.w	r3, r4, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006e00:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8006e04:	fba2 8904 	umull	r8, r9, r2, r4
 8006e08:	444b      	add	r3, r9
 8006e0a:	4699      	mov	r9, r3
 8006e0c:	eb10 0308 	adds.w	r3, r0, r8
 8006e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e12:	eb41 0309 	adc.w	r3, r1, r9
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e18:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006e1c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult.long_long >> 31);
 8006e20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8006e24:	f04f 0000 	mov.w	r0, #0
 8006e28:	f04f 0100 	mov.w	r1, #0
 8006e2c:	0fd0      	lsrs	r0, r2, #31
 8006e2e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8006e32:	17d9      	asrs	r1, r3, #31
 8006e34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e38:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	6013      	str	r3, [r2, #0]
    return result;
 8006e40:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006e48:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006e4a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e4e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	dc06      	bgt.n	8006e66 <arm_nn_mat_mult_kernel_s8_s16+0x115c>
 8006e58:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e5c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	425a      	negs	r2, r3
 8006e64:	e000      	b.n	8006e68 <arm_nn_mat_mult_kernel_s8_s16+0x115e>
 8006e66:	2200      	movs	r2, #0
 8006e68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006e70:	6019      	str	r1, [r3, #0]
 8006e72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006e7a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8006e7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e80:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8006e84:	2300      	movs	r3, #0
 8006e86:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006e88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006e90:	2201      	movs	r2, #1
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	fa02 f103 	lsl.w	r1, r2, r3
 8006e98:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e9c:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8006ea0:	1e4b      	subs	r3, r1, #1
 8006ea2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8006ea4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ea8:	f5a3 71ce 	sub.w	r1, r3, #412	; 0x19c
 8006eac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006eb0:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8006eb4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006eb8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8006ec4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ec8:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 8006ecc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ed0:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8006ed4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ed8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	fa42 f303 	asr.w	r3, r2, r3
 8006ee4:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8006ee6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006eea:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8006eee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ef2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	105b      	asrs	r3, r3, #1
 8006efa:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8006efc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f00:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da0a      	bge.n	8006f20 <arm_nn_mat_mult_kernel_s8_s16+0x1216>
        threshold++;
 8006f0a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f0e:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8006f12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f16:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8006f20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f24:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8006f28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f2c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	dd0a      	ble.n	8006f4e <arm_nn_mat_mult_kernel_s8_s16+0x1244>
        result++;
 8006f38:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f3c:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8006f40:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f44:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	6013      	str	r3, [r2, #0]
    return result;
 8006f4e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006f56:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006f58:	bf00      	nop
 8006f5a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 += out_offset;
 8006f5e:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8006f62:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8006f66:	4413      	add	r3, r2
 8006f68:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8006f6c:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8006f70:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bfb8      	it	lt
 8006f78:	4613      	movlt	r3, r2
 8006f7a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8006f7e:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8006f82:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8006f86:	4293      	cmp	r3, r2
 8006f88:	bfa8      	it	ge
 8006f8a:	4613      	movge	r3, r2
 8006f8c:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        *out_1++ = (q7_t)ch_1_out_1;
 8006f90:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8006f94:	1c53      	adds	r3, r2, #1
 8006f96:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8006f9a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8006f9e:	b25b      	sxtb	r3, r3
 8006fa0:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8006fa2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 8006fac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fb0:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8006fb4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fb8:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 8006fc2:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 8006fc6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8006fca:	4413      	add	r3, r2
 8006fcc:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
        row_count--;
 8006fd0:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    while (row_count)
 8006fda:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f47e aecd 	bne.w	8005d7e <arm_nn_mat_mult_kernel_s8_s16+0x74>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 8006fe4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fe8:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 859e 	beq.w	8007b34 <arm_nn_mat_mult_kernel_s8_s16+0x1e2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 8006ff8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ffc:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8007000:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007004:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800700c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007010:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	441a      	add	r2, r3
 800701e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007022:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8007026:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 8007028:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        q31_t ch_0_out_1 = *bias++;
 8007032:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8007036:	1d13      	adds	r3, r2, #4
 8007038:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800703c:	6813      	ldr	r3, [r2, #0]
 800703e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

        uint16_t col_count = num_col_a >> 2;
 8007042:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8007046:	089b      	lsrs	r3, r3, #2
 8007048:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 800704c:	e294      	b.n	8007578 <arm_nn_mat_mult_kernel_s8_s16+0x186e>
 800704e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007052:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8007056:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800705a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800705c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007060:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007070:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8007074:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8007076:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800707a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	1d1a      	adds	r2, r3, #4
 8007084:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007088:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	601a      	str	r2, [r3, #0]
    return (val);
 8007090:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007094:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8007098:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800709a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800709e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070a2:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80070a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80070aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80070ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070b0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070c0:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80070c4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80070c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070ca:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1d1a      	adds	r2, r3, #4
 80070d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070d8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	601a      	str	r2, [r3, #0]
    return (val);
 80070e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070e4:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80070e8:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80070ea:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80070ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070f2:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 80070f6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007100:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8007104:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800710e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8007112:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800711c:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 8007120:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007124:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8007126:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800712a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800713a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800713e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8007140:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007144:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	1d1a      	adds	r2, r3, #4
 800714e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007152:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	601a      	str	r2, [r3, #0]
    return (val);
 800715a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800715e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8007162:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8007164:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007168:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800716c:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800716e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007172:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800717c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007186:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800718a:	2308      	movs	r3, #8
 800718c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800718e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007192:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8007196:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800719a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80071a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071aa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <arm_nn_mat_mult_kernel_s8_s16+0x14b6>
    return op1;
 80071b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071b8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	e00a      	b.n	80071d6 <arm_nn_mat_mult_kernel_s8_s16+0x14cc>
  return (op1 >> op2) | (op1 << (32U - op2));
 80071c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071c4:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 80071c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071cc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	41da      	rors	r2, r3
 80071d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071da:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80071de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071e4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	fa2f f283 	sxtb16	r2, r3
 80071ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071f2:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80071f6:	601a      	str	r2, [r3, #0]
  return(result);
 80071f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071fc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007206:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800720a:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 800720c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007210:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800721a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800721e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007220:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007224:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	fa2f f283 	sxtb16	r2, r3
 800722e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007232:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007236:	601a      	str	r2, [r3, #0]
  return(result);
 8007238:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800723c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007246:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800724a:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800724c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007250:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8007254:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007258:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007264:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8007268:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800726c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007278:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007282:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 800728c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007290:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800729a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072a6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80072ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072b2:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 80072b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072ba:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072c6:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 80072ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072da:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072e4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 80072ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072f2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072fc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007308:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	601a      	str	r2, [r3, #0]
    return source;
 8007310:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007314:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8007318:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 800731a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 800731e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007322:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800732e:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8007332:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007336:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800733a:	6018      	str	r0, [r3, #0]
 800733c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007340:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800734a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800734e:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007350:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007354:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007358:	6819      	ldr	r1, [r3, #0]
 800735a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800735e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007368:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	fb21 3202 	smlad	r2, r1, r2, r3
 8007372:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007376:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800737a:	601a      	str	r2, [r3, #0]
  return(result);
 800737c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007380:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 800738a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800738e:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800739a:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 800739e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80073a6:	6018      	str	r0, [r3, #0]
 80073a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073ba:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80073bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80073c4:	6819      	ldr	r1, [r3, #0]
 80073c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073ca:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	fb21 3202 	smlad	r2, r1, r2, r3
 80073de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073e2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80073e6:	601a      	str	r2, [r3, #0]
  return(result);
 80073e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073ec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80073f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073fa:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80073fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007402:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8007404:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007408:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007418:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800741c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800741e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007422:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	1d1a      	adds	r2, r3, #4
 800742c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007430:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	601a      	str	r2, [r3, #0]
    return (val);
 8007438:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800743c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8007440:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8007442:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8007446:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800744a:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800744e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007452:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8007454:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007458:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007468:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800746c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800746e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007472:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007480:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	601a      	str	r2, [r3, #0]
    return (val);
 8007488:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800748c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8007490:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8007492:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8007496:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800749a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80074a6:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80074aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074b2:	6018      	str	r0, [r3, #0]
 80074b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074b8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c6:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80074c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074cc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074d6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	fb21 3202 	smlad	r2, r1, r2, r3
 80074ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074ee:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80074f2:	601a      	str	r2, [r3, #0]
  return(result);
 80074f4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074f8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8007502:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007506:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8007512:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8007516:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800751a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800751e:	6018      	str	r0, [r3, #0]
 8007520:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007524:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800752e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8007532:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007534:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007538:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007542:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800754c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	fb21 3202 	smlad	r2, r1, r2, r3
 8007556:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800755a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800755e:	601a      	str	r2, [r3, #0]
  return(result);
 8007560:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007564:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

            col_count--;
 800756e:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8007572:	3b01      	subs	r3, #1
 8007574:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8007578:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 800757c:	2b00      	cmp	r3, #0
 800757e:	f47f ad66 	bne.w	800704e <arm_nn_mat_mult_kernel_s8_s16+0x1344>
        }
        col_count = num_col_a & 0x3;
 8007582:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 800758e:	e03e      	b.n	800760e <arm_nn_mat_mult_kernel_s8_s16+0x1904>
        {
            q7_t a0 = *ip_a0++;
 8007590:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8007594:	1c53      	adds	r3, r2, #1
 8007596:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800759a:	7813      	ldrb	r3, [r2, #0]
 800759c:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
            q15_t b0 = *ip_b0++;
 80075a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075a4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80075a8:	6819      	ldr	r1, [r3, #0]
 80075aa:	1c8a      	adds	r2, r1, #2
 80075ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075b0:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	880b      	ldrh	r3, [r1, #0]
 80075b8:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
            q15_t b1 = *ip_b1++;
 80075bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075c0:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	1c8a      	adds	r2, r1, #2
 80075c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075cc:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	880b      	ldrh	r3, [r1, #0]
 80075d4:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438

            ch_0_out_0 += a0 * b0;
 80075d8:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 80075dc:	f9b7 343a 	ldrsh.w	r3, [r7, #1082]	; 0x43a
 80075e0:	fb03 f202 	mul.w	r2, r3, r2
 80075e4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80075e8:	4413      	add	r3, r2
 80075ea:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 += a0 * b1;
 80075ee:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 80075f2:	f9b7 3438 	ldrsh.w	r3, [r7, #1080]	; 0x438
 80075f6:	fb03 f202 	mul.w	r2, r3, r2
 80075fa:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80075fe:	4413      	add	r3, r2
 8007600:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            col_count--;
 8007604:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8007608:	3b01      	subs	r3, #1
 800760a:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 800760e:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1bc      	bne.n	8007590 <arm_nn_mat_mult_kernel_s8_s16+0x1886>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8007616:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007620:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800762c:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8007630:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800763a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800763e:	6018      	str	r0, [r3, #0]
 8007640:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007644:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8007648:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800764a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800764e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007658:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800765c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	fa03 f202 	lsl.w	r2, r3, r2
 8007666:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800766a:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007674:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8007678:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800767c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8007684:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007688:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 800768c:	2300      	movs	r3, #0
 800768e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8007690:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007694:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8007698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800769c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800769e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076a2:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80076a6:	2300      	movs	r3, #0
 80076a8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80076aa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076b2:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	17da      	asrs	r2, r3, #31
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	617a      	str	r2, [r7, #20]
 80076be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076c2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	17da      	asrs	r2, r3, #31
 80076ca:	60bb      	str	r3, [r7, #8]
 80076cc:	60fa      	str	r2, [r7, #12]
 80076ce:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80076d2:	4633      	mov	r3, r6
 80076d4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80076d8:	4642      	mov	r2, r8
 80076da:	fb02 f203 	mul.w	r2, r2, r3
 80076de:	464b      	mov	r3, r9
 80076e0:	462c      	mov	r4, r5
 80076e2:	fb04 f303 	mul.w	r3, r4, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	462a      	mov	r2, r5
 80076ea:	4644      	mov	r4, r8
 80076ec:	fba2 4204 	umull	r4, r2, r2, r4
 80076f0:	657a      	str	r2, [r7, #84]	; 0x54
 80076f2:	4622      	mov	r2, r4
 80076f4:	653a      	str	r2, [r7, #80]	; 0x50
 80076f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076f8:	4413      	add	r3, r2
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54
 80076fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8007700:	4623      	mov	r3, r4
 8007702:	18c3      	adds	r3, r0, r3
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	462b      	mov	r3, r5
 8007708:	eb41 0303 	adc.w	r3, r1, r3
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007712:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8007716:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	0fc2      	lsrs	r2, r0, #31
 8007724:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007728:	17cb      	asrs	r3, r1, #31
 800772a:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800772e:	f5a1 7144 	sub.w	r1, r1, #784	; 0x310
 8007732:	4613      	mov	r3, r2
 8007734:	600b      	str	r3, [r1, #0]
    return result;
 8007736:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800773a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800773e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007740:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007744:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	dc06      	bgt.n	800775c <arm_nn_mat_mult_kernel_s8_s16+0x1a52>
 800774e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007752:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	425b      	negs	r3, r3
 800775a:	e000      	b.n	800775e <arm_nn_mat_mult_kernel_s8_s16+0x1a54>
 800775c:	2300      	movs	r3, #0
 800775e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007762:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8007766:	6011      	str	r1, [r2, #0]
 8007768:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800776c:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 8007770:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8007772:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007776:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800777e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007782:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8007786:	2201      	movs	r2, #1
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	409a      	lsls	r2, r3
 800778c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007790:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8007794:	3a01      	subs	r2, #1
 8007796:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8007798:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800779c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80077a0:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80077a4:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 80077a8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80077ac:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 80077b0:	6809      	ldr	r1, [r1, #0]
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	400a      	ands	r2, r1
 80077b6:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80077b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077bc:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80077c0:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80077c4:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 80077c8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80077cc:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 80077d0:	6809      	ldr	r1, [r1, #0]
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	fa41 f202 	asr.w	r2, r1, r2
 80077d8:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80077da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077de:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80077e2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80077e6:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	1052      	asrs	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80077f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077f4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da0a      	bge.n	8007814 <arm_nn_mat_mult_kernel_s8_s16+0x1b0a>
        threshold++;
 80077fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007802:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007806:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800780a:	f5a2 724a 	sub.w	r2, r2, #808	; 0x328
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	3201      	adds	r2, #1
 8007812:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8007814:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007818:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 800781c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007820:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	dd0a      	ble.n	8007842 <arm_nn_mat_mult_kernel_s8_s16+0x1b38>
        result++;
 800782c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007830:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8007834:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007838:	f5a2 7247 	sub.w	r2, r2, #796	; 0x31c
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	3201      	adds	r2, #1
 8007840:	601a      	str	r2, [r3, #0]
    return result;
 8007842:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007846:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800784a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800784c:	bf00      	nop
 800784e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 += out_offset;
 8007852:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8007856:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800785a:	4413      	add	r3, r2
 800785c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8007860:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 8007864:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8007868:	4293      	cmp	r3, r2
 800786a:	bfb8      	it	lt
 800786c:	4613      	movlt	r3, r2
 800786e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8007872:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 8007876:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 800787a:	4293      	cmp	r3, r2
 800787c:	bfa8      	it	ge
 800787e:	4613      	movge	r3, r2
 8007880:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        *out_0++ = (q7_t)ch_0_out_0;
 8007884:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	f8c7 24a8 	str.w	r2, [r7, #1192]	; 0x4a8
 800788e:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8007892:	b252      	sxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8007896:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078a0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078ac:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80078b0:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 80078b4:	6018      	str	r0, [r3, #0]
 80078b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078ba:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80078be:	6019      	str	r1, [r3, #0]
 80078c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078c4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078ce:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80078d8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80078dc:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	409a      	lsls	r2, r3
 80078e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078e8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078f2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80078f6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80078fa:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8007902:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007906:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800790e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007912:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8007916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800791a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800791c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007920:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8007924:	2200      	movs	r2, #0
 8007926:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007928:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800792c:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8007930:	f5a1 7136 	sub.w	r1, r1, #728	; 0x2d8
 8007934:	6809      	ldr	r1, [r1, #0]
 8007936:	17c8      	asrs	r0, r1, #31
 8007938:	62b9      	str	r1, [r7, #40]	; 0x28
 800793a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800793c:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8007940:	f5a1 7137 	sub.w	r1, r1, #732	; 0x2dc
 8007944:	6809      	ldr	r1, [r1, #0]
 8007946:	17c8      	asrs	r0, r1, #31
 8007948:	6239      	str	r1, [r7, #32]
 800794a:	6278      	str	r0, [r7, #36]	; 0x24
 800794c:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8007950:	4631      	mov	r1, r6
 8007952:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007956:	4640      	mov	r0, r8
 8007958:	fb00 f001 	mul.w	r0, r0, r1
 800795c:	4649      	mov	r1, r9
 800795e:	462c      	mov	r4, r5
 8007960:	fb04 f101 	mul.w	r1, r4, r1
 8007964:	4401      	add	r1, r0
 8007966:	4628      	mov	r0, r5
 8007968:	4644      	mov	r4, r8
 800796a:	fba0 4004 	umull	r4, r0, r0, r4
 800796e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007970:	4620      	mov	r0, r4
 8007972:	65b8      	str	r0, [r7, #88]	; 0x58
 8007974:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007976:	4401      	add	r1, r0
 8007978:	65f9      	str	r1, [r7, #92]	; 0x5c
 800797a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800797e:	4621      	mov	r1, r4
 8007980:	1851      	adds	r1, r2, r1
 8007982:	61b9      	str	r1, [r7, #24]
 8007984:	4629      	mov	r1, r5
 8007986:	eb43 0101 	adc.w	r1, r3, r1
 800798a:	61f9      	str	r1, [r7, #28]
 800798c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007990:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 8007994:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	0fc2      	lsrs	r2, r0, #31
 80079a2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80079a6:	17cb      	asrs	r3, r1, #31
 80079a8:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80079ac:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 80079b0:	4613      	mov	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]
    return result;
 80079b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079b8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80079bc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80079be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079c2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dc06      	bgt.n	80079da <arm_nn_mat_mult_kernel_s8_s16+0x1cd0>
 80079cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079d0:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	425b      	negs	r3, r3
 80079d8:	e000      	b.n	80079dc <arm_nn_mat_mult_kernel_s8_s16+0x1cd2>
 80079da:	2300      	movs	r3, #0
 80079dc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80079e0:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 80079e4:	6011      	str	r1, [r2, #0]
 80079e6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80079ea:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 80079ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80079f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079f4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80079fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a00:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8007a04:	2201      	movs	r2, #1
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a0e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8007a12:	3a01      	subs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8007a16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a1a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8007a1e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a22:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8007a26:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a2a:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8007a2e:	6809      	ldr	r1, [r1, #0]
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	400a      	ands	r2, r1
 8007a34:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8007a36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a3a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8007a3e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a42:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8007a46:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a4a:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8007a4e:	6809      	ldr	r1, [r1, #0]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	fa41 f202 	asr.w	r2, r1, r2
 8007a56:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8007a58:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a5c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007a60:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a64:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	1052      	asrs	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8007a6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a72:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da0a      	bge.n	8007a92 <arm_nn_mat_mult_kernel_s8_s16+0x1d88>
        threshold++;
 8007a7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a80:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007a84:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a88:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	3201      	adds	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8007a92:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a96:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8007a9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a9e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	dd0a      	ble.n	8007ac0 <arm_nn_mat_mult_kernel_s8_s16+0x1db6>
        result++;
 8007aaa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007aae:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8007ab2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007ab6:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	3201      	adds	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
    return result;
 8007ac0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007ac4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8007ac8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007aca:	bf00      	nop
 8007acc:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 += out_offset;
 8007ad0:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8007ad4:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8007ad8:	4413      	add	r3, r2
 8007ada:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8007ade:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 8007ae2:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	bfb8      	it	lt
 8007aea:	4613      	movlt	r3, r2
 8007aec:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8007af0:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 8007af4:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8007af8:	4293      	cmp	r3, r2
 8007afa:	bfa8      	it	ge
 8007afc:	4613      	movge	r3, r2
 8007afe:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        *out_1++ = (q7_t)ch_0_out_1;
 8007b02:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8007b0c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8007b10:	b252      	sxtb	r2, r2
 8007b12:	701a      	strb	r2, [r3, #0]
        out_mult++;
 8007b14:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8007b18:	3304      	adds	r3, #4
 8007b1a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 8007b1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b22:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8007b26:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007b2a:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8007b2e:	6812      	ldr	r2, [r2, #0]
 8007b30:	3204      	adds	r2, #4
 8007b32:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 8007b34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b38:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8007b42:	4413      	add	r3, r2
 8007b44:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8

    /* return the new output pointer with offset */
    return out_0;
 8007b48:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 8007b52:	46bd      	mov	sp, r7
 8007b54:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b58:	4770      	bx	lr

08007b5a <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 8007b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5c:	b093      	sub	sp, #76	; 0x4c
 8007b5e:	af0a      	add	r7, sp, #40	; 0x28
 8007b60:	6178      	str	r0, [r7, #20]
 8007b62:	6139      	str	r1, [r7, #16]
 8007b64:	60fa      	str	r2, [r7, #12]
 8007b66:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 8007b6e:	e033      	b.n	8007bd8 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	607b      	str	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	6852      	ldr	r2, [r2, #4]
 8007b7a:	6939      	ldr	r1, [r7, #16]
 8007b7c:	6889      	ldr	r1, [r1, #8]
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	6800      	ldr	r0, [r0, #0]
 8007b82:	68fc      	ldr	r4, [r7, #12]
 8007b84:	6864      	ldr	r4, [r4, #4]
 8007b86:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8007b88:	682d      	ldr	r5, [r5, #0]
 8007b8a:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8007b8c:	68f6      	ldr	r6, [r6, #12]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	9307      	str	r3, [sp, #28]
 8007b9e:	9606      	str	r6, [sp, #24]
 8007ba0:	9505      	str	r5, [sp, #20]
 8007ba2:	9404      	str	r4, [sp, #16]
 8007ba4:	9003      	str	r0, [sp, #12]
 8007ba6:	9102      	str	r1, [sp, #8]
 8007ba8:	9201      	str	r2, [sp, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bb6:	f004 fe94 	bl	800c8e2 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 8007bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	4413      	add	r3, r2
 8007bc4:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bce:	4413      	add	r3, r2
 8007bd0:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1c8      	bne.n	8007b70 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3724      	adds	r7, #36	; 0x24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007be8 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 8007bfe:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c02:	f6ad 2dd8 	subw	sp, sp, #2776	; 0xad8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	f607 24d8 	addw	r4, r7, #2776	; 0xad8
 8007c0c:	f6a4 2404 	subw	r4, r4, #2564	; 0xa04
 8007c10:	6020      	str	r0, [r4, #0]
 8007c12:	f607 20d8 	addw	r0, r7, #2776	; 0xad8
 8007c16:	f6a0 2008 	subw	r0, r0, #2568	; 0xa08
 8007c1a:	6001      	str	r1, [r0, #0]
 8007c1c:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8007c20:	f6a1 210c 	subw	r1, r1, #2572	; 0xa0c
 8007c24:	600a      	str	r2, [r1, #0]
 8007c26:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8007c2a:	f5a2 6221 	sub.w	r2, r2, #2576	; 0xa10
 8007c2e:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8007c30:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8007c34:	3b04      	subs	r3, #4
 8007c36:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 8007c40:	f004 bc7b 	b.w	800c53a <arm_nn_mat_mult_nt_t_s8+0x493c>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8007c44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007c48:	f6a3 1248 	subw	r2, r3, #2376	; 0x948
 8007c4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007c50:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 8007c58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007c5c:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

        q31_t lhs_offset_contribution0 = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        q31_t lhs_offset_contribution1 = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

        for (int32_t x = 0; x < rhs_cols; ++x)
 8007c72:	2300      	movs	r3, #0
 8007c74:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8007c78:	e028      	b.n	8007ccc <arm_nn_mat_mult_nt_t_s8+0xce>
        {
            lhs_offset_contribution0 += rhs[x];
 8007c7a:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8007c7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007c82:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8007c94:	4413      	add	r3, r2
 8007c96:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8007c9a:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8007c9e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8007ca2:	4413      	add	r3, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007caa:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        for (int32_t x = 0; x < rhs_cols; ++x)
 8007cc2:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8007ccc:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8007cd0:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	dbd0      	blt.n	8007c7a <arm_nn_mat_mult_nt_t_s8+0x7c>
        }

        lhs_offset_contribution0 *= lhs_offset;
 8007cd8:	f8d7 2acc 	ldr.w	r2, [r7, #2764]	; 0xacc
 8007cdc:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        lhs_offset_contribution1 *= lhs_offset;
 8007ce8:	f8d7 2ac8 	ldr.w	r2, [r7, #2760]	; 0xac8
 8007cec:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8007cf0:	fb02 f303 	mul.w	r3, r2, r3
 8007cf4:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        if (bias)
 8007cf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007cfc:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01e      	beq.n	8007d44 <arm_nn_mat_mult_nt_t_s8+0x146>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 8007d06:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8007d0a:	009a      	lsls	r2, r3, #2
 8007d0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007d10:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4413      	add	r3, r2
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8007d1e:	4413      	add	r3, r2
 8007d20:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 8007d24:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8007d28:	3301      	adds	r3, #1
 8007d2a:	009a      	lsls	r2, r3, #2
 8007d2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007d30:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4413      	add	r3, r2
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8007d3e:	4413      	add	r3, r2
 8007d40:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 8007d44:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8007d48:	105b      	asrs	r3, r3, #1
 8007d4a:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0

        while (lhs_rows_idx)
 8007d4e:	f002 bdd2 	b.w	800a8f6 <arm_nn_mat_mult_nt_t_s8+0x2cf8>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8007d52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007d56:	f6a3 124c 	subw	r2, r3, #2380	; 0x94c
 8007d5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007d5e:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 8007d66:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8007d6a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            q31_t res01 = lhs_offset_contribution1;
 8007d6e:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8007d72:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            q31_t res10 = lhs_offset_contribution0;
 8007d76:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8007d7a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            q31_t res11 = lhs_offset_contribution1;
 8007d7e:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8007d82:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            int32_t rhs_cols_idx = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8007d8c:	f001 bfee 	b.w	8009d6c <arm_nn_mat_mult_nt_t_s8+0x216e>
 8007d90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007d94:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8007d98:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007d9c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8007d9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007da2:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007db2:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8007db6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8007db8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007dbc:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007dca:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	601a      	str	r2, [r3, #0]
    return (val);
 8007dd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007dd6:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8007dda:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8007ddc:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val2 = __SXTB16(val1);
 8007de0:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8007de4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007de8:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8007dec:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007dee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007df2:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	fa2f f283 	sxtb16	r2, r3
 8007dfc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e00:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8007e04:	601a      	str	r2, [r3, #0]
  return(result);
 8007e06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e0a:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8007e14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e18:	f5a3 62a1 	sub.w	r2, r3, #1288	; 0x508
 8007e1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007e20:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8007e22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e26:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e36:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8007e3a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8007e3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e40:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	1d1a      	adds	r2, r3, #4
 8007e4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e4e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	601a      	str	r2, [r3, #0]
    return (val);
 8007e56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e5a:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8007e5e:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8007e60:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8007e64:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8007e68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e6c:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8007e70:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e76:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	fa2f f283 	sxtb16	r2, r3
 8007e80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e84:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8007e88:	601a      	str	r2, [r3, #0]
  return(result);
 8007e8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e8e:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8007e98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007e9c:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8007ea6:	441a      	add	r2, r3
 8007ea8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007eac:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007eb6:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8007ec0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007ec4:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8007ec8:	601a      	str	r2, [r3, #0]
    return (val);
 8007eca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007ece:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val1 = __SXTB16_RORn(val1, 8);
 8007ed8:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8007edc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007ee0:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007eea:	f2a3 42e4 	subw	r2, r3, #1252	; 0x4e4
 8007eee:	2308      	movs	r3, #8
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007ef6:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8007efa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007efe:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f0a:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 8007f0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f12:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8007f1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f1e:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 8007f22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f26:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 031f 	and.w	r3, r3, #31
 8007f30:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8007f32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f36:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d105      	bne.n	8007f4c <arm_nn_mat_mult_nt_t_s8+0x34e>
    return op1;
 8007f40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f44:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	e00a      	b.n	8007f62 <arm_nn_mat_mult_nt_t_s8+0x364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007f4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f50:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8007f54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f58:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	41da      	rors	r2, r3
 8007f62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f66:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8007f6a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007f6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f70:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	fa2f f283 	sxtb16	r2, r3
 8007f7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f7e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8007f82:	601a      	str	r2, [r3, #0]
  return(result);
 8007f84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f88:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8007f8c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8007f8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f92:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8007f96:	601a      	str	r2, [r3, #0]
  return result;
 8007f98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007f9c:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8007fa6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8007faa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fae:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fb8:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 8007fbc:	2308      	movs	r3, #8
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fc4:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8007fc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fcc:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fd8:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 8007fdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fe0:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8007fe8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007fec:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 8007ff0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8007ff4:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8008000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008004:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <arm_nn_mat_mult_nt_t_s8+0x41c>
    return op1;
 800800e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008012:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	e00a      	b.n	8008030 <arm_nn_mat_mult_nt_t_s8+0x432>
  return (op1 >> op2) | (op1 << (32U - op2));
 800801a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800801e:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8008022:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008026:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	41da      	rors	r2, r3
 8008030:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008034:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8008038:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800803a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800803e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	fa2f f283 	sxtb16	r2, r3
 8008048:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800804c:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8008050:	601a      	str	r2, [r3, #0]
  return(result);
 8008052:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008056:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800805a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800805c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008060:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8008064:	601a      	str	r2, [r3, #0]
  return result;
 8008066:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800806a:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8008074:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8008078:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 800807c:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8008080:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008084:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800808e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8008092:	6019      	str	r1, [r3, #0]
 8008094:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008098:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800809c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800809e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080a2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80080a6:	6819      	ldr	r1, [r3, #0]
 80080a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080ac:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080b6:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	fb21 3202 	smlad	r2, r1, r2, r3
 80080c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080c4:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80080c8:	601a      	str	r2, [r3, #0]
  return(result);
 80080ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080ce:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 80080d8:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 80080dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080e0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80080e4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80080e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080ea:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	fa2f f283 	sxtb16	r2, r3
 80080f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80080f8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80080fc:	601a      	str	r2, [r3, #0]
  return(result);
 80080fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008102:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 800810c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008110:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8008114:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8008118:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800811c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008126:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800812a:	6019      	str	r1, [r3, #0]
 800812c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008130:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8008134:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800813a:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008144:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800814e:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	fb21 3202 	smlad	r2, r1, r2, r3
 8008158:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800815c:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8008160:	601a      	str	r2, [r3, #0]
  return(result);
 8008162:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008166:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8008170:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8008174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008178:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008182:	f2a3 4284 	subw	r2, r3, #1156	; 0x484
 8008186:	2308      	movs	r3, #8
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800818e:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8008192:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008196:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081a2:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 80081a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081aa:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80081b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081b6:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 80081ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081be:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80081ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081ce:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d105      	bne.n	80081e4 <arm_nn_mat_mult_nt_t_s8+0x5e6>
    return op1;
 80081d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081dc:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	e00a      	b.n	80081fa <arm_nn_mat_mult_nt_t_s8+0x5fc>
  return (op1 >> op2) | (op1 << (32U - op2));
 80081e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081e8:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 80081ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081f0:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80081f4:	6812      	ldr	r2, [r2, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	41da      	rors	r2, r3
 80081fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80081fe:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8008202:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008208:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	fa2f f283 	sxtb16	r2, r3
 8008212:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008216:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800821a:	601a      	str	r2, [r3, #0]
  return(result);
 800821c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008220:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8008224:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8008226:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800822a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800822e:	601a      	str	r2, [r3, #0]
  return result;
 8008230:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008234:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 800823e:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8008242:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8008246:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 800824a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800824e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008258:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800825c:	6019      	str	r1, [r3, #0]
 800825e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008262:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8008266:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800826c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8008270:	6819      	ldr	r1, [r3, #0]
 8008272:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008276:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008280:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	fb21 3202 	smlad	r2, r1, r2, r3
 800828a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800828e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8008292:	601a      	str	r2, [r3, #0]
  return(result);
 8008294:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008298:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 80082a2:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80082a6:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 80082aa:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 80082ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082b2:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082bc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80082c0:	6019      	str	r1, [r3, #0]
 80082c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082c6:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80082ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80082cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082d0:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80082d4:	6819      	ldr	r1, [r3, #0]
 80082d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082da:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082e4:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	fb21 3202 	smlad	r2, r1, r2, r3
 80082ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082f2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80082f6:	601a      	str	r2, [r3, #0]
  return(result);
 80082f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80082fc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8008306:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800830a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8008314:	441a      	add	r2, r3
 8008316:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800831a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008324:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800832e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008332:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8008336:	601a      	str	r2, [r3, #0]
    return (val);
 8008338:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800833c:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8008346:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800834a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800834e:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8008352:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008354:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008358:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	fa2f f283 	sxtb16	r2, r3
 8008362:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008366:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800836a:	601a      	str	r2, [r3, #0]
  return(result);
 800836c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008370:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 800837a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800837e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008382:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800838c:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 8008390:	2308      	movs	r3, #8
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008398:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800839c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083a0:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083ac:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 80083b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083b4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80083bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083c0:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 80083c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083c8:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80083d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083d8:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <arm_nn_mat_mult_nt_t_s8+0x7f0>
    return op1;
 80083e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083e6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	e00a      	b.n	8008404 <arm_nn_mat_mult_nt_t_s8+0x806>
  return (op1 >> op2) | (op1 << (32U - op2));
 80083ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083f2:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80083f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80083fa:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	41da      	rors	r2, r3
 8008404:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008408:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800840c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800840e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008412:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	fa2f f283 	sxtb16	r2, r3
 800841c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008420:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8008424:	601a      	str	r2, [r3, #0]
  return(result);
 8008426:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800842a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800842e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8008430:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008434:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8008438:	601a      	str	r2, [r3, #0]
  return result;
 800843a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800843e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8008448:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 800844c:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8008450:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8008454:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008458:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008462:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8008466:	6019      	str	r1, [r3, #0]
 8008468:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800846c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8008470:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008472:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008476:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800847a:	6819      	ldr	r1, [r3, #0]
 800847c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008480:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800848a:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	fb21 3202 	smlad	r2, r1, r2, r3
 8008494:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008498:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800849c:	601a      	str	r2, [r3, #0]
  return(result);
 800849e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084a2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 80084ac:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80084b0:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 80084b4:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 80084b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084bc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084c6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80084ca:	6019      	str	r1, [r3, #0]
 80084cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084d0:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80084d4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084e4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084ee:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	fb21 3202 	smlad	r2, r1, r2, r3
 80084f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80084fc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008500:	601a      	str	r2, [r3, #0]
  return(result);
 8008502:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008506:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8008510:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008514:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8008518:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 800851c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008520:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800852a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800852e:	6019      	str	r1, [r3, #0]
 8008530:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008534:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8008538:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800853a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800853e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008548:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008552:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	fb21 3202 	smlad	r2, r1, r2, r3
 800855c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008560:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8008564:	601a      	str	r2, [r3, #0]
  return(result);
 8008566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800856a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8008574:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008578:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800857c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008580:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8008582:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008586:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008596:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 800859a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800859c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085a0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1d1a      	adds	r2, r3, #4
 80085aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085ae:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	601a      	str	r2, [r3, #0]
    return (val);
 80085b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085ba:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80085be:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80085c0:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 80085c4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80085c8:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 80085cc:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 80085d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085d4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085de:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80085e2:	6019      	str	r1, [r3, #0]
 80085e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085e8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80085ec:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80085ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085f2:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80085f6:	6819      	ldr	r1, [r3, #0]
 80085f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80085fc:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008606:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	fb21 3202 	smlad	r2, r1, r2, r3
 8008610:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008614:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008618:	601a      	str	r2, [r3, #0]
  return(result);
 800861a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800861e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8008628:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800862c:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8008636:	441a      	add	r2, r3
 8008638:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800863c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008646:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8008650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008654:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8008658:	601a      	str	r2, [r3, #0]
    return (val);
 800865a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800865e:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 8008668:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 800866c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008670:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008674:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800867a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	fa2f f283 	sxtb16	r2, r3
 8008684:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008688:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800868c:	601a      	str	r2, [r3, #0]
  return(result);
 800868e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008692:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 800869c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086a0:	f5a3 7279 	sub.w	r2, r3, #996	; 0x3e4
 80086a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80086a8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80086aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086ae:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	461a      	mov	r2, r3
 80086ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086be:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 80086c2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80086c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086c8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086d6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	601a      	str	r2, [r3, #0]
    return (val);
 80086de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086e2:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 80086e6:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80086e8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 80086ec:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80086f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086f4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80086f8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80086fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80086fe:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	fa2f f283 	sxtb16	r2, r3
 8008708:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800870c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8008710:	601a      	str	r2, [r3, #0]
  return(result);
 8008712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008716:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 8008720:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8008724:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008728:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008732:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8008736:	2308      	movs	r3, #8
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800873e:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8008742:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008746:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008752:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 8008756:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800875a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8008762:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008766:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 800876a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800876e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800877a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800877e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d105      	bne.n	8008794 <arm_nn_mat_mult_nt_t_s8+0xb96>
    return op1;
 8008788:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800878c:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	e00a      	b.n	80087aa <arm_nn_mat_mult_nt_t_s8+0xbac>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008794:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008798:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 800879c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087a0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	41da      	rors	r2, r3
 80087aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087ae:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80087b2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80087b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087b8:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	fa2f f283 	sxtb16	r2, r3
 80087c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087c6:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80087ca:	601a      	str	r2, [r3, #0]
  return(result);
 80087cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087d0:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80087d4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80087d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087da:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80087de:	601a      	str	r2, [r3, #0]
  return result;
 80087e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087e4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 80087ee:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80087f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80087f6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008800:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 8008804:	2308      	movs	r3, #8
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800880c:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8008810:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008814:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008820:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8008824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008828:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8008830:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008834:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8008838:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800883c:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8008848:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800884c:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d105      	bne.n	8008862 <arm_nn_mat_mult_nt_t_s8+0xc64>
    return op1;
 8008856:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800885a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	e00a      	b.n	8008878 <arm_nn_mat_mult_nt_t_s8+0xc7a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008862:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008866:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 800886a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800886e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8008872:	6812      	ldr	r2, [r2, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	41da      	rors	r2, r3
 8008878:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800887c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8008880:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008886:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	fa2f f283 	sxtb16	r2, r3
 8008890:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008894:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8008898:	601a      	str	r2, [r3, #0]
  return(result);
 800889a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800889e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80088a2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80088a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088a8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80088ac:	601a      	str	r2, [r3, #0]
  return result;
 80088ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088b2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 80088bc:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80088c0:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 80088c4:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 80088c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088cc:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088d6:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80088da:	6019      	str	r1, [r3, #0]
 80088dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088e0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80088e4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80088e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088ea:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088f4:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80088fe:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	fb21 3202 	smlad	r2, r1, r2, r3
 8008908:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800890c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8008910:	601a      	str	r2, [r3, #0]
  return(result);
 8008912:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008916:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8008920:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8008924:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008928:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800892c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800892e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008932:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	fa2f f283 	sxtb16	r2, r3
 800893c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008940:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8008944:	601a      	str	r2, [r3, #0]
  return(result);
 8008946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800894a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 8008954:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008958:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 800895c:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8008960:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008964:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800896e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8008972:	6019      	str	r1, [r3, #0]
 8008974:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008978:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800897c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800897e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008982:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8008986:	6819      	ldr	r1, [r3, #0]
 8008988:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800898c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008996:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	fb21 3202 	smlad	r2, r1, r2, r3
 80089a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089a4:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80089a8:	601a      	str	r2, [r3, #0]
  return(result);
 80089aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089ae:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 80089b8:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 80089bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089c0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089ca:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 80089ce:	2308      	movs	r3, #8
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089d6:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 80089da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089de:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089ea:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80089ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089f2:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80089fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80089fe:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8008a02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a06:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 031f 	and.w	r3, r3, #31
 8008a10:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8008a12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a16:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <arm_nn_mat_mult_nt_t_s8+0xe2e>
    return op1;
 8008a20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a24:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	e00a      	b.n	8008a42 <arm_nn_mat_mult_nt_t_s8+0xe44>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008a2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a30:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8008a34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a38:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	41da      	rors	r2, r3
 8008a42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a46:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8008a4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a50:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	fa2f f283 	sxtb16	r2, r3
 8008a5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a5e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8008a62:	601a      	str	r2, [r3, #0]
  return(result);
 8008a64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a68:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8008a6c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8008a6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a72:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8008a76:	601a      	str	r2, [r3, #0]
  return result;
 8008a78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a7c:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8008a86:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8008a8a:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8008a8e:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8008a92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008a96:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008aa0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008aaa:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008aae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ab0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ab4:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8008ab8:	6819      	ldr	r1, [r3, #0]
 8008aba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008abe:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ac8:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	fb21 3202 	smlad	r2, r1, r2, r3
 8008ad2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ad6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8008ada:	601a      	str	r2, [r3, #0]
  return(result);
 8008adc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ae0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8008aea:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008aee:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8008af2:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8008af6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008afa:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b04:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8008b08:	6019      	str	r1, [r3, #0]
 8008b0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b0e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008b12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b18:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b22:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b2c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	fb21 3202 	smlad	r2, r1, r2, r3
 8008b36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b3a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8008b3e:	601a      	str	r2, [r3, #0]
  return(result);
 8008b40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b44:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8008b4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b52:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8008b5c:	441a      	add	r2, r3
 8008b5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b62:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b6c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8008b76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b7a:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8008b7e:	601a      	str	r2, [r3, #0]
    return (val);
 8008b80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b84:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8008b8e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008b92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008b96:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8008b9a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ba0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	fa2f f283 	sxtb16	r2, r3
 8008baa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008bae:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8008bb2:	601a      	str	r2, [r3, #0]
  return(result);
 8008bb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008bb8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8008bc2:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008bc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008bca:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008bd4:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8008bd8:	2308      	movs	r3, #8
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008be0:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8008be4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008be8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008bf4:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8008bf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008bfc:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8008c04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c08:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8008c0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c10:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 031f 	and.w	r3, r3, #31
 8008c1a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8008c1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c20:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <arm_nn_mat_mult_nt_t_s8+0x1038>
    return op1;
 8008c2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c2e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	e00a      	b.n	8008c4c <arm_nn_mat_mult_nt_t_s8+0x104e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c3a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8008c3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c42:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	41da      	rors	r2, r3
 8008c4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c50:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8008c54:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c5a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	fa2f f283 	sxtb16	r2, r3
 8008c64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c68:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8008c6c:	601a      	str	r2, [r3, #0]
  return(result);
 8008c6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c72:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8008c76:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8008c78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c7c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8008c80:	601a      	str	r2, [r3, #0]
  return result;
 8008c82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008c86:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8008c90:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8008c94:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8008c98:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8008c9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ca0:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008caa:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8008cae:	6019      	str	r1, [r3, #0]
 8008cb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008cb4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8008cb8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008cba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008cbe:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008cc8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008cd2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	fb21 3202 	smlad	r2, r1, r2, r3
 8008cdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ce0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8008ce4:	601a      	str	r2, [r3, #0]
  return(result);
 8008ce6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008cea:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8008cf4:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8008cf8:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8008cfc:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8008d00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d04:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d0e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8008d12:	6019      	str	r1, [r3, #0]
 8008d14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d18:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8008d1c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d22:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d2c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d36:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	fb21 3202 	smlad	r2, r1, r2, r3
 8008d40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d44:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8008d48:	601a      	str	r2, [r3, #0]
  return(result);
 8008d4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d4e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8008d58:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008d5c:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8008d60:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8008d64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d68:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d72:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d76:	6019      	str	r1, [r3, #0]
 8008d78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d7c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8008d80:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d86:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8008d8a:	6819      	ldr	r1, [r3, #0]
 8008d8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d90:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008d9a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	fb21 3202 	smlad	r2, r1, r2, r3
 8008da4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008da8:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8008dac:	601a      	str	r2, [r3, #0]
  return(result);
 8008dae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008db2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8008dbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008dc0:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8008dc4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008dc8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8008dca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008dce:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008dde:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8008de2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8008de4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008de8:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008df6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	601a      	str	r2, [r3, #0]
    return (val);
 8008dfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e02:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8008e06:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8008e08:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 8008e0c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008e10:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8008e14:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8008e18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e1c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e26:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8008e2a:	6019      	str	r1, [r3, #0]
 8008e2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e30:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8008e34:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008e36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e3a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e44:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e4e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	fb21 3202 	smlad	r2, r1, r2, r3
 8008e58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e5c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8008e60:	601a      	str	r2, [r3, #0]
  return(result);
 8008e62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e66:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8008e70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e74:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8008e7e:	441a      	add	r2, r3
 8008e80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e84:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e8e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8008e98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008e9c:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8008ea0:	601a      	str	r2, [r3, #0]
    return (val);
 8008ea2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ea6:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 8008eb0:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8008eb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008eb8:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8008ebc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ebe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ec2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	fa2f f283 	sxtb16	r2, r3
 8008ecc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ed0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8008ed4:	601a      	str	r2, [r3, #0]
  return(result);
 8008ed6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008eda:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8008ee4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ee8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8008eec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8008ef0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8008ef2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ef6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f06:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8008f0a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8008f0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f10:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	1d1a      	adds	r2, r3, #4
 8008f1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f1e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	601a      	str	r2, [r3, #0]
    return (val);
 8008f26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f2a:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8008f2e:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8008f30:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8008f34:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8008f38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f3c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8008f40:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f46:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	fa2f f283 	sxtb16	r2, r3
 8008f50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f54:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8008f58:	601a      	str	r2, [r3, #0]
  return(result);
 8008f5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f5e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 8008f68:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8008f6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f70:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f7a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8008f7e:	2308      	movs	r3, #8
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f86:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8008f8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f8e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008f9a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8008f9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fa2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8008faa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fae:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8008fb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fb6:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 031f 	and.w	r3, r3, #31
 8008fc0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8008fc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fc6:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d105      	bne.n	8008fdc <arm_nn_mat_mult_nt_t_s8+0x13de>
    return op1;
 8008fd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fd4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	e00a      	b.n	8008ff2 <arm_nn_mat_mult_nt_t_s8+0x13f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008fdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fe0:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8008fe4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008fe8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	41da      	rors	r2, r3
 8008ff2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8008ff6:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8008ffa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ffc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009000:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	fa2f f283 	sxtb16	r2, r3
 800900a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800900e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8009012:	601a      	str	r2, [r3, #0]
  return(result);
 8009014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009018:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800901c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800901e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009022:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8009026:	601a      	str	r2, [r3, #0]
  return result;
 8009028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800902c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8009036:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800903a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800903e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009048:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 800904c:	2308      	movs	r3, #8
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009054:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 8009058:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800905c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009068:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800906c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009070:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8009078:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800907c:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8009080:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009084:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8009090:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009094:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d105      	bne.n	80090aa <arm_nn_mat_mult_nt_t_s8+0x14ac>
    return op1;
 800909e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090a2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	e00a      	b.n	80090c0 <arm_nn_mat_mult_nt_t_s8+0x14c2>
  return (op1 >> op2) | (op1 << (32U - op2));
 80090aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090ae:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 80090b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090b6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80090ba:	6812      	ldr	r2, [r2, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	41da      	rors	r2, r3
 80090c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090c4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80090c8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80090ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090ce:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	fa2f f283 	sxtb16	r2, r3
 80090d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090dc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80090e0:	601a      	str	r2, [r3, #0]
  return(result);
 80090e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090e6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80090ea:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80090ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80090f4:	601a      	str	r2, [r3, #0]
  return result;
 80090f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80090fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8009104:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8009108:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 800910c:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8009110:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009114:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800911e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8009122:	6019      	str	r1, [r3, #0]
 8009124:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009128:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800912c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800912e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009132:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8009136:	6819      	ldr	r1, [r3, #0]
 8009138:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800913c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009146:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	fb21 3202 	smlad	r2, r1, r2, r3
 8009150:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009154:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8009158:	601a      	str	r2, [r3, #0]
  return(result);
 800915a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800915e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8009168:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 800916c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009170:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8009174:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009176:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800917a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	fa2f f283 	sxtb16	r2, r3
 8009184:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009188:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800918c:	601a      	str	r2, [r3, #0]
  return(result);
 800918e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009192:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 800919c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80091a0:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80091a4:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 80091a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80091ba:	6019      	str	r1, [r3, #0]
 80091bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091c4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80091c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091ce:	6819      	ldr	r1, [r3, #0]
 80091d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091d4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	fb21 3202 	smlad	r2, r1, r2, r3
 80091e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091ec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80091f0:	601a      	str	r2, [r3, #0]
  return(result);
 80091f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80091f6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8009200:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8009204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009208:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009212:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8009216:	2308      	movs	r3, #8
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800921e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8009222:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009226:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009232:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8009236:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800923a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8009242:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009246:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800924a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800924e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800925a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800925e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d105      	bne.n	8009274 <arm_nn_mat_mult_nt_t_s8+0x1676>
    return op1;
 8009268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800926c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	e00a      	b.n	800928a <arm_nn_mat_mult_nt_t_s8+0x168c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8009274:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009278:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800927c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	41da      	rors	r2, r3
 800928a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800928e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8009292:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009294:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009298:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	fa2f f283 	sxtb16	r2, r3
 80092a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092a6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80092aa:	601a      	str	r2, [r3, #0]
  return(result);
 80092ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80092b4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80092b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80092be:	601a      	str	r2, [r3, #0]
  return result;
 80092c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 80092ce:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80092d2:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 80092d6:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 80092da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092e8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80092ec:	6019      	str	r1, [r3, #0]
 80092ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092f2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80092f6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80092f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80092fc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009306:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009310:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	fb21 3202 	smlad	r2, r1, r2, r3
 800931a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800931e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8009322:	601a      	str	r2, [r3, #0]
  return(result);
 8009324:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009328:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8009332:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8009336:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 800933a:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 800933e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009342:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800934c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8009350:	6019      	str	r1, [r3, #0]
 8009352:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009356:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800935a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800935c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009360:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8009364:	6819      	ldr	r1, [r3, #0]
 8009366:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800936a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009374:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	fb21 3202 	smlad	r2, r1, r2, r3
 800937e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009382:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009386:	601a      	str	r2, [r3, #0]
  return(result);
 8009388:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800938c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8009396:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800939a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80093a4:	441a      	add	r2, r3
 80093a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093b4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80093be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093c2:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 80093c6:	601a      	str	r2, [r3, #0]
    return (val);
 80093c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093cc:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 80093d6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80093da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093de:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80093e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80093e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093e8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	fa2f f283 	sxtb16	r2, r3
 80093f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80093f6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80093fa:	601a      	str	r2, [r3, #0]
  return(result);
 80093fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009400:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 800940a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800940e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009412:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800941c:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8009420:	2308      	movs	r3, #8
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009428:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800942c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009430:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800943c:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8009440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800944c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009450:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8009454:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009458:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8009464:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009468:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d105      	bne.n	800947e <arm_nn_mat_mult_nt_t_s8+0x1880>
    return op1;
 8009472:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009476:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	e00a      	b.n	8009494 <arm_nn_mat_mult_nt_t_s8+0x1896>
  return (op1 >> op2) | (op1 << (32U - op2));
 800947e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009482:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8009486:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800948a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800948e:	6812      	ldr	r2, [r2, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	41da      	rors	r2, r3
 8009494:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009498:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800949c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800949e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094a2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	fa2f f283 	sxtb16	r2, r3
 80094ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80094b4:	601a      	str	r2, [r3, #0]
  return(result);
 80094b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80094be:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80094c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094c4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80094c8:	601a      	str	r2, [r3, #0]
  return result;
 80094ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094ce:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 80094d8:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80094dc:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 80094e0:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 80094e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80094f6:	6019      	str	r1, [r3, #0]
 80094f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80094fc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8009500:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009502:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009506:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009510:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800951a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	fb21 3202 	smlad	r2, r1, r2, r3
 8009524:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009528:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800952c:	601a      	str	r2, [r3, #0]
  return(result);
 800952e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009532:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 800953c:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8009540:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8009544:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8009548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800954c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800955a:	6019      	str	r1, [r3, #0]
 800955c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009560:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009564:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800956a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800956e:	6819      	ldr	r1, [r3, #0]
 8009570:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009574:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800957e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	fb21 3202 	smlad	r2, r1, r2, r3
 8009588:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800958c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009590:	601a      	str	r2, [r3, #0]
  return(result);
 8009592:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009596:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 80095a0:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80095a4:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80095a8:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 80095ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095b0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095ba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80095be:	6019      	str	r1, [r3, #0]
 80095c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80095c8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80095ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095ce:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80095d2:	6819      	ldr	r1, [r3, #0]
 80095d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095d8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	fb21 3202 	smlad	r2, r1, r2, r3
 80095ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80095f4:	601a      	str	r2, [r3, #0]
  return(result);
 80095f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80095fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8009604:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009608:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800960c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009610:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8009612:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009616:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009626:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 800962a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800962c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009630:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800963e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	601a      	str	r2, [r3, #0]
    return (val);
 8009646:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800964a:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 800964e:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8009650:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 8009654:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8009658:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 800965c:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8009660:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009664:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800966e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009672:	6019      	str	r1, [r3, #0]
 8009674:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009678:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800967c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800967e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009682:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009686:	6819      	ldr	r1, [r3, #0]
 8009688:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800968c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009696:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	fb21 3202 	smlad	r2, r1, r2, r3
 80096a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80096a8:	601a      	str	r2, [r3, #0]
  return(result);
 80096aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80096b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096bc:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80096c6:	441a      	add	r2, r3
 80096c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80096e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096e4:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 80096e8:	601a      	str	r2, [r3, #0]
    return (val);
 80096ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80096ee:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 80096f8:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 80096fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009700:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009704:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009706:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800970a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	fa2f f283 	sxtb16	r2, r3
 8009714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009718:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800971c:	601a      	str	r2, [r3, #0]
  return(result);
 800971e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009722:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 800972c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009730:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8009734:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009738:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800973a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800973e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800974e:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 8009752:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8009754:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009758:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	1d1a      	adds	r2, r3, #4
 8009762:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009766:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	601a      	str	r2, [r3, #0]
    return (val);
 800976e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009772:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 8009776:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8009778:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 800977c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8009780:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009784:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009788:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800978a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800978e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	fa2f f283 	sxtb16	r2, r3
 8009798:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800979c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80097a0:	601a      	str	r2, [r3, #0]
  return(result);
 80097a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097a6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 80097b0:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 80097b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097c2:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80097c6:	2308      	movs	r3, #8
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097ce:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80097d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097d6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097e2:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80097e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80097f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097f6:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80097fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80097fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 031f 	and.w	r3, r3, #31
 8009808:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800980a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800980e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <arm_nn_mat_mult_nt_t_s8+0x1c26>
    return op1;
 8009818:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800981c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	e00a      	b.n	800983a <arm_nn_mat_mult_nt_t_s8+0x1c3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8009824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009828:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800982c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009830:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009834:	6812      	ldr	r2, [r2, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	41da      	rors	r2, r3
 800983a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800983e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009842:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009844:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009848:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	fa2f f283 	sxtb16	r2, r3
 8009852:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009856:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800985a:	601a      	str	r2, [r3, #0]
  return(result);
 800985c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009860:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009864:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8009866:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800986a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800986e:	601a      	str	r2, [r3, #0]
  return result;
 8009870:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009874:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 800987e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8009882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009886:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009890:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8009894:	2308      	movs	r3, #8
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800989c:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80098a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098b0:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80098b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098b8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80098c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098c4:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80098c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098cc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 031f 	and.w	r3, r3, #31
 80098d6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80098d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098dc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d105      	bne.n	80098f2 <arm_nn_mat_mult_nt_t_s8+0x1cf4>
    return op1;
 80098e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098ea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	e00a      	b.n	8009908 <arm_nn_mat_mult_nt_t_s8+0x1d0a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80098f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098f6:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80098fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80098fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009902:	6812      	ldr	r2, [r2, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	41da      	rors	r2, r3
 8009908:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800990c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009910:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009912:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009916:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	fa2f f283 	sxtb16	r2, r3
 8009920:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009924:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009928:	601a      	str	r2, [r3, #0]
  return(result);
 800992a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800992e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009932:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8009934:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009938:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800993c:	601a      	str	r2, [r3, #0]
  return result;
 800993e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009942:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 800994c:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8009950:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8009954:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8009958:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800995c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009966:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800996a:	6019      	str	r1, [r3, #0]
 800996c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009970:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009974:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009976:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800997a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009984:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800998e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	fb21 3202 	smlad	r2, r1, r2, r3
 8009998:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800999c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80099a0:	601a      	str	r2, [r3, #0]
  return(result);
 80099a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 80099b0:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 80099b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80099bc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80099be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	fa2f f283 	sxtb16	r2, r3
 80099cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80099d4:	601a      	str	r2, [r3, #0]
  return(result);
 80099d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 80099e4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80099e8:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80099ec:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 80099f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80099fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009a02:	6019      	str	r1, [r3, #0]
 8009a04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a08:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009a0c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009a0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	fb21 3202 	smlad	r2, r1, r2, r3
 8009a30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009a38:	601a      	str	r2, [r3, #0]
  return(result);
 8009a3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a3e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8009a48:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8009a4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a5a:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8009a5e:	2308      	movs	r3, #8
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a66:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8009a6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a7a:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8009a7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a82:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8009a8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a8e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8009a92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 031f 	and.w	r3, r3, #31
 8009aa0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8009aa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d105      	bne.n	8009abc <arm_nn_mat_mult_nt_t_s8+0x1ebe>
    return op1;
 8009ab0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ab4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	e00a      	b.n	8009ad2 <arm_nn_mat_mult_nt_t_s8+0x1ed4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8009abc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ac0:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8009ac4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	41da      	rors	r2, r3
 8009ad2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ada:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009adc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	fa2f f283 	sxtb16	r2, r3
 8009aea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009aee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009af2:	601a      	str	r2, [r3, #0]
  return(result);
 8009af4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009af8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009afc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8009afe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009b06:	601a      	str	r2, [r3, #0]
  return result;
 8009b08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b0c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8009b16:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8009b1a:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8009b1e:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8009b22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009b34:	6019      	str	r1, [r3, #0]
 8009b36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009b3e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009b40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009b48:	6819      	ldr	r1, [r3, #0]
 8009b4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	fb21 3202 	smlad	r2, r1, r2, r3
 8009b62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009b6a:	601a      	str	r2, [r3, #0]
  return(result);
 8009b6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8009b7a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8009b7e:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8009b82:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8009b86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b8a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b98:	6019      	str	r1, [r3, #0]
 8009b9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009ba4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ba8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009bac:	6819      	ldr	r1, [r3, #0]
 8009bae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	fb21 3202 	smlad	r2, r1, r2, r3
 8009bc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009bca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009bce:	601a      	str	r2, [r3, #0]
  return(result);
 8009bd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009bd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8009bde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009be2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8009bec:	4413      	add	r3, r2
 8009bee:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 8009bf2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8009bfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009bfe:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 8009c02:	601a      	str	r2, [r3, #0]
    return (val);
 8009c04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009c08:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8009c12:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8009c16:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009c1a:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8009c1e:	fa2f f383 	sxtb16	r3, r3
 8009c22:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
  return(result);
 8009c26:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 8009c2a:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8009c2e:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8009c32:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
 8009c36:	2308      	movs	r3, #8
 8009c38:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8009c3c:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8009c40:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
 8009c44:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8009c48:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  op2 %= 32U;
 8009c4c:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8009c50:	f003 031f 	and.w	r3, r3, #31
 8009c54:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  if (op2 == 0U)
 8009c58:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d102      	bne.n	8009c66 <arm_nn_mat_mult_nt_t_s8+0x2068>
    return op1;
 8009c60:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8009c64:	e005      	b.n	8009c72 <arm_nn_mat_mult_nt_t_s8+0x2074>
  return (op1 >> op2) | (op1 << (32U - op2));
 8009c66:	f8d7 29f8 	ldr.w	r2, [r7, #2552]	; 0x9f8
 8009c6a:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8009c6e:	fa62 f303 	ror.w	r3, r2, r3
 8009c72:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009c76:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 8009c7a:	fa2f f383 	sxtb16	r3, r3
 8009c7e:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
  return(result);
 8009c82:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
    result = __SXTB16(__ROR(op1, rotate)) ;
 8009c86:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
  return result;
 8009c8a:	f8d7 39e8 	ldr.w	r3, [r7, #2536]	; 0x9e8
 8009c8e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8009c92:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 8009c96:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	; 0xa54
 8009c9a:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8009c9e:	f8c7 1a10 	str.w	r1, [r7, #2576]	; 0xa10
 8009ca2:	f8c7 2a0c 	str.w	r2, [r7, #2572]	; 0xa0c
 8009ca6:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009caa:	f8d7 1a10 	ldr.w	r1, [r7, #2576]	; 0xa10
 8009cae:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8009cb2:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8009cb6:	fb21 3302 	smlad	r3, r1, r2, r3
 8009cba:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
  return(result);
 8009cbe:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8009cc2:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8009cc6:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 8009cca:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	; 0xa44
 8009cce:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8009cd2:	f8c7 1a20 	str.w	r1, [r7, #2592]	; 0xa20
 8009cd6:	f8c7 2a1c 	str.w	r2, [r7, #2588]	; 0xa1c
 8009cda:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009cde:	f8d7 1a20 	ldr.w	r1, [r7, #2592]	; 0xa20
 8009ce2:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 8009ce6:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8009cea:	fb21 3302 	smlad	r3, r1, r2, r3
 8009cee:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
  return(result);
 8009cf2:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 8009cf6:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8009cfa:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 8009cfe:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8009d02:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8009d06:	f8c7 1a30 	str.w	r1, [r7, #2608]	; 0xa30
 8009d0a:	f8c7 2a2c 	str.w	r2, [r7, #2604]	; 0xa2c
 8009d0e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009d12:	f8d7 1a30 	ldr.w	r1, [r7, #2608]	; 0xa30
 8009d16:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 8009d1a:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8009d1e:	fb21 3302 	smlad	r3, r1, r2, r3
 8009d22:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
  return(result);
 8009d26:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 8009d2a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val0, val4, res11);
 8009d2e:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 8009d32:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8009d36:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8009d3a:	f8c7 1a40 	str.w	r1, [r7, #2624]	; 0xa40
 8009d3e:	f8c7 2a3c 	str.w	r2, [r7, #2620]	; 0xa3c
 8009d42:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009d46:	f8d7 1a40 	ldr.w	r1, [r7, #2624]	; 0xa40
 8009d4a:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	; 0xa3c
 8009d4e:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8009d52:	fb21 3302 	smlad	r3, r1, r2, r3
 8009d56:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
  return(result);
 8009d5a:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 8009d5e:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8009d62:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8009d66:	3310      	adds	r3, #16
 8009d68:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 8009d6c:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8009d70:	f1a3 020f 	sub.w	r2, r3, #15
 8009d74:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	f6fe a809 	blt.w	8007d90 <arm_nn_mat_mult_nt_t_s8+0x192>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8009d7e:	e06c      	b.n	8009e5a <arm_nn_mat_mult_nt_t_s8+0x225c>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8009d80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009d84:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f887 3a5f 	strb.w	r3, [r7, #2655]	; 0xa5f
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8009d90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009d94:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8009d9e:	4413      	add	r3, r2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	f887 3a5e 	strb.w	r3, [r7, #2654]	; 0xa5e
                q7_t lhs_value = lhs_ptr[0];
 8009da6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009daa:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d

                res00 += lhs_value * rhs_value0;
 8009db6:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8009dba:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 8009dbe:	fb03 f202 	mul.w	r2, r3, r2
 8009dc2:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                res01 += lhs_value * rhs_value1;
 8009dcc:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8009dd0:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 8009dd4:	fb03 f202 	mul.w	r2, r3, r2
 8009dd8:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8009ddc:	4413      	add	r3, r2
 8009dde:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                lhs_value = lhs_ptr[rhs_cols];
 8009de2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009de6:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8009df0:	4413      	add	r3, r2
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d
                res10 += lhs_value * rhs_value0;
 8009df8:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8009dfc:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 8009e00:	fb03 f202 	mul.w	r2, r3, r2
 8009e04:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8009e08:	4413      	add	r3, r2
 8009e0a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 += lhs_value * rhs_value1;
 8009e0e:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8009e12:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 8009e16:	fb03 f202 	mul.w	r2, r3, r2
 8009e1a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8009e1e:	4413      	add	r3, r2
 8009e20:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                ++rhs_ptr;
 8009e24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e28:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e34:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8009e38:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8009e3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e3e:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e4a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8009e4e:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8009e50:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8009e54:	3301      	adds	r3, #1
 8009e56:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 8009e5a:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	; 0xaac
 8009e5e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8009e62:	429a      	cmp	r2, r3
 8009e64:	db8c      	blt.n	8009d80 <arm_nn_mat_mult_nt_t_s8+0x2182>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8009e66:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8009e6a:	009a      	lsls	r2, r3, #2
 8009e6c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8009e70:	4413      	add	r3, r2
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8009e78:	009a      	lsls	r2, r3, #2
 8009e7a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8009e7e:	4413      	add	r3, r2
 8009e80:	6819      	ldr	r1, [r3, #0]
 8009e82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e86:	f5a3 62b5 	sub.w	r2, r3, #1448	; 0x5a8
 8009e8a:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e94:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8009e98:	6018      	str	r0, [r3, #0]
 8009e9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009e9e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8009ea2:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8009ea4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ea8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009eb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009eb6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	fa03 f202 	lsl.w	r2, r3, r2
 8009ec0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ec4:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ece:	f5a3 62b7 	sub.w	r2, r3, #1464	; 0x5b8
 8009ed2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ed6:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8009ede:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ee2:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8009eea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ef4:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8009ef8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009efc:	461a      	mov	r2, r3
 8009efe:	2300      	movs	r3, #0
 8009f00:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8009f04:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009f08:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009f0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009f10:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	17da      	asrs	r2, r3, #31
 8009f18:	673b      	str	r3, [r7, #112]	; 0x70
 8009f1a:	677a      	str	r2, [r7, #116]	; 0x74
 8009f1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009f20:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	17da      	asrs	r2, r3, #31
 8009f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f30:	fb02 f203 	mul.w	r2, r2, r3
 8009f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f36:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8009f38:	fb04 f303 	mul.w	r3, r4, r3
 8009f3c:	4413      	add	r3, r2
 8009f3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009f40:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8009f42:	fba2 4204 	umull	r4, r2, r2, r4
 8009f46:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8009f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f54:	4413      	add	r3, r2
 8009f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f5e:	18c3      	adds	r3, r0, r3
 8009f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f66:	eb41 0303 	adc.w	r3, r1, r3
 8009f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f6c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009f70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009f74:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8009f78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009f7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f80:	f04f 0000 	mov.w	r0, #0
 8009f84:	f04f 0100 	mov.w	r1, #0
 8009f88:	0fd0      	lsrs	r0, r2, #31
 8009f8a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009f8e:	17d9      	asrs	r1, r3, #31
 8009f90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009f94:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 8009f98:	4603      	mov	r3, r0
 8009f9a:	6013      	str	r3, [r2, #0]
    return result;
 8009f9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fa0:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8009fa4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8009fa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009faa:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dc06      	bgt.n	8009fc2 <arm_nn_mat_mult_nt_t_s8+0x23c4>
 8009fb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fb8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	425a      	negs	r2, r3
 8009fc0:	e000      	b.n	8009fc4 <arm_nn_mat_mult_nt_t_s8+0x23c6>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fc8:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8009fcc:	6019      	str	r1, [r3, #0]
 8009fce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fd2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8009fd6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8009fd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fdc:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8009fe4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fe8:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8009fec:	2201      	movs	r2, #1
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	fa02 f103 	lsl.w	r1, r2, r3
 8009ff4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009ff8:	f2a3 52cc 	subw	r2, r3, #1484	; 0x5cc
 8009ffc:	1e4b      	subs	r3, r1, #1
 8009ffe:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800a000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a004:	f5a3 61ba 	sub.w	r1, r3, #1488	; 0x5d0
 800a008:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a00c:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 800a010:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a014:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800a018:	6812      	ldr	r2, [r2, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4013      	ands	r3, r2
 800a01e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800a020:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a024:	f5a3 61b9 	sub.w	r1, r3, #1480	; 0x5c8
 800a028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a02c:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 800a030:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a034:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	fa42 f303 	asr.w	r3, r2, r3
 800a040:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800a042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a046:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 800a04a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a04e:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	105b      	asrs	r3, r3, #1
 800a056:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800a058:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a05c:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	da0a      	bge.n	800a07c <arm_nn_mat_mult_nt_t_s8+0x247e>
        threshold++;
 800a066:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a06a:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 800a06e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a072:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3301      	adds	r3, #1
 800a07a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800a07c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a080:	f5a3 62ba 	sub.w	r2, r3, #1488	; 0x5d0
 800a084:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a088:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800a08c:	6812      	ldr	r2, [r2, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	dd0a      	ble.n	800a0aa <arm_nn_mat_mult_nt_t_s8+0x24ac>
        result++;
 800a094:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a098:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 800a09c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a0a0:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	6013      	str	r3, [r2, #0]
    return result;
 800a0aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a0ae:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800a0b2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a0b4:	bf00      	nop
 800a0b6:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800a0ba:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800a0be:	3301      	adds	r3, #1
 800a0c0:	009a      	lsls	r2, r3, #2
 800a0c2:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800a0c6:	4413      	add	r3, r2
 800a0c8:	6818      	ldr	r0, [r3, #0]
 800a0ca:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	009a      	lsls	r2, r3, #2
 800a0d2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800a0d6:	4413      	add	r3, r2
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a0de:	f5a3 62af 	sub.w	r2, r3, #1400	; 0x578
 800a0e2:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a0ec:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800a0f0:	6018      	str	r0, [r3, #0]
 800a0f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a0f6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800a0fa:	6019      	str	r1, [r3, #0]
 800a0fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a100:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a10a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a10e:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	fa03 f202 	lsl.w	r2, r3, r2
 800a118:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a11c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a126:	f5a3 62b1 	sub.w	r2, r3, #1416	; 0x588
 800a12a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a12e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800a136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a13a:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 800a13e:	2300      	movs	r3, #0
 800a140:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800a142:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a146:	461a      	mov	r2, r3
 800a148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a14c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800a14e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a152:	461a      	mov	r2, r3
 800a154:	2300      	movs	r3, #0
 800a156:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800a158:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a15c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a160:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a164:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	17da      	asrs	r2, r3, #31
 800a16c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a170:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a178:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	17da      	asrs	r2, r3, #31
 800a180:	67bb      	str	r3, [r7, #120]	; 0x78
 800a182:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a188:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a18a:	fb02 f203 	mul.w	r2, r2, r3
 800a18e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a190:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800a194:	fb04 f303 	mul.w	r3, r4, r3
 800a198:	4413      	add	r3, r2
 800a19a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a19e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800a1a0:	fba2 4204 	umull	r4, r2, r2, r4
 800a1a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800a1ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a1bc:	18c3      	adds	r3, r0, r3
 800a1be:	633b      	str	r3, [r7, #48]	; 0x30
 800a1c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a1c4:	eb41 0303 	adc.w	r3, r1, r3
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a1ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a1d2:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800a1d6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f04f 0000 	mov.w	r0, #0
 800a1e2:	f04f 0100 	mov.w	r1, #0
 800a1e6:	0fd0      	lsrs	r0, r2, #31
 800a1e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a1ec:	17d9      	asrs	r1, r3, #31
 800a1ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a1f2:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	6013      	str	r3, [r2, #0]
    return result;
 800a1fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a1fe:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800a202:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a208:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dc06      	bgt.n	800a220 <arm_nn_mat_mult_nt_t_s8+0x2622>
 800a212:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a216:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	425a      	negs	r2, r3
 800a21e:	e000      	b.n	800a222 <arm_nn_mat_mult_nt_t_s8+0x2624>
 800a220:	2200      	movs	r2, #0
 800a222:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a226:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800a22a:	6019      	str	r1, [r3, #0]
 800a22c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a230:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800a234:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800a236:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a23a:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 800a23e:	2300      	movs	r3, #0
 800a240:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800a242:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a246:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800a24a:	2201      	movs	r2, #1
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	fa02 f103 	lsl.w	r1, r2, r3
 800a252:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a256:	f2a3 529c 	subw	r2, r3, #1436	; 0x59c
 800a25a:	1e4b      	subs	r3, r1, #1
 800a25c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800a25e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a262:	f5a3 61b4 	sub.w	r1, r3, #1440	; 0x5a0
 800a266:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a26a:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 800a26e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a272:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4013      	ands	r3, r2
 800a27c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800a27e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a282:	f5a3 61b3 	sub.w	r1, r3, #1432	; 0x598
 800a286:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a28a:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 800a28e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a292:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	fa42 f303 	asr.w	r3, r2, r3
 800a29e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800a2a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2a4:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 800a2a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2ac:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	105b      	asrs	r3, r3, #1
 800a2b4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800a2b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2ba:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	da0a      	bge.n	800a2da <arm_nn_mat_mult_nt_t_s8+0x26dc>
        threshold++;
 800a2c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2c8:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 800a2cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2d0:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800a2da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2de:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 800a2e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2e6:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800a2ea:	6812      	ldr	r2, [r2, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	dd0a      	ble.n	800a308 <arm_nn_mat_mult_nt_t_s8+0x270a>
        result++;
 800a2f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2f6:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 800a2fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a2fe:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	6013      	str	r3, [r2, #0]
    return result;
 800a308:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a30c:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800a310:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a312:	bf00      	nop
 800a314:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 800a318:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800a31c:	009a      	lsls	r2, r3, #2
 800a31e:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800a322:	4413      	add	r3, r2
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800a32a:	009a      	lsls	r2, r3, #2
 800a32c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800a330:	4413      	add	r3, r2
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a338:	f5a3 62a9 	sub.w	r2, r3, #1352	; 0x548
 800a33c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a346:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800a34a:	6018      	str	r0, [r3, #0]
 800a34c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a350:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800a354:	6019      	str	r1, [r3, #0]
 800a356:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a35a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a364:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a368:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	fa03 f202 	lsl.w	r2, r3, r2
 800a372:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a376:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a380:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800a384:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a388:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800a390:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a394:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 800a398:	2300      	movs	r3, #0
 800a39a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800a39c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3a6:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800a3aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800a3b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a3ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a3be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a3c2:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	17da      	asrs	r2, r3, #31
 800a3ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a3d6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	17da      	asrs	r2, r3, #31
 800a3de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a3ee:	fb02 f203 	mul.w	r2, r2, r3
 800a3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3f6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800a3fa:	fb04 f303 	mul.w	r3, r4, r3
 800a3fe:	4413      	add	r3, r2
 800a400:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a404:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800a408:	fba2 5604 	umull	r5, r6, r2, r4
 800a40c:	4433      	add	r3, r6
 800a40e:	461e      	mov	r6, r3
 800a410:	1943      	adds	r3, r0, r5
 800a412:	63bb      	str	r3, [r7, #56]	; 0x38
 800a414:	eb41 0306 	adc.w	r3, r1, r6
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a41a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a41e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a422:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800a426:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a42a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a42e:	f04f 0000 	mov.w	r0, #0
 800a432:	f04f 0100 	mov.w	r1, #0
 800a436:	0fd0      	lsrs	r0, r2, #31
 800a438:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a43c:	17d9      	asrs	r1, r3, #31
 800a43e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a442:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 800a446:	4603      	mov	r3, r0
 800a448:	6013      	str	r3, [r2, #0]
    return result;
 800a44a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a44e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800a452:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a454:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a458:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dc06      	bgt.n	800a470 <arm_nn_mat_mult_nt_t_s8+0x2872>
 800a462:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a466:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	425a      	negs	r2, r3
 800a46e:	e000      	b.n	800a472 <arm_nn_mat_mult_nt_t_s8+0x2874>
 800a470:	2200      	movs	r2, #0
 800a472:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a476:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800a47a:	6019      	str	r1, [r3, #0]
 800a47c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a480:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800a484:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800a486:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a48a:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 800a48e:	2300      	movs	r3, #0
 800a490:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800a492:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a496:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800a49a:	2201      	movs	r2, #1
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	fa02 f103 	lsl.w	r1, r2, r3
 800a4a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4a6:	f2a3 526c 	subw	r2, r3, #1388	; 0x56c
 800a4aa:	1e4b      	subs	r3, r1, #1
 800a4ac:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800a4ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4b2:	f5a3 61ae 	sub.w	r1, r3, #1392	; 0x570
 800a4b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4ba:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800a4be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4c2:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800a4ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4d2:	f5a3 61ad 	sub.w	r1, r3, #1384	; 0x568
 800a4d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4da:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800a4de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4e2:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	fa42 f303 	asr.w	r3, r2, r3
 800a4ee:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800a4f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4f4:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 800a4f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a4fc:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	105b      	asrs	r3, r3, #1
 800a504:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800a506:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a50a:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da0a      	bge.n	800a52a <arm_nn_mat_mult_nt_t_s8+0x292c>
        threshold++;
 800a514:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a518:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 800a51c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a520:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3301      	adds	r3, #1
 800a528:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800a52a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a52e:	f5a3 62ae 	sub.w	r2, r3, #1392	; 0x570
 800a532:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a536:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	dd0a      	ble.n	800a558 <arm_nn_mat_mult_nt_t_s8+0x295a>
        result++;
 800a542:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a546:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 800a54a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a54e:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	6013      	str	r3, [r2, #0]
    return result;
 800a558:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a55c:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 800a560:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a562:	bf00      	nop
 800a564:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800a568:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800a56c:	3301      	adds	r3, #1
 800a56e:	009a      	lsls	r2, r3, #2
 800a570:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800a574:	4413      	add	r3, r2
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800a57c:	3301      	adds	r3, #1
 800a57e:	009a      	lsls	r2, r3, #2
 800a580:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800a584:	4413      	add	r3, r2
 800a586:	6819      	ldr	r1, [r3, #0]
 800a588:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a58c:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 800a590:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a59a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800a59e:	6018      	str	r0, [r3, #0]
 800a5a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5a4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800a5a8:	6019      	str	r1, [r3, #0]
 800a5aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5ae:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a5b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5bc:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	fa03 f202 	lsl.w	r2, r3, r2
 800a5c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5ca:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5d4:	f5a3 62a5 	sub.w	r2, r3, #1320	; 0x528
 800a5d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5dc:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800a5e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a5e8:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800a5f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5fa:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800a5fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a600:	461a      	mov	r2, r3
 800a602:	2300      	movs	r3, #0
 800a604:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800a606:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a60a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a60e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a612:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	17da      	asrs	r2, r3, #31
 800a61a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a61e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a622:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a626:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	17da      	asrs	r2, r3, #31
 800a62e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a632:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a63a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a63e:	fb02 f203 	mul.w	r2, r2, r3
 800a642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a646:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800a64a:	fb04 f303 	mul.w	r3, r4, r3
 800a64e:	4413      	add	r3, r2
 800a650:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a654:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800a658:	fba2 ab04 	umull	sl, fp, r2, r4
 800a65c:	445b      	add	r3, fp
 800a65e:	469b      	mov	fp, r3
 800a660:	eb10 030a 	adds.w	r3, r0, sl
 800a664:	643b      	str	r3, [r7, #64]	; 0x40
 800a666:	eb41 030b 	adc.w	r3, r1, fp
 800a66a:	647b      	str	r3, [r7, #68]	; 0x44
 800a66c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a670:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a674:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800a678:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f04f 0000 	mov.w	r0, #0
 800a684:	f04f 0100 	mov.w	r1, #0
 800a688:	0fd0      	lsrs	r0, r2, #31
 800a68a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a68e:	17d9      	asrs	r1, r3, #31
 800a690:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a694:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 800a698:	4603      	mov	r3, r0
 800a69a:	6013      	str	r3, [r2, #0]
    return result;
 800a69c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6a0:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800a6a4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a6a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6aa:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dc06      	bgt.n	800a6c2 <arm_nn_mat_mult_nt_t_s8+0x2ac4>
 800a6b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6b8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	425a      	negs	r2, r3
 800a6c0:	e000      	b.n	800a6c4 <arm_nn_mat_mult_nt_t_s8+0x2ac6>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6c8:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800a6cc:	6019      	str	r1, [r3, #0]
 800a6ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6d2:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800a6d6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800a6d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6dc:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800a6e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6e8:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	fa02 f103 	lsl.w	r1, r2, r3
 800a6f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a6f8:	f2a3 523c 	subw	r2, r3, #1340	; 0x53c
 800a6fc:	1e4b      	subs	r3, r1, #1
 800a6fe:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800a700:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a704:	f5a3 61a8 	sub.w	r1, r3, #1344	; 0x540
 800a708:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a70c:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 800a710:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a714:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800a718:	6812      	ldr	r2, [r2, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4013      	ands	r3, r2
 800a71e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800a720:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a724:	f5a3 61a7 	sub.w	r1, r3, #1336	; 0x538
 800a728:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a72c:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 800a730:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a734:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800a738:	6812      	ldr	r2, [r2, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	fa42 f303 	asr.w	r3, r2, r3
 800a740:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800a742:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a746:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 800a74a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a74e:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	105b      	asrs	r3, r3, #1
 800a756:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800a758:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a75c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	da0a      	bge.n	800a77c <arm_nn_mat_mult_nt_t_s8+0x2b7e>
        threshold++;
 800a766:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a76a:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 800a76e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a772:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3301      	adds	r3, #1
 800a77a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800a77c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a780:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 800a784:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a788:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800a78c:	6812      	ldr	r2, [r2, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	dd0a      	ble.n	800a7aa <arm_nn_mat_mult_nt_t_s8+0x2bac>
        result++;
 800a794:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a798:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 800a79c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a7a0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6013      	str	r3, [r2, #0]
    return result;
 800a7aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a7ae:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800a7b2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a7b4:	bf00      	nop
 800a7b6:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Add offset
            res00 += dst_offset;
 800a7ba:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 800a7be:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 += dst_offset;
 800a7c8:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 800a7cc:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 += dst_offset;
 800a7d6:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 800a7da:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800a7de:	4413      	add	r3, r2
 800a7e0:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 += dst_offset;
 800a7e4:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 800a7e8:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Clamp the result
            res00 = MAX(res00, activation_min);
 800a7f2:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 800a7f6:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	bfb8      	it	lt
 800a7fe:	4613      	movlt	r3, r2
 800a800:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res00 = MIN(res00, activation_max);
 800a804:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 800a808:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800a80c:	4293      	cmp	r3, r2
 800a80e:	bfa8      	it	ge
 800a810:	4613      	movge	r3, r2
 800a812:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = MAX(res01, activation_min);
 800a816:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 800a81a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800a81e:	4293      	cmp	r3, r2
 800a820:	bfb8      	it	lt
 800a822:	4613      	movlt	r3, r2
 800a824:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res01 = MIN(res01, activation_max);
 800a828:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 800a82c:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800a830:	4293      	cmp	r3, r2
 800a832:	bfa8      	it	ge
 800a834:	4613      	movge	r3, r2
 800a836:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = MAX(res10, activation_min);
 800a83a:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 800a83e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800a842:	4293      	cmp	r3, r2
 800a844:	bfb8      	it	lt
 800a846:	4613      	movlt	r3, r2
 800a848:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res10 = MIN(res10, activation_max);
 800a84c:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 800a850:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800a854:	4293      	cmp	r3, r2
 800a856:	bfa8      	it	ge
 800a858:	4613      	movge	r3, r2
 800a85a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = MAX(res11, activation_min);
 800a85e:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 800a862:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800a866:	4293      	cmp	r3, r2
 800a868:	bfb8      	it	lt
 800a86a:	4613      	movlt	r3, r2
 800a86c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            res11 = MIN(res11, activation_max);
 800a870:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 800a874:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800a878:	4293      	cmp	r3, r2
 800a87a:	bfa8      	it	ge
 800a87c:	4613      	movge	r3, r2
 800a87e:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            dst_ptr[0] = (q7_t)res00;
 800a882:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800a886:	b25b      	sxtb	r3, r3
 800a888:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 800a88c:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 800a88e:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800a892:	1c5a      	adds	r2, r3, #1
 800a894:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 800a89c:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 800a8a0:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0
            dst_ptr[0] = (q7_t)res10;
 800a8aa:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800a8ae:	b25b      	sxtb	r3, r3
 800a8b0:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 800a8b4:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 800a8b6:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800a8c0:	b25b      	sxtb	r3, r3
 800a8c2:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 800a8c4:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 800a8c8:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

            lhs_ptr += rhs_cols;
 800a8d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a8d6:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800a8e0:	441a      	add	r2, r3
 800a8e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a8e6:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800a8ea:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 800a8ec:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
        while (lhs_rows_idx)
 800a8f6:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f47d aa29 	bne.w	8007d52 <arm_nn_mat_mult_nt_t_s8+0x154>
        }

        // Left-over rows
        if (lhs_rows % 2)
 800a900:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f001 85f7 	beq.w	800c4fc <arm_nn_mat_mult_nt_t_s8+0x48fe>
        {
            const q7_t *rhs_ptr = &rhs[0];
 800a90e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a912:	f6a3 12b4 	subw	r2, r3, #2484	; 0x9b4
 800a916:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a91a:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 800a922:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800a926:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            q31_t res01 = lhs_offset_contribution1;
 800a92a:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800a92e:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            int32_t rhs_cols_idx = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800a938:	f001 baf1 	b.w	800bf1e <arm_nn_mat_mult_nt_t_s8+0x4320>
 800a93c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a940:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 800a944:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a948:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800a94a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a94e:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a95e:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 800a962:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a968:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a976:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	601a      	str	r2, [r3, #0]
    return (val);
 800a97e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a982:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 800a986:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800a988:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800a98c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a990:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 800a99a:	441a      	add	r2, r3
 800a99c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9a0:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9aa:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800a9b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9b8:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 800a9bc:	601a      	str	r2, [r3, #0]
    return (val);
 800a9be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9c2:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 800a9cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9d0:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 800a9d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800a9d8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800a9da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9de:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9ee:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 800a9f2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a9f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800a9f8:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	1d1a      	adds	r2, r3, #4
 800aa02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa06:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	601a      	str	r2, [r3, #0]
    return (val);
 800aa0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa12:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 800aa16:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800aa18:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 800aa1c:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800aa20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa24:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 800aa28:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800aa2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa2e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	fa2f f283 	sxtb16	r2, r3
 800aa38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa3c:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 800aa40:	601a      	str	r2, [r3, #0]
  return(result);
 800aa42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa46:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 800aa50:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800aa54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa58:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 800aa5c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800aa5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa62:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	fa2f f283 	sxtb16	r2, r3
 800aa6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa70:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 800aa74:	601a      	str	r2, [r3, #0]
  return(result);
 800aa76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa7a:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 800aa84:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800aa88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa8c:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 800aa90:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800aa92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aa96:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	fa2f f283 	sxtb16	r2, r3
 800aaa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aaa4:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 800aaa8:	601a      	str	r2, [r3, #0]
  return(result);
 800aaaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aaae:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 800aab8:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800aabc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aac0:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aaca:	f6a3 027c 	subw	r2, r3, #2172	; 0x87c
 800aace:	2308      	movs	r3, #8
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aad6:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 800aada:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aade:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aaea:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 800aaee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aaf2:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800aafa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aafe:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 800ab02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab06:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 031f 	and.w	r3, r3, #31
 800ab10:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ab12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab16:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d105      	bne.n	800ab2c <arm_nn_mat_mult_nt_t_s8+0x2f2e>
    return op1;
 800ab20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab24:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	e00a      	b.n	800ab42 <arm_nn_mat_mult_nt_t_s8+0x2f44>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ab2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab30:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 800ab34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab38:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 800ab3c:	6812      	ldr	r2, [r2, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	41da      	rors	r2, r3
 800ab42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab46:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 800ab4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ab4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab50:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	fa2f f283 	sxtb16	r2, r3
 800ab5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab5e:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800ab62:	601a      	str	r2, [r3, #0]
  return(result);
 800ab64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab68:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800ab6c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800ab6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab72:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 800ab76:	601a      	str	r2, [r3, #0]
  return result;
 800ab78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab7c:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 800ab86:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800ab8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab8e:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ab98:	f5a3 6206 	sub.w	r2, r3, #2144	; 0x860
 800ab9c:	2308      	movs	r3, #8
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aba4:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 800aba8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abac:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abb8:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 800abbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abc0:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800abc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abcc:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 800abd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abd4:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 031f 	and.w	r3, r3, #31
 800abde:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800abe0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abe4:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d105      	bne.n	800abfa <arm_nn_mat_mult_nt_t_s8+0x2ffc>
    return op1;
 800abee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abf2:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	e00a      	b.n	800ac10 <arm_nn_mat_mult_nt_t_s8+0x3012>
  return (op1 >> op2) | (op1 << (32U - op2));
 800abfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800abfe:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 800ac02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac06:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	41da      	rors	r2, r3
 800ac10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac14:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 800ac18:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ac1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac1e:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	fa2f f283 	sxtb16	r2, r3
 800ac28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac2c:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800ac30:	601a      	str	r2, [r3, #0]
  return(result);
 800ac32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac36:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800ac3a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800ac3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac40:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 800ac44:	601a      	str	r2, [r3, #0]
  return result;
 800ac46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac4a:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 800ac54:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800ac58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac5c:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac66:	f6a3 0244 	subw	r2, r3, #2116	; 0x844
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac72:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 800ac76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac7a:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6013      	str	r3, [r2, #0]
 800ac82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac86:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 800ac8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac8e:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ac96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac9a:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 800ac9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aca2:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 031f 	and.w	r3, r3, #31
 800acac:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800acae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800acb2:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d105      	bne.n	800acc8 <arm_nn_mat_mult_nt_t_s8+0x30ca>
    return op1;
 800acbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800acc0:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	e00a      	b.n	800acde <arm_nn_mat_mult_nt_t_s8+0x30e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 800acc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800accc:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 800acd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800acd4:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 800acd8:	6812      	ldr	r2, [r2, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	41da      	rors	r2, r3
 800acde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ace2:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 800ace6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ace8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800acec:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	fa2f f283 	sxtb16	r2, r3
 800acf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800acfa:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800acfe:	601a      	str	r2, [r3, #0]
  return(result);
 800ad00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad04:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800ad08:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800ad0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad0e:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 800ad12:	601a      	str	r2, [r3, #0]
  return result;
 800ad14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad18:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 800ad22:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800ad26:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 800ad2a:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800ad2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad32:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad3c:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 800ad40:	6019      	str	r1, [r3, #0]
 800ad42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad46:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800ad4a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ad4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad50:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 800ad54:	6819      	ldr	r1, [r3, #0]
 800ad56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad5a:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad64:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	fb21 3202 	smlad	r2, r1, r2, r3
 800ad6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad72:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800ad76:	601a      	str	r2, [r3, #0]
  return(result);
 800ad78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad7c:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 800ad86:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800ad8a:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 800ad8e:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800ad92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ad96:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ada0:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800ada4:	6019      	str	r1, [r3, #0]
 800ada6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800adaa:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 800adae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800adb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800adb4:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 800adb8:	6819      	ldr	r1, [r3, #0]
 800adba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800adbe:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800adc8:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	fb21 3202 	smlad	r2, r1, r2, r3
 800add2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800add6:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 800adda:	601a      	str	r2, [r3, #0]
  return(result);
 800addc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ade0:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 800adea:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800adee:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 800adf2:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800adf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800adfa:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae04:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800ae08:	6019      	str	r1, [r3, #0]
 800ae0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae0e:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800ae12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ae14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae18:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800ae1c:	6819      	ldr	r1, [r3, #0]
 800ae1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae22:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae2c:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	fb21 3202 	smlad	r2, r1, r2, r3
 800ae36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae3a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800ae3e:	601a      	str	r2, [r3, #0]
  return(result);
 800ae40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae44:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 800ae4e:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800ae52:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 800ae56:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800ae5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae5e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae68:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800ae6c:	6019      	str	r1, [r3, #0]
 800ae6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae72:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 800ae76:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ae78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae7c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ae80:	6819      	ldr	r1, [r3, #0]
 800ae82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae86:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae90:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	fb21 3202 	smlad	r2, r1, r2, r3
 800ae9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ae9e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800aea2:	601a      	str	r2, [r3, #0]
  return(result);
 800aea4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aea8:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 800aeb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aeb6:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 800aeba:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800aebe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800aec0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aec4:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aed4:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 800aed8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800aeda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aede:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	1d1a      	adds	r2, r3, #4
 800aee8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aeec:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	601a      	str	r2, [r3, #0]
    return (val);
 800aef4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aef8:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 800aefc:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800aefe:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800af02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af06:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 800af10:	441a      	add	r2, r3
 800af12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af16:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af20:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800af2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af2e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 800af32:	601a      	str	r2, [r3, #0]
    return (val);
 800af34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af38:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 800af42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af46:	f2a3 72f4 	subw	r2, r3, #2036	; 0x7f4
 800af4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800af4e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800af50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af54:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af64:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 800af68:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800af6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af6e:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af7c:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	601a      	str	r2, [r3, #0]
    return (val);
 800af84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af88:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 800af8c:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800af8e:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 800af92:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800af96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800af9a:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 800af9e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800afa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800afa4:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	fa2f f283 	sxtb16	r2, r3
 800afae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800afb2:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 800afb6:	601a      	str	r2, [r3, #0]
  return(result);
 800afb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800afbc:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 800afc6:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800afca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800afce:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 800afd2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800afd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800afd8:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	fa2f f283 	sxtb16	r2, r3
 800afe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800afe6:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 800afea:	601a      	str	r2, [r3, #0]
  return(result);
 800afec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800aff0:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 800affa:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800affe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b002:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800b006:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b008:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b00c:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	fa2f f283 	sxtb16	r2, r3
 800b016:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b01a:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 800b01e:	601a      	str	r2, [r3, #0]
  return(result);
 800b020:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b024:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 800b02e:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800b032:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b036:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b040:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 800b044:	2308      	movs	r3, #8
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b04c:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 800b050:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b054:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b060:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 800b064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b068:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b070:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b074:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 800b078:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b07c:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 031f 	and.w	r3, r3, #31
 800b086:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b088:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b08c:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d105      	bne.n	800b0a2 <arm_nn_mat_mult_nt_t_s8+0x34a4>
    return op1;
 800b096:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b09a:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	e00a      	b.n	800b0b8 <arm_nn_mat_mult_nt_t_s8+0x34ba>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b0a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0a6:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 800b0aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0ae:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 800b0b2:	6812      	ldr	r2, [r2, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	41da      	rors	r2, r3
 800b0b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0bc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800b0c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b0c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0c6:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	fa2f f283 	sxtb16	r2, r3
 800b0d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0d4:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 800b0d8:	601a      	str	r2, [r3, #0]
  return(result);
 800b0da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0de:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 800b0e2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800b0e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0e8:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 800b0ec:	601a      	str	r2, [r3, #0]
  return result;
 800b0ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b0f2:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 800b0fc:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b100:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b104:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b10e:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 800b112:	2308      	movs	r3, #8
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b11a:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 800b11e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b122:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6013      	str	r3, [r2, #0]
 800b12a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b12e:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 800b132:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b136:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b13e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b142:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 800b146:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b14a:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 031f 	and.w	r3, r3, #31
 800b154:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b156:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b15a:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d105      	bne.n	800b170 <arm_nn_mat_mult_nt_t_s8+0x3572>
    return op1;
 800b164:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b168:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	e00a      	b.n	800b186 <arm_nn_mat_mult_nt_t_s8+0x3588>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b170:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b174:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 800b178:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b17c:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 800b180:	6812      	ldr	r2, [r2, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	41da      	rors	r2, r3
 800b186:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b18a:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 800b18e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b190:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b194:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	fa2f f283 	sxtb16	r2, r3
 800b19e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1a2:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 800b1a6:	601a      	str	r2, [r3, #0]
  return(result);
 800b1a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1ac:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 800b1b0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800b1b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1b6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800b1ba:	601a      	str	r2, [r3, #0]
  return result;
 800b1bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1c0:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 800b1ca:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800b1ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1d2:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1dc:	f2a3 728c 	subw	r2, r3, #1932	; 0x78c
 800b1e0:	2308      	movs	r3, #8
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1e8:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 800b1ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1f0:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b1fc:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 800b200:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b204:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b20c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b210:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 800b214:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b218:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 031f 	and.w	r3, r3, #31
 800b222:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b224:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b228:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d105      	bne.n	800b23e <arm_nn_mat_mult_nt_t_s8+0x3640>
    return op1;
 800b232:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b236:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	e00a      	b.n	800b254 <arm_nn_mat_mult_nt_t_s8+0x3656>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b23e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b242:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 800b246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b24a:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	41da      	rors	r2, r3
 800b254:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b258:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 800b25c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b25e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b262:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	fa2f f283 	sxtb16	r2, r3
 800b26c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b270:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 800b274:	601a      	str	r2, [r3, #0]
  return(result);
 800b276:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b27a:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 800b27e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800b280:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b284:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 800b288:	601a      	str	r2, [r3, #0]
  return result;
 800b28a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b28e:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 800b298:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800b29c:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 800b2a0:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800b2a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2a8:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2b2:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 800b2b6:	6019      	str	r1, [r3, #0]
 800b2b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2bc:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b2c0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b2c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2c6:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 800b2ca:	6819      	ldr	r1, [r3, #0]
 800b2cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2d0:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2da:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	fb21 3202 	smlad	r2, r1, r2, r3
 800b2e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2e8:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 800b2ec:	601a      	str	r2, [r3, #0]
  return(result);
 800b2ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b2f2:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 800b2fc:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b300:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 800b304:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800b308:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b30c:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b316:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800b31a:	6019      	str	r1, [r3, #0]
 800b31c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b320:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800b324:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b326:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b32a:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 800b32e:	6819      	ldr	r1, [r3, #0]
 800b330:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b334:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b33e:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	fb21 3202 	smlad	r2, r1, r2, r3
 800b348:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b34c:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 800b350:	601a      	str	r2, [r3, #0]
  return(result);
 800b352:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b356:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 800b360:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800b364:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 800b368:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800b36c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b370:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b37a:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 800b37e:	6019      	str	r1, [r3, #0]
 800b380:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b384:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 800b388:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b38a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b38e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b398:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3a2:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	fb21 3202 	smlad	r2, r1, r2, r3
 800b3ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3b0:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 800b3b4:	601a      	str	r2, [r3, #0]
  return(result);
 800b3b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3ba:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 800b3c4:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b3c8:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 800b3cc:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800b3d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3d4:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3de:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 800b3e2:	6019      	str	r1, [r3, #0]
 800b3e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3e8:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 800b3ec:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b3ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3f2:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b3fc:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b406:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	fb21 3202 	smlad	r2, r1, r2, r3
 800b410:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b414:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 800b418:	601a      	str	r2, [r3, #0]
  return(result);
 800b41a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b41e:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 800b428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b42c:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 800b430:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800b434:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b43a:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	461a      	mov	r2, r3
 800b446:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b44a:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 800b44e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b450:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b454:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	1d1a      	adds	r2, r3, #4
 800b45e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b462:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	601a      	str	r2, [r3, #0]
    return (val);
 800b46a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b46e:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 800b472:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b474:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800b478:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b47c:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 800b486:	441a      	add	r2, r3
 800b488:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b48c:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b496:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800b4a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4a4:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 800b4a8:	601a      	str	r2, [r3, #0]
    return (val);
 800b4aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4ae:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 800b4b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4bc:	f2a3 723c 	subw	r2, r3, #1852	; 0x73c
 800b4c0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800b4c4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b4c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4ca:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4da:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 800b4de:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b4e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4e4:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	1d1a      	adds	r2, r3, #4
 800b4ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4f2:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	601a      	str	r2, [r3, #0]
    return (val);
 800b4fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b4fe:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 800b502:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b504:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 800b508:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800b50c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b510:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 800b514:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b516:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b51a:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	fa2f f283 	sxtb16	r2, r3
 800b524:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b528:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 800b52c:	601a      	str	r2, [r3, #0]
  return(result);
 800b52e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b532:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 800b53c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b540:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b544:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 800b548:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b54a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b54e:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	fa2f f283 	sxtb16	r2, r3
 800b558:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b55c:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 800b560:	601a      	str	r2, [r3, #0]
  return(result);
 800b562:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b566:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 800b570:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800b574:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b578:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 800b57c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b57e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b582:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	fa2f f283 	sxtb16	r2, r3
 800b58c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b590:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 800b594:	601a      	str	r2, [r3, #0]
  return(result);
 800b596:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b59a:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 800b5a4:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800b5a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5ac:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5b6:	f2a3 720c 	subw	r2, r3, #1804	; 0x70c
 800b5ba:	2308      	movs	r3, #8
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5c2:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 800b5c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5ca:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5d6:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 800b5da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5de:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b5e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5ea:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 800b5ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b5f2:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b5fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b602:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d105      	bne.n	800b618 <arm_nn_mat_mult_nt_t_s8+0x3a1a>
    return op1;
 800b60c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b610:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	e00a      	b.n	800b62e <arm_nn_mat_mult_nt_t_s8+0x3a30>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b618:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b61c:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 800b620:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b624:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800b628:	6812      	ldr	r2, [r2, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	41da      	rors	r2, r3
 800b62e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b632:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800b636:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b638:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b63c:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	fa2f f283 	sxtb16	r2, r3
 800b646:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b64a:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 800b64e:	601a      	str	r2, [r3, #0]
  return(result);
 800b650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b654:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 800b658:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800b65a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b65e:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800b662:	601a      	str	r2, [r3, #0]
  return result;
 800b664:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b668:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 800b672:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b67a:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b684:	f5a3 62de 	sub.w	r2, r3, #1776	; 0x6f0
 800b688:	2308      	movs	r3, #8
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b690:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 800b694:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b698:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6a4:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 800b6a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6ac:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b6b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6b8:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 800b6bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6c0:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 031f 	and.w	r3, r3, #31
 800b6ca:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b6cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6d0:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <arm_nn_mat_mult_nt_t_s8+0x3ae8>
    return op1;
 800b6da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6de:	f2a3 63f4 	subw	r3, r3, #1780	; 0x6f4
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	e00a      	b.n	800b6fc <arm_nn_mat_mult_nt_t_s8+0x3afe>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b6e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6ea:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 800b6ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b6f2:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	41da      	rors	r2, r3
 800b6fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b700:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 800b704:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b706:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b70a:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	fa2f f283 	sxtb16	r2, r3
 800b714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b718:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 800b71c:	601a      	str	r2, [r3, #0]
  return(result);
 800b71e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b722:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 800b726:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800b728:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b72c:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 800b730:	601a      	str	r2, [r3, #0]
  return result;
 800b732:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b736:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 800b740:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800b744:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b748:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b752:	f2a3 62d4 	subw	r2, r3, #1748	; 0x6d4
 800b756:	2308      	movs	r3, #8
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b75e:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 800b762:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b766:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b772:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 800b776:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b77a:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b782:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b786:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 800b78a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b78e:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 031f 	and.w	r3, r3, #31
 800b798:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b79a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b79e:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d105      	bne.n	800b7b4 <arm_nn_mat_mult_nt_t_s8+0x3bb6>
    return op1;
 800b7a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7ac:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	e00a      	b.n	800b7ca <arm_nn_mat_mult_nt_t_s8+0x3bcc>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b7b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7b8:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 800b7bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7c0:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	41da      	rors	r2, r3
 800b7ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7ce:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 800b7d2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800b7d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7d8:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	fa2f f283 	sxtb16	r2, r3
 800b7e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7e6:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 800b7ea:	601a      	str	r2, [r3, #0]
  return(result);
 800b7ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7f0:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 800b7f4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800b7f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b7fa:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800b7fe:	601a      	str	r2, [r3, #0]
  return result;
 800b800:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b804:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 800b80e:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800b812:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 800b816:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800b81a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b81e:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b828:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 800b82c:	6019      	str	r1, [r3, #0]
 800b82e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b832:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 800b836:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b838:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b83c:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b846:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b850:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	fb21 3202 	smlad	r2, r1, r2, r3
 800b85a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b85e:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800b862:	601a      	str	r2, [r3, #0]
  return(result);
 800b864:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b868:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 800b872:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b876:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 800b87a:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800b87e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b882:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b88c:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 800b890:	6019      	str	r1, [r3, #0]
 800b892:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b896:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800b89a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b89c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8a0:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 800b8a4:	6819      	ldr	r1, [r3, #0]
 800b8a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8aa:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8b4:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	fb21 3202 	smlad	r2, r1, r2, r3
 800b8be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8c2:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 800b8c6:	601a      	str	r2, [r3, #0]
  return(result);
 800b8c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8cc:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 800b8d6:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800b8da:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 800b8de:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800b8e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8e6:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8f0:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 800b8f4:	6019      	str	r1, [r3, #0]
 800b8f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b8fa:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 800b8fe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b900:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b904:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 800b908:	6819      	ldr	r1, [r3, #0]
 800b90a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b90e:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b918:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	fb21 3202 	smlad	r2, r1, r2, r3
 800b922:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b926:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 800b92a:	601a      	str	r2, [r3, #0]
  return(result);
 800b92c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b930:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 800b93a:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800b93e:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 800b942:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800b946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b94a:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b954:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 800b958:	6019      	str	r1, [r3, #0]
 800b95a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b95e:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 800b962:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b968:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b972:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b97c:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	fb21 3202 	smlad	r2, r1, r2, r3
 800b986:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b98a:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 800b98e:	601a      	str	r2, [r3, #0]
  return(result);
 800b990:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b994:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 800b99e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9a2:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 800b9a6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800b9aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b9ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9b0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9c0:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 800b9c4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b9c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9ca:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1d1a      	adds	r2, r3, #4
 800b9d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9d8:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	601a      	str	r2, [r3, #0]
    return (val);
 800b9e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9e4:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 800b9e8:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b9ea:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800b9ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800b9f2:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 800b9fc:	441a      	add	r2, r3
 800b9fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba02:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba0c:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800ba16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba1a:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 800ba1e:	601a      	str	r2, [r3, #0]
    return (val);
 800ba20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba24:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 800ba2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba32:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 800ba36:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800ba3a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ba3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba40:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba50:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 800ba54:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ba56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba5a:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	1d1a      	adds	r2, r3, #4
 800ba64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba68:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	601a      	str	r2, [r3, #0]
    return (val);
 800ba70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba74:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 800ba78:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ba7a:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 800ba7e:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800ba82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba86:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 800ba8a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ba8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba90:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	fa2f f283 	sxtb16	r2, r3
 800ba9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ba9e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 800baa2:	601a      	str	r2, [r3, #0]
  return(result);
 800baa4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800baa8:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 800bab2:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800bab6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800baba:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 800babe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800bac0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bac4:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	fa2f f283 	sxtb16	r2, r3
 800bace:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bad2:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800bad6:	601a      	str	r2, [r3, #0]
  return(result);
 800bad8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800badc:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 800bae6:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800baea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800baee:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 800baf2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800baf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800baf8:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	fa2f f283 	sxtb16	r2, r3
 800bb02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb06:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 800bb0a:	601a      	str	r2, [r3, #0]
  return(result);
 800bb0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb10:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 800bb1a:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 800bb1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb22:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb2c:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 800bb30:	2308      	movs	r3, #8
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb38:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 800bb3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb40:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb4c:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 800bb50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb54:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bb5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb60:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 800bb64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb68:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 031f 	and.w	r3, r3, #31
 800bb72:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bb74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb78:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d105      	bne.n	800bb8e <arm_nn_mat_mult_nt_t_s8+0x3f90>
    return op1;
 800bb82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb86:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	e00a      	b.n	800bba4 <arm_nn_mat_mult_nt_t_s8+0x3fa6>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bb8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb92:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 800bb96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bb9a:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800bb9e:	6812      	ldr	r2, [r2, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	41da      	rors	r2, r3
 800bba4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bba8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800bbac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800bbae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbb2:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	fa2f f283 	sxtb16	r2, r3
 800bbbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbc0:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800bbc4:	601a      	str	r2, [r3, #0]
  return(result);
 800bbc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbca:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800bbce:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800bbd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbd4:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800bbd8:	601a      	str	r2, [r3, #0]
  return result;
 800bbda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbde:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 800bbe8:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800bbec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbf0:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bbfa:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 800bbfe:	2308      	movs	r3, #8
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc06:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 800bc0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc0e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc1a:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 800bc1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc22:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bc2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc2e:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 800bc32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc36:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 031f 	and.w	r3, r3, #31
 800bc40:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bc42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc46:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d105      	bne.n	800bc5c <arm_nn_mat_mult_nt_t_s8+0x405e>
    return op1;
 800bc50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc54:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	e00a      	b.n	800bc72 <arm_nn_mat_mult_nt_t_s8+0x4074>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bc5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc60:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 800bc64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc68:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800bc6c:	6812      	ldr	r2, [r2, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	41da      	rors	r2, r3
 800bc72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc76:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800bc7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800bc7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc80:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	fa2f f283 	sxtb16	r2, r3
 800bc8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc8e:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 800bc92:	601a      	str	r2, [r3, #0]
  return(result);
 800bc94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bc98:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 800bc9c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800bc9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bca2:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 800bca6:	601a      	str	r2, [r3, #0]
  return result;
 800bca8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcac:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 800bcb6:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 800bcba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcbe:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcc8:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 800bccc:	2308      	movs	r3, #8
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcd4:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 800bcd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcdc:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6013      	str	r3, [r2, #0]
 800bce4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bce8:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 800bcec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcf0:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bcf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bcfc:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 800bd00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd04:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 031f 	and.w	r3, r3, #31
 800bd0e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bd10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd14:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d105      	bne.n	800bd2a <arm_nn_mat_mult_nt_t_s8+0x412c>
    return op1;
 800bd1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd22:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	e00a      	b.n	800bd40 <arm_nn_mat_mult_nt_t_s8+0x4142>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bd2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd2e:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 800bd32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd36:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	41da      	rors	r2, r3
 800bd40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd44:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 800bd48:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800bd4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd4e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	fa2f f283 	sxtb16	r2, r3
 800bd58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd5c:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 800bd60:	601a      	str	r2, [r3, #0]
  return(result);
 800bd62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd66:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 800bd6a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 800bd6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd70:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 800bd74:	601a      	str	r2, [r3, #0]
  return result;
 800bd76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd7a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 800bd84:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800bd88:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 800bd8c:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800bd90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd94:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bd9e:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800bda2:	6019      	str	r1, [r3, #0]
 800bda4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bda8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800bdac:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bdae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bdb2:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bdbc:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bdc6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	fb21 3202 	smlad	r2, r1, r2, r3
 800bdd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bdd4:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800bdd8:	601a      	str	r2, [r3, #0]
  return(result);
 800bdda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bdde:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 800bde8:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800bdec:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 800bdf0:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 800bdf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bdf8:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be02:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 800be06:	6019      	str	r1, [r3, #0]
 800be08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be0c:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 800be10:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be16:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 800be1a:	6819      	ldr	r1, [r3, #0]
 800be1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be20:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be2a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	fb21 3202 	smlad	r2, r1, r2, r3
 800be34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be38:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 800be3c:	601a      	str	r2, [r3, #0]
  return(result);
 800be3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be42:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 800be4c:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 800be50:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 800be54:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800be58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be5c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be66:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 800be6a:	6019      	str	r1, [r3, #0]
 800be6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be70:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 800be74:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be7a:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be84:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be8e:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	fb21 3202 	smlad	r2, r1, r2, r3
 800be98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800be9c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800bea0:	601a      	str	r2, [r3, #0]
  return(result);
 800bea2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bea6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 800beb0:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 800beb4:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 800beb8:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 800bebc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bec0:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800beca:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800bece:	6019      	str	r1, [r3, #0]
 800bed0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bed4:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800bed8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800beda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bede:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bee8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bef2:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	fb21 3202 	smlad	r2, r1, r2, r3
 800befc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bf00:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800bf04:	601a      	str	r2, [r3, #0]
  return(result);
 800bf06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bf0a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800bf14:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800bf18:	3310      	adds	r3, #16
 800bf1a:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 800bf1e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800bf22:	f1a3 020f 	sub.w	r2, r3, #15
 800bf26:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	f6fe ad06 	blt.w	800a93c <arm_nn_mat_mult_nt_t_s8+0x2d3e>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800bf30:	e04b      	b.n	800bfca <arm_nn_mat_mult_nt_t_s8+0x43cc>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 800bf32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bf36:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	f887 3a7b 	strb.w	r3, [r7, #2683]	; 0xa7b
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 800bf42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bf46:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800bf50:	4413      	add	r3, r2
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	f887 3a7a 	strb.w	r3, [r7, #2682]	; 0xa7a
                q7_t lhs_value = lhs_ptr[0];
 800bf58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bf5c:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f887 3a79 	strb.w	r3, [r7, #2681]	; 0xa79

                res00 += lhs_value * rhs_value0;
 800bf68:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 800bf6c:	f997 3a7b 	ldrsb.w	r3, [r7, #2683]	; 0xa7b
 800bf70:	fb03 f202 	mul.w	r2, r3, r2
 800bf74:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800bf78:	4413      	add	r3, r2
 800bf7a:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 += lhs_value * rhs_value1;
 800bf7e:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 800bf82:	f997 3a7a 	ldrsb.w	r3, [r7, #2682]	; 0xa7a
 800bf86:	fb03 f202 	mul.w	r2, r3, r2
 800bf8a:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800bf8e:	4413      	add	r3, r2
 800bf90:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

                ++rhs_ptr;
 800bf94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bf98:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bfa4:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 800bfa8:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 800bfaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bfae:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bfba:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800bfbe:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800bfc0:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 800bfca:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 800bfce:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	dbad      	blt.n	800bf32 <arm_nn_mat_mult_nt_t_s8+0x4334>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 800bfd6:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800bfda:	009a      	lsls	r2, r3, #2
 800bfdc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800bfe0:	4413      	add	r3, r2
 800bfe2:	6818      	ldr	r0, [r3, #0]
 800bfe4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800bfe8:	009a      	lsls	r2, r3, #2
 800bfea:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800bfee:	4413      	add	r3, r2
 800bff0:	6819      	ldr	r1, [r3, #0]
 800bff2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800bff6:	f6a3 02e8 	subw	r2, r3, #2280	; 0x8e8
 800bffa:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c004:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 800c008:	6018      	str	r0, [r3, #0]
 800c00a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c00e:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 800c012:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c018:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c022:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c026:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	fa03 f202 	lsl.w	r2, r3, r2
 800c030:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c034:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c03e:	f6a3 02f8 	subw	r2, r3, #2296	; 0x8f8
 800c042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c046:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c04e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c052:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 800c056:	2300      	movs	r3, #0
 800c058:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800c05a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c05e:	461a      	mov	r2, r3
 800c060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c064:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800c066:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c06a:	461a      	mov	r2, r3
 800c06c:	2300      	movs	r3, #0
 800c06e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c070:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c074:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c078:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c07c:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	17da      	asrs	r2, r3, #31
 800c084:	653b      	str	r3, [r7, #80]	; 0x50
 800c086:	657a      	str	r2, [r7, #84]	; 0x54
 800c088:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c08c:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	17da      	asrs	r2, r3, #31
 800c094:	64bb      	str	r3, [r7, #72]	; 0x48
 800c096:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c09a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c09c:	fb02 f203 	mul.w	r2, r2, r3
 800c0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800c0a4:	fb04 f303 	mul.w	r3, r4, r3
 800c0a8:	4413      	add	r3, r2
 800c0aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0ac:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800c0ae:	fba2 4204 	umull	r4, r2, r2, r4
 800c0b2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c0bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0ca:	18c3      	adds	r3, r0, r3
 800c0cc:	61bb      	str	r3, [r7, #24]
 800c0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0d2:	eb41 0303 	adc.w	r3, r1, r3
 800c0d6:	61fb      	str	r3, [r7, #28]
 800c0d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c0dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c0e0:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800c0e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f04f 0000 	mov.w	r0, #0
 800c0f0:	f04f 0100 	mov.w	r1, #0
 800c0f4:	0fd0      	lsrs	r0, r2, #31
 800c0f6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c0fa:	17d9      	asrs	r1, r3, #31
 800c0fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c100:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 800c104:	4603      	mov	r3, r0
 800c106:	6013      	str	r3, [r2, #0]
    return result;
 800c108:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c10c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 800c110:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c112:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c116:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dc06      	bgt.n	800c12e <arm_nn_mat_mult_nt_t_s8+0x4530>
 800c120:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c124:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	425a      	negs	r2, r3
 800c12c:	e000      	b.n	800c130 <arm_nn_mat_mult_nt_t_s8+0x4532>
 800c12e:	2200      	movs	r2, #0
 800c130:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c134:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 800c138:	6019      	str	r1, [r3, #0]
 800c13a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c13e:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 800c142:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c144:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c148:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 800c14c:	2300      	movs	r3, #0
 800c14e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c150:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c154:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 800c158:	2201      	movs	r2, #1
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	fa02 f103 	lsl.w	r1, r2, r3
 800c160:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c164:	f6a3 120c 	subw	r2, r3, #2316	; 0x90c
 800c168:	1e4b      	subs	r3, r1, #1
 800c16a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800c16c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c170:	f5a3 6111 	sub.w	r1, r3, #2320	; 0x910
 800c174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c178:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 800c17c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c180:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 800c184:	6812      	ldr	r2, [r2, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4013      	ands	r3, r2
 800c18a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800c18c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c190:	f6a3 1108 	subw	r1, r3, #2312	; 0x908
 800c194:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c198:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 800c19c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1a0:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 800c1a4:	6812      	ldr	r2, [r2, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	fa42 f303 	asr.w	r3, r2, r3
 800c1ac:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800c1ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1b2:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 800c1b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1ba:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	105b      	asrs	r3, r3, #1
 800c1c2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800c1c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1c8:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da0a      	bge.n	800c1e8 <arm_nn_mat_mult_nt_t_s8+0x45ea>
        threshold++;
 800c1d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1d6:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 800c1da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1de:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800c1e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1ec:	f5a3 6211 	sub.w	r2, r3, #2320	; 0x910
 800c1f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c1f4:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 800c1f8:	6812      	ldr	r2, [r2, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	dd0a      	ble.n	800c216 <arm_nn_mat_mult_nt_t_s8+0x4618>
        result++;
 800c200:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c204:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 800c208:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c20c:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	6013      	str	r3, [r2, #0]
    return result;
 800c216:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c21a:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 800c21e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c220:	bf00      	nop
 800c222:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800c226:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800c22a:	3301      	adds	r3, #1
 800c22c:	009a      	lsls	r2, r3, #2
 800c22e:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800c232:	4413      	add	r3, r2
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800c23a:	3301      	adds	r3, #1
 800c23c:	009a      	lsls	r2, r3, #2
 800c23e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800c242:	4413      	add	r3, r2
 800c244:	6819      	ldr	r1, [r3, #0]
 800c246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c24a:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 800c24e:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c258:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800c25c:	6018      	str	r0, [r3, #0]
 800c25e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c262:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800c266:	6019      	str	r1, [r3, #0]
 800c268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c26c:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c276:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c27a:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	fa03 f202 	lsl.w	r2, r3, r2
 800c284:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c288:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c292:	f6a3 02c8 	subw	r2, r3, #2248	; 0x8c8
 800c296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c29a:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c2a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c2a6:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800c2ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2b8:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800c2bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c2c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c2cc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c2d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c2d4:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	17da      	asrs	r2, r3, #31
 800c2dc:	663b      	str	r3, [r7, #96]	; 0x60
 800c2de:	667a      	str	r2, [r7, #100]	; 0x64
 800c2e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c2e4:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	17da      	asrs	r2, r3, #31
 800c2ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c2f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2f4:	fb02 f203 	mul.w	r2, r2, r3
 800c2f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2fa:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800c2fc:	fb04 f303 	mul.w	r3, r4, r3
 800c300:	4413      	add	r3, r2
 800c302:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c304:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c306:	fba2 4204 	umull	r4, r2, r2, r4
 800c30a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c30e:	4622      	mov	r2, r4
 800c310:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800c314:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c318:	4413      	add	r3, r2
 800c31a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c31e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c322:	18c3      	adds	r3, r0, r3
 800c324:	623b      	str	r3, [r7, #32]
 800c326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c32a:	eb41 0303 	adc.w	r3, r1, r3
 800c32e:	627b      	str	r3, [r7, #36]	; 0x24
 800c330:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c334:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c338:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800c33c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c340:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c344:	f04f 0000 	mov.w	r0, #0
 800c348:	f04f 0100 	mov.w	r1, #0
 800c34c:	0fd0      	lsrs	r0, r2, #31
 800c34e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c352:	17d9      	asrs	r1, r3, #31
 800c354:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c358:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 800c35c:	4603      	mov	r3, r0
 800c35e:	6013      	str	r3, [r2, #0]
    return result;
 800c360:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c364:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 800c368:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c36a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c36e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	dc06      	bgt.n	800c386 <arm_nn_mat_mult_nt_t_s8+0x4788>
 800c378:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c37c:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	425a      	negs	r2, r3
 800c384:	e000      	b.n	800c388 <arm_nn_mat_mult_nt_t_s8+0x478a>
 800c386:	2200      	movs	r2, #0
 800c388:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c38c:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 800c390:	6019      	str	r1, [r3, #0]
 800c392:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c396:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 800c39a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c39c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3a0:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c3a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3ac:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	fa02 f103 	lsl.w	r1, r2, r3
 800c3b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3bc:	f6a3 02dc 	subw	r2, r3, #2268	; 0x8dc
 800c3c0:	1e4b      	subs	r3, r1, #1
 800c3c2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800c3c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3c8:	f5a3 610e 	sub.w	r1, r3, #2272	; 0x8e0
 800c3cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3d0:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 800c3d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3d8:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 800c3dc:	6812      	ldr	r2, [r2, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800c3e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3e8:	f6a3 01d8 	subw	r1, r3, #2264	; 0x8d8
 800c3ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3f0:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 800c3f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c3f8:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 800c3fc:	6812      	ldr	r2, [r2, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	fa42 f303 	asr.w	r3, r2, r3
 800c404:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800c406:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c40a:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 800c40e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c412:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	105b      	asrs	r3, r3, #1
 800c41a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800c41c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c420:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	da0a      	bge.n	800c440 <arm_nn_mat_mult_nt_t_s8+0x4842>
        threshold++;
 800c42a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c42e:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 800c432:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c436:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3301      	adds	r3, #1
 800c43e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800c440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c444:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 800c448:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c44c:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 800c450:	6812      	ldr	r2, [r2, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	429a      	cmp	r2, r3
 800c456:	dd0a      	ble.n	800c46e <arm_nn_mat_mult_nt_t_s8+0x4870>
        result++;
 800c458:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c45c:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 800c460:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c464:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3301      	adds	r3, #1
 800c46c:	6013      	str	r3, [r2, #0]
    return result;
 800c46e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c472:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 800c476:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c478:	bf00      	nop
 800c47a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Add offset
            res00 += dst_offset;
 800c47e:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 800c482:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800c486:	4413      	add	r3, r2
 800c488:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 += dst_offset;
 800c48c:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 800c490:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800c494:	4413      	add	r3, r2
 800c496:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 800c49a:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 800c49e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	bfb8      	it	lt
 800c4a6:	4613      	movlt	r3, r2
 800c4a8:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res00 = MIN(res00, activation_max);
 800c4ac:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 800c4b0:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	bfa8      	it	ge
 800c4b8:	4613      	movge	r3, r2
 800c4ba:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = MAX(res01, activation_min);
 800c4be:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 800c4c2:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	bfb8      	it	lt
 800c4ca:	4613      	movlt	r3, r2
 800c4cc:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            res01 = MIN(res01, activation_max);
 800c4d0:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 800c4d4:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bfa8      	it	ge
 800c4dc:	4613      	movge	r3, r2
 800c4de:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            dst_ptr[0] = (q7_t)res00;
 800c4e2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800c4e6:	b25b      	sxtb	r3, r3
 800c4e8:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 800c4ec:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 800c4ee:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800c4f2:	1c5a      	adds	r2, r3, #1
 800c4f4:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800c4f8:	b25b      	sxtb	r3, r3
 800c4fa:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 800c4fc:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	4619      	mov	r1, r3
 800c504:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c508:	f6a3 2208 	subw	r2, r3, #2568	; 0xa08
 800c50c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c510:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	440b      	add	r3, r1
 800c518:	6013      	str	r3, [r2, #0]
        dst += 2;
 800c51a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c51e:	f5a3 6221 	sub.w	r2, r3, #2576	; 0xa10
 800c522:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c526:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3302      	adds	r3, #2
 800c52e:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800c530:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800c534:	3302      	adds	r3, #2
 800c536:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 800c53a:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800c53e:	1e5a      	subs	r2, r3, #1
 800c540:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800c544:	4293      	cmp	r3, r2
 800c546:	f6fb ab7d 	blt.w	8007c44 <arm_nn_mat_mult_nt_t_s8+0x46>
    }

    if (rhs_rows % 2)
 800c54a:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 81bd 	beq.w	800c8d2 <arm_nn_mat_mult_nt_t_s8+0x4cd4>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800c558:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c55c:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
        q7_t *dst_ptr = &dst[0];
 800c566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c56a:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800c574:	2300      	movs	r3, #0
 800c576:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 800c57a:	e1a3      	b.n	800c8c4 <arm_nn_mat_mult_nt_t_s8+0x4cc6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 800c57c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c580:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
            q31_t res00 = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            if (bias)
 800c590:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c594:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00e      	beq.n	800c5bc <arm_nn_mat_mult_nt_t_s8+0x49be>
            {
                res00 = bias[rhs_rows - 1];
 800c59e:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800c5a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c5ae:	f6a2 220c 	subw	r2, r2, #2572	; 0xa0c
 800c5b2:	6812      	ldr	r2, [r2, #0]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 800c5c2:	e029      	b.n	800c618 <arm_nn_mat_mult_nt_t_s8+0x4a1a>
            {
                q31_t rhs_value = rhs_ptr[0];
 800c5c4:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800c5c8:	f993 3000 	ldrsb.w	r3, [r3]
 800c5cc:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800c5d0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800c5d4:	f993 3000 	ldrsb.w	r3, [r3]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800c5de:	4413      	add	r3, r2
 800c5e0:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c

                res00 += lhs_value * rhs_value;
 800c5e4:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 800c5e8:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 800c5ec:	fb02 f303 	mul.w	r3, r2, r3
 800c5f0:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

                ++rhs_ptr;
 800c5fa:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800c5fe:	3301      	adds	r3, #1
 800c600:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
                ++lhs_ptr;
 800c604:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800c608:	3301      	adds	r3, #1
 800c60a:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c60e:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 800c612:	3301      	adds	r3, #1
 800c614:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 800c618:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 800c61c:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800c620:	429a      	cmp	r2, r3
 800c622:	dbcf      	blt.n	800c5c4 <arm_nn_mat_mult_nt_t_s8+0x49c6>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 800c624:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800c628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c62c:	3b01      	subs	r3, #1
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	f8d7 2af8 	ldr.w	r2, [r7, #2808]	; 0xaf8
 800c634:	4413      	add	r3, r2
 800c636:	6819      	ldr	r1, [r3, #0]
 800c638:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800c63c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c640:	3b01      	subs	r3, #1
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	f8d7 2afc 	ldr.w	r2, [r7, #2812]	; 0xafc
 800c648:	4413      	add	r3, r2
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c650:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 800c654:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 800c658:	6018      	str	r0, [r3, #0]
 800c65a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c65e:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 800c662:	6019      	str	r1, [r3, #0]
 800c664:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c668:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c672:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c67c:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c680:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 800c684:	6812      	ldr	r2, [r2, #0]
 800c686:	409a      	lsls	r2, r3
 800c688:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c68c:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c696:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 800c69a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c69e:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c6a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c6aa:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800c6b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6bc:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800c6be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c6c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800c6d4:	f6a1 1124 	subw	r1, r1, #2340	; 0x924
 800c6d8:	6809      	ldr	r1, [r1, #0]
 800c6da:	17c8      	asrs	r0, r1, #31
 800c6dc:	6139      	str	r1, [r7, #16]
 800c6de:	6178      	str	r0, [r7, #20]
 800c6e0:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800c6e4:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 800c6e8:	6809      	ldr	r1, [r1, #0]
 800c6ea:	17c8      	asrs	r0, r1, #31
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c6fa:	4650      	mov	r0, sl
 800c6fc:	fb00 f001 	mul.w	r0, r0, r1
 800c700:	4659      	mov	r1, fp
 800c702:	462c      	mov	r4, r5
 800c704:	fb04 f101 	mul.w	r1, r4, r1
 800c708:	4401      	add	r1, r0
 800c70a:	4628      	mov	r0, r5
 800c70c:	4654      	mov	r4, sl
 800c70e:	fba0 8904 	umull	r8, r9, r0, r4
 800c712:	4449      	add	r1, r9
 800c714:	4689      	mov	r9, r1
 800c716:	eb12 0108 	adds.w	r1, r2, r8
 800c71a:	6039      	str	r1, [r7, #0]
 800c71c:	eb43 0309 	adc.w	r3, r3, r9
 800c720:	607b      	str	r3, [r7, #4]
 800c722:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c726:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c72a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800c72e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c732:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	f04f 0300 	mov.w	r3, #0
 800c73e:	0fc2      	lsrs	r2, r0, #31
 800c740:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800c744:	17cb      	asrs	r3, r1, #31
 800c746:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800c74a:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 800c74e:	4613      	mov	r3, r2
 800c750:	600b      	str	r3, [r1, #0]
    return result;
 800c752:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c756:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800c75a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c75c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c760:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	dc06      	bgt.n	800c778 <arm_nn_mat_mult_nt_t_s8+0x4b7a>
 800c76a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c76e:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	425b      	negs	r3, r3
 800c776:	e000      	b.n	800c77a <arm_nn_mat_mult_nt_t_s8+0x4b7c>
 800c778:	2300      	movs	r3, #0
 800c77a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c77e:	f5a2 6213 	sub.w	r2, r2, #2352	; 0x930
 800c782:	6011      	str	r1, [r2, #0]
 800c784:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c788:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 800c78c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c78e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c792:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c79a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c79e:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	409a      	lsls	r2, r3
 800c7a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c7ac:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 800c7b0:	3a01      	subs	r2, #1
 800c7b2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800c7b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c7b8:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 800c7bc:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c7c0:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 800c7c4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c7c8:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 800c7cc:	6809      	ldr	r1, [r1, #0]
 800c7ce:	6812      	ldr	r2, [r2, #0]
 800c7d0:	400a      	ands	r2, r1
 800c7d2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800c7d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c7d8:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800c7dc:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c7e0:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 800c7e4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c7e8:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 800c7ec:	6809      	ldr	r1, [r1, #0]
 800c7ee:	6812      	ldr	r2, [r2, #0]
 800c7f0:	fa41 f202 	asr.w	r2, r1, r2
 800c7f4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800c7f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c7fa:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 800c7fe:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c802:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 800c806:	6812      	ldr	r2, [r2, #0]
 800c808:	1052      	asrs	r2, r2, #1
 800c80a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800c80c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c810:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	da0a      	bge.n	800c830 <arm_nn_mat_mult_nt_t_s8+0x4c32>
        threshold++;
 800c81a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c81e:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 800c822:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c826:	f6a2 1244 	subw	r2, r2, #2372	; 0x944
 800c82a:	6812      	ldr	r2, [r2, #0]
 800c82c:	3201      	adds	r2, #1
 800c82e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800c830:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c834:	f5a3 6214 	sub.w	r2, r3, #2368	; 0x940
 800c838:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c83c:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	dd0a      	ble.n	800c85e <arm_nn_mat_mult_nt_t_s8+0x4c60>
        result++;
 800c848:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c84c:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800c850:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 800c854:	f6a2 1238 	subw	r2, r2, #2360	; 0x938
 800c858:	6812      	ldr	r2, [r2, #0]
 800c85a:	3201      	adds	r2, #1
 800c85c:	601a      	str	r2, [r3, #0]
    return result;
 800c85e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c862:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800c866:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c868:	bf00      	nop
 800c86a:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Add offset
            res00 += dst_offset;
 800c86e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 800c872:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800c876:	4413      	add	r3, r2
 800c878:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 800c87c:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 800c880:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800c884:	4293      	cmp	r3, r2
 800c886:	bfb8      	it	lt
 800c888:	4613      	movlt	r3, r2
 800c88a:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            res00 = MIN(res00, activation_max);
 800c88e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 800c892:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800c896:	4293      	cmp	r3, r2
 800c898:	bfa8      	it	ge
 800c89a:	4613      	movge	r3, r2
 800c89c:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            dst_ptr[0] = (q7_t)res00;
 800c8a0:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 800c8a4:	b25a      	sxtb	r2, r3
 800c8a6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800c8aa:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 800c8ac:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800c8b0:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800c8ba:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800c8be:	3301      	adds	r3, #1
 800c8c0:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 800c8c4:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 800c8c8:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	f6ff ae55 	blt.w	800c57c <arm_nn_mat_mult_nt_t_s8+0x497e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f607 27d8 	addw	r7, r7, #2776	; 0xad8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c8e0:	4770      	bx	lr

0800c8e2 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800c8e2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c8e6:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800c8f0:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800c8f4:	6020      	str	r0, [r4, #0]
 800c8f6:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800c8fa:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800c8fe:	6001      	str	r1, [r0, #0]
 800c900:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c904:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800c908:	600a      	str	r2, [r1, #0]
 800c90a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c90e:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800c912:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800c914:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c918:	3b04      	subs	r3, #4
 800c91a:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800c91e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800c922:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800c926:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c92a:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800c92e:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c932:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800c936:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c93a:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800c93e:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800c942:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800c946:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c94a:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800c94e:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800c952:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800c956:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c95a:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800c95e:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c962:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800c966:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800c96a:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800c96e:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c972:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c976:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800c97a:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800c97e:	2300      	movs	r3, #0
 800c980:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800c984:	f001 bd13 	b.w	800e3ae <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800c988:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c98c:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800c990:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c994:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800c99c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9a0:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800c9a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9a8:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800c9bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9c0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d01b      	beq.n	800ca02 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800c9ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ce:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d8:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c9dc:	1d0b      	adds	r3, r1, #4
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	680b      	ldr	r3, [r1, #0]
 800c9e2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800c9e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ea:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c9ee:	6819      	ldr	r1, [r3, #0]
 800c9f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9f4:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c9f8:	1d0b      	adds	r3, r1, #4
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	680b      	ldr	r3, [r1, #0]
 800c9fe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ca08:	f001 b9db 	b.w	800ddc2 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800ca0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca10:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800ca14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ca18:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ca1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca1e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca2e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800ca32:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ca34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca38:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	1d1a      	adds	r2, r3, #4
 800ca42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca46:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	601a      	str	r2, [r3, #0]
    return (val);
 800ca4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca52:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800ca56:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ca58:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800ca5c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800ca60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca64:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800ca68:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca72:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800ca76:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ca78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca7c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca86:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	fa22 f283 	sxtab16	r2, r2, r3
 800ca90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca94:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800ca98:	601a      	str	r2, [r3, #0]
  return(result);
 800ca9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca9e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800caa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caac:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800cab0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800cab4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800cab6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caba:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	461a      	mov	r2, r3
 800cac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caca:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800cace:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cad0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cad4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	1d1a      	adds	r2, r3, #4
 800cade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cae2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	601a      	str	r2, [r3, #0]
    return (val);
 800caea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caee:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800caf2:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800caf4:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800caf8:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800cafc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb00:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb0a:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800cb0e:	2308      	movs	r3, #8
 800cb10:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800cb12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb16:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800cb1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb1e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 031f 	and.w	r3, r3, #31
 800cb28:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cb2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb2e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d105      	bne.n	800cb44 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800cb38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb3c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800cb40:	6819      	ldr	r1, [r3, #0]
 800cb42:	e00b      	b.n	800cb5c <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cb44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb48:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800cb4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb50:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800cb54:	6812      	ldr	r2, [r2, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	fa62 f103 	ror.w	r1, r2, r3
 800cb5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb60:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800cb64:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cb68:	6013      	str	r3, [r2, #0]
 800cb6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb6e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800cb72:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cb74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb78:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb82:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	fa22 f283 	sxtab16	r2, r2, r3
 800cb8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb90:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800cb94:	601a      	str	r2, [r3, #0]
  return(result);
 800cb96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb9a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800cba4:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800cba8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbac:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800cbb0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbba:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800cbbe:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cbc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbc4:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbce:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	fa22 f283 	sxtab16	r2, r2, r3
 800cbd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbdc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800cbe0:	601a      	str	r2, [r3, #0]
  return(result);
 800cbe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe6:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800cbf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbf4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800cbfe:	441a      	add	r2, r3
 800cc00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc04:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc0e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800cc18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc1c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800cc20:	601a      	str	r2, [r3, #0]
    return (val);
 800cc22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc26:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800cc30:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cc34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc38:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc42:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800cc46:	2308      	movs	r3, #8
 800cc48:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800cc4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc4e:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800cc52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc56:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 031f 	and.w	r3, r3, #31
 800cc60:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cc62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc66:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d105      	bne.n	800cc7c <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800cc70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc74:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800cc78:	6819      	ldr	r1, [r3, #0]
 800cc7a:	e00b      	b.n	800cc94 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cc7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc80:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800cc84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc88:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800cc8c:	6812      	ldr	r2, [r2, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	fa62 f103 	ror.w	r1, r2, r3
 800cc94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc98:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800cc9c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cca6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800ccaa:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ccac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccb0:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccba:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	fa22 f283 	sxtab16	r2, r2, r3
 800ccc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccc8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800cccc:	601a      	str	r2, [r3, #0]
  return(result);
 800ccce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccd2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800ccdc:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800cce0:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800cce4:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800cce8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccec:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccf6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ccfa:	6019      	str	r1, [r3, #0]
 800ccfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd00:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800cd04:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cd06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd0a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800cd0e:	6819      	ldr	r1, [r3, #0]
 800cd10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd14:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd1e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	fb21 3202 	smlad	r2, r1, r2, r3
 800cd28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd2c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800cd30:	601a      	str	r2, [r3, #0]
  return(result);
 800cd32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd36:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800cd40:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cd44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd48:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800cd4c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cd50:	6013      	str	r3, [r2, #0]
 800cd52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd56:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800cd5a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cd5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd60:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd6a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	fa22 f283 	sxtab16	r2, r2, r3
 800cd74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd78:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800cd7c:	601a      	str	r2, [r3, #0]
  return(result);
 800cd7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd82:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800cd8c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cd90:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cd94:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800cd98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd9c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800cda0:	601a      	str	r2, [r3, #0]
 800cda2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cda6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800cdaa:	6019      	str	r1, [r3, #0]
 800cdac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdb0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800cdb4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cdb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdba:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800cdbe:	6819      	ldr	r1, [r3, #0]
 800cdc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdce:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	fb21 3202 	smlad	r2, r1, r2, r3
 800cdd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cddc:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800cde0:	601a      	str	r2, [r3, #0]
  return(result);
 800cde2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cde6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800cdf0:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800cdf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdf8:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce02:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800ce06:	2308      	movs	r3, #8
 800ce08:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ce0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce0e:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800ce12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce16:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 031f 	and.w	r3, r3, #31
 800ce20:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ce22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce26:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d105      	bne.n	800ce3c <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800ce30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce34:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800ce38:	6819      	ldr	r1, [r3, #0]
 800ce3a:	e00b      	b.n	800ce54 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ce3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce40:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800ce44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce48:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ce4c:	6812      	ldr	r2, [r2, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	fa62 f103 	ror.w	r1, r2, r3
 800ce54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce58:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800ce5c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800ce60:	6013      	str	r3, [r2, #0]
 800ce62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce66:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ce6a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ce6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce70:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce7a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	fa22 f283 	sxtab16	r2, r2, r3
 800ce84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce88:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ce8c:	601a      	str	r2, [r3, #0]
  return(result);
 800ce8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce92:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800ce9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea0:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800cea4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cea8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ceaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceae:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cebe:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800cec2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cec8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	1d1a      	adds	r2, r3, #4
 800ced2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ced6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	601a      	str	r2, [r3, #0]
    return (val);
 800cede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cee2:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800cee6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cee8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800ceec:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800cef0:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800cef4:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cefc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf06:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800cf0a:	6019      	str	r1, [r3, #0]
 800cf0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf10:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800cf14:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cf16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf1a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800cf1e:	6819      	ldr	r1, [r3, #0]
 800cf20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf24:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf2e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	fb21 3202 	smlad	r2, r1, r2, r3
 800cf38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf3c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800cf40:	601a      	str	r2, [r3, #0]
  return(result);
 800cf42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf46:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800cf50:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cf54:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cf58:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cf5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf60:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf6a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800cf6e:	6019      	str	r1, [r3, #0]
 800cf70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf74:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800cf78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cf7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf7e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800cf82:	6819      	ldr	r1, [r3, #0]
 800cf84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf88:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf92:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	fb21 3202 	smlad	r2, r1, r2, r3
 800cf9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfa0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800cfa4:	601a      	str	r2, [r3, #0]
  return(result);
 800cfa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfaa:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800cfb4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cfb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfbc:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800cfc0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfca:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800cfce:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cfd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfd4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfde:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	fa22 f283 	sxtab16	r2, r2, r3
 800cfe8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfec:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800cff0:	601a      	str	r2, [r3, #0]
  return(result);
 800cff2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cff6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d000:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d004:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800d008:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d00c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d00e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d012:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	461a      	mov	r2, r3
 800d01e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d022:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800d026:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d028:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d02c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	1d1a      	adds	r2, r3, #4
 800d036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d03a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	601a      	str	r2, [r3, #0]
    return (val);
 800d042:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d046:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800d04a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d04c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d050:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d058:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800d05c:	601a      	str	r2, [r3, #0]
 800d05e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d062:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800d066:	2308      	movs	r3, #8
 800d068:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d06a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d06e:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800d072:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d076:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 031f 	and.w	r3, r3, #31
 800d080:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d082:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d086:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d105      	bne.n	800d09c <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800d090:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d094:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800d098:	6819      	ldr	r1, [r3, #0]
 800d09a:	e00b      	b.n	800d0b4 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d09c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0a0:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800d0a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0a8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800d0ac:	6812      	ldr	r2, [r2, #0]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	fa62 f103 	ror.w	r1, r2, r3
 800d0b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b8:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800d0bc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800d0ca:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d0cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0da:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	fa22 f283 	sxtab16	r2, r2, r3
 800d0e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800d0ec:	601a      	str	r2, [r3, #0]
  return(result);
 800d0ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0f2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800d0fc:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d104:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800d108:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d112:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800d116:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d11c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d126:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	fa22 f283 	sxtab16	r2, r2, r3
 800d130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d134:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d138:	601a      	str	r2, [r3, #0]
  return(result);
 800d13a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d13e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800d148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d14c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800d156:	441a      	add	r2, r3
 800d158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d15c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d166:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800d170:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d174:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800d178:	601a      	str	r2, [r3, #0]
    return (val);
 800d17a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d17e:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800d188:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d18c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d190:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d19a:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800d19e:	2308      	movs	r3, #8
 800d1a0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d1a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1a6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800d1aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ae:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f003 031f 	and.w	r3, r3, #31
 800d1b8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d1ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1be:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d105      	bne.n	800d1d4 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800d1c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1cc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800d1d0:	6819      	ldr	r1, [r3, #0]
 800d1d2:	e00b      	b.n	800d1ec <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d1d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1d8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800d1dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1e0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800d1e4:	6812      	ldr	r2, [r2, #0]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	fa62 f103 	ror.w	r1, r2, r3
 800d1ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1f0:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800d1f4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d1f8:	6013      	str	r3, [r2, #0]
 800d1fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1fe:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800d202:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d208:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d212:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	fa22 f283 	sxtab16	r2, r2, r3
 800d21c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d220:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800d224:	601a      	str	r2, [r3, #0]
  return(result);
 800d226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d22a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800d234:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d238:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800d23c:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800d240:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d244:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d24e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800d252:	6019      	str	r1, [r3, #0]
 800d254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d258:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800d25c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d25e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d262:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800d266:	6819      	ldr	r1, [r3, #0]
 800d268:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d26c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d276:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	fb21 3202 	smlad	r2, r1, r2, r3
 800d280:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d284:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800d288:	601a      	str	r2, [r3, #0]
  return(result);
 800d28a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d28e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800d298:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d29c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2a0:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800d2a4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ae:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800d2b2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d2b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2b8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2c2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	fa22 f283 	sxtab16	r2, r2, r3
 800d2cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2d0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d2d4:	601a      	str	r2, [r3, #0]
  return(result);
 800d2d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2da:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800d2e4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d2e8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d2ec:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800d2f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2fe:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800d302:	6019      	str	r1, [r3, #0]
 800d304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d308:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d30c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d30e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d312:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d316:	6819      	ldr	r1, [r3, #0]
 800d318:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d31c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d326:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	fb21 3202 	smlad	r2, r1, r2, r3
 800d330:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d334:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d338:	601a      	str	r2, [r3, #0]
  return(result);
 800d33a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d33e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800d348:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d34c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d350:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800d354:	601a      	str	r2, [r3, #0]
 800d356:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d35a:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800d35e:	2308      	movs	r3, #8
 800d360:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d362:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d366:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800d36a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d36e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 031f 	and.w	r3, r3, #31
 800d378:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d37a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d37e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d105      	bne.n	800d394 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800d388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d38c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800d390:	6819      	ldr	r1, [r3, #0]
 800d392:	e00b      	b.n	800d3ac <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d398:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800d39c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3a0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800d3a4:	6812      	ldr	r2, [r2, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	fa62 f103 	ror.w	r1, r2, r3
 800d3ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3b0:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800d3b4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d3c2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d3c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	fa22 f283 	sxtab16	r2, r2, r3
 800d3dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3e0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800d3e4:	601a      	str	r2, [r3, #0]
  return(result);
 800d3e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3ea:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800d3f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3f8:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800d3fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d400:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d406:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d416:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800d41a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d41c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d420:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	1d1a      	adds	r2, r3, #4
 800d42a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d42e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	601a      	str	r2, [r3, #0]
    return (val);
 800d436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d43a:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800d43e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d440:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800d444:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d448:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800d44c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d450:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d454:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d45e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d462:	6019      	str	r1, [r3, #0]
 800d464:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d468:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d46c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d46e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d472:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d476:	6819      	ldr	r1, [r3, #0]
 800d478:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d47c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d486:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	fb21 3202 	smlad	r2, r1, r2, r3
 800d490:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d494:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800d498:	601a      	str	r2, [r3, #0]
  return(result);
 800d49a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d49e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d4a8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d4ac:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d4b0:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d4b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d4c6:	6019      	str	r1, [r3, #0]
 800d4c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d4d0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d4d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d4da:	6819      	ldr	r1, [r3, #0]
 800d4dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	fb21 3202 	smlad	r2, r1, r2, r3
 800d4f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d4fc:	601a      	str	r2, [r3, #0]
  return(result);
 800d4fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d502:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800d50c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d510:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d514:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800d518:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d522:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d526:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d528:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d52c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d536:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	fa22 f283 	sxtab16	r2, r2, r3
 800d540:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d544:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d548:	601a      	str	r2, [r3, #0]
  return(result);
 800d54a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d54e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d558:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d55c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800d560:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d564:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d566:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d56a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	461a      	mov	r2, r3
 800d576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d57a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800d57e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d580:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d584:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	1d1a      	adds	r2, r3, #4
 800d58e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d592:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	601a      	str	r2, [r3, #0]
    return (val);
 800d59a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d59e:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800d5a2:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d5a4:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d5a8:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5ba:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800d5be:	2308      	movs	r3, #8
 800d5c0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d5c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5c6:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800d5ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 031f 	and.w	r3, r3, #31
 800d5d8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d5da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d105      	bne.n	800d5f4 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800d5e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800d5f0:	6819      	ldr	r1, [r3, #0]
 800d5f2:	e00b      	b.n	800d60c <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d5f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5f8:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800d5fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d600:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d604:	6812      	ldr	r2, [r2, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	fa62 f103 	ror.w	r1, r2, r3
 800d60c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d610:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800d614:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d618:	6013      	str	r3, [r2, #0]
 800d61a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d61e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d622:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d624:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d628:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d632:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	fa22 f283 	sxtab16	r2, r2, r3
 800d63c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d640:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d644:	601a      	str	r2, [r3, #0]
  return(result);
 800d646:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d64a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800d654:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d658:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d65c:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800d660:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d66a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d66e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d674:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d67e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	fa22 f283 	sxtab16	r2, r2, r3
 800d688:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d68c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d690:	601a      	str	r2, [r3, #0]
  return(result);
 800d692:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d696:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800d6a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6a4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800d6ae:	441a      	add	r2, r3
 800d6b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6be:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800d6c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6cc:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800d6d0:	601a      	str	r2, [r3, #0]
    return (val);
 800d6d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6d6:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800d6e0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d6e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6f2:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800d6f6:	2308      	movs	r3, #8
 800d6f8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d6fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6fe:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800d702:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d706:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 031f 	and.w	r3, r3, #31
 800d710:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d716:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800d720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d724:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d728:	6819      	ldr	r1, [r3, #0]
 800d72a:	e00b      	b.n	800d744 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d72c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d730:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800d734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d738:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d73c:	6812      	ldr	r2, [r2, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	fa62 f103 	ror.w	r1, r2, r3
 800d744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d748:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800d74c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d756:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d75a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d75c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d760:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d76a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	fa22 f283 	sxtab16	r2, r2, r3
 800d774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d778:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d77c:	601a      	str	r2, [r3, #0]
  return(result);
 800d77e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d782:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800d78c:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d790:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800d794:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800d798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d79c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d7aa:	6019      	str	r1, [r3, #0]
 800d7ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d7b4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d7b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d7be:	6819      	ldr	r1, [r3, #0]
 800d7c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	fb21 3202 	smlad	r2, r1, r2, r3
 800d7d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d7e0:	601a      	str	r2, [r3, #0]
  return(result);
 800d7e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800d7f0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d7f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7f8:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800d7fc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d800:	6013      	str	r3, [r2, #0]
 800d802:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d806:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800d80a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d80c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d810:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d81a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	fa22 f283 	sxtab16	r2, r2, r3
 800d824:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d828:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800d82c:	601a      	str	r2, [r3, #0]
  return(result);
 800d82e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d832:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800d83c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d840:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d844:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800d848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d84c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d850:	601a      	str	r2, [r3, #0]
 800d852:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d856:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d85a:	6019      	str	r1, [r3, #0]
 800d85c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d860:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d864:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d86a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d86e:	6819      	ldr	r1, [r3, #0]
 800d870:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d874:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d87e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	fb21 3202 	smlad	r2, r1, r2, r3
 800d888:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d88c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d890:	601a      	str	r2, [r3, #0]
  return(result);
 800d892:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d896:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800d8a0:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d8a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8a8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d8ac:	601a      	str	r2, [r3, #0]
 800d8ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8b2:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800d8b6:	2308      	movs	r3, #8
 800d8b8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d8ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8be:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800d8c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8c6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 031f 	and.w	r3, r3, #31
 800d8d0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d8d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d105      	bne.n	800d8ec <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800d8e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8e4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d8e8:	6819      	ldr	r1, [r3, #0]
 800d8ea:	e00b      	b.n	800d904 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d8ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8f0:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800d8f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8f8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d8fc:	6812      	ldr	r2, [r2, #0]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	fa62 f103 	ror.w	r1, r2, r3
 800d904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d908:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800d90c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d916:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d91a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d91c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d920:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d92a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	fa22 f283 	sxtab16	r2, r2, r3
 800d934:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d938:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d93c:	601a      	str	r2, [r3, #0]
  return(result);
 800d93e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d942:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800d94c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d950:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800d954:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d958:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d95a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d95e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	461a      	mov	r2, r3
 800d96a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d96e:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d972:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d974:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d978:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	1d1a      	adds	r2, r3, #4
 800d982:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d986:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	601a      	str	r2, [r3, #0]
    return (val);
 800d98e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d992:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d996:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d998:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800d99c:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d9a0:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800d9a4:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d9a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ac:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d9b0:	601a      	str	r2, [r3, #0]
 800d9b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d9ba:	6019      	str	r1, [r3, #0]
 800d9bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d9c4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d9c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d9ce:	6819      	ldr	r1, [r3, #0]
 800d9d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	fb21 3202 	smlad	r2, r1, r2, r3
 800d9e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d9f0:	601a      	str	r2, [r3, #0]
  return(result);
 800d9f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800da00:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800da04:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800da08:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800da0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800da14:	601a      	str	r2, [r3, #0]
 800da16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800da1e:	6019      	str	r1, [r3, #0]
 800da20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800da28:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800da2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	fb21 3202 	smlad	r2, r1, r2, r3
 800da4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800da54:	601a      	str	r2, [r3, #0]
  return(result);
 800da56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da5a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800da64:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800da68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da6c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800da70:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800da7e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800da80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	fa22 f283 	sxtab16	r2, r2, r3
 800da98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800daa0:	601a      	str	r2, [r3, #0]
  return(result);
 800daa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daa6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800dab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dab4:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800dab8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800dabc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800dabe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dac2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	461a      	mov	r2, r3
 800dace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dad2:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800dad6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800dad8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dadc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	1d1a      	adds	r2, r3, #4
 800dae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	601a      	str	r2, [r3, #0]
    return (val);
 800daf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daf6:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800dafa:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800dafc:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800db00:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800db04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db12:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800db16:	2308      	movs	r3, #8
 800db18:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800db1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db1e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800db22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 031f 	and.w	r3, r3, #31
 800db30:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800db32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d105      	bne.n	800db4c <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800db40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800db48:	6819      	ldr	r1, [r3, #0]
 800db4a:	e00b      	b.n	800db64 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800db4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db50:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800db54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800db5c:	6812      	ldr	r2, [r2, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	fa62 f103 	ror.w	r1, r2, r3
 800db64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db68:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800db6c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800db70:	6013      	str	r3, [r2, #0]
 800db72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db7a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800db7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	fa22 f283 	sxtab16	r2, r2, r3
 800db94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800db9c:	601a      	str	r2, [r3, #0]
  return(result);
 800db9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dba2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800dbac:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800dbb0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800dbb4:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800dbb8:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dbbc:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800dbc0:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dbc4:	fa22 f283 	sxtab16	r2, r2, r3
 800dbc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dbd0:	601a      	str	r2, [r3, #0]
  return(result);
 800dbd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbd6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800dbe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbe4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800dbee:	4413      	add	r3, r2
 800dbf0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800dbf4:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800dbfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc00:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800dc04:	601a      	str	r2, [r3, #0]
    return (val);
 800dc06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc0a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800dc14:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800dc18:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800dc1c:	2308      	movs	r3, #8
 800dc1e:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800dc22:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800dc26:	f003 031f 	and.w	r3, r3, #31
 800dc2a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800dc2e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800dc36:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800dc3a:	e004      	b.n	800dc46 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dc3c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800dc40:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800dc44:	41da      	rors	r2, r3
 800dc46:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800dc4a:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800dc4e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dc52:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800dc56:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800dc5a:	fa22 f383 	sxtab16	r3, r2, r3
 800dc5e:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800dc62:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800dc66:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800dc6a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800dc6e:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800dc72:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800dc76:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800dc7a:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800dc7e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dc82:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800dc86:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800dc8a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800dc8e:	fb21 3302 	smlad	r3, r1, r2, r3
 800dc92:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800dc96:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800dc9a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800dc9e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800dca2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800dca6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800dcaa:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dcae:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800dcb2:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800dcb6:	fa22 f383 	sxtab16	r3, r2, r3
 800dcba:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800dcbe:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800dcc2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800dcc6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800dcca:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800dcce:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800dcd2:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800dcd6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800dcda:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dcde:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800dce2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800dce6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800dcea:	fb21 3302 	smlad	r3, r1, r2, r3
 800dcee:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800dcf2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800dcf6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800dcfa:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800dcfe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800dd02:	2308      	movs	r3, #8
 800dd04:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800dd08:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800dd0c:	f003 031f 	and.w	r3, r3, #31
 800dd10:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800dd14:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d102      	bne.n	800dd22 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800dd1c:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800dd20:	e004      	b.n	800dd2c <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dd22:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800dd26:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800dd2a:	41da      	rors	r2, r3
 800dd2c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800dd30:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800dd34:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dd38:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800dd3c:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800dd40:	fa22 f383 	sxtab16	r3, r2, r3
 800dd44:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800dd48:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800dd4c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800dd50:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800dd54:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800dd58:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800dd5c:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800dd60:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800dd64:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dd68:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800dd6c:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800dd70:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800dd74:	fb21 3302 	smlad	r3, r1, r2, r3
 800dd78:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800dd7c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800dd80:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800dd84:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800dd88:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800dd8c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800dd90:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800dd94:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800dd98:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dd9c:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800dda0:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800dda4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800dda8:	fb21 3302 	smlad	r3, r1, r2, r3
 800ddac:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800ddb0:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800ddb4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ddb8:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800ddbc:	3310      	adds	r3, #16
 800ddbe:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800ddc2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800ddc6:	f1a3 020f 	sub.w	r2, r3, #15
 800ddca:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	f6fe ae1c 	blt.w	800ca0c <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ddd4:	e05a      	b.n	800de8c <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800ddd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddda:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f993 3000 	ldrsb.w	r3, [r3]
 800dde4:	461a      	mov	r2, r3
 800dde6:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800ddea:	4413      	add	r3, r2
 800ddec:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800ddf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddf4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800ddfe:	4413      	add	r3, r2
 800de00:	f993 3000 	ldrsb.w	r3, [r3]
 800de04:	461a      	mov	r2, r3
 800de06:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800de0a:	4413      	add	r3, r2
 800de0c:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800de10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de14:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f993 3000 	ldrsb.w	r3, [r3]
 800de1e:	461a      	mov	r2, r3
 800de20:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800de24:	4413      	add	r3, r2
 800de26:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800de2a:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800de2e:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800de32:	fb03 f202 	mul.w	r2, r3, r2
 800de36:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800de3a:	4413      	add	r3, r2
 800de3c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800de40:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800de44:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800de48:	fb03 f202 	mul.w	r2, r3, r2
 800de4c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800de50:	4413      	add	r3, r2
 800de52:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800de56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de5a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	1c5a      	adds	r2, r3, #1
 800de62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de66:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800de6a:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800de6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de70:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	1c5a      	adds	r2, r3, #1
 800de78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de7c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800de80:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800de82:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800de86:	3301      	adds	r3, #1
 800de88:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800de8c:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800de90:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800de94:	429a      	cmp	r2, r3
 800de96:	db9e      	blt.n	800ddd6 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800de98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de9c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800dea0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800dea4:	6013      	str	r3, [r2, #0]
 800dea6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deaa:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800deae:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deb8:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800debc:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800dec0:	6013      	str	r3, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800dec2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dec6:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800ded0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ded4:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	fa03 f202 	lsl.w	r2, r3, r2
 800dede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dee2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deec:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800def0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800def4:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800defc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df00:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800df04:	2300      	movs	r3, #0
 800df06:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800df08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800df0c:	461a      	mov	r2, r3
 800df0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df12:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800df14:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800df18:	461a      	mov	r2, r3
 800df1a:	2300      	movs	r3, #0
 800df1c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800df1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800df22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df2a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	17da      	asrs	r2, r3, #31
 800df32:	633b      	str	r3, [r7, #48]	; 0x30
 800df34:	637a      	str	r2, [r7, #52]	; 0x34
 800df36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df3a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	17da      	asrs	r2, r3, #31
 800df42:	62bb      	str	r3, [r7, #40]	; 0x28
 800df44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df4a:	fb02 f203 	mul.w	r2, r2, r3
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800df52:	fb04 f303 	mul.w	r3, r4, r3
 800df56:	4413      	add	r3, r2
 800df58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800df5c:	fba2 5604 	umull	r5, r6, r2, r4
 800df60:	4433      	add	r3, r6
 800df62:	461e      	mov	r6, r3
 800df64:	1943      	adds	r3, r0, r5
 800df66:	61bb      	str	r3, [r7, #24]
 800df68:	eb41 0306 	adc.w	r3, r1, r6
 800df6c:	61fb      	str	r3, [r7, #28]
 800df6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800df72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df76:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800df7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	f04f 0000 	mov.w	r0, #0
 800df86:	f04f 0100 	mov.w	r1, #0
 800df8a:	0fd0      	lsrs	r0, r2, #31
 800df8c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800df90:	17d9      	asrs	r1, r3, #31
 800df92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df96:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800df9a:	4603      	mov	r3, r0
 800df9c:	6013      	str	r3, [r2, #0]
    return result;
 800df9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfa2:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800dfa6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800dfa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfac:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	dc06      	bgt.n	800dfc4 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800dfb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfba:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	425a      	negs	r2, r3
 800dfc2:	e000      	b.n	800dfc6 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfca:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800dfce:	6019      	str	r1, [r3, #0]
 800dfd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfd4:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800dfd8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800dfda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfde:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800dfe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfea:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800dfee:	2201      	movs	r2, #1
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	fa02 f103 	lsl.w	r1, r2, r3
 800dff6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dffa:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800dffe:	1e4b      	subs	r3, r1, #1
 800e000:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800e002:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e006:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800e00a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e00e:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800e012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e016:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800e01a:	6812      	ldr	r2, [r2, #0]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4013      	ands	r3, r2
 800e020:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800e022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e026:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800e02a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e02e:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800e032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e036:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800e03a:	6812      	ldr	r2, [r2, #0]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	fa42 f303 	asr.w	r3, r2, r3
 800e042:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800e044:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e048:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800e04c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e050:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	105b      	asrs	r3, r3, #1
 800e058:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e05e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	da0a      	bge.n	800e07e <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800e068:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e06c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800e070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e074:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3301      	adds	r3, #1
 800e07c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e07e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e082:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800e086:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e08a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800e08e:	6812      	ldr	r2, [r2, #0]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	dd0a      	ble.n	800e0ac <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800e096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e09a:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800e09e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0a2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	6013      	str	r3, [r2, #0]
    return result;
 800e0ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0b0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800e0b4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e0b6:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800e0b8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800e0bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0c0:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800e0c4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800e0c8:	6013      	str	r3, [r2, #0]
 800e0ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0ce:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800e0d2:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800e0d6:	6013      	str	r3, [r2, #0]
 800e0d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0dc:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800e0e0:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0ea:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800e0f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0f8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	fa03 f202 	lsl.w	r2, r3, r2
 800e102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e106:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800e10a:	601a      	str	r2, [r3, #0]
 800e10c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e110:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800e114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e118:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e124:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e128:	2300      	movs	r3, #0
 800e12a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800e12c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e130:	461a      	mov	r2, r3
 800e132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e136:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800e13a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e13e:	461a      	mov	r2, r3
 800e140:	2300      	movs	r3, #0
 800e142:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e146:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e14a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e14e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e152:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	17da      	asrs	r2, r3, #31
 800e15a:	643b      	str	r3, [r7, #64]	; 0x40
 800e15c:	647a      	str	r2, [r7, #68]	; 0x44
 800e15e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e162:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	17da      	asrs	r2, r3, #31
 800e16a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e16c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e172:	fb02 f203 	mul.w	r2, r2, r3
 800e176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e178:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800e17a:	fb04 f303 	mul.w	r3, r4, r3
 800e17e:	4413      	add	r3, r2
 800e180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e182:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800e184:	fba2 ab04 	umull	sl, fp, r2, r4
 800e188:	445b      	add	r3, fp
 800e18a:	469b      	mov	fp, r3
 800e18c:	eb10 030a 	adds.w	r3, r0, sl
 800e190:	623b      	str	r3, [r7, #32]
 800e192:	eb41 030b 	adc.w	r3, r1, fp
 800e196:	627b      	str	r3, [r7, #36]	; 0x24
 800e198:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e19c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e1a0:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800e1a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e1a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e1ac:	f04f 0000 	mov.w	r0, #0
 800e1b0:	f04f 0100 	mov.w	r1, #0
 800e1b4:	0fd0      	lsrs	r0, r2, #31
 800e1b6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e1ba:	17d9      	asrs	r1, r3, #31
 800e1bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1c0:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	6013      	str	r3, [r2, #0]
    return result;
 800e1c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1cc:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800e1d0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e1d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1d6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dc06      	bgt.n	800e1ee <arm_nn_vec_mat_mult_t_s8+0x190c>
 800e1e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1e4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	425a      	negs	r2, r3
 800e1ec:	e000      	b.n	800e1f0 <arm_nn_vec_mat_mult_t_s8+0x190e>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1f4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800e1f8:	6019      	str	r1, [r3, #0]
 800e1fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1fe:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e202:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e208:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800e20c:	2300      	movs	r3, #0
 800e20e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e214:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e218:	2201      	movs	r2, #1
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	fa02 f103 	lsl.w	r1, r2, r3
 800e220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e224:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800e228:	1e4b      	subs	r3, r1, #1
 800e22a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800e22c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e230:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800e234:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e238:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800e23c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e240:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800e244:	6812      	ldr	r2, [r2, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4013      	ands	r3, r2
 800e24a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800e24c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e250:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800e254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e258:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800e25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e260:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e264:	6812      	ldr	r2, [r2, #0]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	fa42 f303 	asr.w	r3, r2, r3
 800e26c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800e26e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e272:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800e276:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e27a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	105b      	asrs	r3, r3, #1
 800e282:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e288:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	da0a      	bge.n	800e2a8 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800e292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e296:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800e29a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e29e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e2a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2ac:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800e2b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2b4:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800e2b8:	6812      	ldr	r2, [r2, #0]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	dd0a      	ble.n	800e2d6 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800e2c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2c4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800e2c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2cc:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	6013      	str	r3, [r2, #0]
    return result;
 800e2d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2da:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e2de:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e2e0:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800e2e2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800e2e6:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800e2ea:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800e2ee:	4413      	add	r3, r2
 800e2f0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800e2f4:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800e2f8:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800e302:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800e306:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800e30a:	4293      	cmp	r3, r2
 800e30c:	bfb8      	it	lt
 800e30e:	4613      	movlt	r3, r2
 800e310:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800e314:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800e318:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800e31c:	4293      	cmp	r3, r2
 800e31e:	bfa8      	it	ge
 800e320:	4613      	movge	r3, r2
 800e322:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800e326:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800e32a:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800e32e:	4293      	cmp	r3, r2
 800e330:	bfb8      	it	lt
 800e332:	4613      	movlt	r3, r2
 800e334:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800e338:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800e33c:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800e340:	4293      	cmp	r3, r2
 800e342:	bfa8      	it	ge
 800e344:	4613      	movge	r3, r2
 800e346:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800e34a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e34e:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800e352:	6819      	ldr	r1, [r3, #0]
 800e354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e358:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800e35c:	1c4b      	adds	r3, r1, #1
 800e35e:	6013      	str	r3, [r2, #0]
 800e360:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800e364:	b25b      	sxtb	r3, r3
 800e366:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800e368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e36c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800e370:	6819      	ldr	r1, [r3, #0]
 800e372:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e376:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800e37a:	1c4b      	adds	r3, r1, #1
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800e382:	b25b      	sxtb	r3, r3
 800e384:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800e386:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	4619      	mov	r1, r3
 800e38e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e392:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800e396:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e39a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	440b      	add	r3, r1
 800e3a2:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e3a4:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800e3a8:	3302      	adds	r3, #2
 800e3aa:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800e3ae:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800e3b2:	1e5a      	subs	r2, r3, #1
 800e3b4:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	f6fe aae5 	blt.w	800c988 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800e3be:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f001 806e 	beq.w	800f4a8 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800e3cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3d0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e3d4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e3d8:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800e3dc:	6812      	ldr	r2, [r2, #0]
 800e3de:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800e3e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3e4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e3e8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e3ec:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800e3f0:	6812      	ldr	r2, [r2, #0]
 800e3f2:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800e3fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3fe:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00d      	beq.n	800e424 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800e408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e40c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e416:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800e41a:	1d19      	adds	r1, r3, #4
 800e41c:	6011      	str	r1, [r2, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800e424:	2300      	movs	r3, #0
 800e426:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800e42a:	f000 beb5 	b.w	800f198 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800e42e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e432:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800e436:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e43a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e43c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e440:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e450:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800e454:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e456:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e45a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	1d1a      	adds	r2, r3, #4
 800e464:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e468:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	601a      	str	r2, [r3, #0]
    return (val);
 800e470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e474:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800e478:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e47a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e47e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e482:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e486:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e48a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e48e:	6019      	str	r1, [r3, #0]
 800e490:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e494:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800e498:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e49a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e49e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e4a8:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800e4ac:	6812      	ldr	r2, [r2, #0]
 800e4ae:	fa23 f282 	sxtab16	r2, r3, r2
 800e4b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4b6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e4ba:	601a      	str	r2, [r3, #0]
  return(result);
 800e4bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4c0:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4ce:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e4d2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e4d6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e4d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4dc:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4ec:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800e4f0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e4f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4f6:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	1d1a      	adds	r2, r3, #4
 800e500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e504:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	601a      	str	r2, [r3, #0]
    return (val);
 800e50c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e510:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800e514:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e516:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e51a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e51e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e522:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e52c:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e530:	2208      	movs	r2, #8
 800e532:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e538:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e53c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e540:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800e544:	6812      	ldr	r2, [r2, #0]
 800e546:	f002 021f 	and.w	r2, r2, #31
 800e54a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e54c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e550:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d105      	bne.n	800e566 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800e55a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e55e:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	e00b      	b.n	800e57e <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e566:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e56a:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800e56e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e572:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800e576:	6812      	ldr	r2, [r2, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	fa62 f303 	ror.w	r3, r2, r3
 800e57e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e582:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800e586:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e58a:	6011      	str	r1, [r2, #0]
 800e58c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e590:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800e594:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e59a:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e5a4:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	fa23 f282 	sxtab16	r2, r3, r2
 800e5ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5b2:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800e5b6:	601a      	str	r2, [r3, #0]
  return(result);
 800e5b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5bc:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e5c6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e5ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5ce:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800e5d2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e5d6:	6019      	str	r1, [r3, #0]
 800e5d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5dc:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800e5e0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e5e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5e6:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e5f0:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800e5f4:	6812      	ldr	r2, [r2, #0]
 800e5f6:	fa23 f282 	sxtab16	r2, r3, r2
 800e5fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5fe:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800e602:	601a      	str	r2, [r3, #0]
  return(result);
 800e604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e608:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e612:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e616:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e61a:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800e61e:	601a      	str	r2, [r3, #0]
 800e620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e624:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800e628:	2208      	movs	r2, #8
 800e62a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e62c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e630:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800e634:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e638:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800e63c:	6812      	ldr	r2, [r2, #0]
 800e63e:	f002 021f 	and.w	r2, r2, #31
 800e642:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e648:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d105      	bne.n	800e65e <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800e652:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e656:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	e00b      	b.n	800e676 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e65e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e662:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800e666:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e66a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800e66e:	6812      	ldr	r2, [r2, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	fa62 f303 	ror.w	r3, r2, r3
 800e676:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e67a:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800e67e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e682:	6011      	str	r1, [r2, #0]
 800e684:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e688:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800e68c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e68e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e692:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e69c:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800e6a0:	6812      	ldr	r2, [r2, #0]
 800e6a2:	fa23 f282 	sxtab16	r2, r3, r2
 800e6a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6aa:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800e6ae:	601a      	str	r2, [r3, #0]
  return(result);
 800e6b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6b4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e6be:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e6c2:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e6c6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e6ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6ce:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800e6d2:	6018      	str	r0, [r3, #0]
 800e6d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6d8:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800e6dc:	6019      	str	r1, [r3, #0]
 800e6de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6e2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800e6e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e6e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6ec:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6f6:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e700:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800e704:	6809      	ldr	r1, [r1, #0]
 800e706:	fb23 1202 	smlad	r2, r3, r2, r1
 800e70a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e70e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800e712:	601a      	str	r2, [r3, #0]
  return(result);
 800e714:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e718:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e722:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e726:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e72a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e72e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e732:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800e736:	6018      	str	r0, [r3, #0]
 800e738:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e73c:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800e740:	6019      	str	r1, [r3, #0]
 800e742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e746:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800e74a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e74c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e750:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e75a:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800e75e:	6812      	ldr	r2, [r2, #0]
 800e760:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e764:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800e768:	6809      	ldr	r1, [r1, #0]
 800e76a:	fb23 1202 	smlad	r2, r3, r2, r1
 800e76e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e772:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800e776:	601a      	str	r2, [r3, #0]
  return(result);
 800e778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e77c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e78a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800e78e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e792:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e794:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e798:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7a8:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800e7ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e7ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7b2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	1d1a      	adds	r2, r3, #4
 800e7bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7c0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	601a      	str	r2, [r3, #0]
    return (val);
 800e7c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7cc:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800e7d0:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e7d2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e7d6:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e7da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7de:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800e7e2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e7e6:	6019      	str	r1, [r3, #0]
 800e7e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7ec:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800e7f0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e7f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7f6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e800:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800e804:	6812      	ldr	r2, [r2, #0]
 800e806:	fa23 f282 	sxtab16	r2, r3, r2
 800e80a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e80e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800e812:	601a      	str	r2, [r3, #0]
  return(result);
 800e814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e818:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e826:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800e82a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e82e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e834:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	461a      	mov	r2, r3
 800e840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e844:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800e848:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e84a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e84e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	1d1a      	adds	r2, r3, #4
 800e858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e85c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	601a      	str	r2, [r3, #0]
    return (val);
 800e864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e868:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800e86c:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e86e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e872:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e87a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800e87e:	601a      	str	r2, [r3, #0]
 800e880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e884:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800e888:	2208      	movs	r2, #8
 800e88a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e88c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e890:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800e894:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e898:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800e89c:	6812      	ldr	r2, [r2, #0]
 800e89e:	f002 021f 	and.w	r2, r2, #31
 800e8a2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e8a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8a8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d105      	bne.n	800e8be <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800e8b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8b6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	e00b      	b.n	800e8d6 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e8be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8c2:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800e8c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8ca:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800e8ce:	6812      	ldr	r2, [r2, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	fa62 f303 	ror.w	r3, r2, r3
 800e8d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e8da:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800e8de:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e8e2:	6011      	str	r1, [r2, #0]
 800e8e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e8e8:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e8ec:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e8ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8f2:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e8fc:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e900:	6812      	ldr	r2, [r2, #0]
 800e902:	fa23 f282 	sxtab16	r2, r3, r2
 800e906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e90a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e90e:	601a      	str	r2, [r3, #0]
  return(result);
 800e910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e914:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e91e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e926:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e92a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e92e:	6019      	str	r1, [r3, #0]
 800e930:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e934:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800e938:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e93e:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e948:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800e94c:	6812      	ldr	r2, [r2, #0]
 800e94e:	fa23 f282 	sxtab16	r2, r3, r2
 800e952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e956:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e95a:	601a      	str	r2, [r3, #0]
  return(result);
 800e95c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e960:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e96a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e96e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e972:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e976:	601a      	str	r2, [r3, #0]
 800e978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e97c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e980:	2208      	movs	r2, #8
 800e982:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e988:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e98c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e990:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800e994:	6812      	ldr	r2, [r2, #0]
 800e996:	f002 021f 	and.w	r2, r2, #31
 800e99a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e99c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9a0:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800e9aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9ae:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	e00b      	b.n	800e9ce <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e9b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9ba:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800e9be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9c2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e9c6:	6812      	ldr	r2, [r2, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	fa62 f303 	ror.w	r3, r2, r3
 800e9ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9d2:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800e9d6:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e9da:	6011      	str	r1, [r2, #0]
 800e9dc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9e0:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e9e4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e9e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9ea:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9f4:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e9f8:	6812      	ldr	r2, [r2, #0]
 800e9fa:	fa23 f282 	sxtab16	r2, r3, r2
 800e9fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea02:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800ea06:	601a      	str	r2, [r3, #0]
  return(result);
 800ea08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea0c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800ea16:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800ea1a:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800ea1e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ea22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea26:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800ea2a:	6018      	str	r0, [r3, #0]
 800ea2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea30:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800ea34:	6019      	str	r1, [r3, #0]
 800ea36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea3a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800ea3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea44:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ea4e:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800ea52:	6812      	ldr	r2, [r2, #0]
 800ea54:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea58:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800ea5c:	6809      	ldr	r1, [r1, #0]
 800ea5e:	fb23 1202 	smlad	r2, r3, r2, r1
 800ea62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea66:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800ea6a:	601a      	str	r2, [r3, #0]
  return(result);
 800ea6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea70:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800ea7a:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800ea7e:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800ea82:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ea86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea8a:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800ea8e:	6018      	str	r0, [r3, #0]
 800ea90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea94:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800ea98:	6019      	str	r1, [r3, #0]
 800ea9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea9e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800eaa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eaa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaa8:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eab2:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800eab6:	6812      	ldr	r2, [r2, #0]
 800eab8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800eabc:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800eac0:	6809      	ldr	r1, [r1, #0]
 800eac2:	fb23 1202 	smlad	r2, r3, r2, r1
 800eac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaca:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800eace:	601a      	str	r2, [r3, #0]
  return(result);
 800ead0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ead4:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800eade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eae2:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800eae6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800eaea:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800eaec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaf0:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb00:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800eb04:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800eb06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb0a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	1d1a      	adds	r2, r3, #4
 800eb14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb18:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	601a      	str	r2, [r3, #0]
    return (val);
 800eb20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb24:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800eb28:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800eb2a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800eb2e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800eb32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb36:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800eb3a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800eb3e:	6019      	str	r1, [r3, #0]
 800eb40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb44:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800eb48:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800eb4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb4e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb58:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800eb5c:	6812      	ldr	r2, [r2, #0]
 800eb5e:	fa23 f282 	sxtab16	r2, r3, r2
 800eb62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb66:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800eb6a:	601a      	str	r2, [r3, #0]
  return(result);
 800eb6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb70:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800eb7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800eb82:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800eb86:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800eb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb8c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb9c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800eba0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800eba2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eba6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	1d1a      	adds	r2, r3, #4
 800ebb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebb4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	601a      	str	r2, [r3, #0]
    return (val);
 800ebbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebc0:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800ebc4:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ebc6:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ebca:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800ebce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebd2:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800ebd6:	601a      	str	r2, [r3, #0]
 800ebd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebdc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ebe0:	2208      	movs	r2, #8
 800ebe2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ebe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebe8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ebec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ebf0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	f002 021f 	and.w	r2, r2, #31
 800ebfa:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ebfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec00:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d105      	bne.n	800ec16 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800ec0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec0e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	e00b      	b.n	800ec2e <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ec16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec1a:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800ec1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec22:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ec26:	6812      	ldr	r2, [r2, #0]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	fa62 f303 	ror.w	r3, r2, r3
 800ec2e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ec32:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800ec36:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800ec3a:	6011      	str	r1, [r2, #0]
 800ec3c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ec40:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800ec44:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ec46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec4a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ec54:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800ec58:	6812      	ldr	r2, [r2, #0]
 800ec5a:	fa23 f282 	sxtab16	r2, r3, r2
 800ec5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec62:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800ec66:	601a      	str	r2, [r3, #0]
  return(result);
 800ec68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec6c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800ec76:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800ec7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec7e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ec82:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ec86:	6019      	str	r1, [r3, #0]
 800ec88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec8c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800ec90:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ec92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ec96:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eca0:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800eca4:	6812      	ldr	r2, [r2, #0]
 800eca6:	fa23 f282 	sxtab16	r2, r3, r2
 800ecaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ecae:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800ecb2:	601a      	str	r2, [r3, #0]
  return(result);
 800ecb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ecb8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800ecc2:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800ecc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ecca:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ecce:	601a      	str	r2, [r3, #0]
 800ecd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ecd4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ecd8:	2208      	movs	r2, #8
 800ecda:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ecdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ece0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ece4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ece8:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800ecec:	6812      	ldr	r2, [r2, #0]
 800ecee:	f002 021f 	and.w	r2, r2, #31
 800ecf2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ecf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ecf8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d105      	bne.n	800ed0e <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800ed02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed06:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	e00b      	b.n	800ed26 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ed0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed12:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800ed16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed1a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ed1e:	6812      	ldr	r2, [r2, #0]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	fa62 f303 	ror.w	r3, r2, r3
 800ed26:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ed2a:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800ed2e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ed32:	6011      	str	r1, [r2, #0]
 800ed34:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ed38:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800ed3c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ed3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed42:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ed4c:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800ed50:	6812      	ldr	r2, [r2, #0]
 800ed52:	fa23 f282 	sxtab16	r2, r3, r2
 800ed56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed5a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800ed5e:	601a      	str	r2, [r3, #0]
  return(result);
 800ed60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed64:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800ed6e:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800ed72:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800ed76:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ed7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed7e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800ed82:	6018      	str	r0, [r3, #0]
 800ed84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed88:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800ed8c:	6019      	str	r1, [r3, #0]
 800ed8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed92:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800ed96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ed98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ed9c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eda6:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800edaa:	6812      	ldr	r2, [r2, #0]
 800edac:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800edb0:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800edb4:	6809      	ldr	r1, [r1, #0]
 800edb6:	fb23 1202 	smlad	r2, r3, r2, r1
 800edba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800edbe:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800edc2:	601a      	str	r2, [r3, #0]
  return(result);
 800edc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800edc8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800edd2:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800edd6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800edda:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800edde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ede2:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800ede6:	6018      	str	r0, [r3, #0]
 800ede8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800edec:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800edf0:	6019      	str	r1, [r3, #0]
 800edf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800edf6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800edfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800edfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee00:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ee0a:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800ee0e:	6812      	ldr	r2, [r2, #0]
 800ee10:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ee14:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800ee18:	6809      	ldr	r1, [r1, #0]
 800ee1a:	fb23 1202 	smlad	r2, r3, r2, r1
 800ee1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee22:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800ee26:	601a      	str	r2, [r3, #0]
  return(result);
 800ee28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee2c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800ee36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee3a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800ee3e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ee42:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ee44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee48:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	461a      	mov	r2, r3
 800ee54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee58:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800ee5c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ee5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee62:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	1d1a      	adds	r2, r3, #4
 800ee6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee70:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	601a      	str	r2, [r3, #0]
    return (val);
 800ee78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee7c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800ee80:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ee82:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800ee86:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800ee8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ee92:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800ee96:	6019      	str	r1, [r3, #0]
 800ee98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ee9c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800eea0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800eea2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eea6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eeb0:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800eeb4:	6812      	ldr	r2, [r2, #0]
 800eeb6:	fa23 f282 	sxtab16	r2, r3, r2
 800eeba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eebe:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800eec2:	601a      	str	r2, [r3, #0]
  return(result);
 800eec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eec8:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800eed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eed6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800eeda:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800eede:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800eee0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eee4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	461a      	mov	r2, r3
 800eef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eef4:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800eef8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800eefa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eefe:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef0c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	601a      	str	r2, [r3, #0]
    return (val);
 800ef14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef18:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800ef1c:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ef1e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ef22:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800ef26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef2a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef34:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800ef38:	2208      	movs	r2, #8
 800ef3a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ef3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef40:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800ef44:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ef48:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800ef4c:	6812      	ldr	r2, [r2, #0]
 800ef4e:	f002 021f 	and.w	r2, r2, #31
 800ef52:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ef54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef58:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d105      	bne.n	800ef6e <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800ef62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef66:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	e00b      	b.n	800ef86 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ef6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef72:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800ef76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ef7a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800ef7e:	6812      	ldr	r2, [r2, #0]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	fa62 f303 	ror.w	r3, r2, r3
 800ef86:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ef8a:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800ef8e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800ef92:	6011      	str	r1, [r2, #0]
 800ef94:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ef98:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800ef9c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ef9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800efa2:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800efac:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800efb0:	6812      	ldr	r2, [r2, #0]
 800efb2:	fa23 f282 	sxtab16	r2, r3, r2
 800efb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800efba:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800efbe:	601a      	str	r2, [r3, #0]
  return(result);
 800efc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800efc4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800efce:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800efd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800efd6:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800efda:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800efde:	6019      	str	r1, [r3, #0]
 800efe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800efe4:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800efe8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800efea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800efee:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eff8:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800effc:	6812      	ldr	r2, [r2, #0]
 800effe:	fa23 f282 	sxtab16	r2, r3, r2
 800f002:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f006:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800f00a:	601a      	str	r2, [r3, #0]
  return(result);
 800f00c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f010:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800f01a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800f01e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f022:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f02c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800f030:	2208      	movs	r2, #8
 800f032:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800f034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f038:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800f03c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f040:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800f044:	6812      	ldr	r2, [r2, #0]
 800f046:	f002 021f 	and.w	r2, r2, #31
 800f04a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800f04c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f050:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d105      	bne.n	800f066 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800f05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f05e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	e00b      	b.n	800f07e <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800f066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f06a:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800f06e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f072:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800f076:	6812      	ldr	r2, [r2, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	fa62 f303 	ror.w	r3, r2, r3
 800f07e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f082:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800f086:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800f08a:	6011      	str	r1, [r2, #0]
 800f08c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f090:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800f094:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f09a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f0a4:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800f0a8:	6812      	ldr	r2, [r2, #0]
 800f0aa:	fa23 f282 	sxtab16	r2, r3, r2
 800f0ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f0b2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800f0b6:	601a      	str	r2, [r3, #0]
  return(result);
 800f0b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f0bc:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800f0c6:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800f0ca:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800f0ce:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f0d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f0d6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800f0da:	6018      	str	r0, [r3, #0]
 800f0dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f0e0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800f0e4:	6019      	str	r1, [r3, #0]
 800f0e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f0ea:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800f0ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f0f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f0f4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f0fe:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800f102:	6812      	ldr	r2, [r2, #0]
 800f104:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800f108:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800f10c:	6809      	ldr	r1, [r1, #0]
 800f10e:	fb23 1202 	smlad	r2, r3, r2, r1
 800f112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f116:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800f11a:	601a      	str	r2, [r3, #0]
  return(result);
 800f11c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f120:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800f12a:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800f12e:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800f132:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f13a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800f13e:	6018      	str	r0, [r3, #0]
 800f140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f144:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800f148:	6019      	str	r1, [r3, #0]
 800f14a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f14e:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800f152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f158:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f162:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800f166:	6812      	ldr	r2, [r2, #0]
 800f168:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800f16c:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800f170:	6809      	ldr	r1, [r1, #0]
 800f172:	fb23 1202 	smlad	r2, r3, r2, r1
 800f176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f17a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800f17e:	601a      	str	r2, [r3, #0]
  return(result);
 800f180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f184:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f18e:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800f192:	3310      	adds	r3, #16
 800f194:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800f198:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800f19c:	3b0f      	subs	r3, #15
 800f19e:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	f6ff a943 	blt.w	800e42e <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f1a8:	e03f      	b.n	800f22a <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f1aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f1ae:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f993 3000 	ldrsb.w	r3, [r3]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800f1be:	4413      	add	r3, r2
 800f1c0:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800f1c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f1c8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f993 3000 	ldrsb.w	r3, [r3]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800f1d8:	4413      	add	r3, r2
 800f1da:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800f1de:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800f1e2:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800f1e6:	fb02 f303 	mul.w	r3, r2, r3
 800f1ea:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f1ee:	4413      	add	r3, r2
 800f1f0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800f1f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f1f8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	1c5a      	adds	r2, r3, #1
 800f200:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f204:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800f208:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800f20a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f20e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	1c5a      	adds	r2, r3, #1
 800f216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f21a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800f21e:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f220:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800f224:	3301      	adds	r3, #1
 800f226:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800f22a:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800f22e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800f232:	429a      	cmp	r2, r3
 800f234:	dbb9      	blt.n	800f1aa <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800f236:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f23a:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800f23e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f248:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800f24c:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f256:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800f25a:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800f25e:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f260:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f264:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f26e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f272:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800f276:	6812      	ldr	r2, [r2, #0]
 800f278:	409a      	lsls	r2, r3
 800f27a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f27e:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800f282:	601a      	str	r2, [r3, #0]
 800f284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f288:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800f28c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f290:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800f294:	6812      	ldr	r2, [r2, #0]
 800f296:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800f298:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f29c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800f2a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2ae:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800f2b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f2be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f2c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f2c6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800f2ca:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800f2ce:	6809      	ldr	r1, [r1, #0]
 800f2d0:	17c8      	asrs	r0, r1, #31
 800f2d2:	6139      	str	r1, [r7, #16]
 800f2d4:	6178      	str	r0, [r7, #20]
 800f2d6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800f2da:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800f2de:	6809      	ldr	r1, [r1, #0]
 800f2e0:	17c8      	asrs	r0, r1, #31
 800f2e2:	60b9      	str	r1, [r7, #8]
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f2f0:	4650      	mov	r0, sl
 800f2f2:	fb00 f001 	mul.w	r0, r0, r1
 800f2f6:	4659      	mov	r1, fp
 800f2f8:	462c      	mov	r4, r5
 800f2fa:	fb04 f101 	mul.w	r1, r4, r1
 800f2fe:	4401      	add	r1, r0
 800f300:	4628      	mov	r0, r5
 800f302:	4654      	mov	r4, sl
 800f304:	fba0 8904 	umull	r8, r9, r0, r4
 800f308:	4449      	add	r1, r9
 800f30a:	4689      	mov	r9, r1
 800f30c:	eb12 0108 	adds.w	r1, r2, r8
 800f310:	6039      	str	r1, [r7, #0]
 800f312:	eb43 0309 	adc.w	r3, r3, r9
 800f316:	607b      	str	r3, [r7, #4]
 800f318:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f31c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f320:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800f324:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f328:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	f04f 0300 	mov.w	r3, #0
 800f334:	0fc2      	lsrs	r2, r0, #31
 800f336:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f33a:	17cb      	asrs	r3, r1, #31
 800f33c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800f340:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800f344:	4613      	mov	r3, r2
 800f346:	600b      	str	r3, [r1, #0]
    return result;
 800f348:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f34c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800f350:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f352:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f356:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	dc06      	bgt.n	800f36e <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800f360:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f364:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	425b      	negs	r3, r3
 800f36c:	e000      	b.n	800f370 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800f36e:	2300      	movs	r3, #0
 800f370:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f374:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800f378:	6011      	str	r1, [r2, #0]
 800f37a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f37e:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800f382:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f384:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f388:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800f38c:	2200      	movs	r2, #0
 800f38e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f390:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f394:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800f398:	2201      	movs	r2, #1
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	409a      	lsls	r2, r3
 800f39e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f3a2:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800f3a6:	3a01      	subs	r2, #1
 800f3a8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800f3aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f3ae:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800f3b2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f3b6:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800f3ba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f3be:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800f3c2:	6809      	ldr	r1, [r1, #0]
 800f3c4:	6812      	ldr	r2, [r2, #0]
 800f3c6:	400a      	ands	r2, r1
 800f3c8:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800f3ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f3ce:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800f3d2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f3d6:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800f3da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f3de:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800f3e2:	6809      	ldr	r1, [r1, #0]
 800f3e4:	6812      	ldr	r2, [r2, #0]
 800f3e6:	fa41 f202 	asr.w	r2, r1, r2
 800f3ea:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800f3ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f3f0:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800f3f4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f3f8:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800f3fc:	6812      	ldr	r2, [r2, #0]
 800f3fe:	1052      	asrs	r2, r2, #1
 800f400:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800f402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f406:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	da0a      	bge.n	800f426 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800f410:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f414:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800f418:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f41c:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800f420:	6812      	ldr	r2, [r2, #0]
 800f422:	3201      	adds	r2, #1
 800f424:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800f426:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f42a:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800f42e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f432:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	dd0a      	ble.n	800f454 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800f43e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f442:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800f446:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f44a:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800f44e:	6812      	ldr	r2, [r2, #0]
 800f450:	3201      	adds	r2, #1
 800f452:	601a      	str	r2, [r3, #0]
    return result;
 800f454:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f458:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800f45c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f45e:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800f460:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800f464:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f468:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800f46c:	4413      	add	r3, r2
 800f46e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800f472:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f476:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800f47a:	4293      	cmp	r3, r2
 800f47c:	bfb8      	it	lt
 800f47e:	4613      	movlt	r3, r2
 800f480:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800f484:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800f488:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800f48c:	4293      	cmp	r3, r2
 800f48e:	bfa8      	it	ge
 800f490:	4613      	movge	r3, r2
 800f492:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800f496:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800f49a:	b25a      	sxtb	r2, r3
 800f49c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f4a0:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800f4a8:	2300      	movs	r3, #0
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f4b6:	4770      	bx	lr

0800f4b8 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b0a5      	sub	sp, #148	; 0x94
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
 800f4c4:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	089b      	lsrs	r3, r3, #2
 800f4ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 800f4ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f4d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f4de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f4e6:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800f4ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 800f4f4:	e070      	b.n	800f5d8 <arm_q7_to_q15_with_offset+0x120>
 800f4f6:	f107 030c 	add.w	r3, r7, #12
 800f4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	1d1a      	adds	r2, r3, #4
 800f50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50c:	601a      	str	r2, [r3, #0]
    return (val);
 800f50e:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 800f510:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 800f512:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f516:	637b      	str	r3, [r7, #52]	; 0x34
 800f518:	2308      	movs	r3, #8
 800f51a:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 800f51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51e:	f003 031f 	and.w	r3, r3, #31
 800f522:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 800f524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f526:	2b00      	cmp	r3, #0
 800f528:	d101      	bne.n	800f52e <arm_q7_to_q15_with_offset+0x76>
    return op1;
 800f52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52c:	e003      	b.n	800f536 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 800f52e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	fa61 f303 	ror.w	r3, r1, r3
 800f536:	643a      	str	r2, [r7, #64]	; 0x40
 800f538:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f53c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f53e:	fa23 f382 	sxtab16	r3, r3, r2
 800f542:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 800f548:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f54a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f54c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f54e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f554:	fa23 f382 	sxtab16	r3, r3, r2
 800f558:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800f55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f55c:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 800f55e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f560:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f564:	66bb      	str	r3, [r7, #104]	; 0x68
 800f566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f56a:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 800f56e:	667b      	str	r3, [r7, #100]	; 0x64
 800f570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f572:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 800f574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f576:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f57a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f57e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f580:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800f584:	657b      	str	r3, [r7, #84]	; 0x54
 800f586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f588:	653b      	str	r3, [r7, #80]	; 0x50
 800f58a:	f107 0308 	add.w	r3, r7, #8
 800f58e:	623b      	str	r3, [r7, #32]
 800f590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f592:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	69ba      	ldr	r2, [r7, #24]
 800f59e:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 800f5a0:	6a3b      	ldr	r3, [r7, #32]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	1d1a      	adds	r2, r3, #4
 800f5a6:	6a3b      	ldr	r3, [r7, #32]
 800f5a8:	601a      	str	r2, [r3, #0]
}
 800f5aa:	bf00      	nop
 800f5ac:	f107 0308 	add.w	r3, r7, #8
 800f5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 800f5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 800f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	1d1a      	adds	r2, r3, #4
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	601a      	str	r2, [r3, #0]
}
 800f5cc:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 800f5ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 800f5d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dc8a      	bgt.n	800f4f6 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 800f5ea:	e012      	b.n	800f612 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	1c5a      	adds	r2, r3, #1
 800f5f0:	60fa      	str	r2, [r7, #12]
 800f5f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	887b      	ldrh	r3, [r7, #2]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	b299      	uxth	r1, r3
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	1c9a      	adds	r2, r3, #2
 800f602:	60ba      	str	r2, [r7, #8]
 800f604:	b20a      	sxth	r2, r1
 800f606:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 800f608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f60c:	3b01      	subs	r3, #1
 800f60e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 800f612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f616:	2b00      	cmp	r3, #0
 800f618:	dce8      	bgt.n	800f5ec <arm_q7_to_q15_with_offset+0x134>
    }
}
 800f61a:	bf00      	nop
 800f61c:	bf00      	nop
 800f61e:	3794      	adds	r7, #148	; 0x94
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 800f628:	b480      	push	{r7}
 800f62a:	b089      	sub	sp, #36	; 0x24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
 800f634:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	0fda      	lsrs	r2, r3, #31
 800f63a:	4413      	add	r3, r2
 800f63c:	105b      	asrs	r3, r3, #1
 800f63e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 800f640:	2300      	movs	r3, #0
 800f642:	61fb      	str	r3, [r7, #28]
 800f644:	e030      	b.n	800f6a8 <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4413      	add	r3, r2
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	dd07      	ble.n	800f664 <scale_q31_to_q7_and_clamp+0x3c>
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	4413      	add	r3, r2
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	4413      	add	r3, r2
 800f662:	e006      	b.n	800f672 <scale_q31_to_q7_and_clamp+0x4a>
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	4413      	add	r3, r2
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	1ad3      	subs	r3, r2, r3
 800f672:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 800f674:	697a      	ldr	r2, [r7, #20]
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	fb92 f3f3 	sdiv	r3, r2, r3
 800f67c:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	4293      	cmp	r3, r2
 800f684:	bfb8      	it	lt
 800f686:	4613      	movlt	r3, r2
 800f688:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68e:	4293      	cmp	r3, r2
 800f690:	bfa8      	it	ge
 800f692:	4613      	movge	r3, r2
 800f694:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	68ba      	ldr	r2, [r7, #8]
 800f69a:	4413      	add	r3, r2
 800f69c:	697a      	ldr	r2, [r7, #20]
 800f69e:	b252      	sxtb	r2, r2
 800f6a0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	61fb      	str	r3, [r7, #28]
 800f6a8:	69fa      	ldr	r2, [r7, #28]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	dbca      	blt.n	800f646 <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 800f6b0:	bf00      	nop
 800f6b2:	bf00      	nop
 800f6b4:	3724      	adds	r7, #36	; 0x24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b0a6      	sub	sp, #152	; 0x98
 800f6c2:	af02      	add	r7, sp, #8
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	60b9      	str	r1, [r7, #8]
 800f6c8:	607a      	str	r2, [r7, #4]
 800f6ca:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 800f6d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 800f6e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 800f6f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 800f6fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	695b      	ldr	r3, [r3, #20]
 800f71a:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800f728:	2300      	movs	r3, #0
 800f72a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f730:	425b      	negs	r3, r3
 800f732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f736:	e0c1      	b.n	800f8bc <arm_avgpool_s8+0x1fe>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800f738:	2300      	movs	r3, #0
 800f73a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f740:	425b      	negs	r3, r3
 800f742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f746:	e0a8      	b.n	800f89a <arm_avgpool_s8+0x1dc>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 800f748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	dc03      	bgt.n	800f758 <arm_avgpool_s8+0x9a>
 800f750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f754:	425b      	negs	r3, r3
 800f756:	e000      	b.n	800f75a <arm_avgpool_s8+0x9c>
 800f758:	2300      	movs	r3, #0
 800f75a:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 800f75c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f760:	2b00      	cmp	r3, #0
 800f762:	dc03      	bgt.n	800f76c <arm_avgpool_s8+0xae>
 800f764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f768:	425b      	negs	r3, r3
 800f76a:	e000      	b.n	800f76e <arm_avgpool_s8+0xb0>
 800f76c:	2300      	movs	r3, #0
 800f76e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 800f770:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f77a:	4293      	cmp	r3, r2
 800f77c:	bfa8      	it	ge
 800f77e:	4613      	movge	r3, r2
 800f780:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 800f782:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f78c:	4293      	cmp	r3, r2
 800f78e:	bfa8      	it	ge
 800f790:	4613      	movge	r3, r2
 800f792:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 800f794:	2300      	movs	r3, #0
 800f796:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f79c:	e05d      	b.n	800f85a <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800f79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a0:	677b      	str	r3, [r7, #116]	; 0x74
 800f7a2:	e053      	b.n	800f84c <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 800f7a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f7a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f7aa:	441a      	add	r2, r3
 800f7ac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f7ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7b2:	440b      	add	r3, r1
 800f7b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f7b6:	fb01 f303 	mul.w	r3, r1, r3
 800f7ba:	4413      	add	r3, r2
 800f7bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7be:	fb02 f303 	mul.w	r3, r2, r3
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 800f7ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d115      	bne.n	800f7fc <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	673b      	str	r3, [r7, #112]	; 0x70
 800f7d4:	e00d      	b.n	800f7f2 <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 800f7d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7d8:	6a3a      	ldr	r2, [r7, #32]
 800f7da:	4413      	add	r3, r2
 800f7dc:	f993 1000 	ldrsb.w	r1, [r3]
 800f7e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7e6:	4413      	add	r3, r2
 800f7e8:	460a      	mov	r2, r1
 800f7ea:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 800f7ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	673b      	str	r3, [r7, #112]	; 0x70
 800f7f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	dbed      	blt.n	800f7d6 <arm_avgpool_s8+0x118>
 800f7fa:	e021      	b.n	800f840 <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f800:	e01a      	b.n	800f838 <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 800f802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f804:	6a3a      	ldr	r2, [r7, #32]
 800f806:	4413      	add	r3, r2
 800f808:	f993 3000 	ldrsb.w	r3, [r3]
 800f80c:	4618      	mov	r0, r3
 800f80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f810:	009b      	lsls	r3, r3, #2
 800f812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f814:	4413      	add	r3, r2
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f81e:	440b      	add	r3, r1
 800f820:	61f8      	str	r0, [r7, #28]
 800f822:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f824:	69fa      	ldr	r2, [r7, #28]
 800f826:	69b9      	ldr	r1, [r7, #24]
 800f828:	fa81 f282 	qadd	r2, r2, r1
 800f82c:	617a      	str	r2, [r7, #20]
  return(result);
 800f82e:	697a      	ldr	r2, [r7, #20]
 800f830:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 800f832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f834:	3301      	adds	r3, #1
 800f836:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83c:	429a      	cmp	r2, r3
 800f83e:	dbe0      	blt.n	800f802 <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 800f840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f842:	3301      	adds	r3, #1
 800f844:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800f846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f848:	3301      	adds	r3, #1
 800f84a:	677b      	str	r3, [r7, #116]	; 0x74
 800f84c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f850:	429a      	cmp	r2, r3
 800f852:	dba7      	blt.n	800f7a4 <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800f854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f856:	3301      	adds	r3, #1
 800f858:	67bb      	str	r3, [r7, #120]	; 0x78
 800f85a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	429a      	cmp	r2, r3
 800f860:	db9d      	blt.n	800f79e <arm_avgpool_s8+0xe0>
                }
            }
            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 800f862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f864:	9301      	str	r3, [sp, #4]
 800f866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f86c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f86e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f872:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f874:	f7ff fed8 	bl	800f628 <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f87e:	4413      	add	r3, r2
 800f880:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800f884:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f88a:	4413      	add	r3, r2
 800f88c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f894:	3301      	adds	r3, #1
 800f896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f89a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f89e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	f6ff af51 	blt.w	800f748 <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800f8a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f8aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f8b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f8bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	f6ff af38 	blt.w	800f738 <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3790      	adds	r7, #144	; 0x90
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 800f8d2:	b480      	push	{r7}
 800f8d4:	b083      	sub	sp, #12
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <compare_and_replace_if_larger_q7>:

#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnfunctions.h"
#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b091      	sub	sp, #68	; 0x44
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	109b      	asrs	r3, r3, #2
 800f904:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 800f906:	e050      	b.n	800f9aa <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 800f908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90a:	637b      	str	r3, [r7, #52]	; 0x34
 800f90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90e:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 800f910:	617b      	str	r3, [r7, #20]
    return (val);
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	623b      	str	r3, [r7, #32]
 800f916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f91a:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 800f91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1d1a      	adds	r2, r3, #4
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	601a      	str	r2, [r3, #0]
    return (val);
 800f92e:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 800f930:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 800f932:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800f936:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	dd03      	ble.n	800f946 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 800f93e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f942:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 800f946:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800f94a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f94e:	429a      	cmp	r2, r3
 800f950:	dd03      	ble.n	800f95a <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 800f952:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f956:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 800f95a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800f95e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f962:	429a      	cmp	r2, r3
 800f964:	dd03      	ble.n	800f96e <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 800f966:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f96a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 800f96e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800f972:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f976:	429a      	cmp	r2, r3
 800f978:	dd03      	ble.n	800f982 <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 800f97a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f97e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 800f982:	6a3b      	ldr	r3, [r7, #32]
 800f984:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f988:	633a      	str	r2, [r7, #48]	; 0x30
 800f98a:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	69ba      	ldr	r2, [r7, #24]
 800f996:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	1d1a      	adds	r2, r3, #4
 800f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a0:	601a      	str	r2, [r3, #0]
}
 800f9a2:	bf00      	nop

        cnt--;
 800f9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 800f9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	dcab      	bgt.n	800f908 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f003 0303 	and.w	r3, r3, #3
 800f9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 800f9b8:	e015      	b.n	800f9e6 <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	f993 2000 	ldrsb.w	r2, [r3]
 800f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c2:	f993 3000 	ldrsb.w	r3, [r3]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	dd04      	ble.n	800f9d4 <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 800f9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ce:	f992 2000 	ldrsb.w	r2, [r2]
 800f9d2:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 800f9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	3301      	adds	r3, #1
 800f9de:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 800f9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 800f9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	dce6      	bgt.n	800f9ba <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 800f9ec:	bf00      	nop
 800f9ee:	bf00      	nop
 800f9f0:	3744      	adds	r7, #68	; 0x44
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	b08d      	sub	sp, #52	; 0x34
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	607a      	str	r2, [r7, #4]
 800fa06:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	109b      	asrs	r3, r3, #2
 800fa0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 800fa0e:	e062      	b.n	800fad6 <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	61fb      	str	r3, [r7, #28]
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 800fa18:	617b      	str	r3, [r7, #20]
    return (val);
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 800fa1e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800fa22:	461a      	mov	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4293      	cmp	r3, r2
 800fa28:	bfb8      	it	lt
 800fa2a:	4613      	movlt	r3, r2
 800fa2c:	b25b      	sxtb	r3, r3
 800fa2e:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800fa30:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800fa34:	461a      	mov	r2, r3
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	bfa8      	it	ge
 800fa3c:	4613      	movge	r3, r2
 800fa3e:	b25b      	sxtb	r3, r3
 800fa40:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800fa42:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800fa46:	461a      	mov	r2, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	bfb8      	it	lt
 800fa4e:	4613      	movlt	r3, r2
 800fa50:	b25b      	sxtb	r3, r3
 800fa52:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 800fa54:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	bfa8      	it	ge
 800fa60:	4613      	movge	r3, r2
 800fa62:	b25b      	sxtb	r3, r3
 800fa64:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800fa66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	bfb8      	it	lt
 800fa72:	4613      	movlt	r3, r2
 800fa74:	b25b      	sxtb	r3, r3
 800fa76:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 800fa78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	4293      	cmp	r3, r2
 800fa82:	bfa8      	it	ge
 800fa84:	4613      	movge	r3, r2
 800fa86:	b25b      	sxtb	r3, r3
 800fa88:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 800fa8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4293      	cmp	r3, r2
 800fa94:	bfb8      	it	lt
 800fa96:	4613      	movlt	r3, r2
 800fa98:	b25b      	sxtb	r3, r3
 800fa9a:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 800fa9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800faa0:	461a      	mov	r2, r3
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	4293      	cmp	r3, r2
 800faa6:	bfa8      	it	ge
 800faa8:	4613      	movge	r3, r2
 800faaa:	b25b      	sxtb	r3, r3
 800faac:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	f107 020c 	add.w	r2, r7, #12
 800fab4:	627a      	str	r2, [r7, #36]	; 0x24
 800fab6:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 800fab8:	6a3b      	ldr	r3, [r7, #32]
 800faba:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	1d1a      	adds	r2, r3, #4
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	601a      	str	r2, [r3, #0]
}
 800face:	bf00      	nop
        cnt--;
 800fad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad2:	3b01      	subs	r3, #1
 800fad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	2b00      	cmp	r3, #0
 800fada:	dc99      	bgt.n	800fa10 <clamp_output+0x16>
    }

    cnt = length & 0x3;
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	f003 0303 	and.w	r3, r3, #3
 800fae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 800fae4:	e018      	b.n	800fb18 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f993 3000 	ldrsb.w	r3, [r3]
 800faec:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 800faee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4293      	cmp	r3, r2
 800faf4:	bfb8      	it	lt
 800faf6:	4613      	movlt	r3, r2
 800faf8:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 800fafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	4293      	cmp	r3, r2
 800fb00:	bfa8      	it	ge
 800fb02:	4613      	movge	r3, r2
 800fb04:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	60fa      	str	r2, [r7, #12]
 800fb0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb0e:	b252      	sxtb	r2, r2
 800fb10:	701a      	strb	r2, [r3, #0]
        cnt--;
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	3b01      	subs	r3, #1
 800fb16:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dce3      	bgt.n	800fae6 <clamp_output+0xec>
    }
#endif
}
 800fb1e:	bf00      	nop
 800fb20:	bf00      	nop
 800fb22:	3734      	adds	r7, #52	; 0x34
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b09e      	sub	sp, #120	; 0x78
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 800fb46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 800fb4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 800fb62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 800fb6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	695b      	ldr	r3, [r3, #20]
 800fb88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 800fb90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb94:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fb96:	2300      	movs	r3, #0
 800fb98:	677b      	str	r3, [r7, #116]	; 0x74
 800fb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9c:	425b      	negs	r3, r3
 800fb9e:	673b      	str	r3, [r7, #112]	; 0x70
 800fba0:	e078      	b.n	800fc94 <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fba2:	2300      	movs	r3, #0
 800fba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba8:	425b      	negs	r3, r3
 800fbaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbac:	e067      	b.n	800fc7e <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 800fbae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	dc02      	bgt.n	800fbba <arm_max_pool_s8+0x8e>
 800fbb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbb6:	425b      	negs	r3, r3
 800fbb8:	e000      	b.n	800fbbc <arm_max_pool_s8+0x90>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fbbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	dc02      	bgt.n	800fbca <arm_max_pool_s8+0x9e>
 800fbc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbc6:	425b      	negs	r3, r3
 800fbc8:	e000      	b.n	800fbcc <arm_max_pool_s8+0xa0>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 800fbce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	bfa8      	it	ge
 800fbda:	4613      	movge	r3, r2
 800fbdc:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 800fbde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bfa8      	it	ge
 800fbea:	4613      	movge	r3, r2
 800fbec:	617b      	str	r3, [r7, #20]

            int count = 0;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fbf2:	6a3b      	ldr	r3, [r7, #32]
 800fbf4:	663b      	str	r3, [r7, #96]	; 0x60
 800fbf6:	e031      	b.n	800fc5c <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbfc:	e027      	b.n	800fc4e <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800fbfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc02:	441a      	add	r2, r3
 800fc04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc08:	440b      	add	r3, r1
 800fc0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc0c:	fb01 f303 	mul.w	r3, r1, r3
 800fc10:	4413      	add	r3, r2
 800fc12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc14:	fb02 f303 	mul.w	r3, r2, r3
 800fc18:	461a      	mov	r2, r3
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 800fc20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10a      	bne.n	800fc3c <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	461a      	mov	r2, r3
 800fc2a:	6939      	ldr	r1, [r7, #16]
 800fc2c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800fc30:	f010 f8d2 	bl	801fdd8 <memcpy>
                        count++;
 800fc34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc36:	3301      	adds	r3, #1
 800fc38:	667b      	str	r3, [r7, #100]	; 0x64
 800fc3a:	e005      	b.n	800fc48 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 800fc3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc3e:	6939      	ldr	r1, [r7, #16]
 800fc40:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800fc44:	f7ff fe52 	bl	800f8ec <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fc48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	dbd3      	blt.n	800fbfe <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fc56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc58:	3301      	adds	r3, #1
 800fc5a:	663b      	str	r3, [r7, #96]	; 0x60
 800fc5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	dbc9      	blt.n	800fbf8 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 800fc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fc70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc74:	4413      	add	r3, r2
 800fc76:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc82:	429a      	cmp	r2, r3
 800fc84:	db93      	blt.n	800fbae <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fc86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc8a:	4413      	add	r3, r2
 800fc8c:	673b      	str	r3, [r7, #112]	; 0x70
 800fc8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc90:	3301      	adds	r3, #1
 800fc92:	677b      	str	r3, [r7, #116]	; 0x74
 800fc94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	db82      	blt.n	800fba2 <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 800fc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fca0:	fb02 f303 	mul.w	r3, r2, r3
 800fca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fca6:	fb02 f103 	mul.w	r1, r2, r3
 800fcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcb0:	f7ff fea3 	bl	800f9fa <clamp_output>

    return ARM_MATH_SUCCESS;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3778      	adds	r7, #120	; 0x78
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
	...

0800fcc0 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800fcc0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fcc4:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800fcce:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800fcd2:	6020      	str	r0, [r4, #0]
 800fcd4:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800fcd8:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800fcdc:	6001      	str	r1, [r0, #0]
 800fcde:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800fce2:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800fce6:	600a      	str	r2, [r1, #0]
 800fce8:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800fcec:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800fcf0:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fcf8:	fa02 f303 	lsl.w	r3, r2, r3
 800fcfc:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800fd00:	2300      	movs	r3, #0
 800fd02:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800fd06:	2300      	movs	r3, #0
 800fd08:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800fd0c:	f004 b863 	b.w	8013dd6 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800fd10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd14:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800fd20:	2301      	movs	r3, #1
 800fd22:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800fd26:	e015      	b.n	800fd54 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800fd28:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800fd2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd30:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4413      	add	r3, r2
 800fd38:	f993 2000 	ldrsb.w	r2, [r3]
 800fd3c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800fd40:	4293      	cmp	r3, r2
 800fd42:	bfb8      	it	lt
 800fd44:	4613      	movlt	r3, r2
 800fd46:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800fd4a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800fd4e:	3301      	adds	r3, #1
 800fd50:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800fd54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd58:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800fd5c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	dbe0      	blt.n	800fd28 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800fd72:	2300      	movs	r3, #0
 800fd74:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800fd78:	f001 ba24 	b.w	80111c4 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800fd7c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800fd80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd84:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	f993 3000 	ldrsb.w	r3, [r3]
 800fd90:	461a      	mov	r2, r3
 800fd92:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800fd9c:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800fda0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fda4:	429a      	cmp	r2, r3
 800fda6:	f2c1 8208 	blt.w	80111ba <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800fdaa:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800fdae:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800fdb2:	fb03 f202 	mul.w	r2, r3, r2
 800fdb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800fdbe:	601a      	str	r2, [r3, #0]
 800fdc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdc4:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800fdc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdcc:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fdd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdd8:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800fddc:	2300      	movs	r3, #0
 800fdde:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fde0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fde4:	f04f 0300 	mov.w	r3, #0
 800fde8:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800fdec:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fdf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdf4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	0fdb      	lsrs	r3, r3, #31
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	0fdb      	lsrs	r3, r3, #31
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	4053      	eors	r3, r2
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d012      	beq.n	800fe3a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800fe14:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800fe18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	f1d2 0001 	rsbs	r0, r2, #1
 800fe22:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800fe26:	eb61 0303 	sbc.w	r3, r1, r3
 800fe2a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800fe2e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800fe32:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800fe36:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fe3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe3e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	17da      	asrs	r2, r3, #31
 800fe46:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800fe4a:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800fe4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	17da      	asrs	r2, r3, #31
 800fe5a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800fe5e:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800fe62:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800fe66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800fe70:	fb02 f203 	mul.w	r2, r2, r3
 800fe74:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800fe78:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800fe7c:	e9c4 0100 	strd	r0, r1, [r4]
 800fe80:	4601      	mov	r1, r0
 800fe82:	fb01 f303 	mul.w	r3, r1, r3
 800fe86:	4413      	add	r3, r2
 800fe88:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800fe8c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800fe90:	fba2 1201 	umull	r1, r2, r2, r1
 800fe94:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800fe98:	460a      	mov	r2, r1
 800fe9a:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800fe9e:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800fea2:	4413      	add	r3, r2
 800fea4:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800fea8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800feb4:	1851      	adds	r1, r2, r1
 800feb6:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800feba:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800febe:	414b      	adcs	r3, r1
 800fec0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800fec4:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800fec8:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800fecc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fed0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800fed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	da0a      	bge.n	800fef2 <arm_softmax_s8+0x232>
 800fedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fee0:	1851      	adds	r1, r2, r1
 800fee2:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800fee6:	f143 0300 	adc.w	r3, r3, #0
 800feea:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800feee:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800fef2:	f04f 0000 	mov.w	r0, #0
 800fef6:	f04f 0100 	mov.w	r1, #0
 800fefa:	0fd0      	lsrs	r0, r2, #31
 800fefc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ff00:	17d9      	asrs	r1, r3, #31
 800ff02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff06:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ff0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff12:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800ff16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ff1e:	6812      	ldr	r2, [r2, #0]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d10e      	bne.n	800ff44 <arm_softmax_s8+0x284>
 800ff26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff34:	d106      	bne.n	800ff44 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800ff36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff3a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ff3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ff42:	6013      	str	r3, [r2, #0]
    return result;
 800ff44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
    int32_t mask = 0;
 800ff52:	2300      	movs	r3, #0
 800ff54:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800ff58:	2318      	movs	r3, #24
 800ff5a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800ff64:	fa02 f303 	lsl.w	r3, r2, r3
 800ff68:	1e5a      	subs	r2, r3, #1
 800ff6a:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800ff6e:	ea02 0103 	and.w	r1, r2, r3
 800ff72:	2201      	movs	r2, #1
 800ff74:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800ff78:	fa02 f303 	lsl.w	r3, r2, r3
 800ff7c:	1acb      	subs	r3, r1, r3
 800ff7e:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800ff82:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800ff86:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800ff90:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800ff94:	015b      	lsls	r3, r3, #5
 800ff96:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800ff9a:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800ff9e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800ffa2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800ffa6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800ffaa:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800ffb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ffb8:	f04f 0300 	mov.w	r3, #0
 800ffbc:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800ffc0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ffc4:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ffc8:	0fdb      	lsrs	r3, r3, #31
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ffd0:	0fdb      	lsrs	r3, r3, #31
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	4053      	eors	r3, r2
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d012      	beq.n	8010002 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800ffdc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	f1d2 0001 	rsbs	r0, r2, #1
 800ffea:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800ffee:	eb61 0303 	sbc.w	r3, r1, r3
 800fff2:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800fff6:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800fffa:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800fffe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010002:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8010006:	17da      	asrs	r2, r3, #31
 8010008:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 801000c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8010010:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8010014:	17da      	asrs	r2, r3, #31
 8010016:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 801001a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 801001e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8010022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010026:	460b      	mov	r3, r1
 8010028:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801002c:	fb02 f203 	mul.w	r2, r2, r3
 8010030:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8010034:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8010038:	e9c4 0100 	strd	r0, r1, [r4]
 801003c:	4601      	mov	r1, r0
 801003e:	fb01 f303 	mul.w	r3, r1, r3
 8010042:	4413      	add	r3, r2
 8010044:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8010048:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 801004c:	fba2 8901 	umull	r8, r9, r2, r1
 8010050:	444b      	add	r3, r9
 8010052:	4699      	mov	r9, r3
 8010054:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005c:	eb12 0108 	adds.w	r1, r2, r8
 8010060:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8010064:	eb43 0309 	adc.w	r3, r3, r9
 8010068:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801006c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8010070:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8010074:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010078:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	2b00      	cmp	r3, #0
 8010082:	da0a      	bge.n	801009a <arm_softmax_s8+0x3da>
 8010084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010088:	1851      	adds	r1, r2, r1
 801008a:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 801008e:	f143 0300 	adc.w	r3, r3, #0
 8010092:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8010096:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 801009a:	f04f 0000 	mov.w	r0, #0
 801009e:	f04f 0100 	mov.w	r1, #0
 80100a2:	0fd0      	lsrs	r0, r2, #31
 80100a4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80100a8:	17d9      	asrs	r1, r3, #31
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4613      	mov	r3, r2
 80100b0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80100b4:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80100b8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80100bc:	429a      	cmp	r2, r3
 80100be:	d108      	bne.n	80100d2 <arm_softmax_s8+0x412>
 80100c0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80100c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100c8:	d103      	bne.n	80100d2 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 80100ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80100ce:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 80100d2:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 80100d6:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 80100da:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80100de:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 80100e2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80100e6:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 80100f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80100f4:	f04f 0300 	mov.w	r3, #0
 80100f8:	f607 1128 	addw	r1, r7, #2344	; 0x928
 80100fc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010100:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8010104:	0fdb      	lsrs	r3, r3, #31
 8010106:	b2da      	uxtb	r2, r3
 8010108:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801010c:	0fdb      	lsrs	r3, r3, #31
 801010e:	b2db      	uxtb	r3, r3
 8010110:	4053      	eors	r3, r2
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	d012      	beq.n	801013e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8010118:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	2100      	movs	r1, #0
 8010122:	f1d2 0001 	rsbs	r0, r2, #1
 8010126:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 801012a:	eb61 0303 	sbc.w	r3, r1, r3
 801012e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8010132:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8010136:	f607 1228 	addw	r2, r7, #2344	; 0x928
 801013a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801013e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8010142:	17da      	asrs	r2, r3, #31
 8010144:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8010148:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 801014c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8010150:	17da      	asrs	r2, r3, #31
 8010152:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8010156:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 801015a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801015e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010162:	460b      	mov	r3, r1
 8010164:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8010168:	fb02 f203 	mul.w	r2, r2, r3
 801016c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8010170:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 8010174:	e9c4 0100 	strd	r0, r1, [r4]
 8010178:	4601      	mov	r1, r0
 801017a:	fb01 f303 	mul.w	r3, r1, r3
 801017e:	4413      	add	r3, r2
 8010180:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8010184:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8010188:	fba2 ab01 	umull	sl, fp, r2, r1
 801018c:	445b      	add	r3, fp
 801018e:	469b      	mov	fp, r3
 8010190:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	eb12 010a 	adds.w	r1, r2, sl
 801019c:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 80101a0:	eb43 030b 	adc.w	r3, r3, fp
 80101a4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80101a8:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 80101ac:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80101b0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80101b4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	da0a      	bge.n	80101d6 <arm_softmax_s8+0x516>
 80101c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80101c4:	1851      	adds	r1, r2, r1
 80101c6:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80101ca:	f143 0300 	adc.w	r3, r3, #0
 80101ce:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80101d2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80101d6:	f04f 0000 	mov.w	r0, #0
 80101da:	f04f 0100 	mov.w	r1, #0
 80101de:	0fd0      	lsrs	r0, r2, #31
 80101e0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80101e4:	17d9      	asrs	r1, r3, #31
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	4613      	mov	r3, r2
 80101ec:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80101f0:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 80101f4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d108      	bne.n	801020e <arm_softmax_s8+0x54e>
 80101fc:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8010200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010204:	d103      	bne.n	801020e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8010206:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801020a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 801020e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8010212:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8010216:	2300      	movs	r3, #0
 8010218:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 801021c:	2304      	movs	r3, #4
 801021e:	3b01      	subs	r3, #1
 8010220:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8010224:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8010228:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 801022c:	4013      	ands	r3, r2
 801022e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8010232:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8010236:	109b      	asrs	r3, r3, #2
 8010238:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 801023c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8010240:	105b      	asrs	r3, r3, #1
 8010242:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8010246:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 801024a:	2b00      	cmp	r3, #0
 801024c:	da04      	bge.n	8010258 <arm_softmax_s8+0x598>
        threshold++;
 801024e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8010252:	3301      	adds	r3, #1
 8010254:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8010258:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 801025c:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8010260:	429a      	cmp	r2, r3
 8010262:	dd04      	ble.n	801026e <arm_softmax_s8+0x5ae>
        result++;
 8010264:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8010268:	3301      	adds	r3, #1
 801026a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 801026e:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8010272:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8010276:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 801027a:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801027e:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8010288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801028c:	f04f 0300 	mov.w	r3, #0
 8010290:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8010294:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010298:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801029c:	0fdb      	lsrs	r3, r3, #31
 801029e:	b2da      	uxtb	r2, r3
 80102a0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80102a4:	0fdb      	lsrs	r3, r3, #31
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	4053      	eors	r3, r2
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d012      	beq.n	80102d6 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 80102b0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	2100      	movs	r1, #0
 80102ba:	f1d2 0001 	rsbs	r0, r2, #1
 80102be:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 80102c2:	eb61 0303 	sbc.w	r3, r1, r3
 80102c6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80102ca:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80102ce:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80102d2:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80102d6:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80102da:	17da      	asrs	r2, r3, #31
 80102dc:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80102e0:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 80102e4:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80102e8:	17da      	asrs	r2, r3, #31
 80102ea:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80102ee:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 80102f2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80102f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102fa:	460b      	mov	r3, r1
 80102fc:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8010300:	fb02 f203 	mul.w	r2, r2, r3
 8010304:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8010308:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 801030c:	e9cc 0100 	strd	r0, r1, [ip]
 8010310:	4601      	mov	r1, r0
 8010312:	fb01 f303 	mul.w	r3, r1, r3
 8010316:	4413      	add	r3, r2
 8010318:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 801031c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8010320:	fba2 5601 	umull	r5, r6, r2, r1
 8010324:	4433      	add	r3, r6
 8010326:	461e      	mov	r6, r3
 8010328:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	1951      	adds	r1, r2, r5
 8010332:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8010336:	4173      	adcs	r3, r6
 8010338:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801033c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8010340:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8010344:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8010348:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801034c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010350:	2b00      	cmp	r3, #0
 8010352:	da0a      	bge.n	801036a <arm_softmax_s8+0x6aa>
 8010354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010358:	1851      	adds	r1, r2, r1
 801035a:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 801035e:	f143 0300 	adc.w	r3, r3, #0
 8010362:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8010366:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 801036a:	f04f 0000 	mov.w	r0, #0
 801036e:	f04f 0100 	mov.w	r1, #0
 8010372:	0fd0      	lsrs	r0, r2, #31
 8010374:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010378:	17d9      	asrs	r1, r3, #31
 801037a:	4602      	mov	r2, r0
 801037c:	460b      	mov	r3, r1
 801037e:	4613      	mov	r3, r2
 8010380:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010384:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8010388:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 801038c:	429a      	cmp	r2, r3
 801038e:	d108      	bne.n	80103a2 <arm_softmax_s8+0x6e2>
 8010390:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8010394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010398:	d103      	bne.n	80103a2 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 801039a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801039e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 80103a2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80103a6:	4423      	add	r3, r4
 80103a8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 80103ac:	2300      	movs	r3, #0
 80103ae:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 80103b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80103b6:	f04f 0300 	mov.w	r3, #0
 80103ba:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 80103be:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80103c2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80103c6:	0fdb      	lsrs	r3, r3, #31
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	2300      	movs	r3, #0
 80103cc:	4053      	eors	r3, r2
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d012      	beq.n	80103fa <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 80103d4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80103d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103dc:	2100      	movs	r1, #0
 80103de:	f1d2 0001 	rsbs	r0, r2, #1
 80103e2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 80103e6:	eb61 0303 	sbc.w	r3, r1, r3
 80103ea:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80103ee:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 80103f2:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 80103f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80103fa:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80103fe:	17da      	asrs	r2, r3, #31
 8010400:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8010404:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8010408:	a3f0      	add	r3, pc, #960	; (adr r3, 80107cc <arm_softmax_s8+0xb0c>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8010412:	fb02 f001 	mul.w	r0, r2, r1
 8010416:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 801041a:	fb01 f103 	mul.w	r1, r1, r3
 801041e:	4401      	add	r1, r0
 8010420:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8010424:	fba0 2302 	umull	r2, r3, r0, r2
 8010428:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801042c:	4613      	mov	r3, r2
 801042e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8010432:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8010436:	18cb      	adds	r3, r1, r3
 8010438:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801043c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8010448:	1851      	adds	r1, r2, r1
 801044a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 801044e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8010452:	414b      	adcs	r3, r1
 8010454:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8010458:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 801045c:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8010460:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010464:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	2b00      	cmp	r3, #0
 801046e:	da0a      	bge.n	8010486 <arm_softmax_s8+0x7c6>
 8010470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010474:	1851      	adds	r1, r2, r1
 8010476:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 801047a:	f143 0300 	adc.w	r3, r3, #0
 801047e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8010482:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8010486:	f04f 0000 	mov.w	r0, #0
 801048a:	f04f 0100 	mov.w	r1, #0
 801048e:	0fd0      	lsrs	r0, r2, #31
 8010490:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010494:	17d9      	asrs	r1, r3, #31
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	4613      	mov	r3, r2
 801049c:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80104a0:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80104a4:	4bc6      	ldr	r3, [pc, #792]	; (80107c0 <arm_softmax_s8+0xb00>)
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d108      	bne.n	80104bc <arm_softmax_s8+0x7fc>
 80104aa:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80104ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104b2:	d103      	bne.n	80104bc <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 80104b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80104b8:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 80104bc:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80104c0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80104c4:	4413      	add	r3, r2
 80104c6:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 80104d0:	2302      	movs	r3, #2
 80104d2:	3b01      	subs	r3, #1
 80104d4:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 80104d8:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 80104dc:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80104e0:	4013      	ands	r3, r2
 80104e2:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 80104e6:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80104ea:	105b      	asrs	r3, r3, #1
 80104ec:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 80104f0:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80104f4:	105b      	asrs	r3, r3, #1
 80104f6:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 80104fa:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 80104fe:	2b00      	cmp	r3, #0
 8010500:	da04      	bge.n	801050c <arm_softmax_s8+0x84c>
        threshold++;
 8010502:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8010506:	3301      	adds	r3, #1
 8010508:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 801050c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8010510:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8010514:	429a      	cmp	r2, r3
 8010516:	dd04      	ble.n	8010522 <arm_softmax_s8+0x862>
        result++;
 8010518:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 801051c:	3301      	adds	r3, #1
 801051e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8010522:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8010526:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801052a:	4413      	add	r3, r2
 801052c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8010530:	2300      	movs	r3, #0
 8010532:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8010536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801053a:	f04f 0300 	mov.w	r3, #0
 801053e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8010542:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010546:	2200      	movs	r2, #0
 8010548:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 801054c:	0fdb      	lsrs	r3, r3, #31
 801054e:	b2db      	uxtb	r3, r3
 8010550:	4053      	eors	r3, r2
 8010552:	b2db      	uxtb	r3, r3
 8010554:	2b00      	cmp	r3, #0
 8010556:	d012      	beq.n	801057e <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8010558:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801055c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010560:	2100      	movs	r1, #0
 8010562:	f1d2 0001 	rsbs	r0, r2, #1
 8010566:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 801056a:	eb61 0303 	sbc.w	r3, r1, r3
 801056e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8010572:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8010576:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 801057a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801057e:	a18c      	add	r1, pc, #560	; (adr r1, 80107b0 <arm_softmax_s8+0xaf0>)
 8010580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010584:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8010588:	17da      	asrs	r2, r3, #31
 801058a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 801058e:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 8010592:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8010596:	fb03 f201 	mul.w	r2, r3, r1
 801059a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801059e:	fb00 f303 	mul.w	r3, r0, r3
 80105a2:	4413      	add	r3, r2
 80105a4:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80105a8:	fba0 1202 	umull	r1, r2, r0, r2
 80105ac:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 80105b0:	460a      	mov	r2, r1
 80105b2:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 80105b6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 80105ba:	4413      	add	r3, r2
 80105bc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80105c0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80105cc:	1851      	adds	r1, r2, r1
 80105ce:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 80105d2:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80105d6:	414b      	adcs	r3, r1
 80105d8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80105dc:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 80105e0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80105e4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80105e8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80105ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	da0a      	bge.n	801060a <arm_softmax_s8+0x94a>
 80105f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105f8:	1851      	adds	r1, r2, r1
 80105fa:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 80105fe:	f143 0300 	adc.w	r3, r3, #0
 8010602:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8010606:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801060a:	f04f 0000 	mov.w	r0, #0
 801060e:	f04f 0100 	mov.w	r1, #0
 8010612:	0fd0      	lsrs	r0, r2, #31
 8010614:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010618:	17d9      	asrs	r1, r3, #31
 801061a:	4602      	mov	r2, r0
 801061c:	460b      	mov	r3, r1
 801061e:	4613      	mov	r3, r2
 8010620:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8010624:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8010628:	4b66      	ldr	r3, [pc, #408]	; (80107c4 <arm_softmax_s8+0xb04>)
 801062a:	4413      	add	r3, r2
 801062c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1672461947)
 8010630:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010634:	1c53      	adds	r3, r2, #1
 8010636:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801063a:	2301      	movs	r3, #1
 801063c:	fa03 f202 	lsl.w	r2, r3, r2
 8010640:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8010644:	4013      	ands	r3, r2
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <arm_softmax_s8+0x990>
 801064a:	f04f 33ff 	mov.w	r3, #4294967295
 801064e:	e000      	b.n	8010652 <arm_softmax_s8+0x992>
 8010650:	2300      	movs	r3, #0
 8010652:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8010656:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801065a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 8010664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010668:	f04f 0300 	mov.w	r3, #0
 801066c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8010670:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010674:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8010678:	0fdb      	lsrs	r3, r3, #31
 801067a:	b2da      	uxtb	r2, r3
 801067c:	2300      	movs	r3, #0
 801067e:	4053      	eors	r3, r2
 8010680:	b2db      	uxtb	r3, r3
 8010682:	2b00      	cmp	r3, #0
 8010684:	d012      	beq.n	80106ac <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 8010686:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	2100      	movs	r1, #0
 8010690:	f1d2 0001 	rsbs	r0, r2, #1
 8010694:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8010698:	eb61 0303 	sbc.w	r3, r1, r3
 801069c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80106a0:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 80106a4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80106a8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80106ac:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80106b0:	17da      	asrs	r2, r3, #31
 80106b2:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80106b6:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 80106ba:	a33f      	add	r3, pc, #252	; (adr r3, 80107b8 <arm_softmax_s8+0xaf8>)
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80106c4:	fb02 f001 	mul.w	r0, r2, r1
 80106c8:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 80106cc:	fb01 f103 	mul.w	r1, r1, r3
 80106d0:	4401      	add	r1, r0
 80106d2:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 80106d6:	fba0 2302 	umull	r2, r3, r0, r2
 80106da:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80106de:	4613      	mov	r3, r2
 80106e0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 80106e4:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80106e8:	18cb      	adds	r3, r1, r3
 80106ea:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80106ee:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80106fa:	1851      	adds	r1, r2, r1
 80106fc:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8010700:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8010704:	414b      	adcs	r3, r1
 8010706:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801070a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 801070e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8010712:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010716:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071e:	2b00      	cmp	r3, #0
 8010720:	da0a      	bge.n	8010738 <arm_softmax_s8+0xa78>
 8010722:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010726:	1851      	adds	r1, r2, r1
 8010728:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 801072c:	f143 0300 	adc.w	r3, r3, #0
 8010730:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8010734:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8010738:	f04f 0000 	mov.w	r0, #0
 801073c:	f04f 0100 	mov.w	r1, #0
 8010740:	0fd0      	lsrs	r0, r2, #31
 8010742:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010746:	17d9      	asrs	r1, r3, #31
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	4613      	mov	r3, r2
 801074e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010752:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8010756:	4b1c      	ldr	r3, [pc, #112]	; (80107c8 <arm_softmax_s8+0xb08>)
 8010758:	429a      	cmp	r2, r3
 801075a:	d108      	bne.n	801076e <arm_softmax_s8+0xaae>
 801075c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8010760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010764:	d103      	bne.n	801076e <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8010766:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801076a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 801076e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8010772:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010776:	ea02 0103 	and.w	r1, r2, r3
 801077a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801077e:	43da      	mvns	r2, r3
 8010780:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010784:	4013      	ands	r3, r2
 8010786:	404b      	eors	r3, r1
 8010788:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 801078c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010790:	1c53      	adds	r3, r2, #1
 8010792:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8010796:	2301      	movs	r3, #1
 8010798:	fa03 f202 	lsl.w	r2, r3, r2
 801079c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80107a0:	4013      	ands	r3, r2
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d016      	beq.n	80107d4 <arm_softmax_s8+0xb14>
 80107a6:	f04f 33ff 	mov.w	r3, #4294967295
 80107aa:	e014      	b.n	80107d6 <arm_softmax_s8+0xb16>
 80107ac:	f3af 8000 	nop.w
 80107b0:	70f5a894 	.word	0x70f5a894
 80107b4:	00000000 	.word	0x00000000
 80107b8:	63afbe7b 	.word	0x63afbe7b
 80107bc:	00000000 	.word	0x00000000
 80107c0:	2aaaaaab 	.word	0x2aaaaaab
 80107c4:	70f5a894 	.word	0x70f5a894
 80107c8:	63afbe7b 	.word	0x63afbe7b
 80107cc:	2aaaaaab 	.word	0x2aaaaaab
 80107d0:	00000000 	.word	0x00000000
 80107d4:	2300      	movs	r3, #0
 80107d6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80107da:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80107de:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 80107e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107e6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80107ea:	2300      	movs	r3, #0
 80107ec:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80107ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80107f2:	f04f 0300 	mov.w	r3, #0
 80107f6:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 80107fa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80107fe:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8010802:	0fdb      	lsrs	r3, r3, #31
 8010804:	b2da      	uxtb	r2, r3
 8010806:	2300      	movs	r3, #0
 8010808:	4053      	eors	r3, r2
 801080a:	b2db      	uxtb	r3, r3
 801080c:	2b00      	cmp	r3, #0
 801080e:	d012      	beq.n	8010836 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8010810:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	2100      	movs	r1, #0
 801081a:	f1d2 0001 	rsbs	r0, r2, #1
 801081e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8010822:	eb61 0303 	sbc.w	r3, r1, r3
 8010826:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801082a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 801082e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8010832:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010836:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 801083a:	17da      	asrs	r2, r3, #31
 801083c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8010840:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8010844:	a3a8      	add	r3, pc, #672	; (adr r3, 8010ae8 <arm_softmax_s8+0xe28>)
 8010846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084a:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 801084e:	fb02 f001 	mul.w	r0, r2, r1
 8010852:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 8010856:	fb01 f103 	mul.w	r1, r1, r3
 801085a:	4401      	add	r1, r0
 801085c:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8010860:	fba0 2302 	umull	r2, r3, r0, r2
 8010864:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8010868:	4613      	mov	r3, r2
 801086a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801086e:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8010872:	18cb      	adds	r3, r1, r3
 8010874:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8010878:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8010884:	1851      	adds	r1, r2, r1
 8010886:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 801088a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 801088e:	414b      	adcs	r3, r1
 8010890:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8010894:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8010898:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 801089c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80108a0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80108a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	da0a      	bge.n	80108c2 <arm_softmax_s8+0xc02>
 80108ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108b0:	1851      	adds	r1, r2, r1
 80108b2:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80108b6:	f143 0300 	adc.w	r3, r3, #0
 80108ba:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80108be:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80108c2:	f04f 0000 	mov.w	r0, #0
 80108c6:	f04f 0100 	mov.w	r1, #0
 80108ca:	0fd0      	lsrs	r0, r2, #31
 80108cc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80108d0:	17d9      	asrs	r1, r3, #31
 80108d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108d6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80108da:	4603      	mov	r3, r0
 80108dc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80108de:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 80108e2:	4b7f      	ldr	r3, [pc, #508]	; (8010ae0 <arm_softmax_s8+0xe20>)
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d10b      	bne.n	8010900 <arm_softmax_s8+0xc40>
 80108e8:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 80108ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108f0:	d106      	bne.n	8010900 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 80108f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108f6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80108fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80108fe:	6013      	str	r3, [r2, #0]
    return result;
 8010900:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010904:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010908:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801090a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801090e:	ea02 0103 	and.w	r1, r2, r3
 8010912:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010916:	43da      	mvns	r2, r3
 8010918:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801091c:	4013      	ands	r3, r2
 801091e:	404b      	eors	r3, r1
 8010920:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8010924:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010928:	1c53      	adds	r3, r2, #1
 801092a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801092e:	2301      	movs	r3, #1
 8010930:	fa03 f202 	lsl.w	r2, r3, r2
 8010934:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8010938:	4013      	ands	r3, r2
 801093a:	2b00      	cmp	r3, #0
 801093c:	d002      	beq.n	8010944 <arm_softmax_s8+0xc84>
 801093e:	f04f 33ff 	mov.w	r3, #4294967295
 8010942:	e000      	b.n	8010946 <arm_softmax_s8+0xc86>
 8010944:	2300      	movs	r3, #0
 8010946:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801094a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801094e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8010952:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010956:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010958:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801095c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010960:	2300      	movs	r3, #0
 8010962:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010968:	f04f 0300 	mov.w	r3, #0
 801096c:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8010970:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010974:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010978:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	0fdb      	lsrs	r3, r3, #31
 8010980:	b2da      	uxtb	r2, r3
 8010982:	2300      	movs	r3, #0
 8010984:	4053      	eors	r3, r2
 8010986:	b2db      	uxtb	r3, r3
 8010988:	2b00      	cmp	r3, #0
 801098a:	d012      	beq.n	80109b2 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 801098c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	2100      	movs	r1, #0
 8010996:	f1d2 0001 	rsbs	r0, r2, #1
 801099a:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 801099e:	eb61 0303 	sbc.w	r3, r1, r3
 80109a2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80109a6:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 80109aa:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80109ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80109b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	17da      	asrs	r2, r3, #31
 80109be:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80109c2:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 80109c6:	a344      	add	r3, pc, #272	; (adr r3, 8010ad8 <arm_softmax_s8+0xe18>)
 80109c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109cc:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80109d0:	fb02 f001 	mul.w	r0, r2, r1
 80109d4:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 80109d8:	fb01 f103 	mul.w	r1, r1, r3
 80109dc:	4401      	add	r1, r0
 80109de:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80109e2:	fba0 2302 	umull	r2, r3, r0, r2
 80109e6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80109ea:	4613      	mov	r3, r2
 80109ec:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80109f0:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80109f4:	18cb      	adds	r3, r1, r3
 80109f6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80109fa:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80109fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a02:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8010a06:	1851      	adds	r1, r2, r1
 8010a08:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8010a0c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8010a10:	414b      	adcs	r3, r1
 8010a12:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8010a16:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8010a1a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8010a1e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010a22:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	da0a      	bge.n	8010a44 <arm_softmax_s8+0xd84>
 8010a2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a32:	1851      	adds	r1, r2, r1
 8010a34:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8010a38:	f143 0300 	adc.w	r3, r3, #0
 8010a3c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8010a40:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8010a44:	f04f 0000 	mov.w	r0, #0
 8010a48:	f04f 0100 	mov.w	r1, #0
 8010a4c:	0fd0      	lsrs	r0, r2, #31
 8010a4e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010a52:	17d9      	asrs	r1, r3, #31
 8010a54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a58:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010a60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	4b1e      	ldr	r3, [pc, #120]	; (8010ae4 <arm_softmax_s8+0xe24>)
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d10e      	bne.n	8010a8e <arm_softmax_s8+0xdce>
 8010a70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010a7e:	d106      	bne.n	8010a8e <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8010a80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a84:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8010a88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a8c:	6013      	str	r3, [r2, #0]
    return result;
 8010a8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010a96:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8010a98:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010a9c:	ea02 0103 	and.w	r1, r2, r3
 8010aa0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010aa4:	43da      	mvns	r2, r3
 8010aa6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010aaa:	4013      	ands	r3, r2
 8010aac:	404b      	eors	r3, r1
 8010aae:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 8010ab2:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010ab6:	1c53      	adds	r3, r2, #1
 8010ab8:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8010abc:	2301      	movs	r3, #1
 8010abe:	fa03 f202 	lsl.w	r2, r3, r2
 8010ac2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8010ac6:	4013      	ands	r3, r2
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d011      	beq.n	8010af0 <arm_softmax_s8+0xe30>
 8010acc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad0:	e00f      	b.n	8010af2 <arm_softmax_s8+0xe32>
 8010ad2:	bf00      	nop
 8010ad4:	f3af 8000 	nop.w
 8010ad8:	2f16ac6c 	.word	0x2f16ac6c
 8010adc:	00000000 	.word	0x00000000
 8010ae0:	4da2cbf2 	.word	0x4da2cbf2
 8010ae4:	2f16ac6c 	.word	0x2f16ac6c
 8010ae8:	4da2cbf2 	.word	0x4da2cbf2
 8010aec:	00000000 	.word	0x00000000
 8010af0:	2300      	movs	r3, #0
 8010af2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8010af6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010afa:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8010afe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010b02:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b08:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010b14:	f04f 0300 	mov.w	r3, #0
 8010b18:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8010b1c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010b20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	0fdb      	lsrs	r3, r3, #31
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	2300      	movs	r3, #0
 8010b30:	4053      	eors	r3, r2
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d012      	beq.n	8010b5e <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8010b38:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	2100      	movs	r1, #0
 8010b42:	f1d2 0001 	rsbs	r0, r2, #1
 8010b46:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8010b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8010b4e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010b52:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8010b56:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8010b5a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010b5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	17da      	asrs	r2, r3, #31
 8010b6a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8010b6e:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8010b72:	a3ab      	add	r3, pc, #684	; (adr r3, 8010e20 <arm_softmax_s8+0x1160>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8010b7c:	fb02 f001 	mul.w	r0, r2, r1
 8010b80:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8010b84:	fb01 f103 	mul.w	r1, r1, r3
 8010b88:	4401      	add	r1, r0
 8010b8a:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8010b8e:	fba0 2302 	umull	r2, r3, r0, r2
 8010b92:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8010b96:	4613      	mov	r3, r2
 8010b98:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8010b9c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8010ba0:	18cb      	adds	r3, r1, r3
 8010ba2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8010ba6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8010bb2:	1851      	adds	r1, r2, r1
 8010bb4:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8010bb8:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8010bbc:	414b      	adcs	r3, r1
 8010bbe:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010bc2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8010bc6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8010bca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010bce:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	da0a      	bge.n	8010bf0 <arm_softmax_s8+0xf30>
 8010bda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010bde:	1851      	adds	r1, r2, r1
 8010be0:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8010be4:	f143 0300 	adc.w	r3, r3, #0
 8010be8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8010bec:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8010bf0:	f04f 0000 	mov.w	r0, #0
 8010bf4:	f04f 0100 	mov.w	r1, #0
 8010bf8:	0fd0      	lsrs	r0, r2, #31
 8010bfa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010bfe:	17d9      	asrs	r1, r3, #31
 8010c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c04:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8010c08:	4603      	mov	r3, r0
 8010c0a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010c0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	4b80      	ldr	r3, [pc, #512]	; (8010e18 <arm_softmax_s8+0x1158>)
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d10e      	bne.n	8010c3a <arm_softmax_s8+0xf7a>
 8010c1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c2a:	d106      	bne.n	8010c3a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8010c2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c30:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8010c34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c38:	6013      	str	r3, [r2, #0]
    return result;
 8010c3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8010c42:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8010c44:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010c48:	ea02 0103 	and.w	r1, r2, r3
 8010c4c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010c50:	43da      	mvns	r2, r3
 8010c52:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010c56:	4013      	ands	r3, r2
 8010c58:	404b      	eors	r3, r1
 8010c5a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8010c5e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010c62:	1c53      	adds	r3, r2, #1
 8010c64:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8010c68:	2301      	movs	r3, #1
 8010c6a:	fa03 f202 	lsl.w	r2, r3, r2
 8010c6e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8010c72:	4013      	ands	r3, r2
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <arm_softmax_s8+0xfbe>
 8010c78:	f04f 33ff 	mov.w	r3, #4294967295
 8010c7c:	e000      	b.n	8010c80 <arm_softmax_s8+0xfc0>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8010c84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c88:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8010c8c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010c90:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010c92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c96:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010c9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010ca2:	f04f 0300 	mov.w	r3, #0
 8010ca6:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8010caa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010cae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	0fdb      	lsrs	r3, r3, #31
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	4053      	eors	r3, r2
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d012      	beq.n	8010cec <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 8010cc6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	2100      	movs	r1, #0
 8010cd0:	f1d2 0001 	rsbs	r0, r2, #1
 8010cd4:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8010cd8:	eb61 0303 	sbc.w	r3, r1, r3
 8010cdc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8010ce0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8010ce4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8010ce8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010cec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	17da      	asrs	r2, r3, #31
 8010cf8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8010cfc:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8010d00:	a343      	add	r3, pc, #268	; (adr r3, 8010e10 <arm_softmax_s8+0x1150>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8010d0a:	fb02 f001 	mul.w	r0, r2, r1
 8010d0e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8010d12:	fb01 f103 	mul.w	r1, r1, r3
 8010d16:	4401      	add	r1, r0
 8010d18:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8010d1c:	fba0 2302 	umull	r2, r3, r0, r2
 8010d20:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8010d24:	4613      	mov	r3, r2
 8010d26:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8010d2a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8010d2e:	18cb      	adds	r3, r1, r3
 8010d30:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8010d34:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8010d40:	1851      	adds	r1, r2, r1
 8010d42:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8010d46:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8010d4a:	414b      	adcs	r3, r1
 8010d4c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8010d50:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8010d54:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8010d58:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010d5c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8010d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	da0a      	bge.n	8010d7e <arm_softmax_s8+0x10be>
 8010d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d6c:	1851      	adds	r1, r2, r1
 8010d6e:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8010d72:	f143 0300 	adc.w	r3, r3, #0
 8010d76:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8010d7a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8010d7e:	f04f 0000 	mov.w	r0, #0
 8010d82:	f04f 0100 	mov.w	r1, #0
 8010d86:	0fd0      	lsrs	r0, r2, #31
 8010d88:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010d8c:	17d9      	asrs	r1, r3, #31
 8010d8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d92:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8010d96:	4603      	mov	r3, r0
 8010d98:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010d9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	4b1d      	ldr	r3, [pc, #116]	; (8010e1c <arm_softmax_s8+0x115c>)
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d10e      	bne.n	8010dc8 <arm_softmax_s8+0x1108>
 8010daa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010db8:	d106      	bne.n	8010dc8 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 8010dba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dbe:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8010dc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010dc6:	6013      	str	r3, [r2, #0]
    return result;
 8010dc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010dd0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8010dd2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010dd6:	ea02 0103 	and.w	r1, r2, r3
 8010dda:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010dde:	43da      	mvns	r2, r3
 8010de0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010de4:	4013      	ands	r3, r2
 8010de6:	404b      	eors	r3, r1
 8010de8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 8010dec:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010df0:	1c53      	adds	r3, r2, #1
 8010df2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8010df6:	2301      	movs	r3, #1
 8010df8:	fa03 f202 	lsl.w	r2, r3, r2
 8010dfc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8010e00:	4013      	ands	r3, r2
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d010      	beq.n	8010e28 <arm_softmax_s8+0x1168>
 8010e06:	f04f 33ff 	mov.w	r3, #4294967295
 8010e0a:	e00e      	b.n	8010e2a <arm_softmax_s8+0x116a>
 8010e0c:	f3af 8000 	nop.w
 8010e10:	02582ab7 	.word	0x02582ab7
 8010e14:	00000000 	.word	0x00000000
 8010e18:	1152aaa4 	.word	0x1152aaa4
 8010e1c:	02582ab7 	.word	0x02582ab7
 8010e20:	1152aaa4 	.word	0x1152aaa4
 8010e24:	00000000 	.word	0x00000000
 8010e28:	2300      	movs	r3, #0
 8010e2a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8010e2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e32:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8010e36:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010e3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010e3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e40:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010e44:	2300      	movs	r3, #0
 8010e46:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010e48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010e4c:	f04f 0300 	mov.w	r3, #0
 8010e50:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8010e54:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010e58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	0fdb      	lsrs	r3, r3, #31
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	2300      	movs	r3, #0
 8010e68:	4053      	eors	r3, r2
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d012      	beq.n	8010e96 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8010e70:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e78:	2100      	movs	r1, #0
 8010e7a:	f1d2 0001 	rsbs	r0, r2, #1
 8010e7e:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 8010e82:	eb61 0303 	sbc.w	r3, r1, r3
 8010e86:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8010e8a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8010e8e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8010e92:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010e96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	17da      	asrs	r2, r3, #31
 8010ea2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8010ea6:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 8010eaa:	4ad3      	ldr	r2, [pc, #844]	; (80111f8 <arm_softmax_s8+0x1538>)
 8010eac:	f04f 0300 	mov.w	r3, #0
 8010eb0:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8010eb4:	fb02 f001 	mul.w	r0, r2, r1
 8010eb8:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8010ebc:	fb01 f103 	mul.w	r1, r1, r3
 8010ec0:	4401      	add	r1, r0
 8010ec2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8010ec6:	fba0 2302 	umull	r2, r3, r0, r2
 8010eca:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8010ece:	4613      	mov	r3, r2
 8010ed0:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 8010ed4:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8010ed8:	18cb      	adds	r3, r1, r3
 8010eda:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8010ede:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee6:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8010eea:	1851      	adds	r1, r2, r1
 8010eec:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8010ef0:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8010ef4:	414b      	adcs	r3, r1
 8010ef6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8010efa:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8010efe:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8010f02:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010f06:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	da0a      	bge.n	8010f28 <arm_softmax_s8+0x1268>
 8010f12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f16:	1851      	adds	r1, r2, r1
 8010f18:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8010f1c:	f143 0300 	adc.w	r3, r3, #0
 8010f20:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010f24:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8010f28:	f04f 0000 	mov.w	r0, #0
 8010f2c:	f04f 0100 	mov.w	r1, #0
 8010f30:	0fd0      	lsrs	r0, r2, #31
 8010f32:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010f36:	17d9      	asrs	r1, r3, #31
 8010f38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f3c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010f40:	4603      	mov	r3, r0
 8010f42:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	4baa      	ldr	r3, [pc, #680]	; (80111f8 <arm_softmax_s8+0x1538>)
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d10e      	bne.n	8010f72 <arm_softmax_s8+0x12b2>
 8010f54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f62:	d106      	bne.n	8010f72 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 8010f64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f68:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010f6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010f70:	6013      	str	r3, [r2, #0]
    return result;
 8010f72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8010f7a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8010f7c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010f80:	ea02 0103 	and.w	r1, r2, r3
 8010f84:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010f88:	43da      	mvns	r2, r3
 8010f8a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010f8e:	4013      	ands	r3, r2
 8010f90:	404b      	eors	r3, r1
 8010f92:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 8010f96:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8010f9a:	1c53      	adds	r3, r2, #1
 8010f9c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	fa03 f202 	lsl.w	r2, r3, r2
 8010fa6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8010faa:	4013      	ands	r3, r2
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d002      	beq.n	8010fb6 <arm_softmax_s8+0x12f6>
 8010fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb4:	e000      	b.n	8010fb8 <arm_softmax_s8+0x12f8>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8010fbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fc0:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8010fc4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010fc8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010fca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fce:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010fda:	f04f 0300 	mov.w	r3, #0
 8010fde:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 8010fe2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010fe6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	0fdb      	lsrs	r3, r3, #31
 8010ff2:	b2da      	uxtb	r2, r3
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	4053      	eors	r3, r2
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d012      	beq.n	8011024 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 8010ffe:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8011002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011006:	2100      	movs	r1, #0
 8011008:	f1d2 0001 	rsbs	r0, r2, #1
 801100c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8011010:	eb61 0303 	sbc.w	r3, r1, r3
 8011014:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8011018:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 801101c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8011020:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011024:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011028:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	17da      	asrs	r2, r3, #31
 8011030:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8011034:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8011038:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801103c:	f04f 0300 	mov.w	r3, #0
 8011040:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8011044:	fb02 f001 	mul.w	r0, r2, r1
 8011048:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 801104c:	fb01 f103 	mul.w	r1, r1, r3
 8011050:	4401      	add	r1, r0
 8011052:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8011056:	fba0 2302 	umull	r2, r3, r0, r2
 801105a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801105e:	4613      	mov	r3, r2
 8011060:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8011064:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8011068:	18cb      	adds	r3, r1, r3
 801106a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801106e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8011072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011076:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 801107a:	1851      	adds	r1, r2, r1
 801107c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8011080:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8011084:	414b      	adcs	r3, r1
 8011086:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801108a:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 801108e:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8011092:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011096:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	da0a      	bge.n	80110b8 <arm_softmax_s8+0x13f8>
 80110a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80110a6:	1851      	adds	r1, r2, r1
 80110a8:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80110ac:	f143 0300 	adc.w	r3, r3, #0
 80110b0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80110b4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80110b8:	f04f 0000 	mov.w	r0, #0
 80110bc:	f04f 0100 	mov.w	r1, #0
 80110c0:	0fd0      	lsrs	r0, r2, #31
 80110c2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80110c6:	17d9      	asrs	r1, r3, #31
 80110c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110cc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80110d0:	4603      	mov	r3, r0
 80110d2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80110d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2bf2      	cmp	r3, #242	; 0xf2
 80110e0:	d10e      	bne.n	8011100 <arm_softmax_s8+0x1440>
 80110e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110f0:	d106      	bne.n	8011100 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 80110f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110f6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80110fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80110fe:	6013      	str	r3, [r2, #0]
    return result;
 8011100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011104:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011108:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801110a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801110e:	ea02 0103 	and.w	r1, r2, r3
 8011112:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8011116:	43da      	mvns	r2, r3
 8011118:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801111c:	4013      	ands	r3, r2
 801111e:	404b      	eors	r3, r1
 8011120:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    mask = MASK_IF_ZERO(val);
 8011124:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8011128:	2b00      	cmp	r3, #0
 801112a:	d102      	bne.n	8011132 <arm_softmax_s8+0x1472>
 801112c:	f04f 33ff 	mov.w	r3, #4294967295
 8011130:	e000      	b.n	8011134 <arm_softmax_s8+0x1474>
 8011132:	2300      	movs	r3, #0
 8011134:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8011138:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801113c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011140:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8011144:	43da      	mvns	r2, r3
 8011146:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801114a:	4013      	ands	r3, r2
 801114c:	404b      	eors	r3, r1
 801114e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801115c:	3b01      	subs	r3, #1
 801115e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 8011162:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8011166:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801116a:	4013      	ands	r3, r2
 801116c:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8011170:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8011174:	131b      	asrs	r3, r3, #12
 8011176:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 801117a:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801117e:	105b      	asrs	r3, r3, #1
 8011180:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 8011184:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8011188:	2b00      	cmp	r3, #0
 801118a:	da04      	bge.n	8011196 <arm_softmax_s8+0x14d6>
        threshold++;
 801118c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8011190:	3301      	adds	r3, #1
 8011192:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 8011196:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 801119a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801119e:	429a      	cmp	r2, r3
 80111a0:	dd04      	ble.n	80111ac <arm_softmax_s8+0x14ec>
        result++;
 80111a2:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80111a6:	3301      	adds	r3, #1
 80111a8:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80111ac:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80111b0:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80111b4:	4413      	add	r3, r2
 80111b6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 80111ba:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80111be:	3301      	adds	r3, #1
 80111c0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80111c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111c8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80111cc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	f6fe add2 	blt.w	800fd7c <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 80111d8:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80111dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80111e4:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 80111e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d103      	bne.n	80111fc <arm_softmax_s8+0x153c>
    return 32U;
 80111f4:	2320      	movs	r3, #32
 80111f6:	e009      	b.n	801120c <arm_softmax_s8+0x154c>
 80111f8:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 80111fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011200:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	fab3 f383 	clz	r3, r3
 801120a:	b2db      	uxtb	r3, r3
 801120c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8011210:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8011214:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8011218:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 801121c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8011220:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8011224:	fa02 f303 	lsl.w	r3, r2, r3
 8011228:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 801122c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011230:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011234:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8011236:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801123a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	17da      	asrs	r2, r3, #31
 8011242:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8011246:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 801124a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801124e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8011252:	4602      	mov	r2, r0
 8011254:	18d3      	adds	r3, r2, r3
 8011256:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801125a:	460b      	mov	r3, r1
 801125c:	f143 0300 	adc.w	r3, r3, #0
 8011260:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8011264:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8011268:	f607 0228 	addw	r2, r7, #2088	; 0x828
 801126c:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8011270:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8011274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011278:	2b00      	cmp	r3, #0
 801127a:	db04      	blt.n	8011286 <arm_softmax_s8+0x15c6>
 801127c:	f04f 0001 	mov.w	r0, #1
 8011280:	f04f 0100 	mov.w	r1, #0
 8011284:	e003      	b.n	801128e <arm_softmax_s8+0x15ce>
 8011286:	f04f 30ff 	mov.w	r0, #4294967295
 801128a:	f04f 31ff 	mov.w	r1, #4294967295
 801128e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	1884      	adds	r4, r0, r2
 8011298:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 801129c:	eb41 0303 	adc.w	r3, r1, r3
 80112a0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80112a4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80112a8:	460b      	mov	r3, r1
 80112aa:	0fdb      	lsrs	r3, r3, #31
 80112ac:	2200      	movs	r2, #0
 80112ae:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80112b2:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80112b6:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80112ba:	4602      	mov	r2, r0
 80112bc:	189b      	adds	r3, r3, r2
 80112be:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80112c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80112c6:	460a      	mov	r2, r1
 80112c8:	4153      	adcs	r3, r2
 80112ca:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80112ce:	f04f 0200 	mov.w	r2, #0
 80112d2:	f04f 0300 	mov.w	r3, #0
 80112d6:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 80112da:	084a      	lsrs	r2, r1, #1
 80112dc:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80112e0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80112e4:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80112e8:	104b      	asrs	r3, r1, #1
 80112ea:	4610      	mov	r0, r2
 80112ec:	4619      	mov	r1, r3
 80112ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112f2:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80112f6:	4603      	mov	r3, r0
 80112f8:	6013      	str	r3, [r2, #0]
 80112fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112fe:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8011302:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011306:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801130e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011312:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8011316:	2300      	movs	r3, #0
 8011318:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801131a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801131e:	f04f 0300 	mov.w	r3, #0
 8011322:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8011326:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801132a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801132e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	0fdb      	lsrs	r3, r3, #31
 8011336:	b2da      	uxtb	r2, r3
 8011338:	2301      	movs	r3, #1
 801133a:	4053      	eors	r3, r2
 801133c:	b2db      	uxtb	r3, r3
 801133e:	2b00      	cmp	r3, #0
 8011340:	d012      	beq.n	8011368 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8011342:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8011346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134a:	2100      	movs	r1, #0
 801134c:	f1d2 0001 	rsbs	r0, r2, #1
 8011350:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8011354:	eb61 0303 	sbc.w	r3, r1, r3
 8011358:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801135c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8011360:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8011364:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011368:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801136c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	17da      	asrs	r2, r3, #31
 8011374:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8011378:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 801137c:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8011380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011384:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8011388:	fb02 f001 	mul.w	r0, r2, r1
 801138c:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8011390:	fb01 f103 	mul.w	r1, r1, r3
 8011394:	4401      	add	r1, r0
 8011396:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 801139a:	fba0 2302 	umull	r2, r3, r0, r2
 801139e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80113a2:	4613      	mov	r3, r2
 80113a4:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 80113a8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80113ac:	18cb      	adds	r3, r1, r3
 80113ae:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80113b2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80113b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ba:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 80113be:	1851      	adds	r1, r2, r1
 80113c0:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 80113c4:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 80113c8:	414b      	adcs	r3, r1
 80113ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80113ce:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80113d2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80113d6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80113da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80113de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da0a      	bge.n	80113fc <arm_softmax_s8+0x173c>
 80113e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113ea:	1851      	adds	r1, r2, r1
 80113ec:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80113f0:	f143 0300 	adc.w	r3, r3, #0
 80113f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80113f8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80113fc:	f04f 0000 	mov.w	r0, #0
 8011400:	f04f 0100 	mov.w	r1, #0
 8011404:	0fd0      	lsrs	r0, r2, #31
 8011406:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801140a:	17d9      	asrs	r1, r3, #31
 801140c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011410:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8011414:	4603      	mov	r3, r0
 8011416:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011418:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801141c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8011426:	d10e      	bne.n	8011446 <arm_softmax_s8+0x1786>
 8011428:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801142c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011436:	d106      	bne.n	8011446 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8011438:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801143c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8011440:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011444:	6013      	str	r3, [r2, #0]
    return result;
 8011446:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801144a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801144e:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8011450:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011454:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8011458:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 801145c:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 801145e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011462:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8011466:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801146a:	6013      	str	r3, [r2, #0]
 801146c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011470:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8011474:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011478:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011484:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8011488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801148c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011494:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011498:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801149c:	2300      	movs	r3, #0
 801149e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80114a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80114a4:	f04f 0300 	mov.w	r3, #0
 80114a8:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80114ac:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80114b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114b4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	0fdb      	lsrs	r3, r3, #31
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	0fdb      	lsrs	r3, r3, #31
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	4053      	eors	r3, r2
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d012      	beq.n	80114fa <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 80114d4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	2100      	movs	r1, #0
 80114de:	f1d2 0001 	rsbs	r0, r2, #1
 80114e2:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 80114e6:	eb61 0303 	sbc.w	r3, r1, r3
 80114ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80114ee:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80114f2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80114f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80114fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114fe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	17da      	asrs	r2, r3, #31
 8011506:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 801150a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 801150e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011512:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	17da      	asrs	r2, r3, #31
 801151a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 801151e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8011522:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8011526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801152a:	460b      	mov	r3, r1
 801152c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8011530:	fb02 f203 	mul.w	r2, r2, r3
 8011534:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8011538:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 801153c:	e9c4 0100 	strd	r0, r1, [r4]
 8011540:	4601      	mov	r1, r0
 8011542:	fb01 f303 	mul.w	r3, r1, r3
 8011546:	4413      	add	r3, r2
 8011548:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 801154c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8011550:	fba2 1201 	umull	r1, r2, r2, r1
 8011554:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8011558:	460a      	mov	r2, r1
 801155a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801155e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8011562:	4413      	add	r3, r2
 8011564:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011568:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011570:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011574:	1851      	adds	r1, r2, r1
 8011576:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 801157a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 801157e:	414b      	adcs	r3, r1
 8011580:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8011584:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8011588:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 801158c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011590:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8011594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011598:	2b00      	cmp	r3, #0
 801159a:	da0a      	bge.n	80115b2 <arm_softmax_s8+0x18f2>
 801159c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115a0:	1851      	adds	r1, r2, r1
 80115a2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80115a6:	f143 0300 	adc.w	r3, r3, #0
 80115aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80115ae:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80115b2:	f04f 0000 	mov.w	r0, #0
 80115b6:	f04f 0100 	mov.w	r1, #0
 80115ba:	0fd0      	lsrs	r0, r2, #31
 80115bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80115c0:	17d9      	asrs	r1, r3, #31
 80115c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115c6:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80115ca:	4603      	mov	r3, r0
 80115cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80115ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115d2:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80115d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80115de:	6812      	ldr	r2, [r2, #0]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d10e      	bne.n	8011604 <arm_softmax_s8+0x1944>
 80115e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115ea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115f4:	d106      	bne.n	8011604 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 80115f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115fa:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80115fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011602:	6013      	str	r3, [r2, #0]
    return result;
 8011604:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011608:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801160c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801160e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011612:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	1a99      	subs	r1, r3, r2
 801161a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801161e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8011622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011626:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	6013      	str	r3, [r2, #0]
 801162e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011632:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8011636:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8011638:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801163c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8011640:	2300      	movs	r3, #0
 8011642:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011648:	f04f 0300 	mov.w	r3, #0
 801164c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8011650:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011654:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011658:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	0fdb      	lsrs	r3, r3, #31
 8011660:	b2da      	uxtb	r2, r3
 8011662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011666:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	0fdb      	lsrs	r3, r3, #31
 801166e:	b2db      	uxtb	r3, r3
 8011670:	4053      	eors	r3, r2
 8011672:	b2db      	uxtb	r3, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	d012      	beq.n	801169e <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8011678:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	2100      	movs	r1, #0
 8011682:	f1d2 0001 	rsbs	r0, r2, #1
 8011686:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 801168a:	eb61 0303 	sbc.w	r3, r1, r3
 801168e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8011692:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8011696:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 801169a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801169e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	17da      	asrs	r2, r3, #31
 80116aa:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80116ae:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 80116b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	17da      	asrs	r2, r3, #31
 80116be:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80116c2:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 80116c6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80116ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80116ce:	460b      	mov	r3, r1
 80116d0:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80116d4:	fb02 f203 	mul.w	r2, r2, r3
 80116d8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80116dc:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 80116e0:	e9c4 0100 	strd	r0, r1, [r4]
 80116e4:	4601      	mov	r1, r0
 80116e6:	fb01 f303 	mul.w	r3, r1, r3
 80116ea:	4413      	add	r3, r2
 80116ec:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80116f0:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 80116f4:	fba2 1201 	umull	r1, r2, r2, r1
 80116f8:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 80116fc:	460a      	mov	r2, r1
 80116fe:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8011702:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8011706:	4413      	add	r3, r2
 8011708:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801170c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8011718:	1851      	adds	r1, r2, r1
 801171a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 801171e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8011722:	414b      	adcs	r3, r1
 8011724:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8011728:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 801172c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8011730:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011734:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8011738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173c:	2b00      	cmp	r3, #0
 801173e:	da0a      	bge.n	8011756 <arm_softmax_s8+0x1a96>
 8011740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011744:	1851      	adds	r1, r2, r1
 8011746:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 801174a:	f143 0300 	adc.w	r3, r3, #0
 801174e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8011752:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8011756:	f04f 0000 	mov.w	r0, #0
 801175a:	f04f 0100 	mov.w	r1, #0
 801175e:	0fd0      	lsrs	r0, r2, #31
 8011760:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011764:	17d9      	asrs	r1, r3, #31
 8011766:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801176a:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801176e:	4603      	mov	r3, r0
 8011770:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011776:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801177a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801177e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8011782:	6812      	ldr	r2, [r2, #0]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	429a      	cmp	r2, r3
 8011788:	d10e      	bne.n	80117a8 <arm_softmax_s8+0x1ae8>
 801178a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801178e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011798:	d106      	bne.n	80117a8 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 801179a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801179e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80117a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80117a6:	6013      	str	r3, [r2, #0]
    return result;
 80117a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80117ba:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80117bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80117c0:	4619      	mov	r1, r3
 80117c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117c6:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 80117ca:	1e4b      	subs	r3, r1, #1
 80117cc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80117ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117d2:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80117d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80117e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117e8:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80117ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80117f4:	6812      	ldr	r2, [r2, #0]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	dd02      	ble.n	8011802 <arm_softmax_s8+0x1b42>
 80117fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011800:	e000      	b.n	8011804 <arm_softmax_s8+0x1b44>
 8011802:	2000      	movs	r0, #0
 8011804:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011808:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801180c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011810:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8011814:	6812      	ldr	r2, [r2, #0]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	429a      	cmp	r2, r3
 801181a:	dd01      	ble.n	8011820 <arm_softmax_s8+0x1b60>
 801181c:	2200      	movs	r2, #0
 801181e:	e001      	b.n	8011824 <arm_softmax_s8+0x1b64>
 8011820:	f04f 32ff 	mov.w	r2, #4294967295
 8011824:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011828:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	ea02 0103 	and.w	r1, r2, r3
 8011832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011836:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801183a:	ea81 0300 	eor.w	r3, r1, r0
 801183e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011840:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011844:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	425a      	negs	r2, r3
 801184c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011850:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4293      	cmp	r3, r2
 8011858:	da02      	bge.n	8011860 <arm_softmax_s8+0x1ba0>
 801185a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801185e:	e000      	b.n	8011862 <arm_softmax_s8+0x1ba2>
 8011860:	2000      	movs	r0, #0
 8011862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011866:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	425a      	negs	r2, r3
 801186e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011872:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4293      	cmp	r3, r2
 801187a:	da01      	bge.n	8011880 <arm_softmax_s8+0x1bc0>
 801187c:	2200      	movs	r2, #0
 801187e:	e001      	b.n	8011884 <arm_softmax_s8+0x1bc4>
 8011880:	f04f 32ff 	mov.w	r2, #4294967295
 8011884:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011888:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	ea02 0103 	and.w	r1, r2, r3
 8011892:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011896:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801189a:	ea81 0300 	eor.w	r3, r1, r0
 801189e:	6013      	str	r3, [r2, #0]
    return result;
 80118a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80118a8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80118aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118ae:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80118b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	440b      	add	r3, r1
 80118be:	6013      	str	r3, [r2, #0]
 80118c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118c4:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80118c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	6013      	str	r3, [r2, #0]
 80118d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118d8:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80118dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80118e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118ec:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80118f0:	2300      	movs	r3, #0
 80118f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80118f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80118f8:	f04f 0300 	mov.w	r3, #0
 80118fc:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8011900:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011908:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	0fdb      	lsrs	r3, r3, #31
 8011910:	b2da      	uxtb	r2, r3
 8011912:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011916:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	0fdb      	lsrs	r3, r3, #31
 801191e:	b2db      	uxtb	r3, r3
 8011920:	4053      	eors	r3, r2
 8011922:	b2db      	uxtb	r3, r3
 8011924:	2b00      	cmp	r3, #0
 8011926:	d012      	beq.n	801194e <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8011928:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	2100      	movs	r1, #0
 8011932:	f1d2 0001 	rsbs	r0, r2, #1
 8011936:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 801193a:	eb61 0303 	sbc.w	r3, r1, r3
 801193e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8011942:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8011946:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801194a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801194e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011952:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	17da      	asrs	r2, r3, #31
 801195a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801195e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8011962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011966:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	17da      	asrs	r2, r3, #31
 801196e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8011972:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8011976:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801197a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801197e:	460b      	mov	r3, r1
 8011980:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8011984:	fb02 f203 	mul.w	r2, r2, r3
 8011988:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801198c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8011990:	e9c4 0100 	strd	r0, r1, [r4]
 8011994:	4601      	mov	r1, r0
 8011996:	fb01 f303 	mul.w	r3, r1, r3
 801199a:	4413      	add	r3, r2
 801199c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80119a0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80119a4:	fba2 1201 	umull	r1, r2, r2, r1
 80119a8:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80119ac:	460a      	mov	r2, r1
 80119ae:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80119b2:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80119b6:	4413      	add	r3, r2
 80119b8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80119bc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80119c8:	1851      	adds	r1, r2, r1
 80119ca:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 80119ce:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80119d2:	414b      	adcs	r3, r1
 80119d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80119d8:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80119dc:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80119e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80119e4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80119e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	da0a      	bge.n	8011a06 <arm_softmax_s8+0x1d46>
 80119f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119f4:	1851      	adds	r1, r2, r1
 80119f6:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80119fa:	f143 0300 	adc.w	r3, r3, #0
 80119fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8011a02:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8011a06:	f04f 0000 	mov.w	r0, #0
 8011a0a:	f04f 0100 	mov.w	r1, #0
 8011a0e:	0fd0      	lsrs	r0, r2, #31
 8011a10:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011a14:	17d9      	asrs	r1, r3, #31
 8011a16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a1a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8011a1e:	4603      	mov	r3, r0
 8011a20:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011a22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a26:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8011a2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a2e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8011a32:	6812      	ldr	r2, [r2, #0]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d10e      	bne.n	8011a58 <arm_softmax_s8+0x1d98>
 8011a3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a48:	d106      	bne.n	8011a58 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8011a4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a4e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8011a52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011a56:	6013      	str	r3, [r2, #0]
    return result;
 8011a58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a5c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8011a60:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8011a62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a66:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	1a99      	subs	r1, r3, r2
 8011a6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a72:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8011a76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	6013      	str	r3, [r2, #0]
 8011a82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a86:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8011a8a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8011a8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a90:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8011a94:	2300      	movs	r3, #0
 8011a96:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011a9c:	f04f 0300 	mov.w	r3, #0
 8011aa0:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8011aa4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011aac:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	0fdb      	lsrs	r3, r3, #31
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011aba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	0fdb      	lsrs	r3, r3, #31
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	4053      	eors	r3, r2
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d012      	beq.n	8011af2 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8011acc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8011ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	f1d2 0001 	rsbs	r0, r2, #1
 8011ada:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8011ade:	eb61 0303 	sbc.w	r3, r1, r3
 8011ae2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8011ae6:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8011aea:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8011aee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011af2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011af6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	17da      	asrs	r2, r3, #31
 8011afe:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8011b02:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8011b06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	17da      	asrs	r2, r3, #31
 8011b12:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8011b16:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8011b1a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8011b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b22:	460b      	mov	r3, r1
 8011b24:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8011b28:	fb02 f203 	mul.w	r2, r2, r3
 8011b2c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8011b30:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8011b34:	e9c4 0100 	strd	r0, r1, [r4]
 8011b38:	4601      	mov	r1, r0
 8011b3a:	fb01 f303 	mul.w	r3, r1, r3
 8011b3e:	4413      	add	r3, r2
 8011b40:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8011b44:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8011b48:	fba2 1201 	umull	r1, r2, r2, r1
 8011b4c:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8011b50:	460a      	mov	r2, r1
 8011b52:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8011b56:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8011b5a:	4413      	add	r3, r2
 8011b5c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8011b60:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8011b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b68:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8011b6c:	1851      	adds	r1, r2, r1
 8011b6e:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8011b72:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8011b76:	414b      	adcs	r3, r1
 8011b78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8011b7c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8011b80:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8011b84:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011b88:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8011b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	da0a      	bge.n	8011baa <arm_softmax_s8+0x1eea>
 8011b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b98:	1851      	adds	r1, r2, r1
 8011b9a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8011b9e:	f143 0300 	adc.w	r3, r3, #0
 8011ba2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011ba6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8011baa:	f04f 0000 	mov.w	r0, #0
 8011bae:	f04f 0100 	mov.w	r1, #0
 8011bb2:	0fd0      	lsrs	r0, r2, #31
 8011bb4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011bb8:	17d9      	asrs	r1, r3, #31
 8011bba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bbe:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011bc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bca:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8011bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bd2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8011bd6:	6812      	ldr	r2, [r2, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d10e      	bne.n	8011bfc <arm_softmax_s8+0x1f3c>
 8011bde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011be2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011bec:	d106      	bne.n	8011bfc <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8011bee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bf2:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8011bf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011bfa:	6013      	str	r3, [r2, #0]
    return result;
 8011bfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c0a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011c0e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8011c10:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8011c14:	4619      	mov	r1, r3
 8011c16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c1a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8011c1e:	1e4b      	subs	r3, r1, #1
 8011c20:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8011c22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c26:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8011c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c2e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8011c38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c3c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8011c40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c44:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011c48:	6812      	ldr	r2, [r2, #0]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	dd02      	ble.n	8011c56 <arm_softmax_s8+0x1f96>
 8011c50:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011c54:	e000      	b.n	8011c58 <arm_softmax_s8+0x1f98>
 8011c56:	2000      	movs	r0, #0
 8011c58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c5c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8011c60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c64:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011c68:	6812      	ldr	r2, [r2, #0]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	dd01      	ble.n	8011c74 <arm_softmax_s8+0x1fb4>
 8011c70:	2200      	movs	r2, #0
 8011c72:	e001      	b.n	8011c78 <arm_softmax_s8+0x1fb8>
 8011c74:	f04f 32ff 	mov.w	r2, #4294967295
 8011c78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c7c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	ea02 0103 	and.w	r1, r2, r3
 8011c86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c8a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8011c8e:	ea81 0300 	eor.w	r3, r1, r0
 8011c92:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011c94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c98:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	425a      	negs	r2, r3
 8011ca0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ca4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4293      	cmp	r3, r2
 8011cac:	da02      	bge.n	8011cb4 <arm_softmax_s8+0x1ff4>
 8011cae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011cb2:	e000      	b.n	8011cb6 <arm_softmax_s8+0x1ff6>
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	425a      	negs	r2, r3
 8011cc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cc6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	da01      	bge.n	8011cd4 <arm_softmax_s8+0x2014>
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	e001      	b.n	8011cd8 <arm_softmax_s8+0x2018>
 8011cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cdc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	ea02 0103 	and.w	r1, r2, r3
 8011ce6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cea:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8011cee:	ea81 0300 	eor.w	r3, r1, r0
 8011cf2:	6013      	str	r3, [r2, #0]
    return result;
 8011cf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cf8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011cfc:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8011cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d02:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8011d06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	440b      	add	r3, r1
 8011d12:	6013      	str	r3, [r2, #0]
 8011d14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d18:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8011d1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6013      	str	r3, [r2, #0]
 8011d28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d2c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8011d30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011d3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d40:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8011d44:	2300      	movs	r3, #0
 8011d46:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011d4c:	f04f 0300 	mov.w	r3, #0
 8011d50:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8011d54:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011d58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d5c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	0fdb      	lsrs	r3, r3, #31
 8011d64:	b2da      	uxtb	r2, r3
 8011d66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d6a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	0fdb      	lsrs	r3, r3, #31
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	4053      	eors	r3, r2
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d012      	beq.n	8011da2 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8011d7c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8011d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d84:	2100      	movs	r1, #0
 8011d86:	f1d2 0001 	rsbs	r0, r2, #1
 8011d8a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8011d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8011d92:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011d96:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8011d9a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8011d9e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011da2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011da6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	17da      	asrs	r2, r3, #31
 8011dae:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8011db2:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8011db6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011dba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	17da      	asrs	r2, r3, #31
 8011dc2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8011dc6:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8011dca:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8011dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8011dd8:	fb02 f203 	mul.w	r2, r2, r3
 8011ddc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8011de0:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8011de4:	e9c4 0100 	strd	r0, r1, [r4]
 8011de8:	4601      	mov	r1, r0
 8011dea:	fb01 f303 	mul.w	r3, r1, r3
 8011dee:	4413      	add	r3, r2
 8011df0:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8011df4:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8011df8:	fba2 1201 	umull	r1, r2, r2, r1
 8011dfc:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8011e00:	460a      	mov	r2, r1
 8011e02:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8011e06:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8011e10:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8011e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e18:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8011e1c:	1851      	adds	r1, r2, r1
 8011e1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8011e22:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8011e26:	414b      	adcs	r3, r1
 8011e28:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011e2c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8011e30:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8011e34:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011e38:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8011e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	da0a      	bge.n	8011e5a <arm_softmax_s8+0x219a>
 8011e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e48:	1851      	adds	r1, r2, r1
 8011e4a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8011e4e:	f143 0300 	adc.w	r3, r3, #0
 8011e52:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8011e56:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8011e5a:	f04f 0000 	mov.w	r0, #0
 8011e5e:	f04f 0100 	mov.w	r1, #0
 8011e62:	0fd0      	lsrs	r0, r2, #31
 8011e64:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011e68:	17d9      	asrs	r1, r3, #31
 8011e6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e6e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8011e72:	4603      	mov	r3, r0
 8011e74:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011e76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e7a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8011e7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e82:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011e86:	6812      	ldr	r2, [r2, #0]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d10e      	bne.n	8011eac <arm_softmax_s8+0x21ec>
 8011e8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e92:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e9c:	d106      	bne.n	8011eac <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8011e9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ea2:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8011ea6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011eaa:	6013      	str	r3, [r2, #0]
    return result;
 8011eac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eb0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011eb4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8011eb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eba:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	1a99      	subs	r1, r3, r2
 8011ec2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ec6:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8011eca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ece:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6013      	str	r3, [r2, #0]
 8011ed6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eda:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ede:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8011ee0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ee4:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8011ee8:	2300      	movs	r3, #0
 8011eea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011ef0:	f04f 0300 	mov.w	r3, #0
 8011ef4:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8011ef8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f00:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	0fdb      	lsrs	r3, r3, #31
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f0e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	0fdb      	lsrs	r3, r3, #31
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	4053      	eors	r3, r2
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d012      	beq.n	8011f46 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8011f20:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8011f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f28:	2100      	movs	r1, #0
 8011f2a:	f1d2 0001 	rsbs	r0, r2, #1
 8011f2e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8011f32:	eb61 0303 	sbc.w	r3, r1, r3
 8011f36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8011f3a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8011f3e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8011f42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011f46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f4a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	17da      	asrs	r2, r3, #31
 8011f52:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8011f56:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8011f5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	17da      	asrs	r2, r3, #31
 8011f66:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8011f6a:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8011f6e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8011f72:	460b      	mov	r3, r1
 8011f74:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8011f78:	fb02 f203 	mul.w	r2, r2, r3
 8011f7c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8011f80:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8011f84:	4601      	mov	r1, r0
 8011f86:	fb01 f303 	mul.w	r3, r1, r3
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8011f90:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8011f94:	fba2 1201 	umull	r1, r2, r2, r1
 8011f98:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8011f9c:	460a      	mov	r2, r1
 8011f9e:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8011fa2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8011fa6:	4413      	add	r3, r2
 8011fa8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8011fac:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8011fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb4:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8011fb8:	1851      	adds	r1, r2, r1
 8011fba:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8011fbe:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8011fc2:	414b      	adcs	r3, r1
 8011fc4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8011fc8:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8011fcc:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8011fd0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011fd4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da0a      	bge.n	8011ff6 <arm_softmax_s8+0x2336>
 8011fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011fe4:	1851      	adds	r1, r2, r1
 8011fe6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8011fea:	f143 0300 	adc.w	r3, r3, #0
 8011fee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8011ff2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8011ff6:	f04f 0000 	mov.w	r0, #0
 8011ffa:	f04f 0100 	mov.w	r1, #0
 8011ffe:	0fd0      	lsrs	r0, r2, #31
 8012000:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012004:	17d9      	asrs	r1, r3, #31
 8012006:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801200a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801200e:	4603      	mov	r3, r0
 8012010:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012012:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012016:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801201a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801201e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012022:	6812      	ldr	r2, [r2, #0]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	429a      	cmp	r2, r3
 8012028:	d10e      	bne.n	8012048 <arm_softmax_s8+0x2388>
 801202a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801202e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012038:	d106      	bne.n	8012048 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 801203a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801203e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8012042:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012046:	6013      	str	r3, [r2, #0]
    return result;
 8012048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801204c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012056:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801205a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801205c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012060:	4619      	mov	r1, r3
 8012062:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012066:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801206a:	1e4b      	subs	r3, r1, #1
 801206c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801206e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012072:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8012076:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801207a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8012084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012088:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801208c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012090:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012094:	6812      	ldr	r2, [r2, #0]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	429a      	cmp	r2, r3
 801209a:	dd02      	ble.n	80120a2 <arm_softmax_s8+0x23e2>
 801209c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80120a0:	e000      	b.n	80120a4 <arm_softmax_s8+0x23e4>
 80120a2:	2000      	movs	r0, #0
 80120a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120a8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80120ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120b0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80120b4:	6812      	ldr	r2, [r2, #0]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	dd01      	ble.n	80120c0 <arm_softmax_s8+0x2400>
 80120bc:	2200      	movs	r2, #0
 80120be:	e001      	b.n	80120c4 <arm_softmax_s8+0x2404>
 80120c0:	f04f 32ff 	mov.w	r2, #4294967295
 80120c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	ea02 0103 	and.w	r1, r2, r3
 80120d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120d6:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80120da:	ea81 0300 	eor.w	r3, r1, r0
 80120de:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80120e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120e4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	425a      	negs	r2, r3
 80120ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120f0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4293      	cmp	r3, r2
 80120f8:	da02      	bge.n	8012100 <arm_softmax_s8+0x2440>
 80120fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80120fe:	e000      	b.n	8012102 <arm_softmax_s8+0x2442>
 8012100:	2000      	movs	r0, #0
 8012102:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012106:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	425a      	negs	r2, r3
 801210e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012112:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4293      	cmp	r3, r2
 801211a:	da05      	bge.n	8012128 <arm_softmax_s8+0x2468>
 801211c:	2200      	movs	r2, #0
 801211e:	e005      	b.n	801212c <arm_softmax_s8+0x246c>
 8012120:	c3c3c3c4 	.word	0xc3c3c3c4
 8012124:	ffffffff 	.word	0xffffffff
 8012128:	f04f 32ff 	mov.w	r2, #4294967295
 801212c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	ea02 0103 	and.w	r1, r2, r3
 801213a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801213e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8012142:	ea81 0300 	eor.w	r3, r1, r0
 8012146:	6013      	str	r3, [r2, #0]
    return result;
 8012148:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801214c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012150:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8012152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012156:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801215a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801215e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	440b      	add	r3, r1
 8012166:	6013      	str	r3, [r2, #0]
 8012168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801216c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8012170:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012174:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801217c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012180:	4619      	mov	r1, r3
 8012182:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012186:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 801218a:	1e4b      	subs	r3, r1, #1
 801218c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801218e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012192:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8012196:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801219a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	005b      	lsls	r3, r3, #1
 80121a2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80121a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121a8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80121ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80121b4:	6812      	ldr	r2, [r2, #0]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	dd02      	ble.n	80121c2 <arm_softmax_s8+0x2502>
 80121bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80121c0:	e000      	b.n	80121c4 <arm_softmax_s8+0x2504>
 80121c2:	2000      	movs	r0, #0
 80121c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121c8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80121cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121d0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80121d4:	6812      	ldr	r2, [r2, #0]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	429a      	cmp	r2, r3
 80121da:	dd01      	ble.n	80121e0 <arm_softmax_s8+0x2520>
 80121dc:	2200      	movs	r2, #0
 80121de:	e001      	b.n	80121e4 <arm_softmax_s8+0x2524>
 80121e0:	f04f 32ff 	mov.w	r2, #4294967295
 80121e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	ea02 0103 	and.w	r1, r2, r3
 80121f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121f6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80121fa:	ea81 0300 	eor.w	r3, r1, r0
 80121fe:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8012200:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012204:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	425a      	negs	r2, r3
 801220c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012210:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	4293      	cmp	r3, r2
 8012218:	da02      	bge.n	8012220 <arm_softmax_s8+0x2560>
 801221a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801221e:	e000      	b.n	8012222 <arm_softmax_s8+0x2562>
 8012220:	2000      	movs	r0, #0
 8012222:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012226:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	425a      	negs	r2, r3
 801222e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012232:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4293      	cmp	r3, r2
 801223a:	da01      	bge.n	8012240 <arm_softmax_s8+0x2580>
 801223c:	2200      	movs	r2, #0
 801223e:	e001      	b.n	8012244 <arm_softmax_s8+0x2584>
 8012240:	f04f 32ff 	mov.w	r2, #4294967295
 8012244:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012248:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	ea02 0103 	and.w	r1, r2, r3
 8012252:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012256:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801225a:	ea81 0300 	eor.w	r3, r1, r0
 801225e:	6013      	str	r3, [r2, #0]
    return result;
 8012260:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012264:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012268:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 801226a:	bf00      	nop
 801226c:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8012270:	2300      	movs	r3, #0
 8012272:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8012276:	f001 bd85 	b.w	8013d84 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 801227a:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801227e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012282:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4413      	add	r3, r2
 801228a:	f993 3000 	ldrsb.w	r3, [r3]
 801228e:	461a      	mov	r2, r3
 8012290:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 801229a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801229e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80122a2:	429a      	cmp	r2, r3
 80122a4:	f2c1 8562 	blt.w	8013d6c <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80122a8:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80122ac:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80122b0:	fb03 f202 	mul.w	r2, r3, r2
 80122b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122b8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122c2:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 80122c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122ca:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80122d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122d6:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80122da:	2300      	movs	r3, #0
 80122dc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80122de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80122e2:	f04f 0300 	mov.w	r3, #0
 80122e6:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80122ea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80122ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122f2:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	0fdb      	lsrs	r3, r3, #31
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012300:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	0fdb      	lsrs	r3, r3, #31
 8012308:	b2db      	uxtb	r3, r3
 801230a:	4053      	eors	r3, r2
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	d012      	beq.n	8012338 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8012312:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	2100      	movs	r1, #0
 801231c:	f1d2 0001 	rsbs	r0, r2, #1
 8012320:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8012324:	eb61 0303 	sbc.w	r3, r1, r3
 8012328:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801232c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8012330:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8012334:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801233c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	17da      	asrs	r2, r3, #31
 8012344:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8012348:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 801234c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012350:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	17da      	asrs	r2, r3, #31
 8012358:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 801235c:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8012360:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8012364:	460b      	mov	r3, r1
 8012366:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 801236a:	fb02 f203 	mul.w	r2, r2, r3
 801236e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8012372:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8012376:	4601      	mov	r1, r0
 8012378:	fb01 f303 	mul.w	r3, r1, r3
 801237c:	4413      	add	r3, r2
 801237e:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8012382:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8012386:	fba2 1201 	umull	r1, r2, r2, r1
 801238a:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 801238e:	460a      	mov	r2, r1
 8012390:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8012394:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8012398:	4413      	add	r3, r2
 801239a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 801239e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80123aa:	1851      	adds	r1, r2, r1
 80123ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80123b0:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 80123b4:	414b      	adcs	r3, r1
 80123b6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80123ba:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80123be:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80123c2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80123c6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	da0a      	bge.n	80123e8 <arm_softmax_s8+0x2728>
 80123d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123d6:	1851      	adds	r1, r2, r1
 80123d8:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80123dc:	f143 0300 	adc.w	r3, r3, #0
 80123e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80123e4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80123e8:	f04f 0000 	mov.w	r0, #0
 80123ec:	f04f 0100 	mov.w	r1, #0
 80123f0:	0fd0      	lsrs	r0, r2, #31
 80123f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80123f6:	17d9      	asrs	r1, r3, #31
 80123f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123fc:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8012400:	4603      	mov	r3, r0
 8012402:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012408:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801240c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012410:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8012414:	6812      	ldr	r2, [r2, #0]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	429a      	cmp	r2, r3
 801241a:	d10e      	bne.n	801243a <arm_softmax_s8+0x277a>
 801241c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012420:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801242a:	d106      	bne.n	801243a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 801242c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012430:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8012434:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012438:	6013      	str	r3, [r2, #0]
    return result;
 801243a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801243e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8012442:	681a      	ldr	r2, [r3, #0]
 8012444:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012448:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801244c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 801244e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012452:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8012456:	2300      	movs	r3, #0
 8012458:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 801245a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801245e:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012462:	2318      	movs	r3, #24
 8012464:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8012466:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801246a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801246e:	2201      	movs	r2, #1
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	fa02 f303 	lsl.w	r3, r2, r3
 8012476:	1e5a      	subs	r2, r3, #1
 8012478:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801247c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	ea02 0003 	and.w	r0, r2, r3
 8012486:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801248a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801248e:	2201      	movs	r2, #1
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	fa02 f103 	lsl.w	r1, r2, r3
 8012496:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801249a:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 801249e:	1a43      	subs	r3, r0, r1
 80124a0:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80124a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124a6:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 80124aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124ae:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80124b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124b6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80124ba:	6812      	ldr	r2, [r2, #0]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80124c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124c6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	0159      	lsls	r1, r3, #5
 80124ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124d2:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 80124d6:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 80124da:	6013      	str	r3, [r2, #0]
 80124dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124e0:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 80124e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124e8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6013      	str	r3, [r2, #0]
 80124f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124f4:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 80124f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124fc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012508:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801250c:	2300      	movs	r3, #0
 801250e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012514:	f04f 0300 	mov.w	r3, #0
 8012518:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 801251c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012520:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012524:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	0fdb      	lsrs	r3, r3, #31
 801252c:	b2da      	uxtb	r2, r3
 801252e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012532:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	0fdb      	lsrs	r3, r3, #31
 801253a:	b2db      	uxtb	r3, r3
 801253c:	4053      	eors	r3, r2
 801253e:	b2db      	uxtb	r3, r3
 8012540:	2b00      	cmp	r3, #0
 8012542:	d012      	beq.n	801256a <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8012544:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8012548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254c:	2100      	movs	r1, #0
 801254e:	f1d2 0001 	rsbs	r0, r2, #1
 8012552:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8012556:	eb61 0303 	sbc.w	r3, r1, r3
 801255a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801255e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8012562:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8012566:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801256a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801256e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	17da      	asrs	r2, r3, #31
 8012576:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 801257a:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 801257e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012582:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	17da      	asrs	r2, r3, #31
 801258a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 801258e:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8012592:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8012596:	460b      	mov	r3, r1
 8012598:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801259c:	fb02 f203 	mul.w	r2, r2, r3
 80125a0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80125a4:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 80125a8:	4601      	mov	r1, r0
 80125aa:	fb01 f303 	mul.w	r3, r1, r3
 80125ae:	4413      	add	r3, r2
 80125b0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80125b4:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80125b8:	fba2 1201 	umull	r1, r2, r2, r1
 80125bc:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 80125c0:	460a      	mov	r2, r1
 80125c2:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 80125c6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80125ca:	4413      	add	r3, r2
 80125cc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80125d0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80125d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d8:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 80125dc:	1851      	adds	r1, r2, r1
 80125de:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 80125e2:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 80125e6:	414b      	adcs	r3, r1
 80125e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80125ec:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80125f0:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80125f4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80125f8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	2b00      	cmp	r3, #0
 8012602:	da0a      	bge.n	801261a <arm_softmax_s8+0x295a>
 8012604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012608:	1851      	adds	r1, r2, r1
 801260a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801260e:	f143 0300 	adc.w	r3, r3, #0
 8012612:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8012616:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801261a:	f04f 0000 	mov.w	r0, #0
 801261e:	f04f 0100 	mov.w	r1, #0
 8012622:	0fd0      	lsrs	r0, r2, #31
 8012624:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012628:	17d9      	asrs	r1, r3, #31
 801262a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801262e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8012632:	4603      	mov	r3, r0
 8012634:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012636:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801263a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801263e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012642:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012646:	6812      	ldr	r2, [r2, #0]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	429a      	cmp	r2, r3
 801264c:	d10e      	bne.n	801266c <arm_softmax_s8+0x29ac>
 801264e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012652:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801265c:	d106      	bne.n	801266c <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 801265e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012662:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8012666:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801266a:	6013      	str	r3, [r2, #0]
    return result;
 801266c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012670:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8012674:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8012676:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801267a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012684:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8012688:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801268c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	6013      	str	r3, [r2, #0]
 8012694:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012698:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801269c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126a0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80126a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126ac:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80126b0:	2300      	movs	r3, #0
 80126b2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80126b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80126b8:	f04f 0300 	mov.w	r3, #0
 80126bc:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 80126c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80126c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126c8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	0fdb      	lsrs	r3, r3, #31
 80126d0:	b2da      	uxtb	r2, r3
 80126d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126d6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	0fdb      	lsrs	r3, r3, #31
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	4053      	eors	r3, r2
 80126e2:	b2db      	uxtb	r3, r3
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d012      	beq.n	801270e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 80126e8:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80126ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f0:	2100      	movs	r1, #0
 80126f2:	f1d2 0001 	rsbs	r0, r2, #1
 80126f6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80126fa:	eb61 0303 	sbc.w	r3, r1, r3
 80126fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012702:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8012706:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801270a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801270e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012712:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	17da      	asrs	r2, r3, #31
 801271a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 801271e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8012722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012726:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	17da      	asrs	r2, r3, #31
 801272e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8012732:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8012736:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 801273a:	460b      	mov	r3, r1
 801273c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8012740:	fb02 f203 	mul.w	r2, r2, r3
 8012744:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8012748:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 801274c:	4601      	mov	r1, r0
 801274e:	fb01 f303 	mul.w	r3, r1, r3
 8012752:	4413      	add	r3, r2
 8012754:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8012758:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 801275c:	fba2 1201 	umull	r1, r2, r2, r1
 8012760:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8012764:	460a      	mov	r2, r1
 8012766:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 801276a:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 801276e:	4413      	add	r3, r2
 8012770:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8012774:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8012778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277c:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8012780:	1851      	adds	r1, r2, r1
 8012782:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8012786:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 801278a:	414b      	adcs	r3, r1
 801278c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012790:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8012794:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8012798:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801279c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80127a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	da0a      	bge.n	80127be <arm_softmax_s8+0x2afe>
 80127a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80127ac:	1851      	adds	r1, r2, r1
 80127ae:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80127b2:	f143 0300 	adc.w	r3, r3, #0
 80127b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80127ba:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80127be:	f04f 0000 	mov.w	r0, #0
 80127c2:	f04f 0100 	mov.w	r1, #0
 80127c6:	0fd0      	lsrs	r0, r2, #31
 80127c8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80127cc:	17d9      	asrs	r1, r3, #31
 80127ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127d2:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80127d6:	4603      	mov	r3, r0
 80127d8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80127da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127de:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80127e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127e6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80127ea:	6812      	ldr	r2, [r2, #0]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d10e      	bne.n	8012810 <arm_softmax_s8+0x2b50>
 80127f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127f6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012800:	d106      	bne.n	8012810 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8012802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012806:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801280a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801280e:	6013      	str	r3, [r2, #0]
    return result;
 8012810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012814:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801281e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012822:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012824:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012828:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801282c:	2300      	movs	r3, #0
 801282e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012830:	2104      	movs	r1, #4
 8012832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012836:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 801283a:	1e4b      	subs	r3, r1, #1
 801283c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801283e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012842:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8012846:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801284a:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 801284e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012852:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012856:	6812      	ldr	r2, [r2, #0]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	4013      	ands	r3, r2
 801285c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801285e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012862:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8012866:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801286a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	109b      	asrs	r3, r3, #2
 8012872:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8012874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012878:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801287c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012880:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	105b      	asrs	r3, r3, #1
 8012888:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801288a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801288e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	da0a      	bge.n	80128ae <arm_softmax_s8+0x2bee>
        threshold++;
 8012898:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801289c:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80128a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128a4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	3301      	adds	r3, #1
 80128ac:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80128ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128b2:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80128b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128ba:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80128be:	6812      	ldr	r2, [r2, #0]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	dd0a      	ble.n	80128dc <arm_softmax_s8+0x2c1c>
        result++;
 80128c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128ca:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80128ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128d2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	3301      	adds	r3, #1
 80128da:	6013      	str	r3, [r2, #0]
    return result;
 80128dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128e0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80128e4:	681c      	ldr	r4, [r3, #0]
 80128e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128ea:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80128ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128f2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6013      	str	r3, [r2, #0]
 80128fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128fe:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8012902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012906:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801290e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012912:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8012916:	2300      	movs	r3, #0
 8012918:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801291a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801291e:	f04f 0300 	mov.w	r3, #0
 8012922:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8012926:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801292a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801292e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	0fdb      	lsrs	r3, r3, #31
 8012936:	b2da      	uxtb	r2, r3
 8012938:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801293c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	0fdb      	lsrs	r3, r3, #31
 8012944:	b2db      	uxtb	r3, r3
 8012946:	4053      	eors	r3, r2
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	d012      	beq.n	8012974 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 801294e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	2100      	movs	r1, #0
 8012958:	f1d2 0001 	rsbs	r0, r2, #1
 801295c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8012960:	eb61 0303 	sbc.w	r3, r1, r3
 8012964:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012968:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 801296c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8012970:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8012974:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012978:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	17da      	asrs	r2, r3, #31
 8012980:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8012984:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8012988:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801298c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	17da      	asrs	r2, r3, #31
 8012994:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8012998:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 801299c:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80129a0:	460b      	mov	r3, r1
 80129a2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80129a6:	fb02 f203 	mul.w	r2, r2, r3
 80129aa:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80129ae:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80129b2:	4601      	mov	r1, r0
 80129b4:	fb01 f303 	mul.w	r3, r1, r3
 80129b8:	4413      	add	r3, r2
 80129ba:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80129be:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 80129c2:	fba2 1201 	umull	r1, r2, r2, r1
 80129c6:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 80129ca:	460a      	mov	r2, r1
 80129cc:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 80129d0:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80129d4:	4413      	add	r3, r2
 80129d6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80129da:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 80129e6:	1851      	adds	r1, r2, r1
 80129e8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80129ec:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 80129f0:	414b      	adcs	r3, r1
 80129f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80129f6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80129fa:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80129fe:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8012a02:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8012a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	da0a      	bge.n	8012a24 <arm_softmax_s8+0x2d64>
 8012a0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a12:	1851      	adds	r1, r2, r1
 8012a14:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8012a18:	f143 0300 	adc.w	r3, r3, #0
 8012a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012a20:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8012a24:	f04f 0000 	mov.w	r0, #0
 8012a28:	f04f 0100 	mov.w	r1, #0
 8012a2c:	0fd0      	lsrs	r0, r2, #31
 8012a2e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012a32:	17d9      	asrs	r1, r3, #31
 8012a34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a38:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012a40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a44:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8012a48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a4c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012a50:	6812      	ldr	r2, [r2, #0]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d10e      	bne.n	8012a76 <arm_softmax_s8+0x2db6>
 8012a58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a5c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a66:	d106      	bne.n	8012a76 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8012a68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a6c:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8012a70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012a74:	6013      	str	r3, [r2, #0]
    return result;
 8012a76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a7a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8012a7e:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8012a80:	18e2      	adds	r2, r4, r3
 8012a82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a86:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012a8a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012a8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a90:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8012a94:	2300      	movs	r3, #0
 8012a96:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012a9c:	f04f 0300 	mov.w	r3, #0
 8012aa0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8012aa4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012aac:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	0fdb      	lsrs	r3, r3, #31
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	4053      	eors	r3, r2
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d012      	beq.n	8012ae6 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8012ac0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8012ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac8:	2100      	movs	r1, #0
 8012aca:	f1d2 0001 	rsbs	r0, r2, #1
 8012ace:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8012ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8012ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012ada:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8012ade:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8012ae2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012ae6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012aea:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	17da      	asrs	r2, r3, #31
 8012af2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8012af6:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8012afa:	a3c9      	add	r3, pc, #804	; (adr r3, 8012e20 <arm_softmax_s8+0x3160>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8012b04:	fb02 f001 	mul.w	r0, r2, r1
 8012b08:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8012b0c:	fb01 f103 	mul.w	r1, r1, r3
 8012b10:	4401      	add	r1, r0
 8012b12:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8012b16:	fba0 2302 	umull	r2, r3, r0, r2
 8012b1a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8012b1e:	4613      	mov	r3, r2
 8012b20:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8012b24:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8012b28:	18cb      	adds	r3, r1, r3
 8012b2a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8012b2e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8012b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b36:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8012b3a:	1851      	adds	r1, r2, r1
 8012b3c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8012b40:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8012b44:	414b      	adcs	r3, r1
 8012b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012b4a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8012b4e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8012b52:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012b56:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	da0a      	bge.n	8012b78 <arm_softmax_s8+0x2eb8>
 8012b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b66:	1851      	adds	r1, r2, r1
 8012b68:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8012b6c:	f143 0300 	adc.w	r3, r3, #0
 8012b70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012b74:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8012b78:	f04f 0000 	mov.w	r0, #0
 8012b7c:	f04f 0100 	mov.w	r1, #0
 8012b80:	0fd0      	lsrs	r0, r2, #31
 8012b82:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012b86:	17d9      	asrs	r1, r3, #31
 8012b88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b8c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8012b90:	4603      	mov	r3, r0
 8012b92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012b94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b98:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	4b9e      	ldr	r3, [pc, #632]	; (8012e18 <arm_softmax_s8+0x3158>)
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d10e      	bne.n	8012bc2 <arm_softmax_s8+0x2f02>
 8012ba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ba8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bb2:	d106      	bne.n	8012bc2 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8012bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bb8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8012bbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012bc0:	6013      	str	r3, [r2, #0]
    return result;
 8012bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bc6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8012bca:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8012bcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bd0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	441a      	add	r2, r3
 8012bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bdc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8012be0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012be2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012be6:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8012bea:	2300      	movs	r3, #0
 8012bec:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012bee:	2102      	movs	r1, #2
 8012bf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bf4:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8012bf8:	1e4b      	subs	r3, r1, #1
 8012bfa:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012bfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c00:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8012c04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c08:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8012c0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c10:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8012c14:	6812      	ldr	r2, [r2, #0]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	4013      	ands	r3, r2
 8012c1a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012c1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c20:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8012c24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c28:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	105b      	asrs	r3, r3, #1
 8012c30:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8012c32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c36:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8012c3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c3e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	105b      	asrs	r3, r3, #1
 8012c46:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012c48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c4c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	da0a      	bge.n	8012c6c <arm_softmax_s8+0x2fac>
        threshold++;
 8012c56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c5a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8012c5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c62:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c70:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8012c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c78:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012c7c:	6812      	ldr	r2, [r2, #0]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	dd0a      	ble.n	8012c9a <arm_softmax_s8+0x2fda>
        result++;
 8012c84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c88:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8012c8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c90:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3301      	adds	r3, #1
 8012c98:	6013      	str	r3, [r2, #0]
    return result;
 8012c9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c9e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012ca2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8012ca4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ca8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	441a      	add	r2, r3
 8012cb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cb4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8012cb8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012cba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cbe:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012cca:	f04f 0300 	mov.w	r3, #0
 8012cce:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8012cd2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cdc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	0fdb      	lsrs	r3, r3, #31
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	4053      	eors	r3, r2
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d012      	beq.n	8012d14 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8012cee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8012cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf6:	2100      	movs	r1, #0
 8012cf8:	f1d2 0001 	rsbs	r0, r2, #1
 8012cfc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8012d00:	eb61 0303 	sbc.w	r3, r1, r3
 8012d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012d08:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8012d0c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8012d10:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012d14:	a13e      	add	r1, pc, #248	; (adr r1, 8012e10 <arm_softmax_s8+0x3150>)
 8012d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012d1e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	17da      	asrs	r2, r3, #31
 8012d26:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8012d2a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8012d2e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8012d32:	fb03 f201 	mul.w	r2, r3, r1
 8012d36:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8012d3a:	fb00 f303 	mul.w	r3, r0, r3
 8012d3e:	4413      	add	r3, r2
 8012d40:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8012d44:	fba0 1202 	umull	r1, r2, r0, r2
 8012d48:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8012d4c:	460a      	mov	r2, r1
 8012d4e:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8012d52:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8012d56:	4413      	add	r3, r2
 8012d58:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8012d5c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8012d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d64:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8012d68:	1851      	adds	r1, r2, r1
 8012d6a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8012d6e:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8012d72:	414b      	adcs	r3, r1
 8012d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012d78:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8012d7c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8012d80:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012d84:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8012d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	da0a      	bge.n	8012da6 <arm_softmax_s8+0x30e6>
 8012d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d94:	1851      	adds	r1, r2, r1
 8012d96:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8012d9a:	f143 0300 	adc.w	r3, r3, #0
 8012d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012da2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8012da6:	f04f 0000 	mov.w	r0, #0
 8012daa:	f04f 0100 	mov.w	r1, #0
 8012dae:	0fd0      	lsrs	r0, r2, #31
 8012db0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012db4:	17d9      	asrs	r1, r3, #31
 8012db6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012dba:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	6013      	str	r3, [r2, #0]
    return result;
 8012dc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012dc6:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012dca:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8012dcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012dd0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012dd4:	4b11      	ldr	r3, [pc, #68]	; (8012e1c <arm_softmax_s8+0x315c>)
 8012dd6:	440b      	add	r3, r1
 8012dd8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8012dda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012dde:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012de2:	6819      	ldr	r1, [r3, #0]
 8012de4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012de8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012dec:	1c4b      	adds	r3, r1, #1
 8012dee:	6013      	str	r3, [r2, #0]
 8012df0:	2301      	movs	r3, #1
 8012df2:	fa03 f201 	lsl.w	r2, r3, r1
 8012df6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012dfa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4013      	ands	r3, r2
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d010      	beq.n	8012e28 <arm_softmax_s8+0x3168>
 8012e06:	f04f 32ff 	mov.w	r2, #4294967295
 8012e0a:	e00e      	b.n	8012e2a <arm_softmax_s8+0x316a>
 8012e0c:	f3af 8000 	nop.w
 8012e10:	70f5a894 	.word	0x70f5a894
 8012e14:	00000000 	.word	0x00000000
 8012e18:	2aaaaaab 	.word	0x2aaaaaab
 8012e1c:	70f5a894 	.word	0x70f5a894
 8012e20:	2aaaaaab 	.word	0x2aaaaaab
 8012e24:	00000000 	.word	0x00000000
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012e2e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012e32:	601a      	str	r2, [r3, #0]
 8012e34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012e38:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8012e3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012e40:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012e48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012e4c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8012e50:	2300      	movs	r3, #0
 8012e52:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012e58:	f04f 0300 	mov.w	r3, #0
 8012e5c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8012e60:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012e64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012e68:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	0fdb      	lsrs	r3, r3, #31
 8012e70:	b2da      	uxtb	r2, r3
 8012e72:	2300      	movs	r3, #0
 8012e74:	4053      	eors	r3, r2
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d012      	beq.n	8012ea2 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8012e7c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	2100      	movs	r1, #0
 8012e86:	f1d2 0001 	rsbs	r0, r2, #1
 8012e8a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8012e8e:	eb61 0303 	sbc.w	r3, r1, r3
 8012e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012e96:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8012e9a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8012e9e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012ea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ea6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	17da      	asrs	r2, r3, #31
 8012eae:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8012eb2:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8012eb6:	a3c4      	add	r3, pc, #784	; (adr r3, 80131c8 <arm_softmax_s8+0x3508>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebc:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8012ec0:	fb02 f001 	mul.w	r0, r2, r1
 8012ec4:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8012ec8:	fb01 f103 	mul.w	r1, r1, r3
 8012ecc:	4401      	add	r1, r0
 8012ece:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8012ed2:	fba0 2302 	umull	r2, r3, r0, r2
 8012ed6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8012eda:	4613      	mov	r3, r2
 8012edc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8012ee0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8012ee4:	18cb      	adds	r3, r1, r3
 8012ee6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8012eea:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8012eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef2:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8012ef6:	1851      	adds	r1, r2, r1
 8012ef8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8012efc:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8012f00:	414b      	adcs	r3, r1
 8012f02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012f06:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8012f0a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8012f0e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012f12:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	da0a      	bge.n	8012f34 <arm_softmax_s8+0x3274>
 8012f1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f22:	1851      	adds	r1, r2, r1
 8012f24:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8012f28:	f143 0300 	adc.w	r3, r3, #0
 8012f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012f30:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8012f34:	f04f 0000 	mov.w	r0, #0
 8012f38:	f04f 0100 	mov.w	r1, #0
 8012f3c:	0fd0      	lsrs	r0, r2, #31
 8012f3e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012f42:	17d9      	asrs	r1, r3, #31
 8012f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f48:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f54:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	4b99      	ldr	r3, [pc, #612]	; (80131c0 <arm_softmax_s8+0x3500>)
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d10e      	bne.n	8012f7e <arm_softmax_s8+0x32be>
 8012f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f64:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f6e:	d106      	bne.n	8012f7e <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8012f70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f74:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8012f78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012f7c:	6013      	str	r3, [r2, #0]
    return result;
 8012f7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f82:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8012f86:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8012f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f8c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	ea02 0003 	and.w	r0, r2, r3
 8012f96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012f9a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	43da      	mvns	r2, r3
 8012fa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012fa6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	ea02 0103 	and.w	r1, r2, r3
 8012fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012fb4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012fb8:	ea80 0301 	eor.w	r3, r0, r1
 8012fbc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8012fbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012fc2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012fc6:	6819      	ldr	r1, [r3, #0]
 8012fc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012fcc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012fd0:	1c4b      	adds	r3, r1, #1
 8012fd2:	6013      	str	r3, [r2, #0]
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	fa03 f201 	lsl.w	r2, r3, r1
 8012fda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012fde:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4013      	ands	r3, r2
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d002      	beq.n	8012ff0 <arm_softmax_s8+0x3330>
 8012fea:	f04f 32ff 	mov.w	r2, #4294967295
 8012fee:	e000      	b.n	8012ff2 <arm_softmax_s8+0x3332>
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ff6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012ffa:	601a      	str	r2, [r3, #0]
 8012ffc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013000:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8013004:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013008:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013014:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013018:	2300      	movs	r3, #0
 801301a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801301c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013020:	f04f 0300 	mov.w	r3, #0
 8013024:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8013028:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801302c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013030:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	0fdb      	lsrs	r3, r3, #31
 8013038:	b2da      	uxtb	r2, r3
 801303a:	2300      	movs	r3, #0
 801303c:	4053      	eors	r3, r2
 801303e:	b2db      	uxtb	r3, r3
 8013040:	2b00      	cmp	r3, #0
 8013042:	d012      	beq.n	801306a <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8013044:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304c:	2100      	movs	r1, #0
 801304e:	f1d2 0001 	rsbs	r0, r2, #1
 8013052:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8013056:	eb61 0303 	sbc.w	r3, r1, r3
 801305a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801305e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8013062:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8013066:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801306a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801306e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	17da      	asrs	r2, r3, #31
 8013076:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 801307a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 801307e:	a34e      	add	r3, pc, #312	; (adr r3, 80131b8 <arm_softmax_s8+0x34f8>)
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8013088:	fb02 f001 	mul.w	r0, r2, r1
 801308c:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8013090:	fb01 f103 	mul.w	r1, r1, r3
 8013094:	4401      	add	r1, r0
 8013096:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 801309a:	fba0 2302 	umull	r2, r3, r0, r2
 801309e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80130a2:	4613      	mov	r3, r2
 80130a4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80130a8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80130ac:	18cb      	adds	r3, r1, r3
 80130ae:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80130b2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80130b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ba:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 80130be:	1851      	adds	r1, r2, r1
 80130c0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80130c4:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 80130c8:	414b      	adcs	r3, r1
 80130ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80130ce:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80130d2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80130d6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80130da:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80130de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	da0a      	bge.n	80130fc <arm_softmax_s8+0x343c>
 80130e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130ea:	1851      	adds	r1, r2, r1
 80130ec:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80130f0:	f143 0300 	adc.w	r3, r3, #0
 80130f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80130f8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80130fc:	f04f 0000 	mov.w	r0, #0
 8013100:	f04f 0100 	mov.w	r1, #0
 8013104:	0fd0      	lsrs	r0, r2, #31
 8013106:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801310a:	17d9      	asrs	r1, r3, #31
 801310c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013110:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013114:	4603      	mov	r3, r0
 8013116:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8013118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801311c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	4b28      	ldr	r3, [pc, #160]	; (80131c4 <arm_softmax_s8+0x3504>)
 8013124:	429a      	cmp	r2, r3
 8013126:	d10e      	bne.n	8013146 <arm_softmax_s8+0x3486>
 8013128:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801312c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013136:	d106      	bne.n	8013146 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8013138:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801313c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013140:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013144:	6013      	str	r3, [r2, #0]
    return result;
 8013146:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801314a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801314e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8013150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013154:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	ea02 0003 	and.w	r0, r2, r3
 801315e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013162:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	43da      	mvns	r2, r3
 801316a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801316e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	ea02 0103 	and.w	r1, r2, r3
 8013178:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801317c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8013180:	ea80 0301 	eor.w	r3, r0, r1
 8013184:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8013186:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801318a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801318e:	6819      	ldr	r1, [r3, #0]
 8013190:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013194:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8013198:	1c4b      	adds	r3, r1, #1
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	2301      	movs	r3, #1
 801319e:	fa03 f201 	lsl.w	r2, r3, r1
 80131a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80131a6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4013      	ands	r3, r2
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00e      	beq.n	80131d0 <arm_softmax_s8+0x3510>
 80131b2:	f04f 32ff 	mov.w	r2, #4294967295
 80131b6:	e00c      	b.n	80131d2 <arm_softmax_s8+0x3512>
 80131b8:	4da2cbf2 	.word	0x4da2cbf2
 80131bc:	00000000 	.word	0x00000000
 80131c0:	63afbe7b 	.word	0x63afbe7b
 80131c4:	4da2cbf2 	.word	0x4da2cbf2
 80131c8:	63afbe7b 	.word	0x63afbe7b
 80131cc:	00000000 	.word	0x00000000
 80131d0:	2200      	movs	r2, #0
 80131d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80131d6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80131da:	601a      	str	r2, [r3, #0]
 80131dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80131e0:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80131e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80131e8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80131f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80131f4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80131f8:	2300      	movs	r3, #0
 80131fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80131fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013200:	f04f 0300 	mov.w	r3, #0
 8013204:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8013208:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801320c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013210:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	0fdb      	lsrs	r3, r3, #31
 8013218:	b2da      	uxtb	r2, r3
 801321a:	2300      	movs	r3, #0
 801321c:	4053      	eors	r3, r2
 801321e:	b2db      	uxtb	r3, r3
 8013220:	2b00      	cmp	r3, #0
 8013222:	d012      	beq.n	801324a <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8013224:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8013228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322c:	2100      	movs	r1, #0
 801322e:	f1d2 0001 	rsbs	r0, r2, #1
 8013232:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8013236:	eb61 0303 	sbc.w	r3, r1, r3
 801323a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801323e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8013242:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8013246:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801324a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801324e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	17da      	asrs	r2, r3, #31
 8013256:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 801325a:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 801325e:	a3c0      	add	r3, pc, #768	; (adr r3, 8013560 <arm_softmax_s8+0x38a0>)
 8013260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013264:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8013268:	fb02 f001 	mul.w	r0, r2, r1
 801326c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013270:	fb01 f103 	mul.w	r1, r1, r3
 8013274:	4401      	add	r1, r0
 8013276:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 801327a:	fba0 2302 	umull	r2, r3, r0, r2
 801327e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8013282:	4613      	mov	r3, r2
 8013284:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8013288:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801328c:	18cb      	adds	r3, r1, r3
 801328e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8013292:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8013296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329a:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 801329e:	1851      	adds	r1, r2, r1
 80132a0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80132a4:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80132a8:	414b      	adcs	r3, r1
 80132aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80132ae:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80132b2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80132b6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80132ba:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80132be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	da08      	bge.n	80132d8 <arm_softmax_s8+0x3618>
 80132c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80132ca:	1851      	adds	r1, r2, r1
 80132cc:	67b9      	str	r1, [r7, #120]	; 0x78
 80132ce:	f143 0300 	adc.w	r3, r3, #0
 80132d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80132d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80132d8:	f04f 0000 	mov.w	r0, #0
 80132dc:	f04f 0100 	mov.w	r1, #0
 80132e0:	0fd0      	lsrs	r0, r2, #31
 80132e2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80132e6:	17d9      	asrs	r1, r3, #31
 80132e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80132ec:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80132f0:	4603      	mov	r3, r0
 80132f2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80132f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80132f8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	4b96      	ldr	r3, [pc, #600]	; (8013558 <arm_softmax_s8+0x3898>)
 8013300:	429a      	cmp	r2, r3
 8013302:	d10e      	bne.n	8013322 <arm_softmax_s8+0x3662>
 8013304:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013308:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013312:	d106      	bne.n	8013322 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8013314:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013318:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801331c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013320:	6013      	str	r3, [r2, #0]
    return result;
 8013322:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013326:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801332a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 801332c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013330:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	ea02 0003 	and.w	r0, r2, r3
 801333a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801333e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	43da      	mvns	r2, r3
 8013346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801334a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	ea02 0103 	and.w	r1, r2, r3
 8013354:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013358:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801335c:	ea80 0301 	eor.w	r3, r0, r1
 8013360:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8013362:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013366:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801336a:	6819      	ldr	r1, [r3, #0]
 801336c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013370:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8013374:	1c4b      	adds	r3, r1, #1
 8013376:	6013      	str	r3, [r2, #0]
 8013378:	2301      	movs	r3, #1
 801337a:	fa03 f201 	lsl.w	r2, r3, r1
 801337e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013382:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4013      	ands	r3, r2
 801338a:	2b00      	cmp	r3, #0
 801338c:	d002      	beq.n	8013394 <arm_softmax_s8+0x36d4>
 801338e:	f04f 32ff 	mov.w	r2, #4294967295
 8013392:	e000      	b.n	8013396 <arm_softmax_s8+0x36d6>
 8013394:	2200      	movs	r2, #0
 8013396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801339a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801339e:	601a      	str	r2, [r3, #0]
 80133a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80133a4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80133a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80133ac:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80133b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80133b8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80133bc:	2300      	movs	r3, #0
 80133be:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80133c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80133c4:	f04f 0300 	mov.w	r3, #0
 80133c8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80133cc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80133d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80133d4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	0fdb      	lsrs	r3, r3, #31
 80133dc:	b2da      	uxtb	r2, r3
 80133de:	2300      	movs	r3, #0
 80133e0:	4053      	eors	r3, r2
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d010      	beq.n	801340a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 80133e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f0:	2100      	movs	r1, #0
 80133f2:	f1d2 0001 	rsbs	r0, r2, #1
 80133f6:	6738      	str	r0, [r7, #112]	; 0x70
 80133f8:	eb61 0303 	sbc.w	r3, r1, r3
 80133fc:	677b      	str	r3, [r7, #116]	; 0x74
 80133fe:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8013402:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013406:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801340a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801340e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	17da      	asrs	r2, r3, #31
 8013416:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 801341a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 801341e:	a34c      	add	r3, pc, #304	; (adr r3, 8013550 <arm_softmax_s8+0x3890>)
 8013420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013424:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8013428:	fb02 f001 	mul.w	r0, r2, r1
 801342c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8013430:	fb01 f103 	mul.w	r1, r1, r3
 8013434:	4401      	add	r1, r0
 8013436:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 801343a:	fba0 2302 	umull	r2, r3, r0, r2
 801343e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8013442:	4613      	mov	r3, r2
 8013444:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8013448:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 801344c:	18cb      	adds	r3, r1, r3
 801344e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8013452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345a:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 801345e:	1851      	adds	r1, r2, r1
 8013460:	66b9      	str	r1, [r7, #104]	; 0x68
 8013462:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8013466:	414b      	adcs	r3, r1
 8013468:	66fb      	str	r3, [r7, #108]	; 0x6c
 801346a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801346e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013472:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8013476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801347e:	2b00      	cmp	r3, #0
 8013480:	da08      	bge.n	8013494 <arm_softmax_s8+0x37d4>
 8013482:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013486:	1851      	adds	r1, r2, r1
 8013488:	6639      	str	r1, [r7, #96]	; 0x60
 801348a:	f143 0300 	adc.w	r3, r3, #0
 801348e:	667b      	str	r3, [r7, #100]	; 0x64
 8013490:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8013494:	f04f 0000 	mov.w	r0, #0
 8013498:	f04f 0100 	mov.w	r1, #0
 801349c:	0fd0      	lsrs	r0, r2, #31
 801349e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80134a2:	17d9      	asrs	r1, r3, #31
 80134a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134a8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80134ac:	4603      	mov	r3, r0
 80134ae:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80134b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134b4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	4b28      	ldr	r3, [pc, #160]	; (801355c <arm_softmax_s8+0x389c>)
 80134bc:	429a      	cmp	r2, r3
 80134be:	d10e      	bne.n	80134de <arm_softmax_s8+0x381e>
 80134c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134c4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134ce:	d106      	bne.n	80134de <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 80134d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134d4:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80134d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80134dc:	6013      	str	r3, [r2, #0]
    return result;
 80134de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134e2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80134e6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80134e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134ec:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	ea02 0003 	and.w	r0, r2, r3
 80134f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80134fa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	43da      	mvns	r2, r3
 8013502:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013506:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	ea02 0103 	and.w	r1, r2, r3
 8013510:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013514:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8013518:	ea80 0301 	eor.w	r3, r0, r1
 801351c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 801351e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013522:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8013526:	6819      	ldr	r1, [r3, #0]
 8013528:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801352c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8013530:	1c4b      	adds	r3, r1, #1
 8013532:	6013      	str	r3, [r2, #0]
 8013534:	2301      	movs	r3, #1
 8013536:	fa03 f201 	lsl.w	r2, r3, r1
 801353a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801353e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4013      	ands	r3, r2
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00e      	beq.n	8013568 <arm_softmax_s8+0x38a8>
 801354a:	f04f 32ff 	mov.w	r2, #4294967295
 801354e:	e00c      	b.n	801356a <arm_softmax_s8+0x38aa>
 8013550:	1152aaa4 	.word	0x1152aaa4
 8013554:	00000000 	.word	0x00000000
 8013558:	2f16ac6c 	.word	0x2f16ac6c
 801355c:	1152aaa4 	.word	0x1152aaa4
 8013560:	2f16ac6c 	.word	0x2f16ac6c
 8013564:	00000000 	.word	0x00000000
 8013568:	2200      	movs	r2, #0
 801356a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801356e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013572:	601a      	str	r2, [r3, #0]
 8013574:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013578:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 801357c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013580:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013588:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801358c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8013590:	2300      	movs	r3, #0
 8013592:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8013594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013598:	f04f 0300 	mov.w	r3, #0
 801359c:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80135a0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80135a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80135a8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	0fdb      	lsrs	r3, r3, #31
 80135b0:	b2da      	uxtb	r2, r3
 80135b2:	2300      	movs	r3, #0
 80135b4:	4053      	eors	r3, r2
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d010      	beq.n	80135de <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 80135bc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80135c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c4:	2100      	movs	r1, #0
 80135c6:	f1d2 0001 	rsbs	r0, r2, #1
 80135ca:	65b8      	str	r0, [r7, #88]	; 0x58
 80135cc:	eb61 0303 	sbc.w	r3, r1, r3
 80135d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80135d2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80135d6:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80135da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80135de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80135e2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	17da      	asrs	r2, r3, #31
 80135ea:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80135ee:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 80135f2:	a3bd      	add	r3, pc, #756	; (adr r3, 80138e8 <arm_softmax_s8+0x3c28>)
 80135f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f8:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80135fc:	fb02 f001 	mul.w	r0, r2, r1
 8013600:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8013604:	fb01 f103 	mul.w	r1, r1, r3
 8013608:	4401      	add	r1, r0
 801360a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 801360e:	fba0 2302 	umull	r2, r3, r0, r2
 8013612:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8013616:	4613      	mov	r3, r2
 8013618:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 801361c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8013620:	18cb      	adds	r3, r1, r3
 8013622:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8013626:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801362e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8013632:	1851      	adds	r1, r2, r1
 8013634:	6539      	str	r1, [r7, #80]	; 0x50
 8013636:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 801363a:	414b      	adcs	r3, r1
 801363c:	657b      	str	r3, [r7, #84]	; 0x54
 801363e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8013642:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8013646:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801364a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013652:	2b00      	cmp	r3, #0
 8013654:	da08      	bge.n	8013668 <arm_softmax_s8+0x39a8>
 8013656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801365a:	1851      	adds	r1, r2, r1
 801365c:	64b9      	str	r1, [r7, #72]	; 0x48
 801365e:	f143 0300 	adc.w	r3, r3, #0
 8013662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013668:	f04f 0000 	mov.w	r0, #0
 801366c:	f04f 0100 	mov.w	r1, #0
 8013670:	0fd0      	lsrs	r0, r2, #31
 8013672:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013676:	17d9      	asrs	r1, r3, #31
 8013678:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801367c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8013680:	4603      	mov	r3, r0
 8013682:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8013684:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013688:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	4b94      	ldr	r3, [pc, #592]	; (80138e0 <arm_softmax_s8+0x3c20>)
 8013690:	429a      	cmp	r2, r3
 8013692:	d10e      	bne.n	80136b2 <arm_softmax_s8+0x39f2>
 8013694:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013698:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136a2:	d106      	bne.n	80136b2 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 80136a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136a8:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80136ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80136b0:	6013      	str	r3, [r2, #0]
    return result;
 80136b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136b6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80136ba:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80136bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136c0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	ea02 0003 	and.w	r0, r2, r3
 80136ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136ce:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	43da      	mvns	r2, r3
 80136d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136da:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	ea02 0103 	and.w	r1, r2, r3
 80136e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136e8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80136ec:	ea80 0301 	eor.w	r3, r0, r1
 80136f0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 80136f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80136f6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80136fa:	6819      	ldr	r1, [r3, #0]
 80136fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013700:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8013704:	1c4b      	adds	r3, r1, #1
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	2301      	movs	r3, #1
 801370a:	fa03 f201 	lsl.w	r2, r3, r1
 801370e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013712:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4013      	ands	r3, r2
 801371a:	2b00      	cmp	r3, #0
 801371c:	d002      	beq.n	8013724 <arm_softmax_s8+0x3a64>
 801371e:	f04f 32ff 	mov.w	r2, #4294967295
 8013722:	e000      	b.n	8013726 <arm_softmax_s8+0x3a66>
 8013724:	2200      	movs	r2, #0
 8013726:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801372a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801372e:	601a      	str	r2, [r3, #0]
 8013730:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013734:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8013738:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801373c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013744:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013748:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801374c:	2300      	movs	r3, #0
 801374e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8013750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013754:	f04f 0300 	mov.w	r3, #0
 8013758:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 801375c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8013760:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013764:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	0fdb      	lsrs	r3, r3, #31
 801376c:	b2da      	uxtb	r2, r3
 801376e:	2300      	movs	r3, #0
 8013770:	4053      	eors	r3, r2
 8013772:	b2db      	uxtb	r3, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	d010      	beq.n	801379a <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8013778:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013780:	2100      	movs	r1, #0
 8013782:	f1d2 0001 	rsbs	r0, r2, #1
 8013786:	6438      	str	r0, [r7, #64]	; 0x40
 8013788:	eb61 0303 	sbc.w	r3, r1, r3
 801378c:	647b      	str	r3, [r7, #68]	; 0x44
 801378e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8013792:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8013796:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801379a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801379e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	17da      	asrs	r2, r3, #31
 80137a6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80137aa:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80137ae:	4a4d      	ldr	r2, [pc, #308]	; (80138e4 <arm_softmax_s8+0x3c24>)
 80137b0:	f04f 0300 	mov.w	r3, #0
 80137b4:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80137b8:	fb02 f001 	mul.w	r0, r2, r1
 80137bc:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 80137c0:	fb01 f103 	mul.w	r1, r1, r3
 80137c4:	4401      	add	r1, r0
 80137c6:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 80137ca:	fba0 2302 	umull	r2, r3, r0, r2
 80137ce:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 80137d2:	4613      	mov	r3, r2
 80137d4:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 80137d8:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 80137dc:	18cb      	adds	r3, r1, r3
 80137de:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 80137e2:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80137e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ea:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 80137ee:	1851      	adds	r1, r2, r1
 80137f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80137f2:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 80137f6:	414b      	adcs	r3, r1
 80137f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137fa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80137fe:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8013802:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8013806:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380e:	2b00      	cmp	r3, #0
 8013810:	da08      	bge.n	8013824 <arm_softmax_s8+0x3b64>
 8013812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013816:	1851      	adds	r1, r2, r1
 8013818:	6339      	str	r1, [r7, #48]	; 0x30
 801381a:	f143 0300 	adc.w	r3, r3, #0
 801381e:	637b      	str	r3, [r7, #52]	; 0x34
 8013820:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013824:	f04f 0000 	mov.w	r0, #0
 8013828:	f04f 0100 	mov.w	r1, #0
 801382c:	0fd0      	lsrs	r0, r2, #31
 801382e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013832:	17d9      	asrs	r1, r3, #31
 8013834:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013838:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801383c:	4603      	mov	r3, r0
 801383e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8013840:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013844:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	4b26      	ldr	r3, [pc, #152]	; (80138e4 <arm_softmax_s8+0x3c24>)
 801384c:	429a      	cmp	r2, r3
 801384e:	d10e      	bne.n	801386e <arm_softmax_s8+0x3bae>
 8013850:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013854:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801385e:	d106      	bne.n	801386e <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8013860:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013864:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8013868:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801386c:	6013      	str	r3, [r2, #0]
    return result;
 801386e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013872:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8013876:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8013878:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801387c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	ea02 0003 	and.w	r0, r2, r3
 8013886:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801388a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	43da      	mvns	r2, r3
 8013892:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013896:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	ea02 0103 	and.w	r1, r2, r3
 80138a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80138a4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80138a8:	ea80 0301 	eor.w	r3, r0, r1
 80138ac:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80138ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80138b2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80138b6:	6819      	ldr	r1, [r3, #0]
 80138b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80138bc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80138c0:	1c4b      	adds	r3, r1, #1
 80138c2:	6013      	str	r3, [r2, #0]
 80138c4:	2301      	movs	r3, #1
 80138c6:	fa03 f201 	lsl.w	r2, r3, r1
 80138ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80138ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	4013      	ands	r3, r2
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d00a      	beq.n	80138f0 <arm_softmax_s8+0x3c30>
 80138da:	f04f 32ff 	mov.w	r2, #4294967295
 80138de:	e008      	b.n	80138f2 <arm_softmax_s8+0x3c32>
 80138e0:	02582ab7 	.word	0x02582ab7
 80138e4:	000afe11 	.word	0x000afe11
 80138e8:	02582ab7 	.word	0x02582ab7
 80138ec:	00000000 	.word	0x00000000
 80138f0:	2200      	movs	r2, #0
 80138f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80138f6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80138fa:	601a      	str	r2, [r3, #0]
 80138fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013900:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8013904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013908:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013910:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013914:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8013918:	2300      	movs	r3, #0
 801391a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801391c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013920:	f04f 0300 	mov.w	r3, #0
 8013924:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8013928:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801392c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013930:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	0fdb      	lsrs	r3, r3, #31
 8013938:	b2da      	uxtb	r2, r3
 801393a:	2300      	movs	r3, #0
 801393c:	4053      	eors	r3, r2
 801393e:	b2db      	uxtb	r3, r3
 8013940:	2b00      	cmp	r3, #0
 8013942:	d010      	beq.n	8013966 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8013944:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8013948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394c:	2100      	movs	r1, #0
 801394e:	f1d2 0001 	rsbs	r0, r2, #1
 8013952:	62b8      	str	r0, [r7, #40]	; 0x28
 8013954:	eb61 0303 	sbc.w	r3, r1, r3
 8013958:	62fb      	str	r3, [r7, #44]	; 0x2c
 801395a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801395e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8013962:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8013966:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801396a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	17da      	asrs	r2, r3, #31
 8013972:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8013976:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 801397a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801397e:	f04f 0300 	mov.w	r3, #0
 8013982:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8013986:	fb02 f001 	mul.w	r0, r2, r1
 801398a:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801398e:	fb01 f103 	mul.w	r1, r1, r3
 8013992:	4401      	add	r1, r0
 8013994:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8013998:	fba0 2302 	umull	r2, r3, r0, r2
 801399c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80139a0:	4613      	mov	r3, r2
 80139a2:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80139a6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80139aa:	18cb      	adds	r3, r1, r3
 80139ac:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80139b0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80139b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b8:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80139bc:	1851      	adds	r1, r2, r1
 80139be:	6239      	str	r1, [r7, #32]
 80139c0:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 80139c4:	414b      	adcs	r3, r1
 80139c6:	627b      	str	r3, [r7, #36]	; 0x24
 80139c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80139cc:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80139d0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80139d4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80139d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	da08      	bge.n	80139f2 <arm_softmax_s8+0x3d32>
 80139e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80139e4:	1851      	adds	r1, r2, r1
 80139e6:	61b9      	str	r1, [r7, #24]
 80139e8:	f143 0300 	adc.w	r3, r3, #0
 80139ec:	61fb      	str	r3, [r7, #28]
 80139ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80139f2:	f04f 0000 	mov.w	r0, #0
 80139f6:	f04f 0100 	mov.w	r1, #0
 80139fa:	0fd0      	lsrs	r0, r2, #31
 80139fc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013a00:	17d9      	asrs	r1, r3, #31
 8013a02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a06:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8013a0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a12:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2bf2      	cmp	r3, #242	; 0xf2
 8013a1a:	d10e      	bne.n	8013a3a <arm_softmax_s8+0x3d7a>
 8013a1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a20:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a2a:	d106      	bne.n	8013a3a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8013a2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a30:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8013a34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013a38:	6013      	str	r3, [r2, #0]
    return result;
 8013a3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a3e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8013a42:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8013a44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a48:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	ea02 0003 	and.w	r0, r2, r3
 8013a52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a56:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	43da      	mvns	r2, r3
 8013a5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a62:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	ea02 0103 	and.w	r1, r2, r3
 8013a6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a70:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8013a74:	ea80 0301 	eor.w	r3, r0, r1
 8013a78:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8013a7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a7e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d102      	bne.n	8013a8e <arm_softmax_s8+0x3dce>
 8013a88:	f04f 32ff 	mov.w	r2, #4294967295
 8013a8c:	e000      	b.n	8013a90 <arm_softmax_s8+0x3dd0>
 8013a8e:	2200      	movs	r2, #0
 8013a90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a94:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013a98:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8013a9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013a9e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013aac:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	43da      	mvns	r2, r3
 8013ab4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013ab8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	4013      	ands	r3, r2
 8013ac0:	4059      	eors	r1, r3
 8013ac2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013ac6:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8013aca:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8013ace:	6013      	str	r3, [r2, #0]
 8013ad0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013ad4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8013ad8:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8013ada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013ade:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8013ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013aea:	f04f 0300 	mov.w	r3, #0
 8013aee:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8013af2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8013af6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013afa:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	0fdb      	lsrs	r3, r3, #31
 8013b02:	b2da      	uxtb	r2, r3
 8013b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013b08:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	0fdb      	lsrs	r3, r3, #31
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	4053      	eors	r3, r2
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d010      	beq.n	8013b3c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8013b1a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8013b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b22:	2100      	movs	r1, #0
 8013b24:	f1d2 0001 	rsbs	r0, r2, #1
 8013b28:	6138      	str	r0, [r7, #16]
 8013b2a:	eb61 0303 	sbc.w	r3, r1, r3
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013b34:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8013b38:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8013b3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013b40:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	17da      	asrs	r2, r3, #31
 8013b48:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8013b4c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8013b50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013b54:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	17da      	asrs	r2, r3, #31
 8013b5c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8013b60:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8013b64:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8013b68:	460b      	mov	r3, r1
 8013b6a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8013b6e:	fb02 f203 	mul.w	r2, r2, r3
 8013b72:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013b76:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8013b7a:	4601      	mov	r1, r0
 8013b7c:	fb01 f303 	mul.w	r3, r1, r3
 8013b80:	4413      	add	r3, r2
 8013b82:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8013b86:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8013b8a:	fba2 1201 	umull	r1, r2, r2, r1
 8013b8e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8013b92:	460a      	mov	r2, r1
 8013b94:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8013b98:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8013b9c:	4413      	add	r3, r2
 8013b9e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8013ba2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8013ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013baa:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8013bae:	1851      	adds	r1, r2, r1
 8013bb0:	60b9      	str	r1, [r7, #8]
 8013bb2:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8013bb6:	414b      	adcs	r3, r1
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013bbe:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8013bc2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8013bc6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8013bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	da08      	bge.n	8013be4 <arm_softmax_s8+0x3f24>
 8013bd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013bd6:	1851      	adds	r1, r2, r1
 8013bd8:	6039      	str	r1, [r7, #0]
 8013bda:	f143 0300 	adc.w	r3, r3, #0
 8013bde:	607b      	str	r3, [r7, #4]
 8013be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013be4:	f04f 0000 	mov.w	r0, #0
 8013be8:	f04f 0100 	mov.w	r1, #0
 8013bec:	0fd0      	lsrs	r0, r2, #31
 8013bee:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013bf2:	17d9      	asrs	r1, r3, #31
 8013bf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013bf8:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8013c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c04:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8013c08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c0c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8013c10:	6812      	ldr	r2, [r2, #0]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d10e      	bne.n	8013c36 <arm_softmax_s8+0x3f76>
 8013c18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c1c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c26:	d106      	bne.n	8013c36 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8013c28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c2c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8013c30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c34:	6013      	str	r3, [r2, #0]
    return result;
 8013c36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c3a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c44:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013c48:	601a      	str	r2, [r3, #0]
 8013c4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c4e:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8013c52:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8013c56:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013c58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c5c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8013c60:	2300      	movs	r3, #0
 8013c62:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013c64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	fa02 f103 	lsl.w	r1, r2, r3
 8013c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c78:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8013c7c:	1e4b      	subs	r3, r1, #1
 8013c7e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013c80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c84:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8013c88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c8c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8013c90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013c94:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8013c98:	6812      	ldr	r2, [r2, #0]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4013      	ands	r3, r2
 8013c9e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013ca0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013ca4:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8013ca8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cac:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8013cb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cb4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013cb8:	6812      	ldr	r2, [r2, #0]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	fa42 f303 	asr.w	r3, r2, r3
 8013cc0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013cc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cc6:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8013cca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cce:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	105b      	asrs	r3, r3, #1
 8013cd6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013cd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cdc:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	da0a      	bge.n	8013cfc <arm_softmax_s8+0x403c>
        threshold++;
 8013ce6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cea:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8013cee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013cf2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013cfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d00:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8013d04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d08:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8013d0c:	6812      	ldr	r2, [r2, #0]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	dd0a      	ble.n	8013d2a <arm_softmax_s8+0x406a>
        result++;
 8013d14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d18:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8013d1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d20:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	3301      	adds	r3, #1
 8013d28:	6013      	str	r3, [r2, #0]
    return result;
 8013d2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d2e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8013d32:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8013d34:	3b80      	subs	r3, #128	; 0x80
 8013d36:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8013d3a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8013d3e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8013d42:	db09      	blt.n	8013d58 <arm_softmax_s8+0x4098>
 8013d44:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8013d48:	2b7e      	cmp	r3, #126	; 0x7e
 8013d4a:	dc03      	bgt.n	8013d54 <arm_softmax_s8+0x4094>
 8013d4c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8013d50:	b259      	sxtb	r1, r3
 8013d52:	e003      	b.n	8013d5c <arm_softmax_s8+0x409c>
 8013d54:	217f      	movs	r1, #127	; 0x7f
 8013d56:	e001      	b.n	8013d5c <arm_softmax_s8+0x409c>
 8013d58:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8013d5c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8013d60:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8013d64:	441a      	add	r2, r3
 8013d66:	460b      	mov	r3, r1
 8013d68:	7013      	strb	r3, [r2, #0]
 8013d6a:	e006      	b.n	8013d7a <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8013d6c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8013d70:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8013d74:	441a      	add	r2, r3
 8013d76:	2380      	movs	r3, #128	; 0x80
 8013d78:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8013d7a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8013d7e:	3301      	adds	r3, #1
 8013d80:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8013d84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d88:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013d8c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	f6fe aa71 	blt.w	801227a <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8013d98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013d9c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013da0:	6819      	ldr	r1, [r3, #0]
 8013da2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013da6:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8013daa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013dae:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	440b      	add	r3, r1
 8013db6:	6013      	str	r3, [r2, #0]
        output += row_size;
 8013db8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013dbc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013dc0:	681a      	ldr	r2, [r3, #0]
 8013dc2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8013dc6:	4413      	add	r3, r2
 8013dc8:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8013dcc:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8013dd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013dda:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8013dde:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	429a      	cmp	r2, r3
 8013de6:	f6fb af93 	blt.w	800fd10 <arm_softmax_s8+0x50>
    }

#endif
}
 8013dea:	bf00      	nop
 8013dec:	bf00      	nop
 8013dee:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8013df2:	46bd      	mov	sp, r7
 8013df4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013df8:	4770      	bx	lr
 8013dfa:	bf00      	nop

08013dfc <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	ed87 0a01 	vstr	s0, [r7, #4]
 8013e06:	ed97 0a01 	vldr	s0, [r7, #4]
 8013e0a:	f00a fe41 	bl	801ea90 <log10f>
 8013e0e:	eef0 7a40 	vmov.f32	s15, s0
 8013e12:	eeb0 0a67 	vmov.f32	s0, s15
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8013e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	ed87 0b00 	vstr	d0, [r7]
 8013e26:	683c      	ldr	r4, [r7, #0]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8013e2e:	2301      	movs	r3, #1
 8013e30:	461e      	mov	r6, r3
 8013e32:	f04f 32ff 	mov.w	r2, #4294967295
 8013e36:	4b10      	ldr	r3, [pc, #64]	; (8013e78 <_ZSt5isinfd+0x5c>)
 8013e38:	4620      	mov	r0, r4
 8013e3a:	4629      	mov	r1, r5
 8013e3c:	f7ec fea0 	bl	8000b80 <__aeabi_dcmpun>
 8013e40:	4603      	mov	r3, r0
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d10b      	bne.n	8013e5e <_ZSt5isinfd+0x42>
 8013e46:	f04f 32ff 	mov.w	r2, #4294967295
 8013e4a:	4b0b      	ldr	r3, [pc, #44]	; (8013e78 <_ZSt5isinfd+0x5c>)
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	4629      	mov	r1, r5
 8013e50:	f7ec fe78 	bl	8000b44 <__aeabi_dcmple>
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <_ZSt5isinfd+0x42>
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	461e      	mov	r6, r3
 8013e5e:	b2f3      	uxtb	r3, r6
 8013e60:	f083 0301 	eor.w	r3, r3, #1
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	bf14      	ite	ne
 8013e6a:	2301      	movne	r3, #1
 8013e6c:	2300      	moveq	r3, #0
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	4618      	mov	r0, r3
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e78:	7fefffff 	.word	0x7fefffff

08013e7c <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8013e7c:	b480      	push	{r7}
 8013e7e:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8013e8c:	b5b0      	push	{r4, r5, r7, lr}
 8013e8e:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8013e90:	f7ef fcee 	bl	8003870 <HAL_GetTick>
 8013e94:	4603      	mov	r3, r0
 8013e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e9a:	fb02 f303 	mul.w	r3, r2, r3
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	461c      	mov	r4, r3
 8013ea2:	4615      	mov	r5, r2
 8013ea4:	4622      	mov	r2, r4
 8013ea6:	462b      	mov	r3, r5
}
 8013ea8:	4610      	mov	r0, r2
 8013eaa:	4619      	mov	r1, r3
 8013eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013eb0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8013eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb4:	b08c      	sub	sp, #48	; 0x30
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8013ebc:	466b      	mov	r3, sp
 8013ebe:	4698      	mov	r8, r3
    float n = f;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8013ec4:	4b7e      	ldr	r3, [pc, #504]	; (80140c0 <_Z15ei_printf_floatf+0x210>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	1e5e      	subs	r6, r3, #1
 8013eca:	623e      	str	r6, [r7, #32]
 8013ecc:	4633      	mov	r3, r6
 8013ece:	3301      	adds	r3, #1
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	461c      	mov	r4, r3
 8013ed4:	4615      	mov	r5, r2
 8013ed6:	f04f 0200 	mov.w	r2, #0
 8013eda:	f04f 0300 	mov.w	r3, #0
 8013ede:	00eb      	lsls	r3, r5, #3
 8013ee0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013ee4:	00e2      	lsls	r2, r4, #3
 8013ee6:	4633      	mov	r3, r6
 8013ee8:	3301      	adds	r3, #1
 8013eea:	2200      	movs	r2, #0
 8013eec:	4618      	mov	r0, r3
 8013eee:	4611      	mov	r1, r2
 8013ef0:	f04f 0200 	mov.w	r2, #0
 8013ef4:	f04f 0300 	mov.w	r3, #0
 8013ef8:	00cb      	lsls	r3, r1, #3
 8013efa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8013efe:	00c2      	lsls	r2, r0, #3
 8013f00:	4633      	mov	r3, r6
 8013f02:	3301      	adds	r3, #1
 8013f04:	3307      	adds	r3, #7
 8013f06:	08db      	lsrs	r3, r3, #3
 8013f08:	00db      	lsls	r3, r3, #3
 8013f0a:	ebad 0d03 	sub.w	sp, sp, r3
 8013f0e:	466b      	mov	r3, sp
 8013f10:	3300      	adds	r3, #0
 8013f12:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8013f14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013f18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f20:	d106      	bne.n	8013f30 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8013f22:	69fb      	ldr	r3, [r7, #28]
 8013f24:	4967      	ldr	r1, [pc, #412]	; (80140c4 <_Z15ei_printf_floatf+0x214>)
 8013f26:	461a      	mov	r2, r3
 8013f28:	460b      	mov	r3, r1
 8013f2a:	881b      	ldrh	r3, [r3, #0]
 8013f2c:	8013      	strh	r3, [r2, #0]
 8013f2e:	e0b6      	b.n	801409e <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8013f34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f40:	bf4c      	ite	mi
 8013f42:	2301      	movmi	r3, #1
 8013f44:	2300      	movpl	r3, #0
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8013f4a:	69bb      	ldr	r3, [r7, #24]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d005      	beq.n	8013f5c <_Z15ei_printf_floatf+0xac>
            n = -n;
 8013f50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013f54:	eef1 7a67 	vneg.f32	s15, s15
 8013f58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8013f5c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8013f60:	f7ff ff4c 	bl	8013dfc <_ZSt5log10f>
 8013f64:	eef0 7a40 	vmov.f32	s15, s0
 8013f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f6c:	ee17 3a90 	vmov	r3, s15
 8013f70:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d004      	beq.n	8013f82 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	1c5a      	adds	r2, r3, #1
 8013f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013f7e:	222d      	movs	r2, #45	; 0x2d
 8013f80:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8013f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	dc01      	bgt.n	8013f8c <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8013f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f8e:	f7ec fb05 	bl	800059c <__aeabi_f2d>
 8013f92:	4b4d      	ldr	r3, [pc, #308]	; (80140c8 <_Z15ei_printf_floatf+0x218>)
 8013f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f98:	2401      	movs	r4, #1
 8013f9a:	f7ec fde7 	bl	8000b6c <__aeabi_dcmpgt>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d101      	bne.n	8013fa8 <_Z15ei_printf_floatf+0xf8>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	461c      	mov	r4, r3
 8013fa8:	b2e3      	uxtb	r3, r4
 8013faa:	f083 0301 	eor.w	r3, r3, #1
 8013fae:	b2db      	uxtb	r3, r3
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d002      	beq.n	8013fba <_Z15ei_printf_floatf+0x10a>
 8013fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	db6e      	blt.n	8014098 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8013fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fbc:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80140b8 <_Z15ei_printf_floatf+0x208>
 8013fc0:	f000 f89f 	bl	8014102 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8013fc4:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8013fc8:	f04f 0200 	mov.w	r2, #0
 8013fcc:	f04f 0300 	mov.w	r3, #0
 8013fd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013fd4:	f7ec fdca 	bl	8000b6c <__aeabi_dcmpgt>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00b      	beq.n	8013ff6 <_Z15ei_printf_floatf+0x146>
 8013fde:	ed97 0b04 	vldr	d0, [r7, #16]
 8013fe2:	f7ff ff1b 	bl	8013e1c <_ZSt5isinfd>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	f083 0301 	eor.w	r3, r3, #1
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <_Z15ei_printf_floatf+0x146>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e000      	b.n	8013ff8 <_Z15ei_printf_floatf+0x148>
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d03a      	beq.n	8014072 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8013ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ffe:	f7ec facd 	bl	800059c <__aeabi_f2d>
 8014002:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014006:	f7ec fc4b 	bl	80008a0 <__aeabi_ddiv>
 801400a:	4602      	mov	r2, r0
 801400c:	460b      	mov	r3, r1
 801400e:	ec43 2b17 	vmov	d7, r2, r3
 8014012:	eeb0 0a47 	vmov.f32	s0, s14
 8014016:	eef0 0a67 	vmov.f32	s1, s15
 801401a:	f00a fb71 	bl	801e700 <floor>
 801401e:	ec53 2b10 	vmov	r2, r3, d0
 8014022:	4610      	mov	r0, r2
 8014024:	4619      	mov	r1, r3
 8014026:	f7ec fdc1 	bl	8000bac <__aeabi_d2iz>
 801402a:	4603      	mov	r3, r0
 801402c:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801402e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014030:	f7ec fab4 	bl	800059c <__aeabi_f2d>
 8014034:	4604      	mov	r4, r0
 8014036:	460d      	mov	r5, r1
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f7ec fa9d 	bl	8000578 <__aeabi_i2d>
 801403e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014042:	f7ec fb03 	bl	800064c <__aeabi_dmul>
 8014046:	4602      	mov	r2, r0
 8014048:	460b      	mov	r3, r1
 801404a:	4620      	mov	r0, r4
 801404c:	4629      	mov	r1, r5
 801404e:	f7ec f945 	bl	80002dc <__aeabi_dsub>
 8014052:	4602      	mov	r2, r0
 8014054:	460b      	mov	r3, r1
 8014056:	4610      	mov	r0, r2
 8014058:	4619      	mov	r1, r3
 801405a:	f7ec fdef 	bl	8000c3c <__aeabi_d2f>
 801405e:	4603      	mov	r3, r0
 8014060:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	b2da      	uxtb	r2, r3
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	1c59      	adds	r1, r3, #1
 801406a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801406c:	3230      	adds	r2, #48	; 0x30
 801406e:	b2d2      	uxtb	r2, r2
 8014070:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8014072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014074:	2b00      	cmp	r3, #0
 8014076:	d10b      	bne.n	8014090 <_Z15ei_printf_floatf+0x1e0>
 8014078:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801407c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014084:	dd04      	ble.n	8014090 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8014086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014088:	1c5a      	adds	r2, r3, #1
 801408a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801408c:	222e      	movs	r2, #46	; 0x2e
 801408e:	701a      	strb	r2, [r3, #0]
            m--;
 8014090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014092:	3b01      	subs	r3, #1
 8014094:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8014096:	e779      	b.n	8013f8c <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8014098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409a:	2200      	movs	r2, #0
 801409c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 801409e:	69f9      	ldr	r1, [r7, #28]
 80140a0:	480a      	ldr	r0, [pc, #40]	; (80140cc <_Z15ei_printf_floatf+0x21c>)
 80140a2:	f7ee f993 	bl	80023cc <_Z9ei_printfPKcz>
 80140a6:	46c5      	mov	sp, r8
}
 80140a8:	bf00      	nop
 80140aa:	3730      	adds	r7, #48	; 0x30
 80140ac:	46bd      	mov	sp, r7
 80140ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b2:	bf00      	nop
 80140b4:	f3af 8000 	nop.w
 80140b8:	00000000 	.word	0x00000000
 80140bc:	40240000 	.word	0x40240000
 80140c0:	20002440 	.word	0x20002440
 80140c4:	08021b40 	.word	0x08021b40
 80140c8:	20002438 	.word	0x20002438
 80140cc:	08021b44 	.word	0x08021b44

080140d0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 80140da:	6839      	ldr	r1, [r7, #0]
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f00b fe23 	bl	801fd28 <calloc>
 80140e2:	4603      	mov	r3, r0
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}

080140ec <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
    free(ptr);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f00b fe67 	bl	801fdc8 <free>
}
 80140fa:	bf00      	nop
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8014102:	b580      	push	{r7, lr}
 8014104:	b084      	sub	sp, #16
 8014106:	af00      	add	r7, sp, #0
 8014108:	ed87 0b02 	vstr	d0, [r7, #8]
 801410c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f7ec fa32 	bl	8000578 <__aeabi_i2d>
 8014114:	4602      	mov	r2, r0
 8014116:	460b      	mov	r3, r1
 8014118:	ec43 2b11 	vmov	d1, r2, r3
 801411c:	ed97 0b02 	vldr	d0, [r7, #8]
 8014120:	f00a fc10 	bl	801e944 <pow>
 8014124:	eeb0 7a40 	vmov.f32	s14, s0
 8014128:	eef0 7a60 	vmov.f32	s15, s1
    }
 801412c:	eeb0 0a47 	vmov.f32	s0, s14
 8014130:	eef0 0a67 	vmov.f32	s1, s15
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
	...

0801413c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801413c:	b480      	push	{r7}
 801413e:	b083      	sub	sp, #12
 8014140:	af00      	add	r7, sp, #0
 8014142:	4603      	mov	r3, r0
 8014144:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8014146:	79fb      	ldrb	r3, [r7, #7]
 8014148:	2b10      	cmp	r3, #16
 801414a:	d847      	bhi.n	80141dc <TfLiteTypeGetName+0xa0>
 801414c:	a201      	add	r2, pc, #4	; (adr r2, 8014154 <TfLiteTypeGetName+0x18>)
 801414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014152:	bf00      	nop
 8014154:	08014199 	.word	0x08014199
 8014158:	0801419d 	.word	0x0801419d
 801415c:	080141a5 	.word	0x080141a5
 8014160:	080141ad 	.word	0x080141ad
 8014164:	080141b5 	.word	0x080141b5
 8014168:	080141c9 	.word	0x080141c9
 801416c:	080141bd 	.word	0x080141bd
 8014170:	080141a1 	.word	0x080141a1
 8014174:	080141c1 	.word	0x080141c1
 8014178:	080141b1 	.word	0x080141b1
 801417c:	080141cd 	.word	0x080141cd
 8014180:	080141d1 	.word	0x080141d1
 8014184:	080141c5 	.word	0x080141c5
 8014188:	080141b9 	.word	0x080141b9
 801418c:	080141d5 	.word	0x080141d5
 8014190:	080141d9 	.word	0x080141d9
 8014194:	080141a9 	.word	0x080141a9
    case kTfLiteNoType:
      return "NOTYPE";
 8014198:	4b14      	ldr	r3, [pc, #80]	; (80141ec <TfLiteTypeGetName+0xb0>)
 801419a:	e020      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801419c:	4b14      	ldr	r3, [pc, #80]	; (80141f0 <TfLiteTypeGetName+0xb4>)
 801419e:	e01e      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80141a0:	4b14      	ldr	r3, [pc, #80]	; (80141f4 <TfLiteTypeGetName+0xb8>)
 80141a2:	e01c      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80141a4:	4b14      	ldr	r3, [pc, #80]	; (80141f8 <TfLiteTypeGetName+0xbc>)
 80141a6:	e01a      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80141a8:	4b14      	ldr	r3, [pc, #80]	; (80141fc <TfLiteTypeGetName+0xc0>)
 80141aa:	e018      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80141ac:	4b14      	ldr	r3, [pc, #80]	; (8014200 <TfLiteTypeGetName+0xc4>)
 80141ae:	e016      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80141b0:	4b14      	ldr	r3, [pc, #80]	; (8014204 <TfLiteTypeGetName+0xc8>)
 80141b2:	e014      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80141b4:	4b14      	ldr	r3, [pc, #80]	; (8014208 <TfLiteTypeGetName+0xcc>)
 80141b6:	e012      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80141b8:	4b14      	ldr	r3, [pc, #80]	; (801420c <TfLiteTypeGetName+0xd0>)
 80141ba:	e010      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80141bc:	4b14      	ldr	r3, [pc, #80]	; (8014210 <TfLiteTypeGetName+0xd4>)
 80141be:	e00e      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80141c0:	4b14      	ldr	r3, [pc, #80]	; (8014214 <TfLiteTypeGetName+0xd8>)
 80141c2:	e00c      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80141c4:	4b14      	ldr	r3, [pc, #80]	; (8014218 <TfLiteTypeGetName+0xdc>)
 80141c6:	e00a      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 80141c8:	4b14      	ldr	r3, [pc, #80]	; (801421c <TfLiteTypeGetName+0xe0>)
 80141ca:	e008      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80141cc:	4b14      	ldr	r3, [pc, #80]	; (8014220 <TfLiteTypeGetName+0xe4>)
 80141ce:	e006      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80141d0:	4b14      	ldr	r3, [pc, #80]	; (8014224 <TfLiteTypeGetName+0xe8>)
 80141d2:	e004      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80141d4:	4b14      	ldr	r3, [pc, #80]	; (8014228 <TfLiteTypeGetName+0xec>)
 80141d6:	e002      	b.n	80141de <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80141d8:	4b14      	ldr	r3, [pc, #80]	; (801422c <TfLiteTypeGetName+0xf0>)
 80141da:	e000      	b.n	80141de <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80141dc:	4b14      	ldr	r3, [pc, #80]	; (8014230 <TfLiteTypeGetName+0xf4>)
}
 80141de:	4618      	mov	r0, r3
 80141e0:	370c      	adds	r7, #12
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	08021b48 	.word	0x08021b48
 80141f0:	08021b50 	.word	0x08021b50
 80141f4:	08021b58 	.word	0x08021b58
 80141f8:	08021b60 	.word	0x08021b60
 80141fc:	08021b68 	.word	0x08021b68
 8014200:	08021b70 	.word	0x08021b70
 8014204:	08021b78 	.word	0x08021b78
 8014208:	08021b80 	.word	0x08021b80
 801420c:	08021b88 	.word	0x08021b88
 8014210:	08021b90 	.word	0x08021b90
 8014214:	08021b98 	.word	0x08021b98
 8014218:	08021ba4 	.word	0x08021ba4
 801421c:	08021bb0 	.word	0x08021bb0
 8014220:	08021bb8 	.word	0x08021bb8
 8014224:	08021bc0 	.word	0x08021bc0
 8014228:	08021bc8 	.word	0x08021bc8
 801422c:	08021bd4 	.word	0x08021bd4
 8014230:	08021bdc 	.word	0x08021bdc

08014234 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8014234:	b480      	push	{r7}
 8014236:	af00      	add	r7, sp, #0
 8014238:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801423c:	4618      	mov	r0, r3
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr
	...

08014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8014248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801424c:	b088      	sub	sp, #32
 801424e:	af00      	add	r7, sp, #0
 8014250:	ed87 0b02 	vstr	d0, [r7, #8]
 8014254:	6078      	str	r0, [r7, #4]
 8014256:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8014258:	f04f 0200 	mov.w	r2, #0
 801425c:	f04f 0300 	mov.w	r3, #0
 8014260:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014264:	f7ec fc5a 	bl	8000b1c <__aeabi_dcmpeq>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d006      	beq.n	801427c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2200      	movs	r2, #0
 8014272:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	2200      	movs	r2, #0
 8014278:	601a      	str	r2, [r3, #0]
    return;
 801427a:	e068      	b.n	801434e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801427c:	6838      	ldr	r0, [r7, #0]
 801427e:	ed97 0b02 	vldr	d0, [r7, #8]
 8014282:	f00a fabd 	bl	801e800 <frexp>
 8014286:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801428a:	f04f 0200 	mov.w	r2, #0
 801428e:	4b32      	ldr	r3, [pc, #200]	; (8014358 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8014290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014294:	f7ec f9da 	bl	800064c <__aeabi_dmul>
 8014298:	4602      	mov	r2, r0
 801429a:	460b      	mov	r3, r1
 801429c:	ec43 2b17 	vmov	d7, r2, r3
 80142a0:	eeb0 0a47 	vmov.f32	s0, s14
 80142a4:	eef0 0a67 	vmov.f32	s1, s15
 80142a8:	f000 f97b 	bl	80145a2 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80142ac:	ec53 2b10 	vmov	r2, r3, d0
 80142b0:	4610      	mov	r0, r2
 80142b2:	4619      	mov	r1, r3
 80142b4:	f7ec fd7a 	bl	8000dac <__aeabi_d2lz>
 80142b8:	4602      	mov	r2, r0
 80142ba:	460b      	mov	r3, r1
 80142bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 80142c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80142c4:	4925      	ldr	r1, [pc, #148]	; (801435c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80142c6:	428a      	cmp	r2, r1
 80142c8:	f173 0300 	sbcs.w	r3, r3, #0
 80142cc:	db01      	blt.n	80142d2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 80142ce:	f00b fd05 	bl	801fcdc <abort>
  if (q_fixed == (1ll << 31)) {
 80142d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80142d6:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80142da:	430b      	orrs	r3, r1
 80142dc:	d118      	bne.n	8014310 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 80142de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80142e2:	0fd9      	lsrs	r1, r3, #31
 80142e4:	2000      	movs	r0, #0
 80142e6:	468a      	mov	sl, r1
 80142e8:	4683      	mov	fp, r0
 80142ea:	eb1a 0402 	adds.w	r4, sl, r2
 80142ee:	eb4b 0503 	adc.w	r5, fp, r3
 80142f2:	f04f 0200 	mov.w	r2, #0
 80142f6:	f04f 0300 	mov.w	r3, #0
 80142fa:	0862      	lsrs	r2, r4, #1
 80142fc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8014300:	106b      	asrs	r3, r5, #1
 8014302:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	1c5a      	adds	r2, r3, #1
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8014310:	f7ff ff90 	bl	8014234 <_ZNSt14numeric_limitsIlE3maxEv>
 8014314:	4603      	mov	r3, r0
 8014316:	17da      	asrs	r2, r3, #31
 8014318:	4698      	mov	r8, r3
 801431a:	4691      	mov	r9, r2
 801431c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014320:	4590      	cmp	r8, r2
 8014322:	eb79 0303 	sbcs.w	r3, r9, r3
 8014326:	da01      	bge.n	801432c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8014328:	f00b fcd8 	bl	801fcdc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	f113 0f1f 	cmn.w	r3, #31
 8014334:	da08      	bge.n	8014348 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	2200      	movs	r2, #0
 801433a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801433c:	f04f 0200 	mov.w	r2, #0
 8014340:	f04f 0300 	mov.w	r3, #0
 8014344:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8014348:	69ba      	ldr	r2, [r7, #24]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	601a      	str	r2, [r3, #0]
}
 801434e:	3720      	adds	r7, #32
 8014350:	46bd      	mov	sp, r7
 8014352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014356:	bf00      	nop
 8014358:	41e00000 	.word	0x41e00000
 801435c:	80000001 	.word	0x80000001

08014360 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8014360:	b580      	push	{r7, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	af00      	add	r7, sp, #0
 8014366:	ed87 0b02 	vstr	d0, [r7, #8]
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801436e:	f04f 0200 	mov.w	r2, #0
 8014372:	4b0d      	ldr	r3, [pc, #52]	; (80143a8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8014374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014378:	f7ec fbf8 	bl	8000b6c <__aeabi_dcmpgt>
 801437c:	4603      	mov	r3, r0
 801437e:	2b00      	cmp	r3, #0
 8014380:	d101      	bne.n	8014386 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8014382:	f00b fcab 	bl	801fcdc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8014386:	6839      	ldr	r1, [r7, #0]
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	ed97 0b02 	vldr	d0, [r7, #8]
 801438e:	f7ff ff5b 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	da01      	bge.n	801439e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801439a:	f00b fc9f 	bl	801fcdc <abort>
}
 801439e:	bf00      	nop
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	3ff00000 	.word	0x3ff00000

080143ac <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c2:	f7ec fbb5 	bl	8000b30 <__aeabi_dcmplt>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	e000      	b.n	80143d2 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 80143d0:	687b      	ldr	r3, [r7, #4]
    }
 80143d2:	4618      	mov	r0, r3
 80143d4:	3708      	adds	r7, #8
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	0000      	movs	r0, r0
 80143dc:	0000      	movs	r0, r0
	...

080143e0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 80143e0:	b5b0      	push	{r4, r5, r7, lr}
 80143e2:	b08e      	sub	sp, #56	; 0x38
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	ed87 0b06 	vstr	d0, [r7, #24]
 80143ea:	ed87 1b04 	vstr	d1, [r7, #16]
 80143ee:	60f8      	str	r0, [r7, #12]
 80143f0:	60b9      	str	r1, [r7, #8]
 80143f2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 80143f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80143f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80143fc:	f7ec f926 	bl	800064c <__aeabi_dmul>
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	4614      	mov	r4, r2
 8014406:	461d      	mov	r5, r3
 8014408:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	fa22 f303 	lsr.w	r3, r2, r3
 8014412:	4618      	mov	r0, r3
 8014414:	f7ec f8b0 	bl	8000578 <__aeabi_i2d>
 8014418:	4602      	mov	r2, r0
 801441a:	460b      	mov	r3, r1
 801441c:	4620      	mov	r0, r4
 801441e:	4629      	mov	r1, r5
 8014420:	f7ec f914 	bl	800064c <__aeabi_dmul>
 8014424:	4602      	mov	r2, r0
 8014426:	460b      	mov	r3, r1
 8014428:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801442c:	a30e      	add	r3, pc, #56	; (adr r3, 8014468 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014432:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8014436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801443a:	f107 0320 	add.w	r3, r7, #32
 801443e:	4611      	mov	r1, r2
 8014440:	4618      	mov	r0, r3
 8014442:	f7ff ffb3 	bl	80143ac <_ZSt3minIdERKT_S2_S2_>
 8014446:	4603      	mov	r3, r0
 8014448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8014450:	6879      	ldr	r1, [r7, #4]
 8014452:	68b8      	ldr	r0, [r7, #8]
 8014454:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8014458:	f7ff ff82 	bl	8014360 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801445c:	bf00      	nop
 801445e:	3738      	adds	r7, #56	; 0x38
 8014460:	46bd      	mov	sp, r7
 8014462:	bdb0      	pop	{r4, r5, r7, pc}
 8014464:	f3af 8000 	nop.w
 8014468:	ffc00000 	.word	0xffc00000
 801446c:	41dfffff 	.word	0x41dfffff

08014470 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8014470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014474:	b087      	sub	sp, #28
 8014476:	af00      	add	r7, sp, #0
 8014478:	60f8      	str	r0, [r7, #12]
 801447a:	60b9      	str	r1, [r7, #8]
 801447c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801447e:	2201      	movs	r2, #1
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	fa02 f303 	lsl.w	r3, r2, r3
 8014486:	3b01      	subs	r3, #1
 8014488:	4618      	mov	r0, r3
 801448a:	f7ec f875 	bl	8000578 <__aeabi_i2d>
 801448e:	4682      	mov	sl, r0
 8014490:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8014492:	687a      	ldr	r2, [r7, #4]
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	1ad1      	subs	r1, r2, r3
 8014498:	f04f 0201 	mov.w	r2, #1
 801449c:	f04f 0300 	mov.w	r3, #0
 80144a0:	f1a1 0620 	sub.w	r6, r1, #32
 80144a4:	f1c1 0020 	rsb	r0, r1, #32
 80144a8:	fa03 f901 	lsl.w	r9, r3, r1
 80144ac:	fa02 f606 	lsl.w	r6, r2, r6
 80144b0:	ea49 0906 	orr.w	r9, r9, r6
 80144b4:	fa22 f000 	lsr.w	r0, r2, r0
 80144b8:	ea49 0900 	orr.w	r9, r9, r0
 80144bc:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 80144c0:	4640      	mov	r0, r8
 80144c2:	4649      	mov	r1, r9
 80144c4:	f7ec f894 	bl	80005f0 <__aeabi_l2d>
 80144c8:	4602      	mov	r2, r0
 80144ca:	460b      	mov	r3, r1
 80144cc:	4650      	mov	r0, sl
 80144ce:	4659      	mov	r1, fp
 80144d0:	f7ec f8bc 	bl	800064c <__aeabi_dmul>
 80144d4:	4602      	mov	r2, r0
 80144d6:	460b      	mov	r3, r1
 80144d8:	4690      	mov	r8, r2
 80144da:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 80144dc:	f04f 0201 	mov.w	r2, #1
 80144e0:	f04f 0300 	mov.w	r3, #0
 80144e4:	68b9      	ldr	r1, [r7, #8]
 80144e6:	f1a1 0620 	sub.w	r6, r1, #32
 80144ea:	f1c1 0020 	rsb	r0, r1, #32
 80144ee:	fa03 f501 	lsl.w	r5, r3, r1
 80144f2:	fa02 f606 	lsl.w	r6, r2, r6
 80144f6:	4335      	orrs	r5, r6
 80144f8:	fa22 f000 	lsr.w	r0, r2, r0
 80144fc:	4305      	orrs	r5, r0
 80144fe:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8014502:	4620      	mov	r0, r4
 8014504:	4629      	mov	r1, r5
 8014506:	f7ec f873 	bl	80005f0 <__aeabi_l2d>
 801450a:	4602      	mov	r2, r0
 801450c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801450e:	4640      	mov	r0, r8
 8014510:	4649      	mov	r1, r9
 8014512:	f7ec f9c5 	bl	80008a0 <__aeabi_ddiv>
 8014516:	4602      	mov	r2, r0
 8014518:	460b      	mov	r3, r1
 801451a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801451e:	ed97 0b04 	vldr	d0, [r7, #16]
 8014522:	f00a f8ed 	bl	801e700 <floor>
 8014526:	ec53 2b10 	vmov	r2, r3, d0
 801452a:	4610      	mov	r0, r2
 801452c:	4619      	mov	r1, r3
 801452e:	f7ec fb3d 	bl	8000bac <__aeabi_d2iz>
 8014532:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8014534:	4618      	mov	r0, r3
 8014536:	371c      	adds	r7, #28
 8014538:	46bd      	mov	sp, r7
 801453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801453e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801453e:	b480      	push	{r7}
 8014540:	b083      	sub	sp, #12
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
 8014546:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	ed93 7a00 	vldr	s14, [r3]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	edd3 7a00 	vldr	s15, [r3]
 8014554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801455c:	d501      	bpl.n	8014562 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	e000      	b.n	8014564 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8014562:	687b      	ldr	r3, [r7, #4]
    }
 8014564:	4618      	mov	r0, r3
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	ed93 7a00 	vldr	s14, [r3]
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	edd3 7a00 	vldr	s15, [r3]
 8014586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458e:	d501      	bpl.n	8014594 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	e000      	b.n	8014596 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8014594:	687b      	ldr	r3, [r7, #4]
    }
 8014596:	4618      	mov	r0, r3
 8014598:	370c      	adds	r7, #12
 801459a:	46bd      	mov	sp, r7
 801459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a0:	4770      	bx	lr

080145a2 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80145a2:	b580      	push	{r7, lr}
 80145a4:	b082      	sub	sp, #8
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	ed87 0b00 	vstr	d0, [r7]
 80145ac:	ed97 0b00 	vldr	d0, [r7]
 80145b0:	f00a f95e 	bl	801e870 <round>
 80145b4:	eeb0 7a40 	vmov.f32	s14, s0
 80145b8:	eef0 7a60 	vmov.f32	s15, s1
 80145bc:	eeb0 0a47 	vmov.f32	s0, s14
 80145c0:	eef0 0a67 	vmov.f32	s1, s15
 80145c4:	3708      	adds	r7, #8
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b082      	sub	sp, #8
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80145d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80145d8:	f7ec fed6 	bl	8001388 <_ZSt5roundf>
 80145dc:	eef0 7a40 	vmov.f32	s15, s0
 80145e0:	eeb0 0a67 	vmov.f32	s0, s15
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80145ea:	b480      	push	{r7}
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80145f2:	4618      	mov	r0, r3
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80145fc:	b480      	push	{r7}
 80145fe:	af00      	add	r7, sp, #0
 8014600:	237f      	movs	r3, #127	; 0x7f
 8014602:	4618      	mov	r0, r3
 8014604:	46bd      	mov	sp, r7
 8014606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460a:	4770      	bx	lr

0801460c <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801460c:	b480      	push	{r7}
 801460e:	af00      	add	r7, sp, #0
 8014610:	2300      	movs	r3, #0
 8014612:	4618      	mov	r0, r3
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr

0801461c <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801461c:	b480      	push	{r7}
 801461e:	af00      	add	r7, sp, #0
 8014620:	23ff      	movs	r3, #255	; 0xff
 8014622:	4618      	mov	r0, r3
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801462c:	b480      	push	{r7}
 801462e:	af00      	add	r7, sp, #0
 8014630:	4b02      	ldr	r3, [pc, #8]	; (801463c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8014632:	4618      	mov	r0, r3
 8014634:	46bd      	mov	sp, r7
 8014636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463a:	4770      	bx	lr
 801463c:	ffff8000 	.word	0xffff8000

08014640 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8014640:	b480      	push	{r7}
 8014642:	af00      	add	r7, sp, #0
 8014644:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014648:	4618      	mov	r0, r3
 801464a:	46bd      	mov	sp, r7
 801464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014650:	4770      	bx	lr

08014652 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8014652:	b480      	push	{r7}
 8014654:	b083      	sub	sp, #12
 8014656:	af00      	add	r7, sp, #0
 8014658:	6078      	str	r0, [r7, #4]
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	689b      	ldr	r3, [r3, #8]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	4618      	mov	r0, r3
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr

0801466c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 801466c:	b480      	push	{r7}
 801466e:	b083      	sub	sp, #12
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	689a      	ldr	r2, [r3, #8]
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	4413      	add	r3, r2
 8014680:	685b      	ldr	r3, [r3, #4]
}
 8014682:	4618      	mov	r0, r3
 8014684:	370c      	adds	r7, #12
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 801468e:	b4b0      	push	{r4, r5, r7}
 8014690:	b087      	sub	sp, #28
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8014696:	f04f 0001 	mov.w	r0, #1
 801469a:	f04f 0100 	mov.w	r1, #0
 801469e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 80146a2:	2100      	movs	r1, #0
 80146a4:	60f9      	str	r1, [r7, #12]
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	6809      	ldr	r1, [r1, #0]
 80146aa:	68f8      	ldr	r0, [r7, #12]
 80146ac:	4288      	cmp	r0, r1
 80146ae:	da1b      	bge.n	80146e8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	68f9      	ldr	r1, [r7, #12]
 80146b4:	0089      	lsls	r1, r1, #2
 80146b6:	4401      	add	r1, r0
 80146b8:	6849      	ldr	r1, [r1, #4]
 80146ba:	17c8      	asrs	r0, r1, #31
 80146bc:	460c      	mov	r4, r1
 80146be:	4605      	mov	r5, r0
 80146c0:	6979      	ldr	r1, [r7, #20]
 80146c2:	fb04 f001 	mul.w	r0, r4, r1
 80146c6:	6939      	ldr	r1, [r7, #16]
 80146c8:	fb05 f101 	mul.w	r1, r5, r1
 80146cc:	4401      	add	r1, r0
 80146ce:	6938      	ldr	r0, [r7, #16]
 80146d0:	fba0 2304 	umull	r2, r3, r0, r4
 80146d4:	4419      	add	r1, r3
 80146d6:	460b      	mov	r3, r1
 80146d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80146dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 80146e0:	68f9      	ldr	r1, [r7, #12]
 80146e2:	3101      	adds	r1, #1
 80146e4:	60f9      	str	r1, [r7, #12]
 80146e6:	e7de      	b.n	80146a6 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 80146e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80146ec:	4610      	mov	r0, r2
 80146ee:	4619      	mov	r1, r3
 80146f0:	371c      	adds	r7, #28
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bcb0      	pop	{r4, r5, r7}
 80146f6:	4770      	bx	lr

080146f8 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	689b      	ldr	r3, [r3, #8]
 8014704:	4618      	mov	r0, r3
 8014706:	f7ff ffc2 	bl	801468e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 801470a:	4602      	mov	r2, r0
 801470c:	460b      	mov	r3, r1
}
 801470e:	4610      	mov	r0, r2
 8014710:	4619      	mov	r1, r3
 8014712:	3708      	adds	r7, #8
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8014718:	b480      	push	{r7}
 801471a:	b083      	sub	sp, #12
 801471c:	af00      	add	r7, sp, #0
 801471e:	ed87 0b00 	vstr	d0, [r7]
 8014722:	683a      	ldr	r2, [r7, #0]
 8014724:	6879      	ldr	r1, [r7, #4]
 8014726:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801472a:	ec43 2b17 	vmov	d7, r2, r3
 801472e:	eeb0 0a47 	vmov.f32	s0, s14
 8014732:	eef0 0a67 	vmov.f32	s1, s15
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr

08014740 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	689b      	ldr	r3, [r3, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d005      	beq.n	801475e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	689a      	ldr	r2, [r3, #8]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	019b      	lsls	r3, r3, #6
 801475a:	4413      	add	r3, r2
 801475c:	e006      	b.n	801476c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014762:	6839      	ldr	r1, [r7, #0]
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	4798      	blx	r3
 8014768:	4603      	mov	r3, r0
 801476a:	bf00      	nop
  }
}
 801476c:	4618      	mov	r0, r3
 801476e:	3708      	adds	r7, #8
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8014774:	b480      	push	{r7}
 8014776:	b087      	sub	sp, #28
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
 8014780:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	2b00      	cmp	r3, #0
 8014786:	db0f      	blt.n	80147a8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8014788:	68ba      	ldr	r2, [r7, #8]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	429a      	cmp	r2, r3
 801478e:	da0b      	bge.n	80147a8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	009b      	lsls	r3, r3, #2
 8014794:	683a      	ldr	r2, [r7, #0]
 8014796:	4413      	add	r3, r2
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a2:	d001      	beq.n	80147a8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	e001      	b.n	80147ac <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 80147a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	371c      	adds	r7, #28
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b086      	sub	sp, #24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80147c8:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80147d0:	6879      	ldr	r1, [r7, #4]
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f7ff ffce 	bl	8014774 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80147d8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	da01      	bge.n	80147e4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80147e0:	2300      	movs	r3, #0
 80147e2:	e005      	b.n	80147f0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80147e4:	6979      	ldr	r1, [r7, #20]
 80147e6:	68f8      	ldr	r0, [r7, #12]
 80147e8:	f7ff ffaa 	bl	8014740 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80147ec:	4603      	mov	r3, r0
 80147ee:	bf00      	nop
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	3718      	adds	r7, #24
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	68b9      	ldr	r1, [r7, #8]
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f7ff ffd5 	bl	80147b8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801480e:	4603      	mov	r3, r0
}
 8014810:	4618      	mov	r0, r3
 8014812:	3710      	adds	r7, #16
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8014818:	b580      	push	{r7, lr}
 801481a:	b086      	sub	sp, #24
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8014828:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8014830:	6879      	ldr	r1, [r7, #4]
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f7ff ff9e 	bl	8014774 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8014838:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	2b00      	cmp	r3, #0
 801483e:	da01      	bge.n	8014844 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8014840:	2300      	movs	r3, #0
 8014842:	e005      	b.n	8014850 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8014844:	6979      	ldr	r1, [r7, #20]
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f7ff ff7a 	bl	8014740 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801484c:	4603      	mov	r3, r0
 801484e:	bf00      	nop
}
 8014850:	4618      	mov	r0, r3
 8014852:	3718      	adds	r7, #24
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	68b9      	ldr	r1, [r7, #8]
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f7ff ffc5 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801486e:	4603      	mov	r3, r0
}
 8014870:	4618      	mov	r0, r3
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8014878:	b5b0      	push	{r4, r5, r7, lr}
 801487a:	b09c      	sub	sp, #112	; 0x70
 801487c:	af04      	add	r7, sp, #16
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
 8014884:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801488c:	2b01      	cmp	r3, #1
 801488e:	d013      	beq.n	80148b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	695c      	ldr	r4, [r3, #20]
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801489a:	461a      	mov	r2, r3
 801489c:	2301      	movs	r3, #1
 801489e:	9303      	str	r3, [sp, #12]
 80148a0:	9202      	str	r2, [sp, #8]
 80148a2:	4b98      	ldr	r3, [pc, #608]	; (8014b04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80148a4:	9301      	str	r3, [sp, #4]
 80148a6:	4b98      	ldr	r3, [pc, #608]	; (8014b08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	23e0      	movs	r3, #224	; 0xe0
 80148ac:	4a97      	ldr	r2, [pc, #604]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80148ae:	4998      	ldr	r1, [pc, #608]	; (8014b10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	47a0      	blx	r4
 80148b4:	2301      	movs	r3, #1
 80148b6:	e173      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d013      	beq.n	80148ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	695c      	ldr	r4, [r3, #20]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148cc:	461a      	mov	r2, r3
 80148ce:	2301      	movs	r3, #1
 80148d0:	9303      	str	r3, [sp, #12]
 80148d2:	9202      	str	r2, [sp, #8]
 80148d4:	4b8b      	ldr	r3, [pc, #556]	; (8014b04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80148d6:	9301      	str	r3, [sp, #4]
 80148d8:	4b8e      	ldr	r3, [pc, #568]	; (8014b14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 80148da:	9300      	str	r3, [sp, #0]
 80148dc:	23e2      	movs	r3, #226	; 0xe2
 80148de:	4a8b      	ldr	r2, [pc, #556]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80148e0:	498b      	ldr	r1, [pc, #556]	; (8014b10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	47a0      	blx	r4
 80148e6:	2301      	movs	r3, #1
 80148e8:	e15a      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ee:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 80148f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d10a      	bne.n	801490c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	695c      	ldr	r4, [r3, #20]
 80148fa:	4b87      	ldr	r3, [pc, #540]	; (8014b18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 80148fc:	9300      	str	r3, [sp, #0]
 80148fe:	23ed      	movs	r3, #237	; 0xed
 8014900:	4a82      	ldr	r2, [pc, #520]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8014902:	4986      	ldr	r1, [pc, #536]	; (8014b1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	47a0      	blx	r4
 8014908:	2301      	movs	r3, #1
 801490a:	e149      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 801490c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d10a      	bne.n	801492a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	695c      	ldr	r4, [r3, #20]
 8014918:	4b81      	ldr	r3, [pc, #516]	; (8014b20 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 801491a:	9300      	str	r3, [sp, #0]
 801491c:	23ee      	movs	r3, #238	; 0xee
 801491e:	4a7b      	ldr	r2, [pc, #492]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8014920:	497e      	ldr	r1, [pc, #504]	; (8014b1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8014922:	68f8      	ldr	r0, [r7, #12]
 8014924:	47a0      	blx	r4
 8014926:	2301      	movs	r3, #1
 8014928:	e13a      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 801492a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2b01      	cmp	r3, #1
 8014932:	bfcc      	ite	gt
 8014934:	2301      	movgt	r3, #1
 8014936:	2300      	movle	r3, #0
 8014938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 801493c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014940:	2b00      	cmp	r3, #0
 8014942:	d067      	beq.n	8014a14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	2b09      	cmp	r3, #9
 801494a:	d00e      	beq.n	801496a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	2b07      	cmp	r3, #7
 8014952:	d00a      	beq.n	801496a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	695c      	ldr	r4, [r3, #20]
 8014958:	4b72      	ldr	r3, [pc, #456]	; (8014b24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 801495a:	9300      	str	r3, [sp, #0]
 801495c:	23f2      	movs	r3, #242	; 0xf2
 801495e:	4a6b      	ldr	r2, [pc, #428]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8014960:	496e      	ldr	r1, [pc, #440]	; (8014b1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8014962:	68f8      	ldr	r0, [r7, #12]
 8014964:	47a0      	blx	r4
 8014966:	2301      	movs	r3, #1
 8014968:	e11a      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	2b09      	cmp	r3, #9
 8014970:	d012      	beq.n	8014998 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	695c      	ldr	r4, [r3, #20]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	461a      	mov	r2, r3
 801497c:	2309      	movs	r3, #9
 801497e:	9303      	str	r3, [sp, #12]
 8014980:	9202      	str	r2, [sp, #8]
 8014982:	4b69      	ldr	r3, [pc, #420]	; (8014b28 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 8014984:	9301      	str	r3, [sp, #4]
 8014986:	4b69      	ldr	r3, [pc, #420]	; (8014b2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8014988:	9300      	str	r3, [sp, #0]
 801498a:	23f4      	movs	r3, #244	; 0xf4
 801498c:	4a5f      	ldr	r2, [pc, #380]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801498e:	4960      	ldr	r1, [pc, #384]	; (8014b10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8014990:	68f8      	ldr	r0, [r7, #12]
 8014992:	47a0      	blx	r4
 8014994:	2301      	movs	r3, #1
 8014996:	e103      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8014998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d013      	beq.n	80149ce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	695c      	ldr	r4, [r3, #20]
 80149aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80149b4:	9203      	str	r2, [sp, #12]
 80149b6:	9302      	str	r3, [sp, #8]
 80149b8:	4b5d      	ldr	r3, [pc, #372]	; (8014b30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80149ba:	9301      	str	r3, [sp, #4]
 80149bc:	4b5d      	ldr	r3, [pc, #372]	; (8014b34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	23f5      	movs	r3, #245	; 0xf5
 80149c2:	4a52      	ldr	r2, [pc, #328]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80149c4:	4952      	ldr	r1, [pc, #328]	; (8014b10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	47a0      	blx	r4
 80149ca:	2301      	movs	r3, #1
 80149cc:	e0e8      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	689a      	ldr	r2, [r3, #8]
 80149d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80149d4:	689b      	ldr	r3, [r3, #8]
 80149d6:	009b      	lsls	r3, r3, #2
 80149d8:	4413      	add	r3, r2
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d017      	beq.n	8014a14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	695c      	ldr	r4, [r3, #20]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	689a      	ldr	r2, [r3, #8]
 80149ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80149ee:	689b      	ldr	r3, [r3, #8]
 80149f0:	009b      	lsls	r3, r3, #2
 80149f2:	4413      	add	r3, r2
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	9303      	str	r3, [sp, #12]
 80149f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149fc:	9302      	str	r3, [sp, #8]
 80149fe:	4b4e      	ldr	r3, [pc, #312]	; (8014b38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 8014a00:	9301      	str	r3, [sp, #4]
 8014a02:	4b4b      	ldr	r3, [pc, #300]	; (8014b30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	23f6      	movs	r3, #246	; 0xf6
 8014a08:	4a40      	ldr	r2, [pc, #256]	; (8014b0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8014a0a:	4941      	ldr	r1, [pc, #260]	; (8014b10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	47a0      	blx	r4
 8014a10:	2301      	movs	r3, #1
 8014a12:	e0c5      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	68db      	ldr	r3, [r3, #12]
 8014a18:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 8014a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014a1c:	68db      	ldr	r3, [r3, #12]
 8014a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 8014a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3304      	adds	r3, #4
 8014a26:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 8014a28:	2300      	movs	r3, #0
 8014a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014a32:	429a      	cmp	r2, r3
 8014a34:	da47      	bge.n	8014ac6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8014a36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d005      	beq.n	8014a4a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 8014a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a40:	009b      	lsls	r3, r3, #2
 8014a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a44:	4413      	add	r3, r2
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	e001      	b.n	8014a4e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 8014a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 8014a50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014a52:	f7eb fda3 	bl	800059c <__aeabi_f2d>
 8014a56:	4602      	mov	r2, r0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 8014a5e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014a60:	f7eb fd9c 	bl	800059c <__aeabi_f2d>
 8014a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014a68:	f7eb fdf0 	bl	800064c <__aeabi_dmul>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	460b      	mov	r3, r1
 8014a70:	4614      	mov	r4, r2
 8014a72:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8014a74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014a76:	f7eb fd91 	bl	800059c <__aeabi_f2d>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8014a7e:	4620      	mov	r0, r4
 8014a80:	4629      	mov	r1, r5
 8014a82:	f7eb ff0d 	bl	80008a0 <__aeabi_ddiv>
 8014a86:	4602      	mov	r2, r0
 8014a88:	460b      	mov	r3, r1
 8014a8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8014a8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014a96:	4611      	mov	r1, r2
 8014a98:	4618      	mov	r0, r3
 8014a9a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8014a9e:	f7ff fbd3 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8014aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014aaa:	4413      	add	r3, r2
 8014aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014aae:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8014ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014ab8:	4413      	add	r3, r2
 8014aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014abc:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8014abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014ac4:	e7b2      	b.n	8014a2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	2b03      	cmp	r3, #3
 8014acc:	d146      	bne.n	8014b5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8014ace:	f04f 0200 	mov.w	r2, #0
 8014ad2:	f04f 0300 	mov.w	r3, #0
 8014ad6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8014ada:	f107 0318 	add.w	r3, r7, #24
 8014ade:	9301      	str	r3, [sp, #4]
 8014ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014ae2:	9300      	str	r3, [sp, #0]
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	68b9      	ldr	r1, [r7, #8]
 8014aea:	68f8      	ldr	r0, [r7, #12]
 8014aec:	f000 f85c 	bl	8014ba8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8014af0:	4603      	mov	r3, r0
 8014af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d01e      	beq.n	8014b3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 8014afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b02:	e04d      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 8014b04:	08021cfc 	.word	0x08021cfc
 8014b08:	08021d18 	.word	0x08021d18
 8014b0c:	08021c4c 	.word	0x08021c4c
 8014b10:	08021ce0 	.word	0x08021ce0
 8014b14:	08021d34 	.word	0x08021d34
 8014b18:	08021d68 	.word	0x08021d68
 8014b1c:	08021d50 	.word	0x08021d50
 8014b20:	08021d7c 	.word	0x08021d7c
 8014b24:	08021d98 	.word	0x08021d98
 8014b28:	08021dd4 	.word	0x08021dd4
 8014b2c:	08021de0 	.word	0x08021de0
 8014b30:	08021df0 	.word	0x08021df0
 8014b34:	08021e00 	.word	0x08021e00
 8014b38:	08021e24 	.word	0x08021e24
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8014b3c:	ed97 7b06 	vldr	d7, [r7, #24]
 8014b40:	f107 0314 	add.w	r3, r7, #20
 8014b44:	4619      	mov	r1, r3
 8014b46:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8014b48:	eeb0 0a47 	vmov.f32	s0, s14
 8014b4c:	eef0 0a67 	vmov.f32	s1, s15
 8014b50:	f7ff fb7a 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	425a      	negs	r2, r3
 8014b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b5a:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	2b09      	cmp	r3, #9
 8014b62:	d007      	beq.n	8014b74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	2b03      	cmp	r3, #3
 8014b6a:	d003      	beq.n	8014b74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8014b70:	2b07      	cmp	r3, #7
 8014b72:	d114      	bne.n	8014b9e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8014b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b76:	7819      	ldrb	r1, [r3, #0]
 8014b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b7c:	9300      	str	r3, [sp, #0]
 8014b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014b82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014b84:	68f8      	ldr	r0, [r7, #12]
 8014b86:	f000 f99b 	bl	8014ec0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8014b90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d002      	beq.n	8014b9e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 8014b98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014b9c:	e000      	b.n	8014ba0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8014b9e:	2300      	movs	r3, #0
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3760      	adds	r7, #96	; 0x60
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bdb0      	pop	{r4, r5, r7, pc}

08014ba8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8014ba8:	b5b0      	push	{r4, r5, r7, lr}
 8014baa:	b08e      	sub	sp, #56	; 0x38
 8014bac:	af02      	add	r7, sp, #8
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7eb fcee 	bl	800059c <__aeabi_f2d>
 8014bc0:	4604      	mov	r4, r0
 8014bc2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7eb fce7 	bl	800059c <__aeabi_f2d>
 8014bce:	4602      	mov	r2, r0
 8014bd0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	f7eb fd39 	bl	800064c <__aeabi_dmul>
 8014bda:	4602      	mov	r2, r0
 8014bdc:	460b      	mov	r3, r1
 8014bde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d04b      	beq.n	8014c80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7eb fcd5 	bl	800059c <__aeabi_f2d>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8014bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014bfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014c02:	f7eb fb6b 	bl	80002dc <__aeabi_dsub>
 8014c06:	4602      	mov	r2, r0
 8014c08:	460b      	mov	r3, r1
 8014c0a:	ec43 2b17 	vmov	d7, r2, r3
 8014c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8014c12:	eef0 0a67 	vmov.f32	s1, s15
 8014c16:	f7ff fd7f 	bl	8014718 <_ZSt3absd>
 8014c1a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8014c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7eb fcba 	bl	800059c <__aeabi_f2d>
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8014c30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014c38:	f7eb fe32 	bl	80008a0 <__aeabi_ddiv>
 8014c3c:	4602      	mov	r2, r0
 8014c3e:	460b      	mov	r3, r1
 8014c40:	4610      	mov	r0, r2
 8014c42:	4619      	mov	r1, r3
 8014c44:	2301      	movs	r3, #1
 8014c46:	461c      	mov	r4, r3
 8014c48:	a318      	add	r3, pc, #96	; (adr r3, 8014cac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8014c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4e:	f7eb ff79 	bl	8000b44 <__aeabi_dcmple>
 8014c52:	4603      	mov	r3, r0
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d101      	bne.n	8014c5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8014c58:	2300      	movs	r3, #0
 8014c5a:	461c      	mov	r4, r3
 8014c5c:	b2e3      	uxtb	r3, r4
 8014c5e:	f083 0301 	eor.w	r3, r3, #1
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d00b      	beq.n	8014c80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	695c      	ldr	r4, [r3, #20]
 8014c6c:	4b0c      	ldr	r3, [pc, #48]	; (8014ca0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8014c74:	4a0b      	ldr	r2, [pc, #44]	; (8014ca4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8014c76:	490c      	ldr	r1, [pc, #48]	; (8014ca8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	47a0      	blx	r4
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e009      	b.n	8014c94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8014c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	68b9      	ldr	r1, [r7, #8]
 8014c8a:	68f8      	ldr	r0, [r7, #12]
 8014c8c:	f000 f812 	bl	8014cb4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8014c90:	4603      	mov	r3, r0
                                          multiplier);
 8014c92:	bf00      	nop
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3730      	adds	r7, #48	; 0x30
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8014c9c:	f3af 8000 	nop.w
 8014ca0:	08021e64 	.word	0x08021e64
 8014ca4:	08021c4c 	.word	0x08021c4c
 8014ca8:	08021d50 	.word	0x08021d50
 8014cac:	47ae147b 	.word	0x47ae147b
 8014cb0:	3f947ae1 	.word	0x3f947ae1

08014cb4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8014cb4:	b590      	push	{r4, r7, lr}
 8014cb6:	b089      	sub	sp, #36	; 0x24
 8014cb8:	af02      	add	r7, sp, #8
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
 8014cc0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	edd3 7a03 	vldr	s15, [r3, #12]
 8014cce:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8014cd2:	ee17 0a90 	vmov	r0, s15
 8014cd6:	f7eb fc61 	bl	800059c <__aeabi_f2d>
 8014cda:	4602      	mov	r2, r0
 8014cdc:	460b      	mov	r3, r1
 8014cde:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	461c      	mov	r4, r3
 8014ce6:	f04f 0200 	mov.w	r2, #0
 8014cea:	f04f 0300 	mov.w	r3, #0
 8014cee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014cf2:	f7eb ff31 	bl	8000b58 <__aeabi_dcmpge>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d101      	bne.n	8014d00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	461c      	mov	r4, r3
 8014d00:	b2e3      	uxtb	r3, r4
 8014d02:	f083 0301 	eor.w	r3, r3, #1
 8014d06:	b2db      	uxtb	r3, r3
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d00b      	beq.n	8014d24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	695c      	ldr	r4, [r3, #20]
 8014d10:	4b0f      	ldr	r3, [pc, #60]	; (8014d50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8014d12:	9300      	str	r3, [sp, #0]
 8014d14:	f240 1351 	movw	r3, #337	; 0x151
 8014d18:	4a0e      	ldr	r2, [pc, #56]	; (8014d54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8014d1a:	490f      	ldr	r1, [pc, #60]	; (8014d58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	47a0      	blx	r4
 8014d20:	2301      	movs	r3, #1
 8014d22:	e010      	b.n	8014d46 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7eb fc37 	bl	800059c <__aeabi_f2d>
 8014d2e:	4602      	mov	r2, r0
 8014d30:	460b      	mov	r3, r1
 8014d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014d36:	f7eb fdb3 	bl	80008a0 <__aeabi_ddiv>
 8014d3a:	4602      	mov	r2, r0
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014d40:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8014d44:	2300      	movs	r3, #0
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	371c      	adds	r7, #28
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd90      	pop	{r4, r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	08021e88 	.word	0x08021e88
 8014d54:	08021c4c 	.word	0x08021c4c
 8014d58:	08021d50 	.word	0x08021d50

08014d5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	ed87 0a00 	vstr	s0, [r7]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8014d6e:	ed97 7a00 	vldr	s14, [r7]
 8014d72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014d76:	eeb0 0a66 	vmov.f32	s0, s13
 8014d7a:	f7ff fc26 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8014d7e:	eef0 7a40 	vmov.f32	s15, s0
 8014d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d86:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8014d8e:	4413      	add	r3, r2
  };
 8014d90:	4618      	mov	r0, r3
 8014d92:	3708      	adds	r7, #8
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b08e      	sub	sp, #56	; 0x38
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60b9      	str	r1, [r7, #8]
 8014da0:	607a      	str	r2, [r7, #4]
 8014da2:	603b      	str	r3, [r7, #0]
 8014da4:	4603      	mov	r3, r0
 8014da6:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	691b      	ldr	r3, [r3, #16]
 8014db2:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8014db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db6:	617b      	str	r3, [r7, #20]
 8014db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dba:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8014dbc:	7bfb      	ldrb	r3, [r7, #15]
 8014dbe:	2b01      	cmp	r3, #1
 8014dc0:	d118      	bne.n	8014df4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8014dc2:	f107 0314 	add.w	r3, r7, #20
 8014dc6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8014ebc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7ff ffc6 	bl	8014d5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	61fb      	str	r3, [r7, #28]
 8014dd4:	f107 021c 	add.w	r2, r7, #28
 8014dd8:	f107 0308 	add.w	r3, r7, #8
 8014ddc:	4611      	mov	r1, r2
 8014dde:	4618      	mov	r0, r3
 8014de0:	f000 f8ea 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8014de4:	4603      	mov	r3, r0
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dea:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014df0:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8014df2:	e05f      	b.n	8014eb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8014df4:	7bfb      	ldrb	r3, [r7, #15]
 8014df6:	2b03      	cmp	r3, #3
 8014df8:	d129      	bne.n	8014e4e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8014dfa:	f107 0314 	add.w	r3, r7, #20
 8014dfe:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8014ebc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7ff ffaa 	bl	8014d5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	623b      	str	r3, [r7, #32]
 8014e0c:	f107 0220 	add.w	r2, r7, #32
 8014e10:	f107 0308 	add.w	r3, r7, #8
 8014e14:	4611      	mov	r1, r2
 8014e16:	4618      	mov	r0, r3
 8014e18:	f000 f8ce 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e22:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8014e24:	f107 0314 	add.w	r3, r7, #20
 8014e28:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7ff ff95 	bl	8014d5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8014e32:	4603      	mov	r3, r0
 8014e34:	627b      	str	r3, [r7, #36]	; 0x24
 8014e36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014e3a:	1d3b      	adds	r3, r7, #4
 8014e3c:	4611      	mov	r1, r2
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f000 f8a6 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8014e44:	4603      	mov	r3, r0
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e4a:	601a      	str	r2, [r3, #0]
}
 8014e4c:	e032      	b.n	8014eb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8014e4e:	7bfb      	ldrb	r3, [r7, #15]
 8014e50:	2b02      	cmp	r3, #2
 8014e52:	d129      	bne.n	8014ea8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8014e54:	f107 0314 	add.w	r3, r7, #20
 8014e58:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7ff ff7d 	bl	8014d5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8014e62:	4603      	mov	r3, r0
 8014e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014e6a:	f107 0308 	add.w	r3, r7, #8
 8014e6e:	4611      	mov	r1, r2
 8014e70:	4618      	mov	r0, r3
 8014e72:	f000 f8a1 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8014e76:	4603      	mov	r3, r0
 8014e78:	681a      	ldr	r2, [r3, #0]
 8014e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e7c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8014e7e:	f107 0314 	add.w	r3, r7, #20
 8014e82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7ff ff68 	bl	8014d5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e90:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014e94:	1d3b      	adds	r3, r7, #4
 8014e96:	4611      	mov	r1, r2
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f000 f879 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ea4:	601a      	str	r2, [r3, #0]
}
 8014ea6:	e005      	b.n	8014eb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8014ea8:	68ba      	ldr	r2, [r7, #8]
 8014eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eac:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eb2:	601a      	str	r2, [r3, #0]
}
 8014eb4:	bf00      	nop
 8014eb6:	3738      	adds	r7, #56	; 0x38
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}
 8014ebc:	00000000 	.word	0x00000000

08014ec0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8014ec0:	b590      	push	{r4, r7, lr}
 8014ec2:	b089      	sub	sp, #36	; 0x24
 8014ec4:	af02      	add	r7, sp, #8
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	607a      	str	r2, [r7, #4]
 8014eca:	603b      	str	r3, [r7, #0]
 8014ecc:	460b      	mov	r3, r1
 8014ece:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	2b03      	cmp	r3, #3
 8014ede:	d108      	bne.n	8014ef2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8014ee0:	f7ff fb94 	bl	801460c <_ZNSt14numeric_limitsIhE3minEv>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8014ee8:	f7ff fb98 	bl	801461c <_ZNSt14numeric_limitsIhE3maxEv>
 8014eec:	4603      	mov	r3, r0
 8014eee:	613b      	str	r3, [r7, #16]
 8014ef0:	e025      	b.n	8014f3e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	2b09      	cmp	r3, #9
 8014ef8:	d108      	bne.n	8014f0c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8014efa:	f7ff fb76 	bl	80145ea <_ZNSt14numeric_limitsIaE3minEv>
 8014efe:	4603      	mov	r3, r0
 8014f00:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8014f02:	f7ff fb7b 	bl	80145fc <_ZNSt14numeric_limitsIaE3maxEv>
 8014f06:	4603      	mov	r3, r0
 8014f08:	613b      	str	r3, [r7, #16]
 8014f0a:	e018      	b.n	8014f3e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	2b07      	cmp	r3, #7
 8014f12:	d108      	bne.n	8014f26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8014f14:	f7ff fb8a 	bl	801462c <_ZNSt14numeric_limitsIsE3minEv>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8014f1c:	f7ff fb90 	bl	8014640 <_ZNSt14numeric_limitsIsE3maxEv>
 8014f20:	4603      	mov	r3, r0
 8014f22:	613b      	str	r3, [r7, #16]
 8014f24:	e00b      	b.n	8014f3e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	695c      	ldr	r4, [r3, #20]
 8014f2a:	4b0c      	ldr	r3, [pc, #48]	; (8014f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8014f2c:	9300      	str	r3, [sp, #0]
 8014f2e:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8014f32:	4a0b      	ldr	r2, [pc, #44]	; (8014f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8014f34:	490b      	ldr	r1, [pc, #44]	; (8014f64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8014f36:	68f8      	ldr	r0, [r7, #12]
 8014f38:	47a0      	blx	r4
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e00a      	b.n	8014f54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8014f3e:	7af8      	ldrb	r0, [r7, #11]
 8014f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f42:	9301      	str	r3, [sp, #4]
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	693a      	ldr	r2, [r7, #16]
 8014f4c:	6979      	ldr	r1, [r7, #20]
 8014f4e:	f7ff ff23 	bl	8014d98 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8014f52:	2300      	movs	r3, #0
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	371c      	adds	r7, #28
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd90      	pop	{r4, r7, pc}
 8014f5c:	08021ea4 	.word	0x08021ea4
 8014f60:	08021c4c 	.word	0x08021c4c
 8014f64:	08021d50 	.word	0x08021d50

08014f68 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014f68:	b480      	push	{r7}
 8014f6a:	b083      	sub	sp, #12
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681a      	ldr	r2, [r3, #0]
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	da01      	bge.n	8014f82 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	e000      	b.n	8014f84 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8014f82:	687b      	ldr	r3, [r7, #4]
    }
 8014f84:	4618      	mov	r0, r3
 8014f86:	370c      	adds	r7, #12
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr

08014f90 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8014f90:	b480      	push	{r7}
 8014f92:	b083      	sub	sp, #12
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	da01      	bge.n	8014faa <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	e000      	b.n	8014fac <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8014faa:	687b      	ldr	r3, [r7, #4]
    }
 8014fac:	4618      	mov	r0, r3
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr

08014fb8 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014fb8:	b480      	push	{r7}
 8014fba:	b083      	sub	sp, #12
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681a      	ldr	r2, [r3, #0]
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	da01      	bge.n	8014fd2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	e000      	b.n	8014fd4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8014fd2:	687b      	ldr	r3, [r7, #4]
    }
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	370c      	adds	r7, #12
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr

08014fe0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	601a      	str	r2, [r3, #0]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b084      	sub	sp, #16
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	607a      	str	r2, [r7, #4]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2200      	movs	r2, #0
 801500c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	68b9      	ldr	r1, [r7, #8]
 8015012:	68f8      	ldr	r0, [r7, #12]
 8015014:	f000 f866 	bl	80150e4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	4618      	mov	r0, r3
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8015022:	b580      	push	{r7, lr}
 8015024:	b082      	sub	sp, #8
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2b05      	cmp	r3, #5
 8015030:	dd08      	ble.n	8015044 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d004      	beq.n	8015044 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	4618      	mov	r0, r3
 8015040:	f009 fb36 	bl	801e6b0 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	4618      	mov	r0, r3
 8015048:	3708      	adds	r7, #8
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801504e:	b480      	push	{r7}
 8015050:	b083      	sub	sp, #12
 8015052:	af00      	add	r7, sp, #0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	4618      	mov	r0, r3
 801505c:	370c      	adds	r7, #12
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8015066:	b480      	push	{r7}
 8015068:	b083      	sub	sp, #12
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b05      	cmp	r3, #5
 8015074:	dd02      	ble.n	801507c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	e001      	b.n	8015080 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	3304      	adds	r3, #4
  }
 8015080:	4618      	mov	r0, r3
 8015082:	370c      	adds	r7, #12
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr

0801508c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2b05      	cmp	r3, #5
 801509c:	dd08      	ble.n	80150b0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d004      	beq.n	80150b0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f009 fb00 	bl	801e6b0 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	2b05      	cmp	r3, #5
 80150ba:	dd0f      	ble.n	80150dc <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80150c2:	4293      	cmp	r3, r2
 80150c4:	d201      	bcs.n	80150ca <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	e001      	b.n	80150ce <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 80150ca:	f04f 33ff 	mov.w	r3, #4294967295
 80150ce:	4618      	mov	r0, r3
 80150d0:	f009 fb01 	bl	801e6d6 <_Znaj>
 80150d4:	4603      	mov	r3, r0
 80150d6:	461a      	mov	r2, r3
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80150dc:	bf00      	nop
 80150de:	3708      	adds	r7, #8
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b086      	sub	sp, #24
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 80150f0:	68b9      	ldr	r1, [r7, #8]
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f7ff ffca 	bl	801508c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	f7ff ffb4 	bl	8015066 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80150fe:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	461a      	mov	r2, r3
 8015106:	6879      	ldr	r1, [r7, #4]
 8015108:	6978      	ldr	r0, [r7, #20]
 801510a:	f00a fe65 	bl	801fdd8 <memcpy>
  }
 801510e:	bf00      	nop
 8015110:	3718      	adds	r7, #24
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8015116:	b580      	push	{r7, lr}
 8015118:	b086      	sub	sp, #24
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d103      	bne.n	801512e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7ff ff5a 	bl	8014fe0 <_ZN6tflite12RuntimeShapeC1Ev>
 801512c:	e00d      	b.n	801514a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	689b      	ldr	r3, [r3, #8]
 8015132:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	3304      	adds	r3, #4
 801513e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8015140:	68fa      	ldr	r2, [r7, #12]
 8015142:	6939      	ldr	r1, [r7, #16]
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7ff ff59 	bl	8014ffc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	3718      	adds	r7, #24
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
	...

08015154 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	6039      	str	r1, [r7, #0]
 801515e:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8015160:	79fb      	ldrb	r3, [r7, #7]
 8015162:	3b01      	subs	r3, #1
 8015164:	2b0f      	cmp	r3, #15
 8015166:	d857      	bhi.n	8015218 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8015168:	a201      	add	r2, pc, #4	; (adr r2, 8015170 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 801516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801516e:	bf00      	nop
 8015170:	080151b9 	.word	0x080151b9
 8015174:	080151d1 	.word	0x080151d1
 8015178:	080151e1 	.word	0x080151e1
 801517c:	080151f1 	.word	0x080151f1
 8015180:	08015219 	.word	0x08015219
 8015184:	08015201 	.word	0x08015201
 8015188:	080151c9 	.word	0x080151c9
 801518c:	08015209 	.word	0x08015209
 8015190:	080151e9 	.word	0x080151e9
 8015194:	080151b1 	.word	0x080151b1
 8015198:	080151c1 	.word	0x080151c1
 801519c:	08015211 	.word	0x08015211
 80151a0:	080151f9 	.word	0x080151f9
 80151a4:	08015219 	.word	0x08015219
 80151a8:	08015219 	.word	0x08015219
 80151ac:	080151d9 	.word	0x080151d9
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	2202      	movs	r2, #2
 80151b4:	601a      	str	r2, [r3, #0]
      break;
 80151b6:	e031      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	2204      	movs	r2, #4
 80151bc:	601a      	str	r2, [r3, #0]
      break;
 80151be:	e02d      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	2208      	movs	r2, #8
 80151c4:	601a      	str	r2, [r3, #0]
      break;
 80151c6:	e029      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	2202      	movs	r2, #2
 80151cc:	601a      	str	r2, [r3, #0]
      break;
 80151ce:	e025      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	2204      	movs	r2, #4
 80151d4:	601a      	str	r2, [r3, #0]
      break;
 80151d6:	e021      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	2204      	movs	r2, #4
 80151dc:	601a      	str	r2, [r3, #0]
      break;
 80151de:	e01d      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	2201      	movs	r2, #1
 80151e4:	601a      	str	r2, [r3, #0]
      break;
 80151e6:	e019      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	2201      	movs	r2, #1
 80151ec:	601a      	str	r2, [r3, #0]
      break;
 80151ee:	e015      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	2208      	movs	r2, #8
 80151f4:	601a      	str	r2, [r3, #0]
      break;
 80151f6:	e011      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	2208      	movs	r2, #8
 80151fc:	601a      	str	r2, [r3, #0]
      break;
 80151fe:	e00d      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	2201      	movs	r2, #1
 8015204:	601a      	str	r2, [r3, #0]
      break;
 8015206:	e009      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2208      	movs	r2, #8
 801520c:	601a      	str	r2, [r3, #0]
      break;
 801520e:	e005      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	2210      	movs	r2, #16
 8015214:	601a      	str	r2, [r3, #0]
      break;
 8015216:	e001      	b.n	801521c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8015218:	2301      	movs	r3, #1
 801521a:	e000      	b.n	801521e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 801521c:	2300      	movs	r3, #0
}
 801521e:	4618      	mov	r0, r3
 8015220:	370c      	adds	r7, #12
 8015222:	46bd      	mov	sp, r7
 8015224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015228:	4770      	bx	lr
 801522a:	bf00      	nop

0801522c <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 801522c:	b480      	push	{r7}
 801522e:	b085      	sub	sp, #20
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  int result = 1;
 8015234:	2301      	movs	r3, #1
 8015236:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8015238:	2300      	movs	r3, #0
 801523a:	60bb      	str	r3, [r7, #8]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	68ba      	ldr	r2, [r7, #8]
 8015242:	429a      	cmp	r2, r3
 8015244:	da0c      	bge.n	8015260 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	4413      	add	r3, r2
 801524e:	685a      	ldr	r2, [r3, #4]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	fb02 f303 	mul.w	r3, r2, r3
 8015256:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	3301      	adds	r3, #1
 801525c:	60bb      	str	r3, [r7, #8]
 801525e:	e7ed      	b.n	801523c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 8015260:	68fb      	ldr	r3, [r7, #12]
}
 8015262:	4618      	mov	r0, r3
 8015264:	3714      	adds	r7, #20
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801526e:	b480      	push	{r7}
 8015270:	af00      	add	r7, sp, #0
 8015272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015276:	4618      	mov	r0, r3
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr

08015280 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8015280:	b480      	push	{r7}
 8015282:	af00      	add	r7, sp, #0
 8015284:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8015288:	ee07 3a90 	vmov	s15, r3
 801528c:	eeb0 0a67 	vmov.f32	s0, s15
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr

08015298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8015298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801529c:	b092      	sub	sp, #72	; 0x48
 801529e:	af00      	add	r7, sp, #0
 80152a0:	61f8      	str	r0, [r7, #28]
 80152a2:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80152a4:	69fa      	ldr	r2, [r7, #28]
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d107      	bne.n	80152bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80152ac:	f7ff ffdf 	bl	801526e <_ZNSt14numeric_limitsIlE3minEv>
 80152b0:	4602      	mov	r2, r0
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d101      	bne.n	80152bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80152b8:	2301      	movs	r3, #1
 80152ba:	e000      	b.n	80152be <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 80152bc:	2300      	movs	r3, #0
 80152be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	17da      	asrs	r2, r3, #31
 80152c6:	60bb      	str	r3, [r7, #8]
 80152c8:	60fa      	str	r2, [r7, #12]
 80152ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80152ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	17da      	asrs	r2, r3, #31
 80152d6:	603b      	str	r3, [r7, #0]
 80152d8:	607a      	str	r2, [r7, #4]
 80152da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 80152e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152e6:	fb03 f202 	mul.w	r2, r3, r2
 80152ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80152ee:	fb01 f303 	mul.w	r3, r1, r3
 80152f2:	4413      	add	r3, r2
 80152f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80152f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152f8:	fba1 4502 	umull	r4, r5, r1, r2
 80152fc:	442b      	add	r3, r5
 80152fe:	461d      	mov	r5, r3
 8015300:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8015304:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8015308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801530c:	2b00      	cmp	r3, #0
 801530e:	db02      	blt.n	8015316 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8015310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015314:	e000      	b.n	8015318 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8015316:	4b1a      	ldr	r3, [pc, #104]	; (8015380 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8015318:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531c:	17da      	asrs	r2, r3, #31
 801531e:	4698      	mov	r8, r3
 8015320:	4691      	mov	r9, r2
 8015322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015326:	eb18 0102 	adds.w	r1, r8, r2
 801532a:	6139      	str	r1, [r7, #16]
 801532c:	eb49 0303 	adc.w	r3, r9, r3
 8015330:	617b      	str	r3, [r7, #20]
 8015332:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015336:	2b00      	cmp	r3, #0
 8015338:	da07      	bge.n	801534a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801533a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801533e:	eb12 0a01 	adds.w	sl, r2, r1
 8015342:	f143 0b00 	adc.w	fp, r3, #0
 8015346:	4652      	mov	r2, sl
 8015348:	465b      	mov	r3, fp
 801534a:	f04f 0000 	mov.w	r0, #0
 801534e:	f04f 0100 	mov.w	r1, #0
 8015352:	0fd0      	lsrs	r0, r2, #31
 8015354:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015358:	17d9      	asrs	r1, r3, #31
 801535a:	4602      	mov	r2, r0
 801535c:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801535e:	4613      	mov	r3, r2
 8015360:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8015362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015366:	2b00      	cmp	r3, #0
 8015368:	d003      	beq.n	8015372 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801536a:	f7fe ff63 	bl	8014234 <_ZNSt14numeric_limitsIlE3maxEv>
 801536e:	4603      	mov	r3, r0
 8015370:	e000      	b.n	8015374 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8015372:	6a3b      	ldr	r3, [r7, #32]
}
 8015374:	4618      	mov	r0, r3
 8015376:	3748      	adds	r7, #72	; 0x48
 8015378:	46bd      	mov	sp, r7
 801537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801537e:	bf00      	nop
 8015380:	c0000001 	.word	0xc0000001

08015384 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	da01      	bge.n	8015398 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8015394:	f00a fca2 	bl	801fcdc <abort>
    TFLITE_DCHECK_LT(i, size_);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	683a      	ldr	r2, [r7, #0]
 801539e:	429a      	cmp	r2, r3
 80153a0:	db01      	blt.n	80153a6 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 80153a2:	f00a fc9b 	bl	801fcdc <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	2b05      	cmp	r3, #5
 80153ac:	dd06      	ble.n	80153bc <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	685a      	ldr	r2, [r3, #4]
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	009b      	lsls	r3, r3, #2
 80153b6:	4413      	add	r3, r2
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	e004      	b.n	80153c6 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	009b      	lsls	r3, r3, #2
 80153c2:	4413      	add	r3, r2
 80153c4:	685b      	ldr	r3, [r3, #4]
  }
 80153c6:	4618      	mov	r0, r3
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}

080153ce <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 80153ce:	b480      	push	{r7}
 80153d0:	b083      	sub	sp, #12
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	2b05      	cmp	r3, #5
 80153dc:	dd02      	ble.n	80153e4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	e001      	b.n	80153e8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	3304      	adds	r3, #4
  }
 80153e8:	4618      	mov	r0, r3
 80153ea:	370c      	adds	r7, #12
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr

080153f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b086      	sub	sp, #24
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 80153fc:	2301      	movs	r3, #1
 80153fe:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff ffe4 	bl	80153ce <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8015406:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8015408:	2300      	movs	r3, #0
 801540a:	613b      	str	r3, [r7, #16]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	693a      	ldr	r2, [r7, #16]
 8015412:	429a      	cmp	r2, r3
 8015414:	da0c      	bge.n	8015430 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	009b      	lsls	r3, r3, #2
 801541a:	68fa      	ldr	r2, [r7, #12]
 801541c:	4413      	add	r3, r2
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	fb02 f303 	mul.w	r3, r2, r3
 8015426:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	3301      	adds	r3, #1
 801542c:	613b      	str	r3, [r7, #16]
 801542e:	e7ed      	b.n	801540c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8015430:	697b      	ldr	r3, [r7, #20]
  }
 8015432:	4618      	mov	r0, r3
 8015434:	3718      	adds	r7, #24
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801543a:	b590      	push	{r4, r7, lr}
 801543c:	b085      	sub	sp, #20
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
 8015442:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7ff fe02 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801544a:	4604      	mov	r4, r0
 801544c:	6838      	ldr	r0, [r7, #0]
 801544e:	f7ff fdfe 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015452:	4603      	mov	r3, r0
 8015454:	429c      	cmp	r4, r3
 8015456:	d001      	beq.n	801545c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8015458:	f00a fc40 	bl	801fcdc <abort>
  const int dims_count = shape.DimensionsCount();
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f7ff fdf6 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015462:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8015464:	2300      	movs	r3, #0
 8015466:	60fb      	str	r3, [r7, #12]
 8015468:	68fa      	ldr	r2, [r7, #12]
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	429a      	cmp	r2, r3
 801546e:	da11      	bge.n	8015494 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8015470:	68f9      	ldr	r1, [r7, #12]
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f7ff ff86 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015478:	4604      	mov	r4, r0
 801547a:	68f9      	ldr	r1, [r7, #12]
 801547c:	6838      	ldr	r0, [r7, #0]
 801547e:	f7ff ff81 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015482:	4603      	mov	r3, r0
 8015484:	429c      	cmp	r4, r3
 8015486:	d001      	beq.n	801548c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8015488:	f00a fc28 	bl	801fcdc <abort>
  for (int i = 0; i < dims_count; ++i) {
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	3301      	adds	r3, #1
 8015490:	60fb      	str	r3, [r7, #12]
 8015492:	e7e9      	b.n	8015468 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8015494:	6878      	ldr	r0, [r7, #4]
 8015496:	f7ff ffad 	bl	80153f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801549a:	4603      	mov	r3, r0
}
 801549c:	4618      	mov	r0, r3
 801549e:	3714      	adds	r7, #20
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd90      	pop	{r4, r7, pc}

080154a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b086      	sub	sp, #24
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80154b6:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	dc02      	bgt.n	80154c4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	425b      	negs	r3, r3
 80154c2:	e000      	b.n	80154c6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80154c4:	2300      	movs	r3, #0
 80154c6:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	fa02 f303 	lsl.w	r3, r2, r3
 80154d0:	68b9      	ldr	r1, [r7, #8]
 80154d2:	4618      	mov	r0, r3
 80154d4:	f7ff fee0 	bl	8015298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80154d8:	4603      	mov	r3, r0
 80154da:	6939      	ldr	r1, [r7, #16]
 80154dc:	4618      	mov	r0, r3
 80154de:	f000 fb4b 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80154e2:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3718      	adds	r7, #24
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d101      	bne.n	8015502 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80154fe:	f00a fbed 	bl	801fcdc <abort>
  TFLITE_DCHECK(node != nullptr);
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d101      	bne.n	801550c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8015508:	f00a fbe8 	bl	801fcdc <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	6819      	ldr	r1, [r3, #0]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	009b      	lsls	r3, r3, #2
 8015518:	440b      	add	r3, r1
 801551a:	685b      	ldr	r3, [r3, #4]
 801551c:	4619      	mov	r1, r3
 801551e:	68f8      	ldr	r0, [r7, #12]
 8015520:	4790      	blx	r2
 8015522:	4603      	mov	r3, r0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3710      	adds	r7, #16
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8015538:	687a      	ldr	r2, [r7, #4]
 801553a:	68b9      	ldr	r1, [r7, #8]
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f7ff ffd5 	bl	80154ec <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015542:	4603      	mov	r3, r0
}
 8015544:	4618      	mov	r0, r3
 8015546:	3710      	adds	r7, #16
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d101      	bne.n	8015562 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801555e:	f00a fbbd 	bl	801fcdc <abort>
  TFLITE_DCHECK(node != nullptr);
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d101      	bne.n	801556c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8015568:	f00a fbb8 	bl	801fcdc <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	6859      	ldr	r1, [r3, #4]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	440b      	add	r3, r1
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	4619      	mov	r1, r3
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	4790      	blx	r2
 8015582:	4603      	mov	r3, r0
}
 8015584:	4618      	mov	r0, r3
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801558c:	b580      	push	{r7, lr}
 801558e:	b08a      	sub	sp, #40	; 0x28
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	607a      	str	r2, [r7, #4]
 8015598:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801559a:	6879      	ldr	r1, [r7, #4]
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f7ff ff4c 	bl	801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80155a2:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 80155a4:	2300      	movs	r3, #0
 80155a6:	627b      	str	r3, [r7, #36]	; 0x24
 80155a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155aa:	6a3b      	ldr	r3, [r7, #32]
 80155ac:	429a      	cmp	r2, r3
 80155ae:	da1d      	bge.n	80155ec <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 80155b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b2:	009b      	lsls	r3, r3, #2
 80155b4:	68ba      	ldr	r2, [r7, #8]
 80155b6:	4413      	add	r3, r2
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 80155bc:	f04f 0300 	mov.w	r3, #0
 80155c0:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 80155c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80155c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80155ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ce:	d501      	bpl.n	80155d4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 80155d0:	69bb      	ldr	r3, [r7, #24]
 80155d2:	e000      	b.n	80155d6 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 80155d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155da:	009b      	lsls	r3, r3, #2
 80155dc:	683a      	ldr	r2, [r7, #0]
 80155de:	4413      	add	r3, r2
 80155e0:	697a      	ldr	r2, [r7, #20]
 80155e2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80155e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e6:	3301      	adds	r3, #1
 80155e8:	627b      	str	r3, [r7, #36]	; 0x24
 80155ea:	e7dd      	b.n	80155a8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 80155ec:	bf00      	nop
 80155ee:	3728      	adds	r7, #40	; 0x28
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b08a      	sub	sp, #40	; 0x28
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8015602:	6879      	ldr	r1, [r7, #4]
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f7ff ff18 	bl	801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801560a:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801560c:	2300      	movs	r3, #0
 801560e:	627b      	str	r3, [r7, #36]	; 0x24
 8015610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015612:	6a3b      	ldr	r3, [r7, #32]
 8015614:	429a      	cmp	r2, r3
 8015616:	da2a      	bge.n	801566e <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8015618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	68ba      	ldr	r2, [r7, #8]
 801561e:	4413      	add	r3, r2
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8015624:	4b14      	ldr	r3, [pc, #80]	; (8015678 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8015626:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8015628:	f04f 0300 	mov.w	r3, #0
 801562c:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801562e:	edd7 7a07 	vldr	s15, [r7, #28]
 8015632:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8015636:	eef4 7ac7 	vcmpe.f32	s15, s14
 801563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563e:	dd01      	ble.n	8015644 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	e009      	b.n	8015658 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8015644:	edd7 7a07 	vldr	s15, [r7, #28]
 8015648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015650:	d501      	bpl.n	8015656 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	e000      	b.n	8015658 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801565c:	009b      	lsls	r3, r3, #2
 801565e:	683a      	ldr	r2, [r7, #0]
 8015660:	4413      	add	r3, r2
 8015662:	693a      	ldr	r2, [r7, #16]
 8015664:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8015666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015668:	3301      	adds	r3, #1
 801566a:	627b      	str	r3, [r7, #36]	; 0x24
 801566c:	e7d0      	b.n	8015610 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801566e:	bf00      	nop
 8015670:	3728      	adds	r7, #40	; 0x28
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	40c00000 	.word	0x40c00000

0801567c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801568c:	2b00      	cmp	r3, #0
 801568e:	d101      	bne.n	8015694 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8015690:	f00a fb24 	bl	801fcdc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015698:	211c      	movs	r1, #28
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	4798      	blx	r3
 801569e:	4603      	mov	r3, r0
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3710      	adds	r7, #16
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 80156a8:	b590      	push	{r4, r7, lr}
 80156aa:	b089      	sub	sp, #36	; 0x24
 80156ac:	af02      	add	r7, sp, #8
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	691b      	ldr	r3, [r3, #16]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d101      	bne.n	80156be <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80156ba:	f00a fb0f 	bl	801fcdc <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	691b      	ldr	r3, [r3, #16]
 80156c2:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80156c4:	2200      	movs	r2, #0
 80156c6:	6839      	ldr	r1, [r7, #0]
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7ff f895 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80156ce:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 80156d0:	693b      	ldr	r3, [r7, #16]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d10a      	bne.n	80156ec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	695c      	ldr	r4, [r3, #20]
 80156da:	4b1a      	ldr	r3, [pc, #104]	; (8015744 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 80156dc:	9300      	str	r3, [sp, #0]
 80156de:	238e      	movs	r3, #142	; 0x8e
 80156e0:	4a19      	ldr	r2, [pc, #100]	; (8015748 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80156e2:	491a      	ldr	r1, [pc, #104]	; (801574c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	47a0      	blx	r4
 80156e8:	2301      	movs	r3, #1
 80156ea:	e027      	b.n	801573c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80156ec:	2200      	movs	r2, #0
 80156ee:	6839      	ldr	r1, [r7, #0]
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7ff f891 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80156f6:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d10a      	bne.n	8015714 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	695c      	ldr	r4, [r3, #20]
 8015702:	4b13      	ldr	r3, [pc, #76]	; (8015750 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8015704:	9300      	str	r3, [sp, #0]
 8015706:	2390      	movs	r3, #144	; 0x90
 8015708:	4a0f      	ldr	r2, [pc, #60]	; (8015748 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801570a:	4910      	ldr	r1, [pc, #64]	; (801574c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	47a0      	blx	r4
 8015710:	2301      	movs	r3, #1
 8015712:	e013      	b.n	801573c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	2b09      	cmp	r3, #9
 801571a:	d105      	bne.n	8015728 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801571c:	697a      	ldr	r2, [r7, #20]
 801571e:	68f9      	ldr	r1, [r7, #12]
 8015720:	6938      	ldr	r0, [r7, #16]
 8015722:	f000 fa9d 	bl	8015c60 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8015726:	e008      	b.n	801573a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	2b03      	cmp	r3, #3
 801572e:	d104      	bne.n	801573a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8015730:	697a      	ldr	r2, [r7, #20]
 8015732:	68f9      	ldr	r1, [r7, #12]
 8015734:	6938      	ldr	r0, [r7, #16]
 8015736:	f000 fb35 	bl	8015da4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801573a:	2300      	movs	r3, #0
}
 801573c:	4618      	mov	r0, r3
 801573e:	371c      	adds	r7, #28
 8015740:	46bd      	mov	sp, r7
 8015742:	bd90      	pop	{r4, r7, pc}
 8015744:	08021fd0 	.word	0x08021fd0
 8015748:	08021f24 	.word	0x08021f24
 801574c:	08021fb8 	.word	0x08021fb8
 8015750:	08021fe4 	.word	0x08021fe4

08015754 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8015754:	b590      	push	{r4, r7, lr}
 8015756:	b0ad      	sub	sp, #180	; 0xb4
 8015758:	af02      	add	r7, sp, #8
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	691b      	ldr	r3, [r3, #16]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d101      	bne.n	801576a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8015766:	f00a fab9 	bl	801fcdc <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	691b      	ldr	r3, [r3, #16]
 801576e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8015772:	2200      	movs	r2, #0
 8015774:	6839      	ldr	r1, [r7, #0]
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7ff fed8 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801577c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8015780:	2200      	movs	r2, #0
 8015782:	6839      	ldr	r1, [r7, #0]
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f7ff fee1 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801578a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801578e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015792:	7a1b      	ldrb	r3, [r3, #8]
 8015794:	2b09      	cmp	r3, #9
 8015796:	d032      	beq.n	80157fe <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8015798:	2b09      	cmp	r3, #9
 801579a:	f300 808c 	bgt.w	80158b6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801579e:	2b01      	cmp	r3, #1
 80157a0:	d002      	beq.n	80157a8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 80157a2:	2b03      	cmp	r3, #3
 80157a4:	d059      	beq.n	801585a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 80157a6:	e086      	b.n	80158b6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 80157a8:	f107 030c 	add.w	r3, r7, #12
 80157ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80157b0:	4618      	mov	r0, r3
 80157b2:	f003 fc38 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80157b6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80157ba:	f000 fb95 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80157be:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 80157c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80157c4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80157c8:	4618      	mov	r0, r3
 80157ca:	f003 fc2c 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80157ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80157d2:	f000 fb98 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80157d6:	4603      	mov	r3, r0
 80157d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80157dc:	f107 000c 	add.w	r0, r7, #12
 80157e0:	4621      	mov	r1, r4
 80157e2:	f7ff fed3 	bl	801558c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 80157e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7ff fc19 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80157f0:	f107 030c 	add.w	r3, r7, #12
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7ff fc14 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80157fa:	2300      	movs	r3, #0
 80157fc:	e069      	b.n	80158d2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80157fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015802:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015806:	4618      	mov	r0, r3
 8015808:	f003 fc0d 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801580c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015810:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015814:	4618      	mov	r0, r3
 8015816:	f003 fc06 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801581a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801581e:	f000 fb83 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015822:	4604      	mov	r4, r0
 8015824:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015828:	f000 fb8d 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801582c:	4603      	mov	r3, r0
 801582e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015832:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015836:	9300      	str	r3, [sp, #0]
 8015838:	4623      	mov	r3, r4
 801583a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801583e:	f000 fb93 	bl	8015f68 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8015842:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015846:	4618      	mov	r0, r3
 8015848:	f7ff fbeb 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801584c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015850:	4618      	mov	r0, r3
 8015852:	f7ff fbe6 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8015856:	2300      	movs	r3, #0
 8015858:	e03b      	b.n	80158d2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801585a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801585e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015862:	4618      	mov	r0, r3
 8015864:	f003 fbdf 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8015868:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801586c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015870:	4618      	mov	r0, r3
 8015872:	f003 fbd8 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8015876:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801587a:	f000 fbc1 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801587e:	4604      	mov	r4, r0
 8015880:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015884:	f000 fbcb 	bl	801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8015888:	4603      	mov	r3, r0
 801588a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801588e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	4623      	mov	r3, r4
 8015896:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801589a:	f000 fbd1 	bl	8016040 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801589e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7ff fbbd 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80158a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7ff fbb8 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80158b2:	2300      	movs	r3, #0
 80158b4:	e00d      	b.n	80158d2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	695c      	ldr	r4, [r3, #20]
 80158ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80158be:	7a1b      	ldrb	r3, [r3, #8]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7fe fc3b 	bl	801413c <TfLiteTypeGetName>
 80158c6:	4603      	mov	r3, r0
 80158c8:	461a      	mov	r2, r3
 80158ca:	4904      	ldr	r1, [pc, #16]	; (80158dc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80158d0:	2301      	movs	r3, #1
    }
  }
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	37ac      	adds	r7, #172	; 0xac
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd90      	pop	{r4, r7, pc}
 80158da:	bf00      	nop
 80158dc:	08021ff8 	.word	0x08021ff8

080158e0 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	60f8      	str	r0, [r7, #12]
 80158e8:	60b9      	str	r1, [r7, #8]
 80158ea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d101      	bne.n	80158f8 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80158f4:	f00a f9f2 	bl	801fcdc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158fc:	2104      	movs	r1, #4
 80158fe:	68f8      	ldr	r0, [r7, #12]
 8015900:	4798      	blx	r3
 8015902:	4603      	mov	r3, r0
}
 8015904:	4618      	mov	r0, r3
 8015906:	3710      	adds	r7, #16
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801590c:	b590      	push	{r4, r7, lr}
 801590e:	b087      	sub	sp, #28
 8015910:	af02      	add	r7, sp, #8
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	691b      	ldr	r3, [r3, #16]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d101      	bne.n	8015922 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801591e:	f00a f9dd 	bl	801fcdc <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	691b      	ldr	r3, [r3, #16]
 8015926:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8015928:	2200      	movs	r2, #0
 801592a:	6839      	ldr	r1, [r7, #0]
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7fe ff63 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015932:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d10a      	bne.n	8015950 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	695c      	ldr	r4, [r3, #20]
 801593e:	4b20      	ldr	r3, [pc, #128]	; (80159c0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8015940:	9300      	str	r3, [sp, #0]
 8015942:	23cd      	movs	r3, #205	; 0xcd
 8015944:	4a1f      	ldr	r2, [pc, #124]	; (80159c4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8015946:	4920      	ldr	r1, [pc, #128]	; (80159c8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	47a0      	blx	r4
 801594c:	2301      	movs	r3, #1
 801594e:	e033      	b.n	80159b8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	2b09      	cmp	r3, #9
 8015956:	d115      	bne.n	8015984 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8015962:	4618      	mov	r0, r3
 8015964:	eef0 0a67 	vmov.f32	s1, s15
 8015968:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801596c:	f000 fbb3 	bl	80160d6 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8015970:	4603      	mov	r3, r0
 8015972:	461a      	mov	r2, r3
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	691b      	ldr	r3, [r3, #16]
 801597c:	b25a      	sxtb	r2, r3
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	705a      	strb	r2, [r3, #1]
 8015982:	e018      	b.n	80159b6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	2b03      	cmp	r3, #3
 801598a:	d114      	bne.n	80159b6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801598c:	68bb      	ldr	r3, [r7, #8]
 801598e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8015996:	4618      	mov	r0, r3
 8015998:	eef0 0a67 	vmov.f32	s1, s15
 801599c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80159a0:	f000 fbe8 	bl	8016174 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 80159a4:	4603      	mov	r3, r0
 80159a6:	461a      	mov	r2, r3
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	691b      	ldr	r3, [r3, #16]
 80159b0:	b2da      	uxtb	r2, r3
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 80159b6:	2300      	movs	r3, #0
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3714      	adds	r7, #20
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd90      	pop	{r4, r7, pc}
 80159c0:	08021fd0 	.word	0x08021fd0
 80159c4:	08021f24 	.word	0x08021f24
 80159c8:	08021fb8 	.word	0x08021fb8

080159cc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 80159cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ce:	b0ad      	sub	sp, #180	; 0xb4
 80159d0:	af02      	add	r7, sp, #8
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	691b      	ldr	r3, [r3, #16]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d101      	bne.n	80159e2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80159de:	f00a f97d 	bl	801fcdc <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	691b      	ldr	r3, [r3, #16]
 80159e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80159ea:	2200      	movs	r2, #0
 80159ec:	6839      	ldr	r1, [r7, #0]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f7ff fd9c 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80159f4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80159f8:	2200      	movs	r2, #0
 80159fa:	6839      	ldr	r1, [r7, #0]
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f7ff fda5 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8015a02:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8015a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015a0a:	7a1b      	ldrb	r3, [r3, #8]
 8015a0c:	2b09      	cmp	r3, #9
 8015a0e:	d032      	beq.n	8015a76 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8015a10:	2b09      	cmp	r3, #9
 8015a12:	f300 809c 	bgt.w	8015b4e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8015a16:	2b01      	cmp	r3, #1
 8015a18:	d002      	beq.n	8015a20 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8015a1a:	2b03      	cmp	r3, #3
 8015a1c:	d062      	beq.n	8015ae4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 8015a1e:	e096      	b.n	8015b4e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8015a20:	f107 030c 	add.w	r3, r7, #12
 8015a24:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f003 fafc 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8015a2e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015a32:	f000 fa59 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015a36:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8015a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a3c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015a40:	4618      	mov	r0, r3
 8015a42:	f003 faf0 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8015a46:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015a4a:	f000 fa5c 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015a54:	f107 000c 	add.w	r0, r7, #12
 8015a58:	4621      	mov	r1, r4
 8015a5a:	f7ff fdcb 	bl	80155f4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 8015a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7ff fadd 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8015a68:	f107 030c 	add.w	r3, r7, #12
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fad8 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8015a72:	2300      	movs	r3, #0
 8015a74:	e079      	b.n	8015b6a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8015a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015a7a:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8015a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015a82:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 8015a86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015a8a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f003 fac9 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8015a94:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015a98:	f000 fa46 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a9c:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8015a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015aa2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f003 fabd 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8015aac:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015ab0:	f000 fa49 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015aba:	9301      	str	r3, [sp, #4]
 8015abc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015ac0:	9300      	str	r3, [sp, #0]
 8015ac2:	4633      	mov	r3, r6
 8015ac4:	4629      	mov	r1, r5
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f000 fba3 	bl	8016212 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8015acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f7ff faa6 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 8015ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7ff faa1 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	e042      	b.n	8015b6a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8015ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ae8:	78dc      	ldrb	r4, [r3, #3]
 8015aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015aee:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 8015af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015af4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015af8:	4618      	mov	r0, r3
 8015afa:	f003 fa94 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8015afe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015b02:	f000 fa7d 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8015b06:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8015b08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015b0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015b10:	4618      	mov	r0, r3
 8015b12:	f003 fa88 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8015b16:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015b1a:	f000 fa80 	bl	801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8015b24:	9301      	str	r3, [sp, #4]
 8015b26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015b2a:	9300      	str	r3, [sp, #0]
 8015b2c:	4633      	mov	r3, r6
 8015b2e:	4629      	mov	r1, r5
 8015b30:	4620      	mov	r0, r4
 8015b32:	f000 fbad 	bl	8016290 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8015b36:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7ff fa71 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8015b40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7ff fa6c 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e00d      	b.n	8015b6a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	695c      	ldr	r4, [r3, #20]
 8015b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015b56:	7a1b      	ldrb	r3, [r3, #8]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7fe faef 	bl	801413c <TfLiteTypeGetName>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	461a      	mov	r2, r3
 8015b62:	4904      	ldr	r1, [pc, #16]	; (8015b74 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8015b68:	2301      	movs	r3, #1
    }
  }
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	37ac      	adds	r7, #172	; 0xac
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b72:	bf00      	nop
 8015b74:	08021ff8 	.word	0x08021ff8

08015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8015b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b7a:	b089      	sub	sp, #36	; 0x24
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	2900      	cmp	r1, #0
 8015b86:	da06      	bge.n	8015b96 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8015b88:	4b31      	ldr	r3, [pc, #196]	; (8015c50 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8015b8a:	4a32      	ldr	r2, [pc, #200]	; (8015c54 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8015b8c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8015b90:	4831      	ldr	r0, [pc, #196]	; (8015c58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8015b92:	f00a f8ab 	bl	801fcec <__assert_func>
  assert(exponent <= 31);
 8015b96:	6839      	ldr	r1, [r7, #0]
 8015b98:	291f      	cmp	r1, #31
 8015b9a:	dd06      	ble.n	8015baa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8015b9c:	4b2f      	ldr	r3, [pc, #188]	; (8015c5c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8015b9e:	4a2d      	ldr	r2, [pc, #180]	; (8015c54 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8015ba0:	f240 1167 	movw	r1, #359	; 0x167
 8015ba4:	482c      	ldr	r0, [pc, #176]	; (8015c58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8015ba6:	f00a f8a1 	bl	801fcec <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8015baa:	f04f 0001 	mov.w	r0, #1
 8015bae:	f04f 0100 	mov.w	r1, #0
 8015bb2:	683c      	ldr	r4, [r7, #0]
 8015bb4:	f1a4 0620 	sub.w	r6, r4, #32
 8015bb8:	f1c4 0520 	rsb	r5, r4, #32
 8015bbc:	fa01 f304 	lsl.w	r3, r1, r4
 8015bc0:	fa00 f606 	lsl.w	r6, r0, r6
 8015bc4:	4333      	orrs	r3, r6
 8015bc6:	fa20 f505 	lsr.w	r5, r0, r5
 8015bca:	432b      	orrs	r3, r5
 8015bcc:	fa00 f204 	lsl.w	r2, r0, r4
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	3b01      	subs	r3, #1
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f000 fb93 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015bda:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8015bdc:	2000      	movs	r0, #0
 8015bde:	f000 fb8f 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015be2:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8015be4:	2001      	movs	r0, #1
 8015be6:	f000 fb8b 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015bea:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8015bec:	69f9      	ldr	r1, [r7, #28]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f000 fb91 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015bf4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8015bf6:	2101      	movs	r1, #1
 8015bf8:	69f8      	ldr	r0, [r7, #28]
 8015bfa:	f000 fb9a 	bl	8016332 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8015bfe:	4604      	mov	r4, r0
 8015c00:	69b9      	ldr	r1, [r7, #24]
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f000 fba4 	bl	8016350 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	6979      	ldr	r1, [r7, #20]
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f000 fb82 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015c12:	4603      	mov	r3, r0
 8015c14:	4619      	mov	r1, r3
 8015c16:	4620      	mov	r0, r4
 8015c18:	f000 fbae 	bl	8016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015c1c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8015c1e:	6839      	ldr	r1, [r7, #0]
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f000 fb86 	bl	8016332 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8015c26:	4604      	mov	r4, r0
 8015c28:	68f9      	ldr	r1, [r7, #12]
 8015c2a:	6938      	ldr	r0, [r7, #16]
 8015c2c:	f000 fbb2 	bl	8016394 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015c30:	4603      	mov	r3, r0
 8015c32:	6979      	ldr	r1, [r7, #20]
 8015c34:	4618      	mov	r0, r3
 8015c36:	f000 fb6e 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	4620      	mov	r0, r4
 8015c40:	f000 fb9a 	bl	8016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015c44:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3724      	adds	r7, #36	; 0x24
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	08022064 	.word	0x08022064
 8015c54:	08022074 	.word	0x08022074
 8015c58:	080220d0 	.word	0x080220d0
 8015c5c:	08022164 	.word	0x08022164

08015c60 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8015c60:	b590      	push	{r4, r7, lr}
 8015c62:	b099      	sub	sp, #100	; 0x64
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	60b9      	str	r1, [r7, #8]
 8015c6a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8015c6c:	f04f 0300 	mov.w	r3, #0
 8015c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8015c72:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8015c76:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	edd3 7a03 	vldr	s15, [r3, #12]
 8015c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8015c88:	ee16 0a90 	vmov	r0, s13
 8015c8c:	f7ea fc86 	bl	800059c <__aeabi_f2d>
 8015c90:	4602      	mov	r2, r0
 8015c92:	460b      	mov	r3, r1
 8015c94:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8015c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c9c:	68f9      	ldr	r1, [r7, #12]
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7ff fa39 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8015ca4:	f107 0310 	add.w	r3, r7, #16
 8015ca8:	68b9      	ldr	r1, [r7, #8]
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7ff fa33 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f103 0214 	add.w	r2, r3, #20
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	3318      	adds	r3, #24
 8015cba:	4619      	mov	r1, r3
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8015cc2:	f7fe fac1 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8015cc6:	f7fe fc90 	bl	80145ea <_ZNSt14numeric_limitsIaE3minEv>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cd8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015cdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015ce0:	eeb0 0a66 	vmov.f32	s0, s13
 8015ce4:	f008 fe0a 	bl	801e8fc <roundf>
 8015ce8:	eef0 7a40 	vmov.f32	s15, s0
 8015cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015cf0:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8015cf4:	4423      	add	r3, r4
 8015cf6:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8015cf8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8015cfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015d00:	4611      	mov	r1, r2
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7ff f958 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8015d08:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8015d10:	f7ff fab6 	bl	8015280 <_ZNSt14numeric_limitsIfE8infinityEv>
 8015d14:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8015d18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015d1c:	eef4 7a47 	vcmp.f32	s15, s14
 8015d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d24:	d103      	bne.n	8015d2e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 8015d26:	f7fe fc69 	bl	80145fc <_ZNSt14numeric_limitsIaE3maxEv>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	e022      	b.n	8015d74 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8015d2e:	f7fe fc65 	bl	80145fc <_ZNSt14numeric_limitsIaE3maxEv>
 8015d32:	4603      	mov	r3, r0
 8015d34:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015d40:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015d44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015d48:	eeb0 0a66 	vmov.f32	s0, s13
 8015d4c:	f008 fdd6 	bl	801e8fc <roundf>
 8015d50:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8015d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015d58:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8015d5c:	4423      	add	r3, r4
 8015d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8015d60:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015d64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d68:	4611      	mov	r1, r2
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7ff f910 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8015d70:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8015d72:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	691a      	ldr	r2, [r3, #16]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	691a      	ldr	r2, [r3, #16]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8015d88:	f107 0310 	add.w	r3, r7, #16
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7ff f948 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8015d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7ff f943 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015d9c:	bf00      	nop
 8015d9e:	3764      	adds	r7, #100	; 0x64
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd90      	pop	{r4, r7, pc}

08015da4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8015da4:	b590      	push	{r4, r7, lr}
 8015da6:	b099      	sub	sp, #100	; 0x64
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8015db0:	f04f 0300 	mov.w	r3, #0
 8015db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8015db6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8015dba:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	ed93 7a03 	vldr	s14, [r3, #12]
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8015dc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8015dcc:	ee16 0a90 	vmov	r0, s13
 8015dd0:	f7ea fbe4 	bl	800059c <__aeabi_f2d>
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	460b      	mov	r3, r1
 8015dd8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8015ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015de0:	68f9      	ldr	r1, [r7, #12]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7ff f997 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8015de8:	f107 0310 	add.w	r3, r7, #16
 8015dec:	68b9      	ldr	r1, [r7, #8]
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7ff f991 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f103 0214 	add.w	r2, r3, #20
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	3318      	adds	r3, #24
 8015dfe:	4619      	mov	r1, r3
 8015e00:	4610      	mov	r0, r2
 8015e02:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8015e06:	f7fe fa1f 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8015e0a:	f7fe fbff 	bl	801460c <_ZNSt14numeric_limitsIhE3minEv>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e1c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015e20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015e24:	eeb0 0a66 	vmov.f32	s0, s13
 8015e28:	f008 fd68 	bl	801e8fc <roundf>
 8015e2c:	eef0 7a40 	vmov.f32	s15, s0
 8015e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e34:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8015e38:	4423      	add	r3, r4
 8015e3a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8015e3c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8015e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015e44:	4611      	mov	r1, r2
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7ff f8b6 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8015e4c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8015e4e:	681a      	ldr	r2, [r3, #0]
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8015e54:	f7ff fa14 	bl	8015280 <_ZNSt14numeric_limitsIfE8infinityEv>
 8015e58:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8015e5c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015e60:	eef4 7a47 	vcmp.f32	s15, s14
 8015e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e68:	d103      	bne.n	8015e72 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 8015e6a:	f7fe fbd7 	bl	801461c <_ZNSt14numeric_limitsIhE3maxEv>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	e022      	b.n	8015eb8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8015e72:	f7fe fbd3 	bl	801461c <_ZNSt14numeric_limitsIhE3maxEv>
 8015e76:	4603      	mov	r3, r0
 8015e78:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e84:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015e88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015e8c:	eeb0 0a66 	vmov.f32	s0, s13
 8015e90:	f008 fd34 	bl	801e8fc <roundf>
 8015e94:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8015e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e9c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8015ea0:	4423      	add	r3, r4
 8015ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8015ea4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015ea8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015eac:	4611      	mov	r1, r2
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7ff f86e 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8015eb4:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8015eb6:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	691a      	ldr	r2, [r3, #16]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	691a      	ldr	r2, [r3, #16]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8015ecc:	f107 0310 	add.w	r3, r7, #16
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7ff f8a6 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8015ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7ff f8a1 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015ee0:	bf00      	nop
 8015ee2:	3764      	adds	r7, #100	; 0x64
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd90      	pop	{r4, r7, pc}

08015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8015ef6:	f009 fef1 	bl	801fcdc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3708      	adds	r7, #8
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}

08015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8015f06:	b480      	push	{r7}
 8015f08:	b083      	sub	sp, #12
 8015f0a:	af00      	add	r7, sp, #0
 8015f0c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d002      	beq.n	8015f1a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	e000      	b.n	8015f1c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8015f1a:	2300      	movs	r3, #0
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	370c      	adds	r7, #12
 8015f20:	46bd      	mov	sp, r7
 8015f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f26:	4770      	bx	lr

08015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d101      	bne.n	8015f3a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8015f36:	f009 fed1 	bl	801fcdc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3708      	adds	r7, #8
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}

08015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8015f46:	b480      	push	{r7}
 8015f48:	b083      	sub	sp, #12
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d002      	beq.n	8015f5a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	e000      	b.n	8015f5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8015f5a:	2300      	movs	r3, #0
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	370c      	adds	r7, #12
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr

08015f68 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8015f68:	b590      	push	{r4, r7, lr}
 8015f6a:	b089      	sub	sp, #36	; 0x24
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8015f76:	6879      	ldr	r1, [r7, #4]
 8015f78:	68b8      	ldr	r0, [r7, #8]
 8015f7a:	f7ff fa5e 	bl	801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8015f7e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8015f80:	2300      	movs	r3, #0
 8015f82:	61fb      	str	r3, [r7, #28]
 8015f84:	69fa      	ldr	r2, [r7, #28]
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	da35      	bge.n	8015ff8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	683a      	ldr	r2, [r7, #0]
 8015f90:	4413      	add	r3, r2
 8015f92:	f993 3000 	ldrsb.w	r3, [r3]
 8015f96:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	68db      	ldr	r3, [r3, #12]
 8015fa0:	697a      	ldr	r2, [r7, #20]
 8015fa2:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8015fac:	461a      	mov	r2, r3
 8015fae:	f7ff fa79 	bl	80154a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015fb2:	4603      	mov	r3, r0
        data.params.output_offset +
 8015fb4:	4423      	add	r3, r4
    int32_t clamped =
 8015fb6:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	3304      	adds	r3, #4
 8015fbc:	f107 0210 	add.w	r2, r7, #16
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7fe fff8 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	3308      	adds	r3, #8
 8015fd2:	f107 0210 	add.w	r2, r7, #16
 8015fd6:	4611      	mov	r1, r2
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7fe ffd9 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8015fe4:	6939      	ldr	r1, [r7, #16]
 8015fe6:	69fb      	ldr	r3, [r7, #28]
 8015fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fea:	4413      	add	r3, r2
 8015fec:	b24a      	sxtb	r2, r1
 8015fee:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	61fb      	str	r3, [r7, #28]
 8015ff6:	e7c5      	b.n	8015f84 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8015ff8:	bf00      	nop
 8015ffa:	3724      	adds	r7, #36	; 0x24
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd90      	pop	{r4, r7, pc}

08016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8016000:	b580      	push	{r7, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d101      	bne.n	8016012 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801600e:	f009 fe65 	bl	801fcdc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3708      	adds	r7, #8
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}

0801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801601e:	b480      	push	{r7}
 8016020:	b083      	sub	sp, #12
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d002      	beq.n	8016032 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	e000      	b.n	8016034 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8016032:	2300      	movs	r3, #0
}
 8016034:	4618      	mov	r0, r3
 8016036:	370c      	adds	r7, #12
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr

08016040 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8016040:	b590      	push	{r4, r7, lr}
 8016042:	b089      	sub	sp, #36	; 0x24
 8016044:	af00      	add	r7, sp, #0
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	60b9      	str	r1, [r7, #8]
 801604a:	607a      	str	r2, [r7, #4]
 801604c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801604e:	6879      	ldr	r1, [r7, #4]
 8016050:	68b8      	ldr	r0, [r7, #8]
 8016052:	f7ff f9f2 	bl	801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8016056:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8016058:	2300      	movs	r3, #0
 801605a:	61fb      	str	r3, [r7, #28]
 801605c:	69fa      	ldr	r2, [r7, #28]
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	429a      	cmp	r2, r3
 8016062:	da34      	bge.n	80160ce <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8016064:	69fb      	ldr	r3, [r7, #28]
 8016066:	683a      	ldr	r2, [r7, #0]
 8016068:	4413      	add	r3, r2
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	68db      	ldr	r3, [r3, #12]
 8016076:	697a      	ldr	r2, [r7, #20]
 8016078:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8016082:	461a      	mov	r2, r3
 8016084:	f7ff fa0e 	bl	80154a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8016088:	4603      	mov	r3, r0
        data.params.output_offset +
 801608a:	4423      	add	r3, r4
    int32_t clamped =
 801608c:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	3304      	adds	r3, #4
 8016092:	f107 0210 	add.w	r2, r7, #16
 8016096:	4611      	mov	r1, r2
 8016098:	4618      	mov	r0, r3
 801609a:	f7fe ff8d 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 801609e:	4603      	mov	r3, r0
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	3308      	adds	r3, #8
 80160a8:	f107 0210 	add.w	r2, r7, #16
 80160ac:	4611      	mov	r1, r2
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe ff6e 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 80160b4:	4603      	mov	r3, r0
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80160ba:	6939      	ldr	r1, [r7, #16]
 80160bc:	69fb      	ldr	r3, [r7, #28]
 80160be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160c0:	4413      	add	r3, r2
 80160c2:	b2ca      	uxtb	r2, r1
 80160c4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80160c6:	69fb      	ldr	r3, [r7, #28]
 80160c8:	3301      	adds	r3, #1
 80160ca:	61fb      	str	r3, [r7, #28]
 80160cc:	e7c6      	b.n	801605c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 80160ce:	bf00      	nop
 80160d0:	3724      	adds	r7, #36	; 0x24
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd90      	pop	{r4, r7, pc}

080160d6 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 80160d6:	b5b0      	push	{r4, r5, r7, lr}
 80160d8:	b088      	sub	sp, #32
 80160da:	af00      	add	r7, sp, #0
 80160dc:	ed87 0a03 	vstr	s0, [r7, #12]
 80160e0:	edc7 0a02 	vstr	s1, [r7, #8]
 80160e4:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 80160e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80160ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80160ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80160f2:	ee16 0a90 	vmov	r0, s13
 80160f6:	f7ea fa51 	bl	800059c <__aeabi_f2d>
 80160fa:	4602      	mov	r2, r0
 80160fc:	460b      	mov	r3, r1
 80160fe:	ec43 2b10 	vmov	d0, r2, r3
 8016102:	f008 fbb5 	bl	801e870 <round>
 8016106:	ec55 4b10 	vmov	r4, r5, d0
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7ea fa34 	bl	8000578 <__aeabi_i2d>
 8016110:	4602      	mov	r2, r0
 8016112:	460b      	mov	r3, r1
 8016114:	4620      	mov	r0, r4
 8016116:	4629      	mov	r1, r5
 8016118:	f7ea f8e2 	bl	80002e0 <__adddf3>
 801611c:	4602      	mov	r2, r0
 801611e:	460b      	mov	r3, r1
 8016120:	4610      	mov	r0, r2
 8016122:	4619      	mov	r1, r3
 8016124:	f7ea fd42 	bl	8000bac <__aeabi_d2iz>
 8016128:	4603      	mov	r3, r0
 801612a:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801612c:	f7fe fa5d 	bl	80145ea <_ZNSt14numeric_limitsIaE3minEv>
 8016130:	4603      	mov	r3, r0
 8016132:	61bb      	str	r3, [r7, #24]
 8016134:	f107 0214 	add.w	r2, r7, #20
 8016138:	f107 0318 	add.w	r3, r7, #24
 801613c:	4611      	mov	r1, r2
 801613e:	4618      	mov	r0, r3
 8016140:	f7fe ff3a 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8016144:	4603      	mov	r3, r0
  result =
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801614a:	f7fe fa57 	bl	80145fc <_ZNSt14numeric_limitsIaE3maxEv>
 801614e:	4603      	mov	r3, r0
 8016150:	61fb      	str	r3, [r7, #28]
 8016152:	f107 0214 	add.w	r2, r7, #20
 8016156:	f107 031c 	add.w	r3, r7, #28
 801615a:	4611      	mov	r1, r2
 801615c:	4618      	mov	r0, r3
 801615e:	f7fe ff17 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8016162:	4603      	mov	r3, r0
  result =
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	617b      	str	r3, [r7, #20]
  return result;
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	b25b      	sxtb	r3, r3
}
 801616c:	4618      	mov	r0, r3
 801616e:	3720      	adds	r7, #32
 8016170:	46bd      	mov	sp, r7
 8016172:	bdb0      	pop	{r4, r5, r7, pc}

08016174 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8016174:	b5b0      	push	{r4, r5, r7, lr}
 8016176:	b088      	sub	sp, #32
 8016178:	af00      	add	r7, sp, #0
 801617a:	ed87 0a03 	vstr	s0, [r7, #12]
 801617e:	edc7 0a02 	vstr	s1, [r7, #8]
 8016182:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8016184:	ed97 7a03 	vldr	s14, [r7, #12]
 8016188:	edd7 7a02 	vldr	s15, [r7, #8]
 801618c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016190:	ee16 0a90 	vmov	r0, s13
 8016194:	f7ea fa02 	bl	800059c <__aeabi_f2d>
 8016198:	4602      	mov	r2, r0
 801619a:	460b      	mov	r3, r1
 801619c:	ec43 2b10 	vmov	d0, r2, r3
 80161a0:	f008 fb66 	bl	801e870 <round>
 80161a4:	ec55 4b10 	vmov	r4, r5, d0
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7ea f9e5 	bl	8000578 <__aeabi_i2d>
 80161ae:	4602      	mov	r2, r0
 80161b0:	460b      	mov	r3, r1
 80161b2:	4620      	mov	r0, r4
 80161b4:	4629      	mov	r1, r5
 80161b6:	f7ea f893 	bl	80002e0 <__adddf3>
 80161ba:	4602      	mov	r2, r0
 80161bc:	460b      	mov	r3, r1
 80161be:	4610      	mov	r0, r2
 80161c0:	4619      	mov	r1, r3
 80161c2:	f7ea fcf3 	bl	8000bac <__aeabi_d2iz>
 80161c6:	4603      	mov	r3, r0
 80161c8:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 80161ca:	f7fe fa1f 	bl	801460c <_ZNSt14numeric_limitsIhE3minEv>
 80161ce:	4603      	mov	r3, r0
 80161d0:	61bb      	str	r3, [r7, #24]
 80161d2:	f107 0214 	add.w	r2, r7, #20
 80161d6:	f107 0318 	add.w	r3, r7, #24
 80161da:	4611      	mov	r1, r2
 80161dc:	4618      	mov	r0, r3
 80161de:	f7fe feeb 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 80161e2:	4603      	mov	r3, r0
  result =
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 80161e8:	f7fe fa18 	bl	801461c <_ZNSt14numeric_limitsIhE3maxEv>
 80161ec:	4603      	mov	r3, r0
 80161ee:	61fb      	str	r3, [r7, #28]
 80161f0:	f107 0214 	add.w	r2, r7, #20
 80161f4:	f107 031c 	add.w	r3, r7, #28
 80161f8:	4611      	mov	r1, r2
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7fe fec8 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8016200:	4603      	mov	r3, r0
  result =
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	617b      	str	r3, [r7, #20]
  return result;
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	b2db      	uxtb	r3, r3
}
 801620a:	4618      	mov	r0, r3
 801620c:	3720      	adds	r7, #32
 801620e:	46bd      	mov	sp, r7
 8016210:	bdb0      	pop	{r4, r5, r7, pc}

08016212 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8016212:	b580      	push	{r7, lr}
 8016214:	b088      	sub	sp, #32
 8016216:	af00      	add	r7, sp, #0
 8016218:	60ba      	str	r2, [r7, #8]
 801621a:	607b      	str	r3, [r7, #4]
 801621c:	4603      	mov	r3, r0
 801621e:	73fb      	strb	r3, [r7, #15]
 8016220:	460b      	mov	r3, r1
 8016222:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8016224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016226:	68b8      	ldr	r0, [r7, #8]
 8016228:	f7ff f907 	bl	801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801622c:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801622e:	2300      	movs	r3, #0
 8016230:	61fb      	str	r3, [r7, #28]
 8016232:	69fa      	ldr	r2, [r7, #28]
 8016234:	69bb      	ldr	r3, [r7, #24]
 8016236:	429a      	cmp	r2, r3
 8016238:	da26      	bge.n	8016288 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801623a:	69fb      	ldr	r3, [r7, #28]
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	4413      	add	r3, r2
 8016240:	781b      	ldrb	r3, [r3, #0]
 8016242:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8016244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016248:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801624c:	429a      	cmp	r2, r3
 801624e:	dd04      	ble.n	801625a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8016250:	f107 030e 	add.w	r3, r7, #14
 8016254:	f993 3000 	ldrsb.w	r3, [r3]
 8016258:	e00c      	b.n	8016274 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801625a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801625e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016262:	429a      	cmp	r2, r3
 8016264:	da04      	bge.n	8016270 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8016266:	f107 030f 	add.w	r3, r7, #15
 801626a:	f993 3000 	ldrsb.w	r3, [r3]
 801626e:	e001      	b.n	8016274 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8016270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016274:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801627a:	4413      	add	r3, r2
 801627c:	7dba      	ldrb	r2, [r7, #22]
 801627e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8016280:	69fb      	ldr	r3, [r7, #28]
 8016282:	3301      	adds	r3, #1
 8016284:	61fb      	str	r3, [r7, #28]
 8016286:	e7d4      	b.n	8016232 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8016288:	bf00      	nop
 801628a:	3720      	adds	r7, #32
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8016290:	b580      	push	{r7, lr}
 8016292:	b088      	sub	sp, #32
 8016294:	af00      	add	r7, sp, #0
 8016296:	60ba      	str	r2, [r7, #8]
 8016298:	607b      	str	r3, [r7, #4]
 801629a:	4603      	mov	r3, r0
 801629c:	73fb      	strb	r3, [r7, #15]
 801629e:	460b      	mov	r3, r1
 80162a0:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80162a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80162a4:	68b8      	ldr	r0, [r7, #8]
 80162a6:	f7ff f8c8 	bl	801543a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80162aa:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80162ac:	2300      	movs	r3, #0
 80162ae:	61fb      	str	r3, [r7, #28]
 80162b0:	69fa      	ldr	r2, [r7, #28]
 80162b2:	69bb      	ldr	r3, [r7, #24]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	da1f      	bge.n	80162f8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 80162b8:	69fb      	ldr	r3, [r7, #28]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	4413      	add	r3, r2
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 80162c2:	7bbb      	ldrb	r3, [r7, #14]
 80162c4:	7dfa      	ldrb	r2, [r7, #23]
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d903      	bls.n	80162d2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 80162ca:	f107 030e 	add.w	r3, r7, #14
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	e008      	b.n	80162e4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 80162d2:	7bfb      	ldrb	r3, [r7, #15]
 80162d4:	7dfa      	ldrb	r2, [r7, #23]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d203      	bcs.n	80162e2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 80162da:	f107 030f 	add.w	r3, r7, #15
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	e000      	b.n	80162e4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 80162e2:	7dfb      	ldrb	r3, [r7, #23]
 80162e4:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162ea:	4413      	add	r3, r2
 80162ec:	7dba      	ldrb	r2, [r7, #22]
 80162ee:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	3301      	adds	r3, #1
 80162f4:	61fb      	str	r3, [r7, #28]
 80162f6:	e7db      	b.n	80162b0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 80162f8:	bf00      	nop
 80162fa:	3720      	adds	r7, #32
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8016300:	b480      	push	{r7}
 8016302:	b083      	sub	sp, #12
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  return x;
 8016308:	687b      	ldr	r3, [r7, #4]
}
 801630a:	4618      	mov	r0, r3
 801630c:	370c      	adds	r7, #12
 801630e:	46bd      	mov	sp, r7
 8016310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016314:	4770      	bx	lr

08016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8016316:	b480      	push	{r7}
 8016318:	b083      	sub	sp, #12
 801631a:	af00      	add	r7, sp, #0
 801631c:	6078      	str	r0, [r7, #4]
 801631e:	6039      	str	r1, [r7, #0]
  return a & b;
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	4013      	ands	r3, r2
}
 8016326:	4618      	mov	r0, r3
 8016328:	370c      	adds	r7, #12
 801632a:	46bd      	mov	sp, r7
 801632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016330:	4770      	bx	lr

08016332 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8016332:	b480      	push	{r7}
 8016334:	b083      	sub	sp, #12
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801633c:	687a      	ldr	r2, [r7, #4]
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	fa42 f303 	asr.w	r3, r2, r3
}
 8016344:	4618      	mov	r0, r3
 8016346:	370c      	adds	r7, #12
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr

08016350 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	429a      	cmp	r2, r3
 8016360:	bfb4      	ite	lt
 8016362:	2301      	movlt	r3, #1
 8016364:	2300      	movge	r3, #0
 8016366:	b2db      	uxtb	r3, r3
 8016368:	4618      	mov	r0, r3
 801636a:	f000 f827 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801636e:	4603      	mov	r3, r0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8016378:	b480      	push	{r7}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6039      	str	r1, [r7, #0]
  return a + b;
 8016382:	687a      	ldr	r2, [r7, #4]
 8016384:	683b      	ldr	r3, [r7, #0]
 8016386:	4413      	add	r3, r2
}
 8016388:	4618      	mov	r0, r3
 801638a:	370c      	adds	r7, #12
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr

08016394 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	bfcc      	ite	gt
 80163a6:	2301      	movgt	r3, #1
 80163a8:	2300      	movle	r3, #0
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	4618      	mov	r0, r3
 80163ae:	f000 f805 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80163b2:	4603      	mov	r3, r0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80163bc:	b580      	push	{r7, lr}
 80163be:	b082      	sub	sp, #8
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d004      	beq.n	80163d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80163ca:	2000      	movs	r0, #0
 80163cc:	f000 f807 	bl	80163de <_ZN8gemmlowp6BitNotIlEET_S1_>
 80163d0:	4603      	mov	r3, r0
 80163d2:	e000      	b.n	80163d6 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80163d4:	2300      	movs	r3, #0
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3708      	adds	r7, #8
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}

080163de <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 80163de:	b480      	push	{r7}
 80163e0:	b083      	sub	sp, #12
 80163e2:	af00      	add	r7, sp, #0
 80163e4:	6078      	str	r0, [r7, #4]
  return ~a;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	43db      	mvns	r3, r3
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	370c      	adds	r7, #12
 80163ee:	46bd      	mov	sp, r7
 80163f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f4:	4770      	bx	lr
	...

080163f8 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 80163f8:	b480      	push	{r7}
 80163fa:	af00      	add	r7, sp, #0
 80163fc:	4b04      	ldr	r3, [pc, #16]	; (8016410 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 80163fe:	ee07 3a90 	vmov	s15, r3
 8016402:	eeb0 0a67 	vmov.f32	s0, s15
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	7f7fffff 	.word	0x7f7fffff

08016414 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8016414:	b480      	push	{r7}
 8016416:	af00      	add	r7, sp, #0
 8016418:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801641c:	ee07 3a90 	vmov	s15, r3
 8016420:	eeb0 0a67 	vmov.f32	s0, s15
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr

0801642c <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 801642c:	b480      	push	{r7}
 801642e:	b083      	sub	sp, #12
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	3304      	adds	r3, #4
 8016438:	4618      	mov	r0, r3
 801643a:	370c      	adds	r7, #12
 801643c:	46bd      	mov	sp, r7
 801643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016442:	4770      	bx	lr

08016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8016444:	b580      	push	{r7, lr}
 8016446:	b086      	sub	sp, #24
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
 8016450:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8016452:	68f8      	ldr	r0, [r7, #12]
 8016454:	f7fe fdfb 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016458:	4603      	mov	r3, r0
 801645a:	2b04      	cmp	r3, #4
 801645c:	d001      	beq.n	8016462 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 801645e:	f009 fc3d 	bl	801fcdc <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8016462:	68f8      	ldr	r0, [r7, #12]
 8016464:	f7ff ffe2 	bl	801642c <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8016468:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	2b00      	cmp	r3, #0
 801646e:	db04      	blt.n	801647a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	68ba      	ldr	r2, [r7, #8]
 8016476:	429a      	cmp	r2, r3
 8016478:	db01      	blt.n	801647e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 801647a:	f009 fc2f 	bl	801fcdc <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2b00      	cmp	r3, #0
 8016482:	db05      	blt.n	8016490 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	3304      	adds	r3, #4
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	429a      	cmp	r2, r3
 801648e:	db01      	blt.n	8016494 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8016490:	f009 fc24 	bl	801fcdc <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	db05      	blt.n	80164a6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	3308      	adds	r3, #8
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	683a      	ldr	r2, [r7, #0]
 80164a2:	429a      	cmp	r2, r3
 80164a4:	db01      	blt.n	80164aa <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 80164a6:	f009 fc19 	bl	801fcdc <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80164aa:	6a3b      	ldr	r3, [r7, #32]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	db05      	blt.n	80164bc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	330c      	adds	r3, #12
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	6a3a      	ldr	r2, [r7, #32]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	db01      	blt.n	80164c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 80164bc:	f009 fc0e 	bl	801fcdc <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	3304      	adds	r3, #4
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	68ba      	ldr	r2, [r7, #8]
 80164c8:	fb03 f202 	mul.w	r2, r3, r2
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	4413      	add	r3, r2
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	3208      	adds	r2, #8
 80164d4:	6812      	ldr	r2, [r2, #0]
 80164d6:	fb03 f202 	mul.w	r2, r3, r2
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	4413      	add	r3, r2
 80164de:	697a      	ldr	r2, [r7, #20]
 80164e0:	320c      	adds	r2, #12
 80164e2:	6812      	ldr	r2, [r2, #0]
 80164e4:	fb03 f202 	mul.w	r2, r3, r2
 80164e8:	6a3b      	ldr	r3, [r7, #32]
 80164ea:	4413      	add	r3, r2
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3718      	adds	r7, #24
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b084      	sub	sp, #16
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80164fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8016502:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8016506:	f107 0208 	add.w	r2, r7, #8
 801650a:	f107 030c 	add.w	r3, r7, #12
 801650e:	4611      	mov	r1, r2
 8016510:	4618      	mov	r0, r3
 8016512:	f7fe f82d 	bl	8014570 <_ZSt3maxIfERKT_S2_S2_>
 8016516:	4602      	mov	r2, r0
 8016518:	1d3b      	adds	r3, r7, #4
 801651a:	4619      	mov	r1, r3
 801651c:	4610      	mov	r0, r2
 801651e:	f7fe f80e 	bl	801453e <_ZSt3minIfERKT_S2_S2_>
 8016522:	4603      	mov	r3, r0
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	ee07 3a90 	vmov	s15, r3
}
 801652a:	eeb0 0a67 	vmov.f32	s0, s15
 801652e:	3710      	adds	r7, #16
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}

08016534 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	4603      	mov	r3, r0
 801653c:	60b9      	str	r1, [r7, #8]
 801653e:	607a      	str	r2, [r7, #4]
 8016540:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8016542:	7bfb      	ldrb	r3, [r7, #15]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d10b      	bne.n	8016560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	f04f 0200 	mov.w	r2, #0
 801654e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8016550:	f7ff ff52 	bl	80163f8 <_ZNSt14numeric_limitsIfE3maxEv>
 8016554:	eef0 7a40 	vmov.f32	s15, s0
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 801655e:	e023      	b.n	80165a8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8016560:	7bfb      	ldrb	r3, [r7, #15]
 8016562:	2b03      	cmp	r3, #3
 8016564:	d107      	bne.n	8016576 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	f04f 0200 	mov.w	r2, #0
 801656c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	4a0f      	ldr	r2, [pc, #60]	; (80165b0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8016572:	601a      	str	r2, [r3, #0]
}
 8016574:	e018      	b.n	80165a8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8016576:	7bfb      	ldrb	r3, [r7, #15]
 8016578:	2b02      	cmp	r3, #2
 801657a:	d107      	bne.n	801658c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	4a0d      	ldr	r2, [pc, #52]	; (80165b4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8016580:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016588:	601a      	str	r2, [r3, #0]
}
 801658a:	e00d      	b.n	80165a8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 801658c:	f7ff ff42 	bl	8016414 <_ZNSt14numeric_limitsIfE6lowestEv>
 8016590:	eef0 7a40 	vmov.f32	s15, s0
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 801659a:	f7ff ff2d 	bl	80163f8 <_ZNSt14numeric_limitsIfE3maxEv>
 801659e:	eef0 7a40 	vmov.f32	s15, s0
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	edc3 7a00 	vstr	s15, [r3]
}
 80165a8:	bf00      	nop
 80165aa:	3710      	adds	r7, #16
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	40c00000 	.word	0x40c00000
 80165b4:	bf800000 	.word	0xbf800000

080165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 80165b8:	b480      	push	{r7}
 80165ba:	b083      	sub	sp, #12
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	4618      	mov	r0, r3
 80165c8:	370c      	adds	r7, #12
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr

080165d2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 80165d2:	b480      	push	{r7}
 80165d4:	b083      	sub	sp, #12
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	4618      	mov	r0, r3
 80165e2:	370c      	adds	r7, #12
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr

080165ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d101      	bne.n	80165fe <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 80165fa:	f009 fb6f 	bl	801fcdc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
}
 8016602:	4618      	mov	r0, r3
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801660a:	b590      	push	{r4, r7, lr}
 801660c:	b087      	sub	sp, #28
 801660e:	af00      	add	r7, sp, #0
 8016610:	60f8      	str	r0, [r7, #12]
 8016612:	60b9      	str	r1, [r7, #8]
 8016614:	607a      	str	r2, [r7, #4]
 8016616:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8016618:	68b9      	ldr	r1, [r7, #8]
 801661a:	68f8      	ldr	r0, [r7, #12]
 801661c:	f7fe feb2 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016620:	4604      	mov	r4, r0
 8016622:	6839      	ldr	r1, [r7, #0]
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f7fe fead 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801662a:	4603      	mov	r3, r0
 801662c:	429c      	cmp	r4, r3
 801662e:	d001      	beq.n	8016634 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8016630:	f009 fb54 	bl	801fcdc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8016634:	68b9      	ldr	r1, [r7, #8]
 8016636:	68f8      	ldr	r0, [r7, #12]
 8016638:	f7fe fea4 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801663c:	4603      	mov	r3, r0
 801663e:	613b      	str	r3, [r7, #16]
 8016640:	6839      	ldr	r1, [r7, #0]
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	f7fe fe9e 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016648:	4603      	mov	r3, r0
 801664a:	617b      	str	r3, [r7, #20]
 801664c:	f107 0214 	add.w	r2, r7, #20
 8016650:	f107 0310 	add.w	r3, r7, #16
 8016654:	4611      	mov	r1, r2
 8016656:	4618      	mov	r0, r3
 8016658:	f7fe fc9a 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 801665c:	4603      	mov	r3, r0
 801665e:	681b      	ldr	r3, [r3, #0]
}
 8016660:	4618      	mov	r0, r3
 8016662:	371c      	adds	r7, #28
 8016664:	46bd      	mov	sp, r7
 8016666:	bd90      	pop	{r4, r7, pc}

08016668 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 8016668:	b590      	push	{r4, r7, lr}
 801666a:	ed2d 8b02 	vpush	{d8}
 801666e:	b0a9      	sub	sp, #164	; 0xa4
 8016670:	af02      	add	r7, sp, #8
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	607a      	str	r2, [r7, #4]
 8016678:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016680:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016688:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016690:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016698:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80166a0:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80166a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ae:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166b4:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80166b6:	68b8      	ldr	r0, [r7, #8]
 80166b8:	f7fe fcc9 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80166bc:	4603      	mov	r3, r0
 80166be:	2b04      	cmp	r3, #4
 80166c0:	d001      	beq.n	80166c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 80166c2:	f009 fb0b 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80166c6:	6838      	ldr	r0, [r7, #0]
 80166c8:	f7fe fcc1 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80166cc:	4603      	mov	r3, r0
 80166ce:	2b04      	cmp	r3, #4
 80166d0:	d001      	beq.n	80166d6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 80166d2:	f009 fb03 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80166d6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80166da:	f7fe fcb8 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b04      	cmp	r3, #4
 80166e2:	d001      	beq.n	80166e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 80166e4:	f009 fafa 	bl	801fcdc <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80166e8:	2300      	movs	r3, #0
 80166ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80166ee:	2100      	movs	r1, #0
 80166f0:	68b8      	ldr	r0, [r7, #8]
 80166f2:	f7ff ff8a 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80166f6:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80166f8:	2303      	movs	r3, #3
 80166fa:	683a      	ldr	r2, [r7, #0]
 80166fc:	2103      	movs	r1, #3
 80166fe:	68b8      	ldr	r0, [r7, #8]
 8016700:	f7ff ff83 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016704:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8016706:	2303      	movs	r3, #3
 8016708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801670c:	2100      	movs	r1, #0
 801670e:	6838      	ldr	r0, [r7, #0]
 8016710:	f7ff ff7b 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016714:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 8016716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801671a:	2b00      	cmp	r3, #0
 801671c:	d009      	beq.n	8016732 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 801671e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016722:	f7fe fe67 	bl	80153f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8016726:	4602      	mov	r2, r0
 8016728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801672a:	4293      	cmp	r3, r2
 801672c:	d001      	beq.n	8016732 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 801672e:	f009 fad5 	bl	801fcdc <abort>
  }
  const int input_height = input_shape.Dims(1);
 8016732:	2101      	movs	r1, #1
 8016734:	68b8      	ldr	r0, [r7, #8]
 8016736:	f7fe fe25 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801673a:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 801673c:	2102      	movs	r1, #2
 801673e:	68b8      	ldr	r0, [r7, #8]
 8016740:	f7fe fe20 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016744:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8016746:	2101      	movs	r1, #1
 8016748:	6838      	ldr	r0, [r7, #0]
 801674a:	f7fe fe1b 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801674e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8016750:	2102      	movs	r1, #2
 8016752:	6838      	ldr	r0, [r7, #0]
 8016754:	f7fe fe16 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016758:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 801675a:	2101      	movs	r1, #1
 801675c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016760:	f7fe fe10 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016764:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 8016766:	2102      	movs	r1, #2
 8016768:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801676c:	f7fe fe0a 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016770:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 8016772:	2300      	movs	r3, #0
 8016774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016778:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801677c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801677e:	429a      	cmp	r2, r3
 8016780:	f280 80f0 	bge.w	8016964 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016784:	2300      	movs	r3, #0
 8016786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801678a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016790:	429a      	cmp	r2, r3
 8016792:	f280 80e1 	bge.w	8016958 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8016796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801679a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801679c:	fb03 f202 	mul.w	r2, r3, r2
 80167a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167a2:	1ad3      	subs	r3, r2, r3
 80167a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80167a6:	2300      	movs	r3, #0
 80167a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80167ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80167b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b2:	429a      	cmp	r2, r3
 80167b4:	f280 80ca 	bge.w	801694c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 80167b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80167bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80167be:	fb03 f202 	mul.w	r2, r3, r2
 80167c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80167c4:	1ad3      	subs	r3, r2, r3
 80167c6:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80167c8:	2300      	movs	r3, #0
 80167ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80167ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80167d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167d4:	429a      	cmp	r2, r3
 80167d6:	f280 80b3 	bge.w	8016940 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 80167da:	f04f 0300 	mov.w	r3, #0
 80167de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80167e2:	2300      	movs	r3, #0
 80167e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80167e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80167ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167ee:	429a      	cmp	r2, r3
 80167f0:	da6d      	bge.n	80168ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 80167f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80167f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80167f8:	fb02 f303 	mul.w	r3, r2, r3
 80167fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80167fe:	4413      	add	r3, r2
 8016800:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016802:	2300      	movs	r3, #0
 8016804:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016806:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680a:	429a      	cmp	r2, r3
 801680c:	da59      	bge.n	80168c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 801680e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016810:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016812:	fb02 f303 	mul.w	r3, r2, r3
 8016816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016818:	4413      	add	r3, r2
 801681a:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 801681c:	6a3b      	ldr	r3, [r7, #32]
 801681e:	2b00      	cmp	r3, #0
 8016820:	db0c      	blt.n	801683c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8016822:	6a3a      	ldr	r2, [r7, #32]
 8016824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016826:	429a      	cmp	r2, r3
 8016828:	da08      	bge.n	801683c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682c:	2b00      	cmp	r3, #0
 801682e:	db05      	blt.n	801683c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8016830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016834:	429a      	cmp	r2, r3
 8016836:	da01      	bge.n	801683c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8016838:	2301      	movs	r3, #1
 801683a:	e000      	b.n	801683e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 801683c:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 801683e:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8016840:	7ffb      	ldrb	r3, [r7, #31]
 8016842:	f083 0301 	eor.w	r3, r3, #1
 8016846:	b2db      	uxtb	r3, r3
 8016848:	2b00      	cmp	r3, #0
 801684a:	d135      	bne.n	80168b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801684c:	2300      	movs	r3, #0
 801684e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016850:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016854:	429a      	cmp	r2, r3
 8016856:	da30      	bge.n	80168ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 8016858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801685a:	9300      	str	r3, [sp, #0]
 801685c:	6a3b      	ldr	r3, [r7, #32]
 801685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016860:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016864:	68b8      	ldr	r0, [r7, #8]
 8016866:	f7ff fded 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801686a:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 801686c:	009b      	lsls	r3, r3, #2
 801686e:	687a      	ldr	r2, [r7, #4]
 8016870:	4413      	add	r3, r2
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 8016876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801687c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016880:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016884:	6838      	ldr	r0, [r7, #0]
 8016886:	f7ff fddd 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801688a:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 801688c:	009b      	lsls	r3, r3, #2
 801688e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016892:	4413      	add	r3, r2
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 8016898:	ed97 7a06 	vldr	s14, [r7, #24]
 801689c:	edd7 7a05 	vldr	s15, [r7, #20]
 80168a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168a4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80168a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168ac:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80168b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80168b2:	3301      	adds	r3, #1
 80168b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80168b6:	e7cb      	b.n	8016850 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 80168b8:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80168ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80168bc:	3301      	adds	r3, #1
 80168be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80168c0:	e7a1      	b.n	8016806 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80168c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80168c6:	3301      	adds	r3, #1
 80168c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80168cc:	e78c      	b.n	80167e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 80168ce:	f04f 0300 	mov.w	r3, #0
 80168d2:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 80168d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d007      	beq.n	80168ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 80168dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168e0:	009b      	lsls	r3, r3, #2
 80168e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80168e6:	4413      	add	r3, r2
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 80168ec:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80168f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80168f4:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80168f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016902:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016906:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801690a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801690e:	f7ff fd99 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016912:	4603      	mov	r3, r0
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801691a:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 801691c:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8016920:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8016924:	eeb0 0a48 	vmov.f32	s0, s16
 8016928:	f7ff fde4 	bl	80164f4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 801692c:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8016930:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016938:	3301      	adds	r3, #1
 801693a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801693e:	e746      	b.n	80167ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016944:	3301      	adds	r3, #1
 8016946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801694a:	e72f      	b.n	80167ac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801694c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016950:	3301      	adds	r3, #1
 8016952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016956:	e718      	b.n	801678a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 8016958:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801695c:	3301      	adds	r3, #1
 801695e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016962:	e709      	b.n	8016778 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 8016964:	bf00      	nop
 8016966:	379c      	adds	r7, #156	; 0x9c
 8016968:	46bd      	mov	sp, r7
 801696a:	ecbd 8b02 	vpop	{d8}
 801696e:	bd90      	pop	{r4, r7, pc}

08016970 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8016970:	b590      	push	{r4, r7, lr}
 8016972:	b0a9      	sub	sp, #164	; 0xa4
 8016974:	af02      	add	r7, sp, #8
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	607a      	str	r2, [r7, #4]
 801697c:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	695b      	ldr	r3, [r3, #20]
 8016982:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801698a:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016992:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801699a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80169a2:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80169aa:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169b2:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	69db      	ldr	r3, [r3, #28]
 80169b8:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169be:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169c4:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80169c6:	69ba      	ldr	r2, [r7, #24]
 80169c8:	697b      	ldr	r3, [r7, #20]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	dd01      	ble.n	80169d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 80169ce:	f009 f985 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80169d2:	6838      	ldr	r0, [r7, #0]
 80169d4:	f7fe fb3b 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80169d8:	4603      	mov	r3, r0
 80169da:	2b04      	cmp	r3, #4
 80169dc:	d001      	beq.n	80169e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 80169de:	f009 f97d 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80169e2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80169e6:	f7fe fb32 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b04      	cmp	r3, #4
 80169ee:	d001      	beq.n	80169f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 80169f0:	f009 f974 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80169f4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80169f8:	f7fe fb29 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80169fc:	4603      	mov	r3, r0
 80169fe:	2b04      	cmp	r3, #4
 8016a00:	d001      	beq.n	8016a06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8016a02:	f009 f96b 	bl	801fcdc <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016a06:	2300      	movs	r3, #0
 8016a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	6838      	ldr	r0, [r7, #0]
 8016a10:	f7ff fdfb 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016a14:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8016a16:	2303      	movs	r3, #3
 8016a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016a1c:	2103      	movs	r1, #3
 8016a1e:	6838      	ldr	r0, [r7, #0]
 8016a20:	f7ff fdf3 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016a24:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8016a26:	2303      	movs	r3, #3
 8016a28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016a32:	f7ff fdea 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016a36:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8016a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d009      	beq.n	8016a54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8016a40:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016a44:	f7fe fcd6 	bl	80153f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8016a48:	4602      	mov	r2, r0
 8016a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a4c:	4293      	cmp	r3, r2
 8016a4e:	d001      	beq.n	8016a54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8016a50:	f009 f944 	bl	801fcdc <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8016a54:	2101      	movs	r1, #1
 8016a56:	6838      	ldr	r0, [r7, #0]
 8016a58:	f7fe fc94 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a5c:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8016a5e:	2102      	movs	r1, #2
 8016a60:	6838      	ldr	r0, [r7, #0]
 8016a62:	f7fe fc8f 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a66:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8016a68:	2101      	movs	r1, #1
 8016a6a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016a6e:	f7fe fc89 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a72:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8016a74:	2102      	movs	r1, #2
 8016a76:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016a7a:	f7fe fc83 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a7e:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8016a80:	2101      	movs	r1, #1
 8016a82:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016a86:	f7fe fc7d 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8016a8c:	2102      	movs	r1, #2
 8016a8e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016a92:	f7fe fc77 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a96:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8016a98:	2300      	movs	r3, #0
 8016a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	f280 8113 	bge.w	8016cd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016aaa:	2300      	movs	r3, #0
 8016aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016ab0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	f280 8104 	bge.w	8016cc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8016abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ac0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016ac2:	fb03 f202 	mul.w	r2, r3, r2
 8016ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ac8:	1ad3      	subs	r3, r2, r3
 8016aca:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016acc:	2300      	movs	r3, #0
 8016ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016ad2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	f280 80ed 	bge.w	8016cb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8016ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016ae4:	fb03 f202 	mul.w	r2, r3, r2
 8016ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016aea:	1ad3      	subs	r3, r2, r3
 8016aec:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016aee:	2300      	movs	r3, #0
 8016af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016af4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016afa:	429a      	cmp	r2, r3
 8016afc:	f280 80d6 	bge.w	8016cac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8016b00:	2300      	movs	r3, #0
 8016b02:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016b04:	2300      	movs	r3, #0
 8016b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b10:	429a      	cmp	r2, r3
 8016b12:	da76      	bge.n	8016c02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8016b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016b1a:	fb02 f303 	mul.w	r3, r2, r3
 8016b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b20:	4413      	add	r3, r2
 8016b22:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016b24:	2300      	movs	r3, #0
 8016b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b30:	429a      	cmp	r2, r3
 8016b32:	da60      	bge.n	8016bf6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8016b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016b3a:	fb02 f303 	mul.w	r3, r2, r3
 8016b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b40:	4413      	add	r3, r2
 8016b42:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8016b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	db0c      	blt.n	8016b64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8016b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	da08      	bge.n	8016b64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8016b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	db05      	blt.n	8016b64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8016b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	da01      	bge.n	8016b64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8016b60:	2301      	movs	r3, #1
 8016b62:	e000      	b.n	8016b66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8016b64:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8016b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8016b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b6e:	f083 0301 	eor.w	r3, r3, #1
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d137      	bne.n	8016be8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8016b78:	2300      	movs	r3, #0
 8016b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016b7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b80:	429a      	cmp	r2, r3
 8016b82:	da32      	bge.n	8016bea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8016b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b8c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016b90:	6838      	ldr	r0, [r7, #0]
 8016b92:	f7ff fc57 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016b96:	4603      	mov	r3, r0
 8016b98:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8016b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016b9e:	4413      	add	r3, r2
 8016ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8016ba4:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8016ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016ba8:	9300      	str	r3, [sp, #0]
 8016baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016bb2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016bb6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016bba:	f7ff fc43 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8016bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016bc6:	4413      	add	r3, r2
 8016bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8016bcc:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8016bce:	6a3a      	ldr	r2, [r7, #32]
 8016bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016bd2:	4413      	add	r3, r2
 8016bd4:	69fa      	ldr	r2, [r7, #28]
 8016bd6:	fb03 f202 	mul.w	r2, r3, r2
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	4413      	add	r3, r2
 8016bde:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8016be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016be2:	3301      	adds	r3, #1
 8016be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016be6:	e7c9      	b.n	8016b7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8016be8:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bee:	3301      	adds	r3, #1
 8016bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016bf4:	e799      	b.n	8016b2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016c00:	e783      	b.n	8016b0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8016c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d009      	beq.n	8016c1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 8016c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016c14:	4413      	add	r3, r2
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	4413      	add	r3, r2
 8016c1c:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8016c1e:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	68ba      	ldr	r2, [r7, #8]
 8016c28:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8016c2a:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	461a      	mov	r2, r3
 8016c3a:	f7fe fc33 	bl	80154a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8016c42:	693a      	ldr	r2, [r7, #16]
 8016c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c46:	4413      	add	r3, r2
 8016c48:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8016c4a:	f107 0218 	add.w	r2, r7, #24
 8016c4e:	f107 0310 	add.w	r3, r7, #16
 8016c52:	4611      	mov	r1, r2
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7fe f9af 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8016c60:	f107 0214 	add.w	r2, r7, #20
 8016c64:	f107 0310 	add.w	r3, r7, #16
 8016c68:	4611      	mov	r1, r2
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7fe f990 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8016c70:	4603      	mov	r3, r0
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8016c76:	693c      	ldr	r4, [r7, #16]
 8016c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016c7c:	9300      	str	r3, [sp, #0]
 8016c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016c82:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016c86:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016c8a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016c8e:	f7ff fbd9 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016c92:	4603      	mov	r3, r0
 8016c94:	461a      	mov	r2, r3
 8016c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c9a:	4413      	add	r3, r2
 8016c9c:	b262      	sxtb	r2, r4
 8016c9e:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016caa:	e723      	b.n	8016af4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016cb0:	3301      	adds	r3, #1
 8016cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016cb6:	e70c      	b.n	8016ad2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016cbc:	3301      	adds	r3, #1
 8016cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016cc2:	e6f5      	b.n	8016ab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8016cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cc8:	3301      	adds	r3, #1
 8016cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016cce:	e6e6      	b.n	8016a9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8016cd0:	bf00      	nop
 8016cd2:	379c      	adds	r7, #156	; 0x9c
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd90      	pop	{r4, r7, pc}

08016cd8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d101      	bne.n	8016cf0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8016cec:	f008 fff6 	bl	801fcdc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cf4:	2138      	movs	r1, #56	; 0x38
 8016cf6:	68f8      	ldr	r0, [r7, #12]
 8016cf8:	4798      	blx	r3
 8016cfa:	4603      	mov	r3, r0
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3710      	adds	r7, #16
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8016d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d06:	b0b7      	sub	sp, #220	; 0xdc
 8016d08:	af08      	add	r7, sp, #32
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	691b      	ldr	r3, [r3, #16]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d101      	bne.n	8016d1a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8016d16:	f008 ffe1 	bl	801fcdc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	695b      	ldr	r3, [r3, #20]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d101      	bne.n	8016d26 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8016d22:	f008 ffdb 	bl	801fcdc <abort>

  int32_t buf_size = 0;
 8016d26:	2300      	movs	r3, #0
 8016d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	695b      	ldr	r3, [r3, #20]
 8016d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	691b      	ldr	r3, [r3, #16]
 8016d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8016d3c:	4ba2      	ldr	r3, [pc, #648]	; (8016fc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	461a      	mov	r2, r3
 8016d42:	68b9      	ldr	r1, [r7, #8]
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f7fd fd57 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016d4a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8016d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d10a      	bne.n	8016d6c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	695c      	ldr	r4, [r3, #20]
 8016d5a:	4b9c      	ldr	r3, [pc, #624]	; (8016fcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 8016d5c:	9300      	str	r3, [sp, #0]
 8016d5e:	233d      	movs	r3, #61	; 0x3d
 8016d60:	4a9b      	ldr	r2, [pc, #620]	; (8016fd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8016d62:	499c      	ldr	r1, [pc, #624]	; (8016fd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	47a0      	blx	r4
 8016d68:	2401      	movs	r4, #1
 8016d6a:	e128      	b.n	8016fbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8016d6c:	4b9a      	ldr	r3, [pc, #616]	; (8016fd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	461a      	mov	r2, r3
 8016d72:	68b9      	ldr	r1, [r7, #8]
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	f7fd fd3f 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016d7a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 8016d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d10a      	bne.n	8016d9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	695c      	ldr	r4, [r3, #20]
 8016d8a:	4b94      	ldr	r3, [pc, #592]	; (8016fdc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8016d8c:	9300      	str	r3, [sp, #0]
 8016d8e:	233f      	movs	r3, #63	; 0x3f
 8016d90:	4a8f      	ldr	r2, [pc, #572]	; (8016fd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8016d92:	4990      	ldr	r1, [pc, #576]	; (8016fd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	47a0      	blx	r4
 8016d98:	2401      	movs	r4, #1
 8016d9a:	e110      	b.n	8016fbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8016d9c:	4b90      	ldr	r3, [pc, #576]	; (8016fe0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	461a      	mov	r2, r3
 8016da2:	68b9      	ldr	r1, [r7, #8]
 8016da4:	68f8      	ldr	r0, [r7, #12]
 8016da6:	f7fd fd37 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8016daa:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 8016dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d10a      	bne.n	8016dcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	695c      	ldr	r4, [r3, #20]
 8016dba:	4b8a      	ldr	r3, [pc, #552]	; (8016fe4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8016dbc:	9300      	str	r3, [sp, #0]
 8016dbe:	2341      	movs	r3, #65	; 0x41
 8016dc0:	4a83      	ldr	r2, [pc, #524]	; (8016fd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8016dc2:	4984      	ldr	r1, [pc, #528]	; (8016fd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	47a0      	blx	r4
 8016dc8:	2401      	movs	r4, #1
 8016dca:	e0f8      	b.n	8016fbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>

  RuntimeShape input_shape = GetTensorShape(input);
 8016dcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016dd0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fe f99e 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8016dda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016dde:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe f997 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8016de8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8016dec:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8016df0:	2300      	movs	r3, #0
 8016df2:	2100      	movs	r1, #0
 8016df4:	f7ff fc09 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8016dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016e00:	689b      	ldr	r3, [r3, #8]
 8016e02:	689b      	ldr	r3, [r3, #8]
 8016e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8016e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016e0a:	689b      	ldr	r3, [r3, #8]
 8016e0c:	68db      	ldr	r3, [r3, #12]
 8016e0e:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8016e10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016e14:	2103      	movs	r1, #3
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7fe fab4 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8016e20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016e24:	2103      	movs	r1, #3
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7fe faac 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8016e30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016e34:	689b      	ldr	r3, [r3, #8]
 8016e36:	689b      	ldr	r3, [r3, #8]
 8016e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 8016e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016e3e:	689b      	ldr	r3, [r3, #8]
 8016e40:	68db      	ldr	r3, [r3, #12]
 8016e42:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8016e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e46:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8016e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8016e4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e50:	689b      	ldr	r3, [r3, #8]
 8016e52:	689b      	ldr	r3, [r3, #8]
 8016e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 8016e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e5a:	689b      	ldr	r3, [r3, #8]
 8016e5c:	68db      	ldr	r3, [r3, #12]
 8016e5e:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8016e60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016e64:	2103      	movs	r1, #3
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7fe fa8c 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	647b      	str	r3, [r7, #68]	; 0x44
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8016e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016e74:	689a      	ldr	r2, [r3, #8]
 8016e76:	4b5c      	ldr	r3, [pc, #368]	; (8016fe8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	4413      	add	r3, r2
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8016e88:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016e8c:	0092      	lsls	r2, r2, #2
 8016e8e:	4611      	mov	r1, r2
 8016e90:	68f8      	ldr	r0, [r7, #12]
 8016e92:	4798      	blx	r3
 8016e94:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 8016e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e9a:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8016ea0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016ea4:	0092      	lsls	r2, r2, #2
 8016ea6:	4611      	mov	r1, r2
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	4798      	blx	r3
 8016eac:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 8016eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016eb2:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 8016eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016eb6:	607b      	str	r3, [r7, #4]
 8016eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016ebc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016ebe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016ec0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8016ec2:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8016ec6:	782d      	ldrb	r5, [r5, #0]
 8016ec8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8016ecc:	9606      	str	r6, [sp, #24]
 8016ece:	9505      	str	r5, [sp, #20]
 8016ed0:	9404      	str	r4, [sp, #16]
 8016ed2:	9003      	str	r0, [sp, #12]
 8016ed4:	9102      	str	r1, [sp, #8]
 8016ed6:	9201      	str	r2, [sp, #4]
 8016ed8:	9300      	str	r3, [sp, #0]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016ee0:	68b9      	ldr	r1, [r7, #8]
 8016ee2:	68f8      	ldr	r0, [r7, #12]
 8016ee4:	f000 fd7c 	bl	80179e0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8016eee:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d002      	beq.n	8016efc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 8016ef6:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 8016efa:	e056      	b.n	8016faa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8016efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	2b09      	cmp	r3, #9
 8016f04:	d134      	bne.n	8016f70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8016f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f0a:	691b      	ldr	r3, [r3, #16]
 8016f0c:	425b      	negs	r3, r3
 8016f0e:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 8016f10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016f14:	691b      	ldr	r3, [r3, #16]
 8016f16:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8016f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016f1c:	689b      	ldr	r3, [r3, #8]
 8016f1e:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 8016f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8016f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016f2c:	695b      	ldr	r3, [r3, #20]
 8016f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 8016f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016f34:	691b      	ldr	r3, [r3, #16]
 8016f36:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 8016f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 8016f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 8016f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f4e:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 8016f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f56:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 8016f58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016f5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016f60:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016f64:	f107 0010 	add.w	r0, r7, #16
 8016f68:	f7ee fe80 	bl	8005c6c <arm_convolve_wrapper_s8_get_buffer_size>
 8016f6c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
  }

  if (buf_size > 0) {
 8016f70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	dd12      	ble.n	8016f9e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8016f80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016f84:	3234      	adds	r2, #52	; 0x34
 8016f86:	68f8      	ldr	r0, [r7, #12]
 8016f88:	4798      	blx	r3
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8016f90:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d007      	beq.n	8016fa8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 8016f98:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 8016f9c:	e005      	b.n	8016faa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
 8016f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8016fa6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8016fa8:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 8016faa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7fe f837 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 8016fb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7fe f832 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8016fbe:	4623      	mov	r3, r4
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	37bc      	adds	r7, #188	; 0xbc
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fc8:	080234b4 	.word	0x080234b4
 8016fcc:	08022218 	.word	0x08022218
 8016fd0:	08022174 	.word	0x08022174
 8016fd4:	08022200 	.word	0x08022200
 8016fd8:	080234b8 	.word	0x080234b8
 8016fdc:	0802222c 	.word	0x0802222c
 8016fe0:	080234c0 	.word	0x080234c0
 8016fe4:	08022240 	.word	0x08022240
 8016fe8:	080234c4 	.word	0x080234c4

08016fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 8016fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fee:	b0ef      	sub	sp, #444	; 0x1bc
 8016ff0:	af08      	add	r7, sp, #32
 8016ff2:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8016ff6:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 8016ffa:	6020      	str	r0, [r4, #0]
 8016ffc:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8017000:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 8017004:	6001      	str	r1, [r0, #0]
 8017006:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 801700a:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 801700e:	600a      	str	r2, [r1, #0]
 8017010:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8017014:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8017018:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 801701a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801701e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	695b      	ldr	r3, [r3, #20]
 8017026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 801702a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801702e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	691b      	ldr	r3, [r3, #16]
 8017036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 801703a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801703e:	2b01      	cmp	r3, #1
 8017040:	f040 81d2 	bne.w	80173e8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
 8017044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017048:	2b01      	cmp	r3, #1
 801704a:	f040 81cd 	bne.w	80173e8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 801704e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017052:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	691b      	ldr	r3, [r3, #16]
 801705a:	425b      	negs	r3, r3
 801705c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 8017060:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017064:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	699b      	ldr	r3, [r3, #24]
 801706c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 8017070:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017074:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	689b      	ldr	r3, [r3, #8]
 801707c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 8017080:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017084:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	685b      	ldr	r3, [r3, #4]
 801708c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 8017090:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017094:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 80170a0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80170a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 80170b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80170b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80170c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80170c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 80170d0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80170d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 80170dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 80170e0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80170e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 80170ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80170f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80170f4:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80170f8:	4618      	mov	r0, r3
 80170fa:	f001 ff94 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80170fe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017106:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 801710a:	4618      	mov	r0, r3
 801710c:	f001 ff8b 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8017110:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017114:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8017118:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801711c:	4618      	mov	r0, r3
 801711e:	f001 ff82 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8017122:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017126:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801712a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801712e:	4618      	mov	r0, r3
 8017130:	f001 ff79 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8017134:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017138:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801713c:	429a      	cmp	r2, r3
 801713e:	dd01      	ble.n	8017144 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x158>
 8017140:	f008 fdcc 	bl	801fcdc <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8017144:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017148:	4618      	mov	r0, r3
 801714a:	f7fd ff80 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801714e:	4603      	mov	r3, r0
 8017150:	2b04      	cmp	r3, #4
 8017152:	d001      	beq.n	8017158 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x16c>
 8017154:	f008 fdc2 	bl	801fcdc <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8017158:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801715c:	4618      	mov	r0, r3
 801715e:	f7fd ff76 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017162:	4603      	mov	r3, r0
 8017164:	2b04      	cmp	r3, #4
 8017166:	d001      	beq.n	801716c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x180>
 8017168:	f008 fdb8 	bl	801fcdc <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801716c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017170:	4618      	mov	r0, r3
 8017172:	f7fd ff6c 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017176:	4603      	mov	r3, r0
 8017178:	2b04      	cmp	r3, #4
 801717a:	d001      	beq.n	8017180 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x194>
 801717c:	f008 fdae 	bl	801fcdc <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8017180:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8017184:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8017188:	2300      	movs	r3, #0
 801718a:	2100      	movs	r1, #0
 801718c:	f7ff fa3d 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017190:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8017194:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8017198:	f107 0094 	add.w	r0, r7, #148	; 0x94
 801719c:	2303      	movs	r3, #3
 801719e:	2103      	movs	r1, #3
 80171a0:	f7ff fa33 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80171a4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80171a8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80171ac:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80171b0:	2303      	movs	r3, #3
 80171b2:	2100      	movs	r1, #0
 80171b4:	f7ff fa29 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80171b8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80171bc:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80171c0:	f7fe feb2 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80171c4:	4603      	mov	r3, r0
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	bf14      	ite	ne
 80171ca:	2301      	movne	r3, #1
 80171cc:	2300      	moveq	r3, #0
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d00b      	beq.n	80171ec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80171d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80171d8:	4618      	mov	r0, r3
 80171da:	f7fe f90b 	bl	80153f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80171de:	4602      	mov	r2, r0
 80171e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80171e4:	4293      	cmp	r3, r2
 80171e6:	d001      	beq.n	80171ec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
 80171e8:	f008 fd78 	bl	801fcdc <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80171ec:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80171f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80171f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80171f8:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 80171fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80171fe:	2101      	movs	r1, #1
 8017200:	4618      	mov	r0, r3
 8017202:	f7fe f8bf 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017206:	4602      	mov	r2, r0
 8017208:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801720c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017210:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8017212:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017216:	2102      	movs	r1, #2
 8017218:	4618      	mov	r0, r3
 801721a:	f7fe f8b3 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801721e:	4602      	mov	r2, r0
 8017220:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017224:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017228:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 801722a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801722e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017232:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8017236:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 8017238:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801723c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8017240:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017244:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8017246:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801724a:	2101      	movs	r1, #1
 801724c:	4618      	mov	r0, r3
 801724e:	f7fe f899 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017252:	4602      	mov	r2, r0
 8017254:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017258:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801725c:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 801725e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8017262:	2102      	movs	r1, #2
 8017264:	4618      	mov	r0, r3
 8017266:	f7fe f88d 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801726a:	4602      	mov	r2, r0
 801726c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017270:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8017274:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 8017276:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801727a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801727e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8017282:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8017284:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017288:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801728c:	2201      	movs	r2, #1
 801728e:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8017290:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017294:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8017298:	2201      	movs	r2, #1
 801729a:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 801729c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80172a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80172a4:	2201      	movs	r2, #1
 80172a6:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80172a8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80172ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80172b0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80172b4:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80172b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80172ba:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80172be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80172c2:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80172c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80172c8:	2101      	movs	r1, #1
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7fe f85a 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 80172d0:	4602      	mov	r2, r0
 80172d2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80172d6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80172da:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80172dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80172e0:	2102      	movs	r1, #2
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7fe f84e 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 80172e8:	4602      	mov	r2, r0
 80172ea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80172ee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80172f2:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80172f4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80172f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80172fc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017300:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8017302:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017306:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801730a:	2200      	movs	r2, #0
 801730c:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 801730e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017312:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8017316:	2200      	movs	r2, #0
 8017318:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 801731a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801731e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017326:	2b00      	cmp	r3, #0
 8017328:	db17      	blt.n	801735a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x36e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801732a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801732e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017336:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 801733a:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 801733e:	6812      	ldr	r2, [r2, #0]
 8017340:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8017342:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8017346:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 801734a:	6810      	ldr	r0, [r2, #0]
 801734c:	4798      	blx	r3
 801734e:	4602      	mov	r2, r0
 8017350:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017354:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8017358:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 801735a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 801735e:	f7fe fde3 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017362:	4605      	mov	r5, r0
 8017364:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8017368:	f7fe fdde 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801736c:	4606      	mov	r6, r0
 801736e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8017372:	f7ff f93b 	bl	80165ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801737c:	f7fe fde3 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8017380:	4603      	mov	r3, r0
 8017382:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8017386:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801738a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 801738e:	f107 001c 	add.w	r0, r7, #28
 8017392:	9306      	str	r3, [sp, #24]
 8017394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017398:	9305      	str	r3, [sp, #20]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	9304      	str	r3, [sp, #16]
 801739e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80173a2:	9303      	str	r3, [sp, #12]
 80173a4:	9602      	str	r6, [sp, #8]
 80173a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80173aa:	9301      	str	r3, [sp, #4]
 80173ac:	9500      	str	r5, [sp, #0]
 80173ae:	4623      	mov	r3, r4
 80173b0:	f7ee fbdc 	bl	8005b6c <arm_convolve_wrapper_s8>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d001      	beq.n	80173be <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3d2>
 80173ba:	f008 fc8f 	bl	801fcdc <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80173be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7fd fe2d 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80173c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7fd fe28 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80173d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7fd fe23 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80173dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7fd fe1e 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80173e6:	e075      	b.n	80174d4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x4e8>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 80173e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80173ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80173f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80173fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80173fe:	6819      	ldr	r1, [r3, #0]
 8017400:	f000 fa9d 	bl	801793e <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 8017404:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017408:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 8017410:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017414:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 801741c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8017420:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017424:	4618      	mov	r0, r3
 8017426:	f001 fdfe 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801742a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 801742e:	f7fe fd7b 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017432:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8017434:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8017438:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 801743c:	4618      	mov	r0, r3
 801743e:	f001 fdf2 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8017442:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8017446:	f7fe fd6f 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801744a:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 801744c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8017450:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8017454:	4618      	mov	r0, r3
 8017456:	f001 fde6 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801745a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801745e:	f7ff f8c5 	bl	80165ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8017462:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8017464:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017468:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801746c:	4618      	mov	r0, r3
 801746e:	f001 fdda 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8017472:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8017476:	f7fe fd66 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801747a:	4603      	mov	r3, r0
 801747c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8017480:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8017484:	9306      	str	r3, [sp, #24]
 8017486:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801748a:	9305      	str	r3, [sp, #20]
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	9304      	str	r3, [sp, #16]
 8017490:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8017494:	9303      	str	r3, [sp, #12]
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	9302      	str	r3, [sp, #8]
 801749a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801749e:	9301      	str	r3, [sp, #4]
 80174a0:	9600      	str	r6, [sp, #0]
 80174a2:	4613      	mov	r3, r2
 80174a4:	462a      	mov	r2, r5
 80174a6:	4621      	mov	r1, r4
 80174a8:	f7ff fa62 	bl	8016970 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 80174ac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7fd fdb6 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 80174b6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80174ba:	4618      	mov	r0, r3
 80174bc:	f7fd fdb1 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 80174c0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7fd fdac 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 80174ca:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7fd fda7 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 80174d4:	2300      	movs	r3, #0
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80174dc:	46bd      	mov	sp, r7
 80174de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80174e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e4:	b0bc      	sub	sp, #240	; 0xf0
 80174e6:	af08      	add	r7, sp, #32
 80174e8:	6078      	str	r0, [r7, #4]
 80174ea:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 80174ec:	4b8b      	ldr	r3, [pc, #556]	; (801771c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	461a      	mov	r2, r3
 80174f2:	6839      	ldr	r1, [r7, #0]
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f7fe f819 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80174fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 80174fe:	4b88      	ldr	r3, [pc, #544]	; (8017720 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	461a      	mov	r2, r3
 8017504:	6839      	ldr	r1, [r7, #0]
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f7fe f810 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801750c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8017510:	6838      	ldr	r0, [r7, #0]
 8017512:	f7ff f851 	bl	80165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8017516:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 8017518:	2b03      	cmp	r3, #3
 801751a:	d108      	bne.n	801752e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 801751c:	4b81      	ldr	r3, [pc, #516]	; (8017724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	461a      	mov	r2, r3
 8017522:	6839      	ldr	r1, [r7, #0]
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f7fe f801 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801752a:	4603      	mov	r3, r0
 801752c:	e000      	b.n	8017530 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
 801752e:	2300      	movs	r3, #0
          : nullptr;
 8017530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 8017534:	4b7c      	ldr	r3, [pc, #496]	; (8017728 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	461a      	mov	r2, r3
 801753a:	6839      	ldr	r1, [r7, #0]
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f7fe f805 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017542:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	695b      	ldr	r3, [r3, #20]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d101      	bne.n	8017552 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 801754e:	f008 fbc5 	bl	801fcdc <abort>
  const auto& params =
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	695b      	ldr	r3, [r3, #20]
 8017556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	691b      	ldr	r3, [r3, #16]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d101      	bne.n	8017566 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8017562:	f008 fbbb 	bl	801fcdc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	691b      	ldr	r3, [r3, #16]
 801756a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801756e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017572:	7a1a      	ldrb	r2, [r3, #8]
 8017574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017578:	7a1b      	ldrb	r3, [r3, #8]
 801757a:	429a      	cmp	r2, r3
 801757c:	d016      	beq.n	80175ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	695c      	ldr	r4, [r3, #20]
 8017582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017586:	7a1b      	ldrb	r3, [r3, #8]
 8017588:	461a      	mov	r2, r3
 801758a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801758e:	7a1b      	ldrb	r3, [r3, #8]
 8017590:	9303      	str	r3, [sp, #12]
 8017592:	9202      	str	r2, [sp, #8]
 8017594:	4b65      	ldr	r3, [pc, #404]	; (801772c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>)
 8017596:	9301      	str	r3, [sp, #4]
 8017598:	4b65      	ldr	r3, [pc, #404]	; (8017730 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 801759a:	9300      	str	r3, [sp, #0]
 801759c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80175a0:	4a64      	ldr	r2, [pc, #400]	; (8017734 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 80175a2:	4965      	ldr	r1, [pc, #404]	; (8017738 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	47a0      	blx	r4
 80175a8:	2301      	movs	r3, #1
 80175aa:	e0b1      	b.n	8017710 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80175ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80175b0:	7a1a      	ldrb	r2, [r3, #8]
 80175b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80175b6:	7a1b      	ldrb	r3, [r3, #8]
 80175b8:	429a      	cmp	r2, r3
 80175ba:	d006      	beq.n	80175ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	695b      	ldr	r3, [r3, #20]
 80175c0:	495e      	ldr	r1, [pc, #376]	; (801773c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	4798      	blx	r3
 80175c6:	2301      	movs	r3, #1
 80175c8:	e0a2      	b.n	8017710 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 80175ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80175ce:	7a1b      	ldrb	r3, [r3, #8]
 80175d0:	2b01      	cmp	r3, #1
 80175d2:	d002      	beq.n	80175da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 80175d4:	2b09      	cmp	r3, #9
 80175d6:	d073      	beq.n	80176c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
 80175d8:	e08a      	b.n	80176f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 80175da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80175de:	f107 0308 	add.w	r3, r7, #8
 80175e2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80175e6:	4618      	mov	r0, r3
 80175e8:	f000 f96d 	bl	80178c6 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 80175ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80175f0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80175f4:	4618      	mov	r0, r3
 80175f6:	f001 fd16 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80175fa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80175fe:	f7fe fc73 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017602:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8017604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017608:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801760c:	4618      	mov	r0, r3
 801760e:	f001 fd0a 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8017612:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8017616:	f7fe fc67 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801761a:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 801761c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8017620:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8017624:	4618      	mov	r0, r3
 8017626:	f001 fcfe 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801762a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801762e:	f7fe fc5b 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017632:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8017634:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017638:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801763c:	4618      	mov	r0, r3
 801763e:	f001 fcf2 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8017642:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8017646:	f7fe fc5e 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801764a:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 801764c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017650:	2100      	movs	r1, #0
 8017652:	4618      	mov	r0, r3
 8017654:	f001 fce7 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8017658:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801765c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017660:	f107 0008 	add.w	r0, r7, #8
 8017664:	2300      	movs	r3, #0
 8017666:	9306      	str	r3, [sp, #24]
 8017668:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801766c:	9305      	str	r3, [sp, #20]
 801766e:	9604      	str	r6, [sp, #16]
 8017670:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017674:	9303      	str	r3, [sp, #12]
 8017676:	9502      	str	r5, [sp, #8]
 8017678:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801767c:	9301      	str	r3, [sp, #4]
 801767e:	9400      	str	r4, [sp, #0]
 8017680:	4613      	mov	r3, r2
 8017682:	4642      	mov	r2, r8
 8017684:	f7fe fff0 	bl	8016668 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8017688:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801768c:	4618      	mov	r0, r3
 801768e:	f7fd fcc8 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 8017692:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017696:	4618      	mov	r0, r3
 8017698:	f7fd fcc3 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 801769c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7fd fcbe 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80176a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7fd fcb9 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80176b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176b4:	4618      	mov	r0, r3
 80176b6:	f7fd fcb4 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80176ba:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
 80176bc:	2300      	movs	r3, #0
 80176be:	e027      	b.n	8017710 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 80176c0:	2300      	movs	r3, #0
 80176c2:	9304      	str	r3, [sp, #16]
 80176c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80176c8:	9303      	str	r3, [sp, #12]
 80176ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80176ce:	9302      	str	r3, [sp, #8]
 80176d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80176d4:	9301      	str	r3, [sp, #4]
 80176d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80176da:	9300      	str	r3, [sp, #0]
 80176dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80176e4:	6839      	ldr	r1, [r7, #0]
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7ff fc80 	bl	8016fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 80176ec:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 80176ee:	e00f      	b.n	8017710 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	695c      	ldr	r4, [r3, #20]
 80176f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80176f8:	7a1b      	ldrb	r3, [r3, #8]
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7fc fd1e 	bl	801413c <TfLiteTypeGetName>
 8017700:	4602      	mov	r2, r0
 8017702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017706:	7a1b      	ldrb	r3, [r3, #8]
 8017708:	490d      	ldr	r1, [pc, #52]	; (8017740 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 801770a:	6878      	ldr	r0, [r7, #4]
 801770c:	47a0      	blx	r4
      return kTfLiteError;
 801770e:	2301      	movs	r3, #1
}
 8017710:	4618      	mov	r0, r3
 8017712:	37d0      	adds	r7, #208	; 0xd0
 8017714:	46bd      	mov	sp, r7
 8017716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801771a:	bf00      	nop
 801771c:	080234b4 	.word	0x080234b4
 8017720:	080234b8 	.word	0x080234b8
 8017724:	080234bc 	.word	0x080234bc
 8017728:	080234c0 	.word	0x080234c0
 801772c:	08022270 	.word	0x08022270
 8017730:	08022280 	.word	0x08022280
 8017734:	08022174 	.word	0x08022174
 8017738:	08022254 	.word	0x08022254
 801773c:	0802228c 	.word	0x0802228c
 8017740:	0802234c 	.word	0x0802234c

08017744 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8017744:	b4b0      	push	{r4, r5, r7}
 8017746:	b083      	sub	sp, #12
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	4a07      	ldr	r2, [pc, #28]	; (801776c <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8017750:	461c      	mov	r4, r3
 8017752:	4615      	mov	r5, r2
 8017754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017758:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801775c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	370c      	adds	r7, #12
 8017764:	46bd      	mov	sp, r7
 8017766:	bcb0      	pop	{r4, r5, r7}
 8017768:	4770      	bx	lr
 801776a:	bf00      	nop
 801776c:	08022368 	.word	0x08022368

08017770 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8017770:	b480      	push	{r7}
 8017772:	b087      	sub	sp, #28
 8017774:	af00      	add	r7, sp, #0
 8017776:	60f8      	str	r0, [r7, #12]
 8017778:	60b9      	str	r1, [r7, #8]
 801777a:	607a      	str	r2, [r7, #4]
 801777c:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	3b01      	subs	r3, #1
 8017782:	68ba      	ldr	r2, [r7, #8]
 8017784:	fb02 f303 	mul.w	r3, r2, r3
 8017788:	3301      	adds	r3, #1
 801778a:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 801778c:	6a3b      	ldr	r3, [r7, #32]
 801778e:	3b01      	subs	r3, #1
 8017790:	68fa      	ldr	r2, [r7, #12]
 8017792:	fb03 f202 	mul.w	r2, r3, r2
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	441a      	add	r2, r3
  int total_padding =
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	1ad3      	subs	r3, r2, r3
 801779e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 80177a0:	693b      	ldr	r3, [r7, #16]
 80177a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80177a6:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	f003 0301 	and.w	r3, r3, #1
 80177b0:	bfb8      	it	lt
 80177b2:	425b      	neglt	r3, r3
 80177b4:	461a      	mov	r2, r3
 80177b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b8:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	0fda      	lsrs	r2, r3, #31
 80177be:	4413      	add	r3, r2
 80177c0:	105b      	asrs	r3, r3, #1
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	371c      	adds	r7, #28
 80177c6:	46bd      	mov	sp, r7
 80177c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177cc:	4770      	bx	lr

080177ce <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 80177ce:	b480      	push	{r7}
 80177d0:	b087      	sub	sp, #28
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	60b9      	str	r1, [r7, #8]
 80177d6:	607a      	str	r2, [r7, #4]
 80177d8:	603b      	str	r3, [r7, #0]
 80177da:	4603      	mov	r3, r0
 80177dc:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	3b01      	subs	r3, #1
 80177e2:	6a3a      	ldr	r2, [r7, #32]
 80177e4:	fb02 f303 	mul.w	r3, r2, r3
 80177e8:	3301      	adds	r3, #1
 80177ea:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d101      	bne.n	80177f6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 80177f2:	2300      	movs	r3, #0
 80177f4:	e017      	b.n	8017826 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 80177f6:	7bfb      	ldrb	r3, [r7, #15]
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d002      	beq.n	8017802 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 80177fc:	2b02      	cmp	r3, #2
 80177fe:	d008      	beq.n	8017812 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8017800:	e010      	b.n	8017824 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8017802:	68ba      	ldr	r2, [r7, #8]
 8017804:	683b      	ldr	r3, [r7, #0]
 8017806:	4413      	add	r3, r2
 8017808:	1e5a      	subs	r2, r3, #1
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017810:	e009      	b.n	8017826 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8017812:	68ba      	ldr	r2, [r7, #8]
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	441a      	add	r2, r3
 8017818:	697b      	ldr	r3, [r7, #20]
 801781a:	1ad2      	subs	r2, r2, r3
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017822:	e000      	b.n	8017826 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8017824:	2300      	movs	r3, #0
  }
}
 8017826:	4618      	mov	r0, r3
 8017828:	371c      	adds	r7, #28
 801782a:	46bd      	mov	sp, r7
 801782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017830:	4770      	bx	lr

08017832 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8017832:	b580      	push	{r7, lr}
 8017834:	b088      	sub	sp, #32
 8017836:	af02      	add	r7, sp, #8
 8017838:	60f8      	str	r0, [r7, #12]
 801783a:	60b9      	str	r1, [r7, #8]
 801783c:	607a      	str	r2, [r7, #4]
 801783e:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8017840:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8017844:	6a3b      	ldr	r3, [r7, #32]
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801784c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801784e:	f7ff ffbe 	bl	80177ce <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8017852:	4602      	mov	r2, r0
 8017854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017856:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8017858:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017866:	f7ff ffb2 	bl	80177ce <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 801786a:	4602      	mov	r2, r0
 801786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786e:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8017870:	2300      	movs	r3, #0
 8017872:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8017874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f107 0214 	add.w	r2, r7, #20
 801787c:	9201      	str	r2, [sp, #4]
 801787e:	9300      	str	r3, [sp, #0]
 8017880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017884:	6839      	ldr	r1, [r7, #0]
 8017886:	68b8      	ldr	r0, [r7, #8]
 8017888:	f7ff ff72 	bl	8017770 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 801788c:	4602      	mov	r2, r0
  padding_values.height =
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8017892:	697a      	ldr	r2, [r7, #20]
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8017898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f107 0214 	add.w	r2, r7, #20
 80178a0:	9201      	str	r2, [sp, #4]
 80178a2:	9300      	str	r3, [sp, #0]
 80178a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178a8:	6a39      	ldr	r1, [r7, #32]
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f7ff ff60 	bl	8017770 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80178b0:	4602      	mov	r2, r0
  padding_values.width =
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 80178b6:	697a      	ldr	r2, [r7, #20]
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	609a      	str	r2, [r3, #8]
  return padding_values;
 80178bc:	bf00      	nop
}
 80178be:	68f8      	ldr	r0, [r7, #12]
 80178c0:	3718      	adds	r7, #24
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd80      	pop	{r7, pc}

080178c6 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 80178c6:	b580      	push	{r7, lr}
 80178c8:	b084      	sub	sp, #16
 80178ca:	af00      	add	r7, sp, #0
 80178cc:	60f8      	str	r0, [r7, #12]
 80178ce:	60b9      	str	r1, [r7, #8]
 80178d0:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	7b18      	ldrb	r0, [r3, #12]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	3330      	adds	r3, #48	; 0x30
 80178e0:	4619      	mov	r1, r3
 80178e2:	f7fe fe27 	bl	8016534 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	781b      	ldrb	r3, [r3, #0]
 80178ea:	4618      	mov	r0, r3
 80178ec:	f001 fbbd 	bl	801906a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 80178f0:	4603      	mov	r3, r0
 80178f2:	461a      	mov	r2, r3
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	b21a      	sxth	r2, r3
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	685b      	ldr	r3, [r3, #4]
 8017906:	b21a      	sxth	r2, r3
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 801790c:	68bb      	ldr	r3, [r7, #8]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	b21a      	sxth	r2, r3
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	689b      	ldr	r3, [r3, #8]
 801791a:	b21a      	sxth	r2, r3
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	691b      	ldr	r3, [r3, #16]
 8017924:	b21a      	sxth	r2, r3
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	695b      	ldr	r3, [r3, #20]
 801792e:	b21a      	sxth	r2, r3
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	821a      	strh	r2, [r3, #16]
  return op_params;
 8017934:	bf00      	nop
}
 8017936:	68f8      	ldr	r0, [r7, #12]
 8017938:	3710      	adds	r7, #16
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}

0801793e <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 801793e:	b580      	push	{r7, lr}
 8017940:	b084      	sub	sp, #16
 8017942:	af00      	add	r7, sp, #0
 8017944:	60f8      	str	r0, [r7, #12]
 8017946:	60b9      	str	r1, [r7, #8]
 8017948:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	691b      	ldr	r3, [r3, #16]
 801794e:	425a      	negs	r2, r3
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	695b      	ldr	r3, [r3, #20]
 8017958:	425a      	negs	r2, r3
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	699a      	ldr	r2, [r3, #24]
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	69da      	ldr	r2, [r3, #28]
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6a1b      	ldr	r3, [r3, #32]
 8017972:	425a      	negs	r2, r3
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	781b      	ldrb	r3, [r3, #0]
 801797c:	4618      	mov	r0, r3
 801797e:	f001 fb74 	bl	801906a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8017982:	4603      	mov	r3, r0
 8017984:	461a      	mov	r2, r3
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	b21a      	sxth	r2, r3
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	b21a      	sxth	r2, r3
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	689b      	ldr	r3, [r3, #8]
 80179a2:	b21a      	sxth	r2, r3
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	b21a      	sxth	r2, r3
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	695b      	ldr	r3, [r3, #20]
 80179b6:	b21a      	sxth	r2, r3
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	691b      	ldr	r3, [r3, #16]
 80179c0:	b21a      	sxth	r2, r3
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 80179d6:	bf00      	nop
}
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	3710      	adds	r7, #16
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 80179e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179e2:	b09d      	sub	sp, #116	; 0x74
 80179e4:	af0a      	add	r7, sp, #40	; 0x28
 80179e6:	6278      	str	r0, [r7, #36]	; 0x24
 80179e8:	6239      	str	r1, [r7, #32]
 80179ea:	61fa      	str	r2, [r7, #28]
 80179ec:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2b03      	cmp	r3, #3
 80179f6:	bf0c      	ite	eq
 80179f8:	2301      	moveq	r3, #1
 80179fa:	2300      	movne	r3, #0
 80179fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8017a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017a04:	f083 0301 	eor.w	r3, r3, #1
 8017a08:	b2db      	uxtb	r3, r3
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d00f      	beq.n	8017a2e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8017a0e:	6a3b      	ldr	r3, [r7, #32]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2b02      	cmp	r3, #2
 8017a16:	d00a      	beq.n	8017a2e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8017a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1a:	695c      	ldr	r4, [r3, #20]
 8017a1c:	4b68      	ldr	r3, [pc, #416]	; (8017bc0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 8017a1e:	9300      	str	r3, [sp, #0]
 8017a20:	2356      	movs	r3, #86	; 0x56
 8017a22:	4a68      	ldr	r2, [pc, #416]	; (8017bc4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8017a24:	4968      	ldr	r1, [pc, #416]	; (8017bc8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8017a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a28:	47a0      	blx	r4
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	e0c4      	b.n	8017bb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8017a2e:	6a3b      	ldr	r3, [r7, #32]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	2b01      	cmp	r3, #1
 8017a36:	d012      	beq.n	8017a5e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8017a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3a:	695c      	ldr	r4, [r3, #20]
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	685b      	ldr	r3, [r3, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2201      	movs	r2, #1
 8017a44:	9203      	str	r2, [sp, #12]
 8017a46:	9302      	str	r3, [sp, #8]
 8017a48:	4b60      	ldr	r3, [pc, #384]	; (8017bcc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 8017a4a:	9301      	str	r3, [sp, #4]
 8017a4c:	4b60      	ldr	r3, [pc, #384]	; (8017bd0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8017a4e:	9300      	str	r3, [sp, #0]
 8017a50:	2357      	movs	r3, #87	; 0x57
 8017a52:	4a5c      	ldr	r2, [pc, #368]	; (8017bc4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8017a54:	495f      	ldr	r1, [pc, #380]	; (8017bd4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8017a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a58:	47a0      	blx	r4
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	e0ac      	b.n	8017bb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8017a5e:	69fb      	ldr	r3, [r7, #28]
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8017a66:	69fb      	ldr	r3, [r7, #28]
 8017a68:	6899      	ldr	r1, [r3, #8]
 8017a6a:	69fb      	ldr	r3, [r7, #28]
 8017a6c:	685c      	ldr	r4, [r3, #4]
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8017a72:	69fb      	ldr	r3, [r7, #28]
 8017a74:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 8017a76:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8017a78:	f107 0008 	add.w	r0, r7, #8
 8017a7c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8017a80:	9207      	str	r2, [sp, #28]
 8017a82:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8017a86:	9206      	str	r2, [sp, #24]
 8017a88:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017a8c:	9205      	str	r2, [sp, #20]
 8017a8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017a90:	9204      	str	r2, [sp, #16]
 8017a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017a94:	9203      	str	r2, [sp, #12]
 8017a96:	69ba      	ldr	r2, [r7, #24]
 8017a98:	9202      	str	r2, [sp, #8]
 8017a9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017a9c:	9201      	str	r2, [sp, #4]
 8017a9e:	9300      	str	r3, [sp, #0]
 8017aa0:	462b      	mov	r3, r5
 8017aa2:	4622      	mov	r2, r4
 8017aa4:	f7ff fec5 	bl	8017832 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8017aa8:	4634      	mov	r4, r6
 8017aaa:	f107 0308 	add.w	r3, r7, #8
 8017aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	6a39      	ldr	r1, [r7, #32]
 8017ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aba:	f7fc fe9d 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017abe:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8017ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d10a      	bne.n	8017adc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 8017ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac8:	695c      	ldr	r4, [r3, #20]
 8017aca:	4b43      	ldr	r3, [pc, #268]	; (8017bd8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8017acc:	9300      	str	r3, [sp, #0]
 8017ace:	2361      	movs	r3, #97	; 0x61
 8017ad0:	4a3c      	ldr	r2, [pc, #240]	; (8017bc4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8017ad2:	493d      	ldr	r1, [pc, #244]	; (8017bc8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8017ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ad6:	47a0      	blx	r4
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e06d      	b.n	8017bb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8017adc:	2201      	movs	r2, #1
 8017ade:	6a39      	ldr	r1, [r7, #32]
 8017ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ae2:	f7fc fe89 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8017ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d10a      	bne.n	8017b04 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 8017aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017af0:	695c      	ldr	r4, [r3, #20]
 8017af2:	4b3a      	ldr	r3, [pc, #232]	; (8017bdc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8017af4:	9300      	str	r3, [sp, #0]
 8017af6:	2363      	movs	r3, #99	; 0x63
 8017af8:	4a32      	ldr	r2, [pc, #200]	; (8017bc4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8017afa:	4933      	ldr	r1, [pc, #204]	; (8017bc8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8017afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017afe:	47a0      	blx	r4
 8017b00:	2301      	movs	r3, #1
 8017b02:	e059      	b.n	8017bb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8017b04:	2202      	movs	r2, #2
 8017b06:	6a39      	ldr	r1, [r7, #32]
 8017b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b0a:	f7fc fea5 	bl	8014858 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8017b0e:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8017b10:	2200      	movs	r2, #0
 8017b12:	6a39      	ldr	r1, [r7, #32]
 8017b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b16:	f7fc fe7f 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017b1a:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8017b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d10a      	bne.n	8017b38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 8017b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b24:	695c      	ldr	r4, [r3, #20]
 8017b26:	4b2e      	ldr	r3, [pc, #184]	; (8017be0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	2367      	movs	r3, #103	; 0x67
 8017b2c:	4a25      	ldr	r2, [pc, #148]	; (8017bc4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8017b2e:	4926      	ldr	r1, [pc, #152]	; (8017bc8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8017b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b32:	47a0      	blx	r4
 8017b34:	2301      	movs	r3, #1
 8017b36:	e03f      	b.n	8017bb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8017b38:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d02e      	beq.n	8017b9e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8017b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b42:	689b      	ldr	r3, [r3, #8]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8017b48:	69fb      	ldr	r3, [r7, #28]
 8017b4a:	330c      	adds	r3, #12
 8017b4c:	607b      	str	r3, [r7, #4]
 8017b4e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017b50:	321c      	adds	r2, #28
 8017b52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8017b54:	3120      	adds	r1, #32
 8017b56:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8017b58:	302c      	adds	r0, #44	; 0x2c
 8017b5a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8017b5c:	3430      	adds	r4, #48	; 0x30
 8017b5e:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8017b60:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8017b62:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8017b64:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8017b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b68:	9308      	str	r3, [sp, #32]
 8017b6a:	9607      	str	r6, [sp, #28]
 8017b6c:	9506      	str	r5, [sp, #24]
 8017b6e:	9405      	str	r4, [sp, #20]
 8017b70:	9004      	str	r0, [sp, #16]
 8017b72:	9103      	str	r1, [sp, #12]
 8017b74:	9202      	str	r2, [sp, #8]
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	9301      	str	r3, [sp, #4]
 8017b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b7c:	9300      	str	r3, [sp, #0]
 8017b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b86:	f7fc fe77 	bl	8014878 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d002      	beq.n	8017b9e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 8017b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017b9c:	e00c      	b.n	8017bb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 8017b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba0:	691a      	ldr	r2, [r3, #16]
 8017ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ba4:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8017ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ba8:	691a      	ldr	r2, [r3, #16]
 8017baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017bac:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8017bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bb0:	691a      	ldr	r2, [r3, #16]
 8017bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017bb4:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8017bb6:	2300      	movs	r3, #0
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	374c      	adds	r7, #76	; 0x4c
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bc0:	08022544 	.word	0x08022544
 8017bc4:	08022498 	.word	0x08022498
 8017bc8:	0802252c 	.word	0x0802252c
 8017bcc:	08022584 	.word	0x08022584
 8017bd0:	08022588 	.word	0x08022588
 8017bd4:	08022568 	.word	0x08022568
 8017bd8:	0802259c 	.word	0x0802259c
 8017bdc:	080225b0 	.word	0x080225b0
 8017be0:	080225c4 	.word	0x080225c4

08017be4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b082      	sub	sp, #8
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d101      	bne.n	8017bf6 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8017bf2:	f008 f873 	bl	801fcdc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3708      	adds	r7, #8
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}

08017c02 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8017c02:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017c06:	b090      	sub	sp, #64	; 0x40
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	61f8      	str	r0, [r7, #28]
 8017c0c:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 8017c0e:	69fb      	ldr	r3, [r7, #28]
 8017c10:	17da      	asrs	r2, r3, #31
 8017c12:	613b      	str	r3, [r7, #16]
 8017c14:	617a      	str	r2, [r7, #20]
 8017c16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017c1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 8017c1e:	69bb      	ldr	r3, [r7, #24]
 8017c20:	17da      	asrs	r2, r3, #31
 8017c22:	60bb      	str	r3, [r7, #8]
 8017c24:	60fa      	str	r2, [r7, #12]
 8017c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017c2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 8017c2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017c32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8017c36:	1886      	adds	r6, r0, r2
 8017c38:	603e      	str	r6, [r7, #0]
 8017c3a:	eb41 0303 	adc.w	r3, r1, r3
 8017c3e:	607b      	str	r3, [r7, #4]
 8017c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8017c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	db04      	blt.n	8017c5a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8017c50:	f04f 0201 	mov.w	r2, #1
 8017c54:	f04f 0300 	mov.w	r3, #0
 8017c58:	e003      	b.n	8017c62 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 8017c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c62:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8017c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8017c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017c6e:	eb10 0802 	adds.w	r8, r0, r2
 8017c72:	eb41 0903 	adc.w	r9, r1, r3
 8017c76:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	469a      	mov	sl, r3
 8017c7e:	4693      	mov	fp, r2
 8017c80:	eb1a 0408 	adds.w	r4, sl, r8
 8017c84:	eb4b 0509 	adc.w	r5, fp, r9
 8017c88:	f04f 0200 	mov.w	r2, #0
 8017c8c:	f04f 0300 	mov.w	r3, #0
 8017c90:	0862      	lsrs	r2, r4, #1
 8017c92:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8017c96:	106b      	asrs	r3, r5, #1
 8017c98:	4613      	mov	r3, r2
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3740      	adds	r7, #64	; 0x40
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017ca4:	4770      	bx	lr

08017ca6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8017ca6:	b580      	push	{r7, lr}
 8017ca8:	b084      	sub	sp, #16
 8017caa:	af00      	add	r7, sp, #0
 8017cac:	60f8      	str	r0, [r7, #12]
 8017cae:	60b9      	str	r1, [r7, #8]
 8017cb0:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8017cb2:	68fa      	ldr	r2, [r7, #12]
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8017cba:	68b9      	ldr	r1, [r7, #8]
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fd faeb 	bl	8015298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8017cc2:	4603      	mov	r3, r0
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	3710      	adds	r7, #16
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b088      	sub	sp, #32
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f000 f821 	bl	8017d22 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8017ce0:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8017ce2:	68ba      	ldr	r2, [r7, #8]
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	1ad2      	subs	r2, r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8017cec:	68fa      	ldr	r2, [r7, #12]
 8017cee:	69fb      	ldr	r3, [r7, #28]
 8017cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8017cf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8017cf8:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8017cfa:	69b8      	ldr	r0, [r7, #24]
 8017cfc:	f000 f823 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8017d00:	4603      	mov	r3, r0
 8017d02:	4618      	mov	r0, r3
 8017d04:	f000 f830 	bl	8017d68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8017d0c:	f107 0314 	add.w	r3, r7, #20
 8017d10:	4618      	mov	r0, r3
 8017d12:	f000 f889 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017d16:	4603      	mov	r3, r0
 8017d18:	681b      	ldr	r3, [r3, #0]
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3720      	adds	r7, #32
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}

08017d22 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8017d22:	b480      	push	{r7}
 8017d24:	b083      	sub	sp, #12
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d003      	beq.n	8017d38 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8017d36:	e000      	b.n	8017d3a <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8017d38:	2320      	movs	r3, #32
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	370c      	adds	r7, #12
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr

08017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8017d46:	b580      	push	{r7, lr}
 8017d48:	b084      	sub	sp, #16
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 8017d4e:	f107 030c 	add.w	r3, r7, #12
 8017d52:	4618      	mov	r0, r3
 8017d54:	f000 f868 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017d58:	4602      	mov	r2, r0
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	6013      	str	r3, [r2, #0]
    return retval;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
  }
 8017d60:	4618      	mov	r0, r3
 8017d62:	3710      	adds	r7, #16
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08a      	sub	sp, #40	; 0x28
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8017d70:	f000 f879 	bl	8017e66 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8017d74:	4603      	mov	r3, r0
 8017d76:	4619      	mov	r1, r3
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f000 f87f 	bl	8017e7c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8017d82:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8017d86:	f000 f8ab 	bl	8017ee0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f000 f893 	bl	8017eb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8017d92:	4603      	mov	r3, r0
 8017d94:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8017d96:	4823      	ldr	r0, [pc, #140]	; (8017e24 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8017d98:	f000 f8a2 	bl	8017ee0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f000 f88a 	bl	8017eb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8017da4:	4603      	mov	r3, r0
 8017da6:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8017da8:	69b9      	ldr	r1, [r7, #24]
 8017daa:	6a38      	ldr	r0, [r7, #32]
 8017dac:	f000 f8a5 	bl	8017efa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8017db0:	4603      	mov	r3, r0
 8017db2:	4619      	mov	r1, r3
 8017db4:	69f8      	ldr	r0, [r7, #28]
 8017db6:	f000 f8c2 	bl	8017f3e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8017dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc4:	2b02      	cmp	r3, #2
 8017dc6:	dc21      	bgt.n	8017e0c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8017dc8:	6979      	ldr	r1, [r7, #20]
 8017dca:	6a38      	ldr	r0, [r7, #32]
 8017dcc:	f000 f895 	bl	8017efa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8017dd4:	f000 f8d1 	bl	8017f7a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	6939      	ldr	r1, [r7, #16]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f000 f8d5 	bl	8017f8c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8017de2:	4603      	mov	r3, r0
 8017de4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8017de6:	68f9      	ldr	r1, [r7, #12]
 8017de8:	6978      	ldr	r0, [r7, #20]
 8017dea:	f000 f8ed 	bl	8017fc8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8017dee:	4603      	mov	r3, r0
 8017df0:	4618      	mov	r0, r3
 8017df2:	f000 f90b 	bl	801800c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8017df6:	4603      	mov	r3, r0
 8017df8:	4619      	mov	r1, r3
 8017dfa:	6978      	ldr	r0, [r7, #20]
 8017dfc:	f000 f89f 	bl	8017f3e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8017e00:	4603      	mov	r3, r0
 8017e02:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8017e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e06:	3301      	adds	r3, #1
 8017e08:	627b      	str	r3, [r7, #36]	; 0x24
 8017e0a:	e7da      	b.n	8017dc2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8017e0c:	6978      	ldr	r0, [r7, #20]
 8017e0e:	f000 f917 	bl	8018040 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8017e12:	4603      	mov	r3, r0
 8017e14:	4618      	mov	r0, r3
 8017e16:	f000 f929 	bl	801806c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8017e1a:	4603      	mov	r3, r0
}
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	3728      	adds	r7, #40	; 0x28
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}
 8017e24:	c3c3c3c4 	.word	0xc3c3c3c4

08017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 8017e28:	b480      	push	{r7}
 8017e2a:	b083      	sub	sp, #12
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	4618      	mov	r0, r3
 8017e34:	370c      	adds	r7, #12
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr

08017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8017e3e:	b590      	push	{r4, r7, lr}
 8017e40:	b085      	sub	sp, #20
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8017e46:	f107 030c 	add.w	r3, r7, #12
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7ff ffec 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017e50:	4604      	mov	r4, r0
 8017e52:	6878      	ldr	r0, [r7, #4]
 8017e54:	f7fe fa54 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	6023      	str	r3, [r4, #0]
    return retval;
 8017e5c:	68fb      	ldr	r3, [r7, #12]
  }
 8017e5e:	4618      	mov	r0, r3
 8017e60:	3714      	adds	r7, #20
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd90      	pop	{r4, r7, pc}

08017e66 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8017e66:	b580      	push	{r7, lr}
 8017e68:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8017e6a:	f000 f927 	bl	80180bc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7ff ffe4 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8017e76:	4603      	mov	r3, r0
  }
 8017e78:	4618      	mov	r0, r3
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8017e7c:	b590      	push	{r4, r7, lr}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	6039      	str	r1, [r7, #0]
 8017e86:	1d3b      	adds	r3, r7, #4
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7ff ffcd 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	681c      	ldr	r4, [r3, #0]
 8017e92:	463b      	mov	r3, r7
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7ff ffc7 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	4619      	mov	r1, r3
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f7ff feae 	bl	8017c02 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f7ff ff4c 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	370c      	adds	r7, #12
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd90      	pop	{r4, r7, pc}

08017eb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8017eb8:	b590      	push	{r4, r7, lr}
 8017eba:	b085      	sub	sp, #20
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8017ec0:	f107 030c 	add.w	r3, r7, #12
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f000 f900 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017eca:	4604      	mov	r4, r0
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f7fe fa17 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	6023      	str	r3, [r4, #0]
    return retval;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
  }
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3714      	adds	r7, #20
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd90      	pop	{r4, r7, pc}

08017ee0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b082      	sub	sp, #8
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8017ee8:	2100      	movs	r1, #0
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f7fd fe44 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8017ef0:	4603      	mov	r3, r0
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}

08017efa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8017efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017efc:	b085      	sub	sp, #20
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
 8017f02:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8017f04:	1d3b      	adds	r3, r7, #4
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7ff ff8e 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	681d      	ldr	r5, [r3, #0]
 8017f10:	463b      	mov	r3, r7
 8017f12:	4618      	mov	r0, r3
 8017f14:	f000 f8d9 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	681e      	ldr	r6, [r3, #0]
 8017f1c:	f107 030c 	add.w	r3, r7, #12
 8017f20:	4618      	mov	r0, r3
 8017f22:	f000 f8d2 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017f26:	4604      	mov	r4, r0
 8017f28:	4631      	mov	r1, r6
 8017f2a:	4628      	mov	r0, r5
 8017f2c:	f7fd f9b4 	bl	8015298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8017f30:	4603      	mov	r3, r0
 8017f32:	6023      	str	r3, [r4, #0]
  return c;
 8017f34:	68fb      	ldr	r3, [r7, #12]
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3714      	adds	r7, #20
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f3e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8017f3e:	b590      	push	{r4, r7, lr}
 8017f40:	b083      	sub	sp, #12
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
 8017f46:	6039      	str	r1, [r7, #0]
 8017f48:	1d3b      	adds	r3, r7, #4
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f000 f8bd 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017f50:	4603      	mov	r3, r0
 8017f52:	681c      	ldr	r4, [r3, #0]
 8017f54:	463b      	mov	r3, r7
 8017f56:	4618      	mov	r0, r3
 8017f58:	f000 f8b7 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	4619      	mov	r1, r3
 8017f62:	4620      	mov	r0, r4
 8017f64:	f7fe fa08 	bl	8016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f000 f8b8 	bl	80180e0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8017f70:	4603      	mov	r3, r0
 8017f72:	4618      	mov	r0, r3
 8017f74:	370c      	adds	r7, #12
 8017f76:	46bd      	mov	sp, r7
 8017f78:	bd90      	pop	{r4, r7, pc}

08017f7a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8017f7a:	b580      	push	{r7, lr}
 8017f7c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8017f7e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8017f82:	f7ff ff99 	bl	8017eb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8017f86:	4603      	mov	r3, r0
  }
 8017f88:	4618      	mov	r0, r3
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8017f8c:	b590      	push	{r4, r7, lr}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
 8017f96:	1d3b      	adds	r3, r7, #4
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f000 f896 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	681c      	ldr	r4, [r3, #0]
 8017fa2:	463b      	mov	r3, r7
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f000 f890 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017faa:	4603      	mov	r3, r0
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	4619      	mov	r1, r3
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 f875 	bl	80180a0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f000 f891 	bl	80180e0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	370c      	adds	r7, #12
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	bd90      	pop	{r4, r7, pc}

08017fc8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8017fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fca:	b085      	sub	sp, #20
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8017fd2:	1d3b      	adds	r3, r7, #4
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f000 f878 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	681d      	ldr	r5, [r3, #0]
 8017fde:	463b      	mov	r3, r7
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f000 f872 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	681e      	ldr	r6, [r3, #0]
 8017fea:	f107 030c 	add.w	r3, r7, #12
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f000 f887 	bl	8018102 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8017ff4:	4604      	mov	r4, r0
 8017ff6:	4631      	mov	r1, r6
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	f7fd f94d 	bl	8015298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8017ffe:	4603      	mov	r3, r0
 8018000:	6023      	str	r3, [r4, #0]
  return c;
 8018002:	68fb      	ldr	r3, [r7, #12]
}
 8018004:	4618      	mov	r0, r3
 8018006:	3714      	adds	r7, #20
 8018008:	46bd      	mov	sp, r7
 801800a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801800c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801800c:	b5b0      	push	{r4, r5, r7, lr}
 801800e:	b084      	sub	sp, #16
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8018014:	1d3b      	adds	r3, r7, #4
 8018016:	4618      	mov	r0, r3
 8018018:	f000 f873 	bl	8018102 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801801c:	4603      	mov	r3, r0
 801801e:	681d      	ldr	r5, [r3, #0]
 8018020:	f107 030c 	add.w	r3, r7, #12
 8018024:	4618      	mov	r0, r3
 8018026:	f000 f850 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801802a:	4604      	mov	r4, r0
 801802c:	4628      	mov	r0, r5
 801802e:	f000 f873 	bl	8018118 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8018032:	4603      	mov	r3, r0
 8018034:	6023      	str	r3, [r4, #0]
  return result;
 8018036:	68fb      	ldr	r3, [r7, #12]
}
 8018038:	4618      	mov	r0, r3
 801803a:	3710      	adds	r7, #16
 801803c:	46bd      	mov	sp, r7
 801803e:	bdb0      	pop	{r4, r5, r7, pc}

08018040 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8018040:	b590      	push	{r4, r7, lr}
 8018042:	b085      	sub	sp, #20
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8018048:	1d3b      	adds	r3, r7, #4
 801804a:	4618      	mov	r0, r3
 801804c:	f000 f83d 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8018050:	4604      	mov	r4, r0
 8018052:	f107 030c 	add.w	r3, r7, #12
 8018056:	4618      	mov	r0, r3
 8018058:	f000 f86a 	bl	8018130 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801805c:	4602      	mov	r2, r0
 801805e:	6823      	ldr	r3, [r4, #0]
 8018060:	6013      	str	r3, [r2, #0]
  return c;
 8018062:	68fb      	ldr	r3, [r7, #12]
}
 8018064:	4618      	mov	r0, r3
 8018066:	3714      	adds	r7, #20
 8018068:	46bd      	mov	sp, r7
 801806a:	bd90      	pop	{r4, r7, pc}

0801806c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801806c:	b5b0      	push	{r4, r5, r7, lr}
 801806e:	b084      	sub	sp, #16
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8018074:	1d3b      	adds	r3, r7, #4
 8018076:	4618      	mov	r0, r3
 8018078:	f000 f85a 	bl	8018130 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801807c:	4603      	mov	r3, r0
 801807e:	681d      	ldr	r5, [r3, #0]
 8018080:	f107 030c 	add.w	r3, r7, #12
 8018084:	4618      	mov	r0, r3
 8018086:	f7ff fecf 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801808a:	4604      	mov	r4, r0
 801808c:	4628      	mov	r0, r5
 801808e:	f000 f85a 	bl	8018146 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8018092:	4603      	mov	r3, r0
 8018094:	6023      	str	r3, [r4, #0]
  return result;
 8018096:	68fb      	ldr	r3, [r7, #12]
}
 8018098:	4618      	mov	r0, r3
 801809a:	3710      	adds	r7, #16
 801809c:	46bd      	mov	sp, r7
 801809e:	bdb0      	pop	{r4, r5, r7, pc}

080180a0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80180a0:	b480      	push	{r7}
 80180a2:	b083      	sub	sp, #12
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
 80180a8:	6039      	str	r1, [r7, #0]
  return a - b;
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	1ad3      	subs	r3, r2, r3
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	370c      	adds	r7, #12
 80180b4:	46bd      	mov	sp, r7
 80180b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ba:	4770      	bx	lr

080180bc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 80180bc:	b580      	push	{r7, lr}
 80180be:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 80180c0:	f7fc f8b8 	bl	8014234 <_ZNSt14numeric_limitsIlE3maxEv>
 80180c4:	4603      	mov	r3, r0
  }
 80180c6:	4618      	mov	r0, r3
 80180c8:	bd80      	pop	{r7, pc}

080180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 80180ca:	b480      	push	{r7}
 80180cc:	b083      	sub	sp, #12
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	4618      	mov	r0, r3
 80180d6:	370c      	adds	r7, #12
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr

080180e0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b084      	sub	sp, #16
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80180e8:	f107 030c 	add.w	r3, r7, #12
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7ff ffec 	bl	80180ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80180f2:	4602      	mov	r2, r0
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6013      	str	r3, [r2, #0]
    return retval;
 80180f8:	68fb      	ldr	r3, [r7, #12]
  }
 80180fa:	4618      	mov	r0, r3
 80180fc:	3710      	adds	r7, #16
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}

08018102 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8018102:	b480      	push	{r7}
 8018104:	b083      	sub	sp, #12
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	4618      	mov	r0, r3
 801810e:	370c      	adds	r7, #12
 8018110:	46bd      	mov	sp, r7
 8018112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018116:	4770      	bx	lr

08018118 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f000 f81d 	bl	8018160 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8018126:	4603      	mov	r3, r0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8018130:	b480      	push	{r7}
 8018132:	b083      	sub	sp, #12
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	4618      	mov	r0, r3
 801813c:	370c      	adds	r7, #12
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr

08018146 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8018146:	b580      	push	{r7, lr}
 8018148:	b082      	sub	sp, #8
 801814a:	af00      	add	r7, sp, #0
 801814c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801814e:	6878      	ldr	r0, [r7, #4]
 8018150:	f000 f848 	bl	80181e4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8018154:	4603      	mov	r3, r0
}
 8018156:	4618      	mov	r0, r3
 8018158:	3708      	adds	r7, #8
 801815a:	46bd      	mov	sp, r7
 801815c:	bd80      	pop	{r7, pc}
	...

08018160 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8018160:	b580      	push	{r7, lr}
 8018162:	b08a      	sub	sp, #40	; 0x28
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8018168:	f7fd f881 	bl	801526e <_ZNSt14numeric_limitsIlE3minEv>
 801816c:	4603      	mov	r3, r0
 801816e:	4618      	mov	r0, r3
 8018170:	f7fe f8c6 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8018174:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8018176:	f7fc f85d 	bl	8014234 <_ZNSt14numeric_limitsIlE3maxEv>
 801817a:	4603      	mov	r3, r0
 801817c:	4618      	mov	r0, r3
 801817e:	f7fe f8bf 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8018182:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8018184:	2320      	movs	r3, #32
 8018186:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8018188:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801818c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801818e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8018192:	f7fe f8b5 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8018196:	4603      	mov	r3, r0
 8018198:	4619      	mov	r1, r3
 801819a:	6878      	ldr	r0, [r7, #4]
 801819c:	f7fe f8fa 	bl	8016394 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80181a0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80181a2:	480f      	ldr	r0, [pc, #60]	; (80181e0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80181a4:	f7fe f8ac 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80181a8:	4603      	mov	r3, r0
 80181aa:	4619      	mov	r1, r3
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f7fe f8cf 	bl	8016350 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80181b2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80181b4:	2102      	movs	r1, #2
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	f000 f856 	bl	8018268 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80181bc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80181be:	68fa      	ldr	r2, [r7, #12]
 80181c0:	6a39      	ldr	r1, [r7, #32]
 80181c2:	6978      	ldr	r0, [r7, #20]
 80181c4:	f000 f894 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80181c8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80181ca:	68fa      	ldr	r2, [r7, #12]
 80181cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80181ce:	6938      	ldr	r0, [r7, #16]
 80181d0:	f000 f88e 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80181d4:	60f8      	str	r0, [r7, #12]
    return result;
 80181d6:	68fb      	ldr	r3, [r7, #12]
  }
 80181d8:	4618      	mov	r0, r3
 80181da:	3728      	adds	r7, #40	; 0x28
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	e0000001 	.word	0xe0000001

080181e4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b08a      	sub	sp, #40	; 0x28
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80181ec:	f7fd f83f 	bl	801526e <_ZNSt14numeric_limitsIlE3minEv>
 80181f0:	4603      	mov	r3, r0
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7fe f884 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80181f8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80181fa:	f7fc f81b 	bl	8014234 <_ZNSt14numeric_limitsIlE3maxEv>
 80181fe:	4603      	mov	r3, r0
 8018200:	4618      	mov	r0, r3
 8018202:	f7fe f87d 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8018206:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8018208:	2320      	movs	r3, #32
 801820a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801820c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018210:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8018212:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8018216:	f7fe f873 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801821a:	4603      	mov	r3, r0
 801821c:	4619      	mov	r1, r3
 801821e:	6878      	ldr	r0, [r7, #4]
 8018220:	f7fe f8b8 	bl	8016394 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8018224:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8018226:	480f      	ldr	r0, [pc, #60]	; (8018264 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8018228:	f7fe f86a 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801822c:	4603      	mov	r3, r0
 801822e:	4619      	mov	r1, r3
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	f7fe f88d 	bl	8016350 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8018236:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8018238:	2101      	movs	r1, #1
 801823a:	6878      	ldr	r0, [r7, #4]
 801823c:	f000 f814 	bl	8018268 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8018240:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8018242:	68fa      	ldr	r2, [r7, #12]
 8018244:	6a39      	ldr	r1, [r7, #32]
 8018246:	6978      	ldr	r0, [r7, #20]
 8018248:	f000 f852 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801824c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801824e:	68fa      	ldr	r2, [r7, #12]
 8018250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018252:	6938      	ldr	r0, [r7, #16]
 8018254:	f000 f84c 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8018258:	60f8      	str	r0, [r7, #12]
    return result;
 801825a:	68fb      	ldr	r3, [r7, #12]
  }
 801825c:	4618      	mov	r0, r3
 801825e:	3728      	adds	r7, #40	; 0x28
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	c0000001 	.word	0xc0000001

08018268 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8018268:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801826c:	b089      	sub	sp, #36	; 0x24
 801826e:	af00      	add	r7, sp, #0
 8018270:	6078      	str	r0, [r7, #4]
 8018272:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8018274:	6879      	ldr	r1, [r7, #4]
 8018276:	17c8      	asrs	r0, r1, #31
 8018278:	4688      	mov	r8, r1
 801827a:	4681      	mov	r9, r0
 801827c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8018280:	2001      	movs	r0, #1
 8018282:	6839      	ldr	r1, [r7, #0]
 8018284:	fa00 f101 	lsl.w	r1, r0, r1
 8018288:	17c8      	asrs	r0, r1, #31
 801828a:	460c      	mov	r4, r1
 801828c:	4605      	mov	r5, r0
 801828e:	69f9      	ldr	r1, [r7, #28]
 8018290:	fb04 f001 	mul.w	r0, r4, r1
 8018294:	69b9      	ldr	r1, [r7, #24]
 8018296:	fb05 f101 	mul.w	r1, r5, r1
 801829a:	4401      	add	r1, r0
 801829c:	69b8      	ldr	r0, [r7, #24]
 801829e:	fba0 2304 	umull	r2, r3, r0, r4
 80182a2:	4419      	add	r1, r3
 80182a4:	460b      	mov	r3, r1
 80182a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80182aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 80182ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80182b2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 80182b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80182b8:	60bb      	str	r3, [r7, #8]
             ? min
 80182ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80182be:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80182c2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80182c6:	db0b      	blt.n	80182e0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 80182c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80182cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80182d0:	f173 0300 	sbcs.w	r3, r3, #0
 80182d4:	da01      	bge.n	80182da <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 80182d6:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 80182d8:	e004      	b.n	80182e4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 80182da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 80182de:	e001      	b.n	80182e4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 80182e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80182e4:	4618      	mov	r0, r3
 80182e6:	3724      	adds	r7, #36	; 0x24
 80182e8:	46bd      	mov	sp, r7
 80182ea:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80182ee:	4770      	bx	lr

080182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80182f0:	b590      	push	{r4, r7, lr}
 80182f2:	b085      	sub	sp, #20
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	60f8      	str	r0, [r7, #12]
 80182f8:	60b9      	str	r1, [r7, #8]
 80182fa:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80182fc:	68b9      	ldr	r1, [r7, #8]
 80182fe:	68f8      	ldr	r0, [r7, #12]
 8018300:	f7fe f809 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8018304:	4604      	mov	r4, r0
 8018306:	68f8      	ldr	r0, [r7, #12]
 8018308:	f7fe f869 	bl	80163de <_ZN8gemmlowp6BitNotIlEET_S1_>
 801830c:	4603      	mov	r3, r0
 801830e:	6879      	ldr	r1, [r7, #4]
 8018310:	4618      	mov	r0, r3
 8018312:	f7fe f800 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8018316:	4603      	mov	r3, r0
 8018318:	4619      	mov	r1, r3
 801831a:	4620      	mov	r0, r4
 801831c:	f000 f805 	bl	801832a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8018320:	4603      	mov	r3, r0
}
 8018322:	4618      	mov	r0, r3
 8018324:	3714      	adds	r7, #20
 8018326:	46bd      	mov	sp, r7
 8018328:	bd90      	pop	{r4, r7, pc}

0801832a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801832a:	b480      	push	{r7}
 801832c:	b083      	sub	sp, #12
 801832e:	af00      	add	r7, sp, #0
 8018330:	6078      	str	r0, [r7, #4]
 8018332:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	683b      	ldr	r3, [r7, #0]
 8018338:	4053      	eors	r3, r2
}
 801833a:	4618      	mov	r0, r3
 801833c:	370c      	adds	r7, #12
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr

08018346 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8018346:	b580      	push	{r7, lr}
 8018348:	b086      	sub	sp, #24
 801834a:	af00      	add	r7, sp, #0
 801834c:	6078      	str	r0, [r7, #4]
 801834e:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	f7fc fe7c 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018356:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	2b00      	cmp	r3, #0
 801835c:	db03      	blt.n	8018366 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801835e:	683a      	ldr	r2, [r7, #0]
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	429a      	cmp	r2, r3
 8018364:	db01      	blt.n	801836a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8018366:	f007 fcb9 	bl	801fcdc <abort>
  const auto* dims_data = shape.DimsData();
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f7fd f82f 	bl	80153ce <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8018370:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8018372:	2301      	movs	r3, #1
 8018374:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8018376:	2300      	movs	r3, #0
 8018378:	613b      	str	r3, [r7, #16]
 801837a:	693a      	ldr	r2, [r7, #16]
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	429a      	cmp	r2, r3
 8018380:	da12      	bge.n	80183a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8018382:	693a      	ldr	r2, [r7, #16]
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	429a      	cmp	r2, r3
 8018388:	d005      	beq.n	8018396 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801838a:	693b      	ldr	r3, [r7, #16]
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	68ba      	ldr	r2, [r7, #8]
 8018390:	4413      	add	r3, r2
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	e000      	b.n	8018398 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8018396:	2301      	movs	r3, #1
 8018398:	697a      	ldr	r2, [r7, #20]
 801839a:	fb02 f303 	mul.w	r3, r2, r3
 801839e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	3301      	adds	r3, #1
 80183a4:	613b      	str	r3, [r7, #16]
 80183a6:	e7e8      	b.n	801837a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80183a8:	697b      	ldr	r3, [r7, #20]
}
 80183aa:	4618      	mov	r0, r3
 80183ac:	3718      	adds	r7, #24
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80183b2:	b590      	push	{r4, r7, lr}
 80183b4:	b091      	sub	sp, #68	; 0x44
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	60f8      	str	r0, [r7, #12]
 80183ba:	60b9      	str	r1, [r7, #8]
 80183bc:	607a      	str	r2, [r7, #4]
 80183be:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	69db      	ldr	r3, [r3, #28]
 80183c4:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	6a1b      	ldr	r3, [r3, #32]
 80183ca:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 80183cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80183ce:	f7fc fe3e 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80183d2:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 80183d4:	6838      	ldr	r0, [r7, #0]
 80183d6:	f7fc fe3a 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80183da:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 80183dc:	6a3b      	ldr	r3, [r7, #32]
 80183de:	3b01      	subs	r3, #1
 80183e0:	4619      	mov	r1, r3
 80183e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80183e4:	f7ff ffaf 	bl	8018346 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80183e8:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 80183ea:	69fb      	ldr	r3, [r7, #28]
 80183ec:	1e99      	subs	r1, r3, #2
 80183ee:	6a3b      	ldr	r3, [r7, #32]
 80183f0:	3b01      	subs	r3, #1
 80183f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80183f4:	6838      	ldr	r0, [r7, #0]
 80183f6:	f7fe f908 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80183fa:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 80183fc:	69fb      	ldr	r3, [r7, #28]
 80183fe:	3b01      	subs	r3, #1
 8018400:	4619      	mov	r1, r3
 8018402:	6838      	ldr	r0, [r7, #0]
 8018404:	f7fc ffbe 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018408:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 801840a:	2300      	movs	r3, #0
 801840c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801840e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018410:	69bb      	ldr	r3, [r7, #24]
 8018412:	429a      	cmp	r2, r3
 8018414:	da5f      	bge.n	80184d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8018416:	2300      	movs	r3, #0
 8018418:	63bb      	str	r3, [r7, #56]	; 0x38
 801841a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	429a      	cmp	r2, r3
 8018420:	da55      	bge.n	80184ce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8018422:	f04f 0300 	mov.w	r3, #0
 8018426:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8018428:	2300      	movs	r3, #0
 801842a:	633b      	str	r3, [r7, #48]	; 0x30
 801842c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	429a      	cmp	r2, r3
 8018432:	da21      	bge.n	8018478 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8018434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018436:	693a      	ldr	r2, [r7, #16]
 8018438:	fb03 f202 	mul.w	r2, r3, r2
 801843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843e:	4413      	add	r3, r2
 8018440:	009b      	lsls	r3, r3, #2
 8018442:	687a      	ldr	r2, [r7, #4]
 8018444:	4413      	add	r3, r2
 8018446:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 801844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801844c:	693a      	ldr	r2, [r7, #16]
 801844e:	fb03 f202 	mul.w	r2, r3, r2
 8018452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018454:	4413      	add	r3, r2
 8018456:	009b      	lsls	r3, r3, #2
 8018458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801845a:	4413      	add	r3, r2
 801845c:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8018460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018464:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018468:	ee77 7a27 	vadd.f32	s15, s14, s15
 801846c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8018470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018472:	3301      	adds	r3, #1
 8018474:	633b      	str	r3, [r7, #48]	; 0x30
 8018476:	e7d9      	b.n	801842c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8018478:	f04f 0300 	mov.w	r3, #0
 801847c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 801847e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018480:	2b00      	cmp	r3, #0
 8018482:	d005      	beq.n	8018490 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8018484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018486:	009b      	lsls	r3, r3, #2
 8018488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801848a:	4413      	add	r3, r2
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8018490:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018494:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018498:	ee77 7a27 	vadd.f32	s15, s14, s15
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80184a0:	fb03 f202 	mul.w	r2, r3, r2
 80184a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a6:	4413      	add	r3, r2
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80184ac:	18d4      	adds	r4, r2, r3
 80184ae:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80184b2:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80184b6:	eeb0 0a67 	vmov.f32	s0, s15
 80184ba:	f7fe f81b 	bl	80164f4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80184be:	eef0 7a40 	vmov.f32	s15, s0
 80184c2:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80184c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184c8:	3301      	adds	r3, #1
 80184ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80184cc:	e7a5      	b.n	801841a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 80184ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184d0:	3301      	adds	r3, #1
 80184d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80184d4:	e79b      	b.n	801840e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 80184d6:	bf00      	nop
 80184d8:	3744      	adds	r7, #68	; 0x44
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd90      	pop	{r4, r7, pc}

080184de <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 80184de:	b580      	push	{r7, lr}
 80184e0:	b096      	sub	sp, #88	; 0x58
 80184e2:	af00      	add	r7, sp, #0
 80184e4:	60f8      	str	r0, [r7, #12]
 80184e6:	60b9      	str	r1, [r7, #8]
 80184e8:	607a      	str	r2, [r7, #4]
 80184ea:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	689b      	ldr	r3, [r3, #8]
 80184fc:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	68db      	ldr	r3, [r3, #12]
 8018502:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	691b      	ldr	r3, [r3, #16]
 8018508:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	695b      	ldr	r3, [r3, #20]
 801850e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	699b      	ldr	r3, [r3, #24]
 8018514:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8018516:	6838      	ldr	r0, [r7, #0]
 8018518:	f7fc fd99 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801851c:	4603      	mov	r3, r0
 801851e:	2b01      	cmp	r3, #1
 8018520:	dc01      	bgt.n	8018526 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8018522:	f007 fbdb 	bl	801fcdc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8018526:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018528:	f7fc fd91 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801852c:	4603      	mov	r3, r0
 801852e:	2b00      	cmp	r3, #0
 8018530:	dc01      	bgt.n	8018536 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8018532:	f007 fbd3 	bl	801fcdc <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8018536:	69ba      	ldr	r2, [r7, #24]
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	429a      	cmp	r2, r3
 801853c:	dd01      	ble.n	8018542 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 801853e:	f007 fbcd 	bl	801fcdc <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8018542:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018544:	f7fc fd83 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018548:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 801854a:	6838      	ldr	r0, [r7, #0]
 801854c:	f7fc fd7f 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018550:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8018552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018554:	3b01      	subs	r3, #1
 8018556:	4619      	mov	r1, r3
 8018558:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801855a:	f7ff fef4 	bl	8018346 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801855e:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8018560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018562:	1e99      	subs	r1, r3, #2
 8018564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018566:	3b01      	subs	r3, #1
 8018568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801856a:	6838      	ldr	r0, [r7, #0]
 801856c:	f7fe f84d 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018570:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8018572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018574:	3b01      	subs	r3, #1
 8018576:	4619      	mov	r1, r3
 8018578:	6838      	ldr	r0, [r7, #0]
 801857a:	f7fc ff03 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801857e:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8018580:	2300      	movs	r3, #0
 8018582:	657b      	str	r3, [r7, #84]	; 0x54
 8018584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018588:	429a      	cmp	r2, r3
 801858a:	da73      	bge.n	8018674 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801858c:	2300      	movs	r3, #0
 801858e:	653b      	str	r3, [r7, #80]	; 0x50
 8018590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018594:	429a      	cmp	r2, r3
 8018596:	da69      	bge.n	801866c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 8018598:	2300      	movs	r3, #0
 801859a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 801859c:	2300      	movs	r3, #0
 801859e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80185a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80185a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a4:	429a      	cmp	r2, r3
 80185a6:	da24      	bge.n	80185f2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 80185a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185ac:	fb03 f202 	mul.w	r2, r3, r2
 80185b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185b2:	4413      	add	r3, r2
 80185b4:	461a      	mov	r2, r3
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	4413      	add	r3, r2
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 80185be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185c2:	fb03 f202 	mul.w	r2, r3, r2
 80185c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185c8:	4413      	add	r3, r2
 80185ca:	461a      	mov	r2, r3
 80185cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80185ce:	4413      	add	r3, r2
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 80185d4:	69fa      	ldr	r2, [r7, #28]
 80185d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185d8:	4413      	add	r3, r2
 80185da:	6a39      	ldr	r1, [r7, #32]
 80185dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80185de:	440a      	add	r2, r1
 80185e0:	fb03 f202 	mul.w	r2, r3, r2
 80185e4:	693b      	ldr	r3, [r7, #16]
 80185e6:	4413      	add	r3, r2
 80185e8:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80185ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185ec:	3301      	adds	r3, #1
 80185ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80185f0:	e7d6      	b.n	80185a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 80185f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d007      	beq.n	8018608 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 80185f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185fa:	009b      	lsls	r3, r3, #2
 80185fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80185fe:	4413      	add	r3, r2
 8018600:	681a      	ldr	r2, [r3, #0]
 8018602:	693b      	ldr	r3, [r7, #16]
 8018604:	4413      	add	r3, r2
 8018606:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8018608:	693b      	ldr	r3, [r7, #16]
 801860a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801860c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801860e:	4618      	mov	r0, r3
 8018610:	f7fc ff48 	bl	80154a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8018614:	4603      	mov	r3, r0
 8018616:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8018618:	693a      	ldr	r2, [r7, #16]
 801861a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801861c:	4413      	add	r3, r2
 801861e:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8018620:	f107 0218 	add.w	r2, r7, #24
 8018624:	f107 0310 	add.w	r3, r7, #16
 8018628:	4611      	mov	r1, r2
 801862a:	4618      	mov	r0, r3
 801862c:	f7fc fcc4 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 8018630:	4603      	mov	r3, r0
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8018636:	f107 0214 	add.w	r2, r7, #20
 801863a:	f107 0310 	add.w	r3, r7, #16
 801863e:	4611      	mov	r1, r2
 8018640:	4618      	mov	r0, r3
 8018642:	f7fc fca5 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 8018646:	4603      	mov	r3, r0
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 801864c:	6939      	ldr	r1, [r7, #16]
 801864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018652:	fb03 f202 	mul.w	r2, r3, r2
 8018656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018658:	4413      	add	r3, r2
 801865a:	461a      	mov	r2, r3
 801865c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801865e:	4413      	add	r3, r2
 8018660:	b2ca      	uxtb	r2, r1
 8018662:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8018664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018666:	3301      	adds	r3, #1
 8018668:	653b      	str	r3, [r7, #80]	; 0x50
 801866a:	e791      	b.n	8018590 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 801866c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801866e:	3301      	adds	r3, #1
 8018670:	657b      	str	r3, [r7, #84]	; 0x54
 8018672:	e787      	b.n	8018584 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8018674:	bf00      	nop
 8018676:	3758      	adds	r7, #88	; 0x58
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	60f8      	str	r0, [r7, #12]
 8018684:	60b9      	str	r1, [r7, #8]
 8018686:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801868c:	2b00      	cmp	r3, #0
 801868e:	d101      	bne.n	8018694 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8018690:	f007 fb24 	bl	801fcdc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018698:	2124      	movs	r1, #36	; 0x24
 801869a:	68f8      	ldr	r0, [r7, #12]
 801869c:	4798      	blx	r3
 801869e:	4603      	mov	r3, r0
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3710      	adds	r7, #16
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}

080186a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80186a8:	b5b0      	push	{r4, r5, r7, lr}
 80186aa:	b0a0      	sub	sp, #128	; 0x80
 80186ac:	af04      	add	r7, sp, #16
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	6039      	str	r1, [r7, #0]
 80186b2:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	691b      	ldr	r3, [r3, #16]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d101      	bne.n	80186c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 80186bc:	f007 fb0e 	bl	801fcdc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	695b      	ldr	r3, [r3, #20]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d101      	bne.n	80186cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80186c8:	f007 fb08 	bl	801fcdc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	691b      	ldr	r3, [r3, #16]
 80186d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	695b      	ldr	r3, [r3, #20]
 80186d6:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 80186d8:	4b81      	ldr	r3, [pc, #516]	; (80188e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	461a      	mov	r2, r3
 80186de:	6839      	ldr	r1, [r7, #0]
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f7fc f889 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80186e6:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 80186e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d10a      	bne.n	8018704 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	695c      	ldr	r4, [r3, #20]
 80186f2:	4b7c      	ldr	r3, [pc, #496]	; (80188e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	2340      	movs	r3, #64	; 0x40
 80186f8:	4a7b      	ldr	r2, [pc, #492]	; (80188e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80186fa:	497c      	ldr	r1, [pc, #496]	; (80188ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	47a0      	blx	r4
 8018700:	2401      	movs	r4, #1
 8018702:	e0e7      	b.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8018704:	4b7a      	ldr	r3, [pc, #488]	; (80188f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	461a      	mov	r2, r3
 801870a:	6839      	ldr	r1, [r7, #0]
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f7fc f873 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8018712:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8018714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018716:	2b00      	cmp	r3, #0
 8018718:	d10a      	bne.n	8018730 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	695c      	ldr	r4, [r3, #20]
 801871e:	4b75      	ldr	r3, [pc, #468]	; (80188f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8018720:	9300      	str	r3, [sp, #0]
 8018722:	2343      	movs	r3, #67	; 0x43
 8018724:	4a70      	ldr	r2, [pc, #448]	; (80188e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8018726:	4971      	ldr	r1, [pc, #452]	; (80188ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	47a0      	blx	r4
 801872c:	2401      	movs	r4, #1
 801872e:	e0d1      	b.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8018730:	4b71      	ldr	r3, [pc, #452]	; (80188f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	461a      	mov	r2, r3
 8018736:	6839      	ldr	r1, [r7, #0]
 8018738:	6878      	ldr	r0, [r7, #4]
 801873a:	f7fc f88d 	bl	8014858 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801873e:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8018740:	4b6e      	ldr	r3, [pc, #440]	; (80188fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	461a      	mov	r2, r3
 8018746:	6839      	ldr	r1, [r7, #0]
 8018748:	6878      	ldr	r0, [r7, #4]
 801874a:	f7fc f865 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801874e:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 8018750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018752:	2b00      	cmp	r3, #0
 8018754:	d10a      	bne.n	801876c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	695c      	ldr	r4, [r3, #20]
 801875a:	4b69      	ldr	r3, [pc, #420]	; (8018900 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801875c:	9300      	str	r3, [sp, #0]
 801875e:	2347      	movs	r3, #71	; 0x47
 8018760:	4a61      	ldr	r2, [pc, #388]	; (80188e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8018762:	4962      	ldr	r1, [pc, #392]	; (80188ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8018764:	6878      	ldr	r0, [r7, #4]
 8018766:	47a0      	blx	r4
 8018768:	2401      	movs	r4, #1
 801876a:	e0b3      	b.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801876c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801876e:	781a      	ldrb	r2, [r3, #0]
 8018770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	429a      	cmp	r2, r3
 8018776:	d01a      	beq.n	80187ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	695c      	ldr	r4, [r3, #20]
 801877c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	4618      	mov	r0, r3
 8018782:	f7fb fcdb 	bl	801413c <TfLiteTypeGetName>
 8018786:	4605      	mov	r5, r0
 8018788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	4618      	mov	r0, r3
 801878e:	f7fb fcd5 	bl	801413c <TfLiteTypeGetName>
 8018792:	4603      	mov	r3, r0
 8018794:	9303      	str	r3, [sp, #12]
 8018796:	9502      	str	r5, [sp, #8]
 8018798:	4b5a      	ldr	r3, [pc, #360]	; (8018904 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801879a:	9301      	str	r3, [sp, #4]
 801879c:	4b5a      	ldr	r3, [pc, #360]	; (8018908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801879e:	9300      	str	r3, [sp, #0]
 80187a0:	2349      	movs	r3, #73	; 0x49
 80187a2:	4a51      	ldr	r2, [pc, #324]	; (80188e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80187a4:	4959      	ldr	r1, [pc, #356]	; (801890c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80187a6:	6878      	ldr	r0, [r7, #4]
 80187a8:	47a0      	blx	r4
 80187aa:	2401      	movs	r4, #1
 80187ac:	e092      	b.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80187ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80187b0:	781a      	ldrb	r2, [r3, #0]
 80187b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d006      	beq.n	80187c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	695b      	ldr	r3, [r3, #20]
 80187be:	4954      	ldr	r1, [pc, #336]	; (8018910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80187c0:	6878      	ldr	r0, [r7, #4]
 80187c2:	4798      	blx	r3
 80187c4:	2401      	movs	r4, #1
 80187c6:	e085      	b.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 80187c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187ca:	f04f 32ff 	mov.w	r2, #4294967295
 80187ce:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 80187d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80187d2:	7819      	ldrb	r1, [r3, #0]
 80187d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80187d6:	781a      	ldrb	r2, [r3, #0]
 80187d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187da:	9303      	str	r3, [sp, #12]
 80187dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187de:	9302      	str	r3, [sp, #8]
 80187e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80187e2:	9301      	str	r3, [sp, #4]
 80187e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80187e6:	9300      	str	r3, [sp, #0]
 80187e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	f000 fbb5 	bl	8018f5a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80187f0:	4603      	mov	r3, r0
 80187f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80187f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d002      	beq.n	8018804 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 80187fe:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8018802:	e067      	b.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8018804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	2b09      	cmp	r3, #9
 801880a:	d162      	bne.n	80188d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801880c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018810:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018812:	4618      	mov	r0, r3
 8018814:	f7fc fc7f 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8018818:	f107 0318 	add.w	r3, r7, #24
 801881c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801881e:	4618      	mov	r0, r3
 8018820:	f7fc fc79 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8018824:	f107 0318 	add.w	r3, r7, #24
 8018828:	4618      	mov	r0, r3
 801882a:	f7fc fc10 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801882e:	4603      	mov	r3, r0
 8018830:	2b02      	cmp	r3, #2
 8018832:	d001      	beq.n	8018838 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8018834:	f007 fa52 	bl	801fcdc <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8018838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801883c:	4618      	mov	r0, r3
 801883e:	f7fc fc06 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018842:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8018844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018846:	1e5a      	subs	r2, r3, #1
 8018848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801884c:	4611      	mov	r1, r2
 801884e:	4618      	mov	r0, r3
 8018850:	f7fc fd98 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018854:	4603      	mov	r3, r0
 8018856:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8018858:	2301      	movs	r3, #1
 801885a:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801885c:	2301      	movs	r3, #1
 801885e:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 8018860:	f107 0318 	add.w	r3, r7, #24
 8018864:	2101      	movs	r1, #1
 8018866:	4618      	mov	r0, r3
 8018868:	f7fc fd8c 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801886c:	4603      	mov	r3, r0
 801886e:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8018870:	f107 0308 	add.w	r3, r7, #8
 8018874:	4618      	mov	r0, r3
 8018876:	f7ef f9b7 	bl	8007be8 <arm_fully_connected_s8_get_buffer_size>
 801887a:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801887c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801887e:	2b00      	cmp	r3, #0
 8018880:	dd11      	ble.n	80188a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018886:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801888a:	3220      	adds	r2, #32
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	4798      	blx	r3
 8018890:	4603      	mov	r3, r0
 8018892:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8018896:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801889a:	2b00      	cmp	r3, #0
 801889c:	d007      	beq.n	80188ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801889e:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 80188a2:	2500      	movs	r5, #0
 80188a4:	e004      	b.n	80188b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80188a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80188a8:	f04f 32ff 	mov.w	r2, #4294967295
 80188ac:	621a      	str	r2, [r3, #32]
 80188ae:	2501      	movs	r5, #1
 80188b0:	f107 0318 	add.w	r3, r7, #24
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7fc fbb4 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
 80188ba:	2d01      	cmp	r5, #1
 80188bc:	d001      	beq.n	80188c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 80188be:	2500      	movs	r5, #0
 80188c0:	e000      	b.n	80188c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 80188c2:	2501      	movs	r5, #1
 80188c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80188c8:	4618      	mov	r0, r3
 80188ca:	f7fc fbaa 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
 80188ce:	2d01      	cmp	r5, #1
 80188d0:	d100      	bne.n	80188d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 80188d2:	2400      	movs	r4, #0
}
 80188d4:	4623      	mov	r3, r4
 80188d6:	4618      	mov	r0, r3
 80188d8:	3770      	adds	r7, #112	; 0x70
 80188da:	46bd      	mov	sp, r7
 80188dc:	bdb0      	pop	{r4, r5, r7, pc}
 80188de:	bf00      	nop
 80188e0:	080234c8 	.word	0x080234c8
 80188e4:	08022788 	.word	0x08022788
 80188e8:	080226d8 	.word	0x080226d8
 80188ec:	08022770 	.word	0x08022770
 80188f0:	080234cc 	.word	0x080234cc
 80188f4:	0802279c 	.word	0x0802279c
 80188f8:	080234d0 	.word	0x080234d0
 80188fc:	080234d4 	.word	0x080234d4
 8018900:	080227b0 	.word	0x080227b0
 8018904:	080227e0 	.word	0x080227e0
 8018908:	080227f0 	.word	0x080227f0
 801890c:	080227c4 	.word	0x080227c4
 8018910:	080227fc 	.word	0x080227fc

08018914 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8018914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018916:	b0bf      	sub	sp, #252	; 0xfc
 8018918:	af08      	add	r7, sp, #32
 801891a:	6178      	str	r0, [r7, #20]
 801891c:	6139      	str	r1, [r7, #16]
 801891e:	60fa      	str	r2, [r7, #12]
 8018920:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8018922:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018926:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801892a:	4618      	mov	r0, r3
 801892c:	f000 fb7b 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8018930:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018934:	4618      	mov	r0, r3
 8018936:	f7fc fb8a 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801893a:	4603      	mov	r3, r0
 801893c:	2b02      	cmp	r3, #2
 801893e:	d001      	beq.n	8018944 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 8018940:	f007 f9cc 	bl	801fcdc <abort>
  const int batches = output_shape.Dims(0);
 8018944:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018948:	2100      	movs	r1, #0
 801894a:	4618      	mov	r0, r3
 801894c:	f7fc fd1a 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018950:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8018954:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018958:	2101      	movs	r1, #1
 801895a:	4618      	mov	r0, r3
 801895c:	f7fc fd12 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018960:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8018964:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018968:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801896c:	4618      	mov	r0, r3
 801896e:	f000 fb5a 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8018972:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018976:	4618      	mov	r0, r3
 8018978:	f7fc fb69 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801897c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8018980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018984:	1e5a      	subs	r2, r3, #1
 8018986:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801898a:	4611      	mov	r1, r2
 801898c:	4618      	mov	r0, r3
 801898e:	f7fc fcf9 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018992:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8018996:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801899a:	68b9      	ldr	r1, [r7, #8]
 801899c:	4618      	mov	r0, r3
 801899e:	f000 fb42 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	695b      	ldr	r3, [r3, #20]
 80189a6:	425b      	negs	r3, r3
 80189a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	69db      	ldr	r3, [r3, #28]
 80189ae:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	699b      	ldr	r3, [r3, #24]
 80189b4:	425b      	negs	r3, r3
 80189b6:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	689b      	ldr	r3, [r3, #8]
 80189bc:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	68db      	ldr	r3, [r3, #12]
 80189c2:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 80189d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80189d4:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 80189d6:	2301      	movs	r3, #1
 80189d8:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 80189da:	2301      	movs	r3, #1
 80189dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 80189de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80189e2:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 80189e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80189e8:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 80189ea:	2301      	movs	r3, #1
 80189ec:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 80189ee:	2301      	movs	r3, #1
 80189f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 80189f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80189f6:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 80189f8:	2301      	movs	r3, #1
 80189fa:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 80189fc:	2301      	movs	r3, #1
 80189fe:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8018a00:	2301      	movs	r3, #1
 8018a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8018a04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018a08:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 8018a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a0e:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 8018a10:	2301      	movs	r3, #1
 8018a12:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 8018a14:	2301      	movs	r3, #1
 8018a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 8018a18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018a1c:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8018a22:	2300      	movs	r3, #0
 8018a24:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	6a1b      	ldr	r3, [r3, #32]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	db08      	blt.n	8018a40 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a32:	68fa      	ldr	r2, [r7, #12]
 8018a34:	6a12      	ldr	r2, [r2, #32]
 8018a36:	4611      	mov	r1, r2
 8018a38:	6978      	ldr	r0, [r7, #20]
 8018a3a:	4798      	blx	r3
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 8018a40:	68b8      	ldr	r0, [r7, #8]
 8018a42:	f7fd fa71 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018a46:	4605      	mov	r5, r0
 8018a48:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8018a4c:	f7fd fa6c 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018a50:	4606      	mov	r6, r0
 8018a52:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8018a56:	f7fd fdc9 	bl	80165ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8018a60:	f7fd fa71 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018a64:	4603      	mov	r3, r0
 8018a66:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8018a6a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8018a6e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8018a72:	f107 001c 	add.w	r0, r7, #28
 8018a76:	9306      	str	r3, [sp, #24]
 8018a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a7c:	9305      	str	r3, [sp, #20]
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	9304      	str	r3, [sp, #16]
 8018a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018a86:	9303      	str	r3, [sp, #12]
 8018a88:	9602      	str	r6, [sp, #8]
 8018a8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018a8e:	9301      	str	r3, [sp, #4]
 8018a90:	9500      	str	r5, [sp, #0]
 8018a92:	4623      	mov	r3, r4
 8018a94:	f7ef f861 	bl	8007b5a <arm_fully_connected_s8>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	bf14      	ite	ne
 8018a9e:	2301      	movne	r3, #1
 8018aa0:	2300      	moveq	r3, #0
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d03e      	beq.n	8018b26 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	695c      	ldr	r4, [r3, #20]
 8018aac:	68b8      	ldr	r0, [r7, #8]
 8018aae:	f7fd fa3b 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018ab2:	4606      	mov	r6, r0
 8018ab4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8018ab8:	f7fd fa36 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018abc:	6078      	str	r0, [r7, #4]
 8018abe:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8018ac2:	f7fd fd93 	bl	80165ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8018ac6:	6038      	str	r0, [r7, #0]
 8018ac8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8018acc:	f7fd fa3b 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8018ad6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8018ada:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8018ade:	f107 001c 	add.w	r0, r7, #28
 8018ae2:	9306      	str	r3, [sp, #24]
 8018ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018ae8:	9305      	str	r3, [sp, #20]
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	9304      	str	r3, [sp, #16]
 8018aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018af2:	9303      	str	r3, [sp, #12]
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	9302      	str	r3, [sp, #8]
 8018af8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018afc:	9301      	str	r3, [sp, #4]
 8018afe:	9600      	str	r6, [sp, #0]
 8018b00:	462b      	mov	r3, r5
 8018b02:	f7ef f82a 	bl	8007b5a <arm_fully_connected_s8>
 8018b06:	4603      	mov	r3, r0
 8018b08:	461a      	mov	r2, r3
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	9303      	str	r3, [sp, #12]
 8018b0e:	9202      	str	r2, [sp, #8]
 8018b10:	4b0f      	ldr	r3, [pc, #60]	; (8018b50 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8018b12:	9301      	str	r3, [sp, #4]
 8018b14:	4b0f      	ldr	r3, [pc, #60]	; (8018b54 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8018b16:	9300      	str	r3, [sp, #0]
 8018b18:	23a6      	movs	r3, #166	; 0xa6
 8018b1a:	4a0f      	ldr	r2, [pc, #60]	; (8018b58 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 8018b1c:	490f      	ldr	r1, [pc, #60]	; (8018b5c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 8018b1e:	6978      	ldr	r0, [r7, #20]
 8018b20:	47a0      	blx	r4
 8018b22:	2401      	movs	r4, #1
 8018b24:	e000      	b.n	8018b28 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8018b26:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8018b28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7fc fa78 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8018b32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7fc fa73 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8018b3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7fc fa6e 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8018b46:	4623      	mov	r3, r4
 8018b48:	4618      	mov	r0, r3
 8018b4a:	37dc      	adds	r7, #220	; 0xdc
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b50:	080228e0 	.word	0x080228e0
 8018b54:	080228f4 	.word	0x080228f4
 8018b58:	080226d8 	.word	0x080226d8
 8018b5c:	080228c4 	.word	0x080228c4

08018b60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8018b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b62:	b0d3      	sub	sp, #332	; 0x14c
 8018b64:	af06      	add	r7, sp, #24
 8018b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018b6e:	6018      	str	r0, [r3, #0]
 8018b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018b78:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8018b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	695b      	ldr	r3, [r3, #20]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d101      	bne.n	8018b8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8018b8a:	f007 f8a7 	bl	801fcdc <abort>
  const auto* params =
 8018b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	695b      	ldr	r3, [r3, #20]
 8018b9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8018b9e:	4bb0      	ldr	r3, [pc, #704]	; (8018e60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>)
 8018ba0:	681a      	ldr	r2, [r3, #0]
 8018ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018ba6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8018baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018bb2:	6809      	ldr	r1, [r1, #0]
 8018bb4:	6818      	ldr	r0, [r3, #0]
 8018bb6:	f7fc fcb9 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018bba:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8018bbe:	4ba9      	ldr	r3, [pc, #676]	; (8018e64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>)
 8018bc0:	681a      	ldr	r2, [r3, #0]
 8018bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bc6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8018bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018bd2:	6809      	ldr	r1, [r1, #0]
 8018bd4:	6818      	ldr	r0, [r3, #0]
 8018bd6:	f7fc fca9 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018bda:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8018bde:	4ba2      	ldr	r3, [pc, #648]	; (8018e68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>)
 8018be0:	681a      	ldr	r2, [r3, #0]
 8018be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018be6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8018bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018bf2:	6809      	ldr	r1, [r1, #0]
 8018bf4:	6818      	ldr	r0, [r3, #0]
 8018bf6:	f7fc fc99 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018bfa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8018bfe:	4b9b      	ldr	r3, [pc, #620]	; (8018e6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
 8018c00:	681a      	ldr	r2, [r3, #0]
 8018c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c06:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8018c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018c12:	6809      	ldr	r1, [r1, #0]
 8018c14:	6818      	ldr	r0, [r3, #0]
 8018c16:	f7fc fc99 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8018c1a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8018c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	691b      	ldr	r3, [r3, #16]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d101      	bne.n	8018c32 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 8018c2e:	f007 f855 	bl	801fcdc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8018c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	691b      	ldr	r3, [r3, #16]
 8018c3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8018c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018c46:	7a1b      	ldrb	r3, [r3, #8]
 8018c48:	2b09      	cmp	r3, #9
 8018c4a:	d06d      	beq.n	8018d28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8018c4c:	2b09      	cmp	r3, #9
 8018c4e:	f300 80e6 	bgt.w	8018e1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
 8018c52:	2b01      	cmp	r3, #1
 8018c54:	d003      	beq.n	8018c5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
 8018c56:	2b03      	cmp	r3, #3
 8018c58:	f000 8081 	beq.w	8018d5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
 8018c5c:	e0df      	b.n	8018e1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8018c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8018c62:	781a      	ldrb	r2, [r3, #0]
 8018c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8018c6c:	4611      	mov	r1, r2
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f000 f95e 	bl	8018f30 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8018c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8018c7c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8018c80:	4618      	mov	r0, r3
 8018c82:	f000 f9d0 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018c86:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8018c8a:	f7fd f92d 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018c8e:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8018c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018c94:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f000 f9c4 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018c9e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8018ca2:	f7fd f921 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018ca6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8018ca8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018cac:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f000 f9b8 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018cb6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8018cba:	f7fd f915 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018cbe:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8018cc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018cc4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f000 f9ac 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018cce:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8018cd2:	f7fd f918 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018cdc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8018ce0:	f107 0008 	add.w	r0, r7, #8
 8018ce4:	9304      	str	r3, [sp, #16]
 8018ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018cea:	9303      	str	r3, [sp, #12]
 8018cec:	9502      	str	r5, [sp, #8]
 8018cee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018cf2:	9301      	str	r3, [sp, #4]
 8018cf4:	9400      	str	r4, [sp, #0]
 8018cf6:	4613      	mov	r3, r2
 8018cf8:	4632      	mov	r2, r6
 8018cfa:	f7ff fb5a 	bl	80183b2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8018cfe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7fc f98d 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8018d08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f7fc f988 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8018d12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7fc f983 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8018d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7fc f97e 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8018d26:	e095      	b.n	8018e54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    case kTfLiteInt8: {
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8018d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018d2c:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8018d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018d34:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8018d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018d3c:	9302      	str	r3, [sp, #8]
 8018d3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018d42:	9301      	str	r3, [sp, #4]
 8018d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8018d48:	9300      	str	r3, [sp, #0]
 8018d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018d4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8018d52:	6809      	ldr	r1, [r1, #0]
 8018d54:	6800      	ldr	r0, [r0, #0]
 8018d56:	f7ff fddd 	bl	8018914 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8018d5a:	4603      	mov	r3, r0
                               output);
 8018d5c:	e07b      	b.n	8018e56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
 8018d5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8018d62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018d66:	4611      	mov	r1, r2
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f000 f8b7 	bl	8018edc <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 8018d6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8018d72:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8018d76:	4618      	mov	r0, r3
 8018d78:	f000 f955 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018d7c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8018d80:	f7fd f93e 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8018d84:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<uint8_t>(input),
          tflite::micro::GetTensorShape(filter),
 8018d86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8018d8a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f000 f949 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018d94:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8018d98:	f7fd f932 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8018d9c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<uint8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 8018d9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8018da2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8018da6:	4618      	mov	r0, r3
 8018da8:	f000 f93d 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018dac:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8018db0:	f7fd fc1c 	bl	80165ec <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8018db4:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 8018db6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8018dba:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f000 f931 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018dc4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8018dc8:	f7fd f929 	bl	801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8018dd2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8018dd6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8018dda:	9304      	str	r3, [sp, #16]
 8018ddc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8018de0:	9303      	str	r3, [sp, #12]
 8018de2:	9502      	str	r5, [sp, #8]
 8018de4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8018de8:	9301      	str	r3, [sp, #4]
 8018dea:	9400      	str	r4, [sp, #0]
 8018dec:	4613      	mov	r3, r2
 8018dee:	4632      	mov	r2, r6
 8018df0:	f7ff fb75 	bl	80184de <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
          tflite::micro::GetTensorShape(output),
 8018df4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f7fc f912 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8018dfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7fc f90d 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8018e08:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7fc f908 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8018e12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7fc f903 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
 8018e1c:	e01a      	b.n	8018e54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8018e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	695c      	ldr	r4, [r3, #20]
 8018e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018e2e:	7a1b      	ldrb	r3, [r3, #8]
 8018e30:	4618      	mov	r0, r3
 8018e32:	f7fb f983 	bl	801413c <TfLiteTypeGetName>
 8018e36:	4602      	mov	r2, r0
 8018e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018e3c:	7a1b      	ldrb	r3, [r3, #8]
 8018e3e:	4619      	mov	r1, r3
 8018e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018e44:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8018e48:	460b      	mov	r3, r1
 8018e4a:	4909      	ldr	r1, [pc, #36]	; (8018e70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>)
 8018e4c:	6800      	ldr	r0, [r0, #0]
 8018e4e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8018e50:	2301      	movs	r3, #1
 8018e52:	e000      	b.n	8018e56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
  }
  return kTfLiteOk;
 8018e54:	2300      	movs	r3, #0
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e60:	080234c8 	.word	0x080234c8
 8018e64:	080234cc 	.word	0x080234cc
 8018e68:	080234d0 	.word	0x080234d0
 8018e6c:	080234d4 	.word	0x080234d4
 8018e70:	08022a18 	.word	0x08022a18

08018e74 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8018e74:	b4b0      	push	{r4, r5, r7}
 8018e76:	b083      	sub	sp, #12
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8018e7c:	4b13      	ldr	r3, [pc, #76]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018e7e:	4a14      	ldr	r2, [pc, #80]	; (8018ed0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8018e80:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8018e82:	4b12      	ldr	r3, [pc, #72]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018e84:	2200      	movs	r2, #0
 8018e86:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8018e88:	4b10      	ldr	r3, [pc, #64]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018e8a:	4a12      	ldr	r2, [pc, #72]	; (8018ed4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8018e8c:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8018e8e:	4b0f      	ldr	r3, [pc, #60]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018e90:	4a11      	ldr	r2, [pc, #68]	; (8018ed8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8018e92:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8018e94:	4b0d      	ldr	r3, [pc, #52]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018e96:	2200      	movs	r2, #0
 8018e98:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8018e9a:	4b0c      	ldr	r3, [pc, #48]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8018ea0:	4b0a      	ldr	r3, [pc, #40]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8018ea6:	4b09      	ldr	r3, [pc, #36]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	4a07      	ldr	r2, [pc, #28]	; (8018ecc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8018eb0:	461c      	mov	r4, r3
 8018eb2:	4615      	mov	r5, r2
 8018eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018eb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8018ec0:	6878      	ldr	r0, [r7, #4]
 8018ec2:	370c      	adds	r7, #12
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bcb0      	pop	{r4, r5, r7}
 8018ec8:	4770      	bx	lr
 8018eca:	bf00      	nop
 8018ecc:	20002684 	.word	0x20002684
 8018ed0:	0801867d 	.word	0x0801867d
 8018ed4:	080186a9 	.word	0x080186a9
 8018ed8:	08018b61 	.word	0x08018b61

08018edc <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 8018edc:	b480      	push	{r7}
 8018ede:	b083      	sub	sp, #12
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	695b      	ldr	r3, [r3, #20]
 8018eea:	425a      	negs	r2, r3
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8018ef0:	683b      	ldr	r3, [r7, #0]
 8018ef2:	699b      	ldr	r3, [r3, #24]
 8018ef4:	425a      	negs	r2, r3
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	69da      	ldr	r2, [r3, #28]
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	681a      	ldr	r2, [r3, #0]
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	685a      	ldr	r2, [r3, #4]
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	689a      	ldr	r2, [r3, #8]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	68da      	ldr	r2, [r3, #12]
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	619a      	str	r2, [r3, #24]
  return op_params;
 8018f22:	bf00      	nop
}
 8018f24:	6878      	ldr	r0, [r7, #4]
 8018f26:	370c      	adds	r7, #12
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2e:	4770      	bx	lr

08018f30 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b082      	sub	sp, #8
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
 8018f38:	460b      	mov	r3, r1
 8018f3a:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f103 0220 	add.w	r2, r3, #32
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f103 011c 	add.w	r1, r3, #28
 8018f48:	78fb      	ldrb	r3, [r7, #3]
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f7fd faf2 	bl	8016534 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8018f50:	bf00      	nop
}
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	3708      	adds	r7, #8
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}

08018f5a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8018f5a:	b580      	push	{r7, lr}
 8018f5c:	b08a      	sub	sp, #40	; 0x28
 8018f5e:	af02      	add	r7, sp, #8
 8018f60:	60f8      	str	r0, [r7, #12]
 8018f62:	607b      	str	r3, [r7, #4]
 8018f64:	460b      	mov	r3, r1
 8018f66:	72fb      	strb	r3, [r7, #11]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8018f6c:	7abb      	ldrb	r3, [r7, #10]
 8018f6e:	2b01      	cmp	r3, #1
 8018f70:	d03e      	beq.n	8018ff0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8018f72:	f04f 0200 	mov.w	r2, #0
 8018f76:	f04f 0300 	mov.w	r3, #0
 8018f7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8018f7e:	f107 0310 	add.w	r3, r7, #16
 8018f82:	9301      	str	r3, [sp, #4]
 8018f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f86:	9300      	str	r3, [sp, #0]
 8018f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f8c:	6879      	ldr	r1, [r7, #4]
 8018f8e:	68f8      	ldr	r0, [r7, #12]
 8018f90:	f7fb fe0a 	bl	8014ba8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8018f94:	4603      	mov	r3, r0
 8018f96:	77fb      	strb	r3, [r7, #31]
 8018f98:	7ffb      	ldrb	r3, [r7, #31]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d001      	beq.n	8018fa2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8018f9e:	7ffb      	ldrb	r3, [r7, #31]
 8018fa0:	e027      	b.n	8018ff2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8018fa2:	ed97 7b04 	vldr	d7, [r7, #16]
 8018fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018faa:	3304      	adds	r3, #4
 8018fac:	4619      	mov	r1, r3
 8018fae:	4610      	mov	r0, r2
 8018fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8018fb4:	eef0 0a67 	vmov.f32	s1, s15
 8018fb8:	f7fb f946 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	691a      	ldr	r2, [r3, #16]
 8018fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fc2:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8018fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc6:	691a      	ldr	r2, [r3, #16]
 8018fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fca:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8018fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fce:	691a      	ldr	r2, [r3, #16]
 8018fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fd2:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8018fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fd6:	f103 0208 	add.w	r2, r3, #8
 8018fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fdc:	330c      	adds	r3, #12
 8018fde:	7af9      	ldrb	r1, [r7, #11]
 8018fe0:	9300      	str	r3, [sp, #0]
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fe6:	68f8      	ldr	r0, [r7, #12]
 8018fe8:	f7fb ff6a 	bl	8014ec0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8018fec:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8018fee:	e000      	b.n	8018ff2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8018ff0:	2300      	movs	r3, #0
}
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	3720      	adds	r7, #32
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}

08018ffa <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8018ffa:	b480      	push	{r7}
 8018ffc:	b083      	sub	sp, #12
 8018ffe:	af00      	add	r7, sp, #0
 8019000:	6078      	str	r0, [r7, #4]
 8019002:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f9b3 2000 	ldrsh.w	r2, [r3]
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019010:	429a      	cmp	r2, r3
 8019012:	da01      	bge.n	8019018 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	e000      	b.n	801901a <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8019018:	687b      	ldr	r3, [r7, #4]
    }
 801901a:	4618      	mov	r0, r3
 801901c:	370c      	adds	r7, #12
 801901e:	46bd      	mov	sp, r7
 8019020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019024:	4770      	bx	lr

08019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8019026:	b580      	push	{r7, lr}
 8019028:	b086      	sub	sp, #24
 801902a:	af00      	add	r7, sp, #0
 801902c:	6078      	str	r0, [r7, #4]
 801902e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d003      	beq.n	801903e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8019036:	683b      	ldr	r3, [r7, #0]
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d103      	bne.n	8019046 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801903e:	6878      	ldr	r0, [r7, #4]
 8019040:	f7fb ffce 	bl	8014fe0 <_ZN6tflite12RuntimeShapeC1Ev>
 8019044:	e00d      	b.n	8019062 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8019052:	697b      	ldr	r3, [r7, #20]
 8019054:	3304      	adds	r3, #4
 8019056:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8019058:	68fa      	ldr	r2, [r7, #12]
 801905a:	6939      	ldr	r1, [r7, #16]
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f7fb ffcd 	bl	8014ffc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8019062:	6878      	ldr	r0, [r7, #4]
 8019064:	3718      	adds	r7, #24
 8019066:	46bd      	mov	sp, r7
 8019068:	bd80      	pop	{r7, pc}

0801906a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 801906a:	b480      	push	{r7}
 801906c:	b083      	sub	sp, #12
 801906e:	af00      	add	r7, sp, #0
 8019070:	4603      	mov	r3, r0
 8019072:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8019074:	79fb      	ldrb	r3, [r7, #7]
 8019076:	2b01      	cmp	r3, #1
 8019078:	d002      	beq.n	8019080 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 801907a:	2b02      	cmp	r3, #2
 801907c:	d002      	beq.n	8019084 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 801907e:	e003      	b.n	8019088 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8019080:	2301      	movs	r3, #1
 8019082:	e002      	b.n	801908a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8019084:	2302      	movs	r3, #2
 8019086:	e000      	b.n	801908a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8019088:	2300      	movs	r3, #0
  }
}
 801908a:	4618      	mov	r0, r3
 801908c:	370c      	adds	r7, #12
 801908e:	46bd      	mov	sp, r7
 8019090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019094:	4770      	bx	lr

08019096 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8019096:	b480      	push	{r7}
 8019098:	b083      	sub	sp, #12
 801909a:	af00      	add	r7, sp, #0
 801909c:	6078      	str	r0, [r7, #4]
 801909e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	681a      	ldr	r2, [r3, #0]
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	429a      	cmp	r2, r3
 80190aa:	da01      	bge.n	80190b0 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	e000      	b.n	80190b2 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80190b0:	687b      	ldr	r3, [r7, #4]
    }
 80190b2:	4618      	mov	r0, r3
 80190b4:	370c      	adds	r7, #12
 80190b6:	46bd      	mov	sp, r7
 80190b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190bc:	4770      	bx	lr

080190be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80190be:	b590      	push	{r4, r7, lr}
 80190c0:	b087      	sub	sp, #28
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	60f8      	str	r0, [r7, #12]
 80190c6:	60b9      	str	r1, [r7, #8]
 80190c8:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 80190ca:	68f8      	ldr	r0, [r7, #12]
 80190cc:	f7fb ffbf 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80190d0:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80190d2:	2300      	movs	r3, #0
 80190d4:	617b      	str	r3, [r7, #20]
 80190d6:	697a      	ldr	r2, [r7, #20]
 80190d8:	693b      	ldr	r3, [r7, #16]
 80190da:	429a      	cmp	r2, r3
 80190dc:	da15      	bge.n	801910a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80190de:	697a      	ldr	r2, [r7, #20]
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d00d      	beq.n	8019102 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80190e6:	6979      	ldr	r1, [r7, #20]
 80190e8:	68f8      	ldr	r0, [r7, #12]
 80190ea:	f7fc f94b 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 80190ee:	4604      	mov	r4, r0
 80190f0:	6979      	ldr	r1, [r7, #20]
 80190f2:	6878      	ldr	r0, [r7, #4]
 80190f4:	f7fc f946 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 80190f8:	4603      	mov	r3, r0
 80190fa:	429c      	cmp	r4, r3
 80190fc:	d001      	beq.n	8019102 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 80190fe:	f006 fded 	bl	801fcdc <abort>
  for (int i = 0; i < dims_count; ++i) {
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	3301      	adds	r3, #1
 8019106:	617b      	str	r3, [r7, #20]
 8019108:	e7e5      	b.n	80190d6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801910a:	68b9      	ldr	r1, [r7, #8]
 801910c:	68f8      	ldr	r0, [r7, #12]
 801910e:	f7ff f91a 	bl	8018346 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8019112:	4603      	mov	r3, r0
}
 8019114:	4618      	mov	r0, r3
 8019116:	371c      	adds	r7, #28
 8019118:	46bd      	mov	sp, r7
 801911a:	bd90      	pop	{r4, r7, pc}

0801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8019124:	2100      	movs	r1, #0
 8019126:	6878      	ldr	r0, [r7, #4]
 8019128:	f7fc fd26 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801912c:	4603      	mov	r3, r0
}
 801912e:	4618      	mov	r0, r3
 8019130:	3708      	adds	r7, #8
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}

08019136 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8019136:	b580      	push	{r7, lr}
 8019138:	b082      	sub	sp, #8
 801913a:	af00      	add	r7, sp, #0
 801913c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801913e:	6878      	ldr	r0, [r7, #4]
 8019140:	f000 f805 	bl	801914e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8019144:	4603      	mov	r3, r0
}
 8019146:	4618      	mov	r0, r3
 8019148:	3708      	adds	r7, #8
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}

0801914e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801914e:	b580      	push	{r7, lr}
 8019150:	b082      	sub	sp, #8
 8019152:	af00      	add	r7, sp, #0
 8019154:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8019156:	2101      	movs	r1, #1
 8019158:	6878      	ldr	r0, [r7, #4]
 801915a:	f7fc fd0d 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801915e:	4603      	mov	r3, r0
  }
 8019160:	4618      	mov	r0, r3
 8019162:	3708      	adds	r7, #8
 8019164:	46bd      	mov	sp, r7
 8019166:	bd80      	pop	{r7, pc}

08019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8019168:	b590      	push	{r4, r7, lr}
 801916a:	b085      	sub	sp, #20
 801916c:	af00      	add	r7, sp, #0
 801916e:	60f8      	str	r0, [r7, #12]
 8019170:	60b9      	str	r1, [r7, #8]
 8019172:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8019174:	f107 0308 	add.w	r3, r7, #8
 8019178:	4618      	mov	r0, r3
 801917a:	f7fe fe55 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801917e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8019180:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8019182:	1d3b      	adds	r3, r7, #4
 8019184:	4618      	mov	r0, r3
 8019186:	f7fe fe4f 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801918a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	461a      	mov	r2, r3
 8019190:	4621      	mov	r1, r4
 8019192:	68f8      	ldr	r0, [r7, #12]
 8019194:	f7ff f8ac 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8019198:	4603      	mov	r3, r0
 801919a:	4618      	mov	r0, r3
 801919c:	f7fe fdd3 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80191a0:	4603      	mov	r3, r0
}
 80191a2:	4618      	mov	r0, r3
 80191a4:	3714      	adds	r7, #20
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd90      	pop	{r4, r7, pc}

080191aa <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 80191aa:	b580      	push	{r7, lr}
 80191ac:	b082      	sub	sp, #8
 80191ae:	af00      	add	r7, sp, #0
 80191b0:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	bf0c      	ite	eq
 80191b8:	2301      	moveq	r3, #1
 80191ba:	2300      	movne	r3, #0
 80191bc:	b2db      	uxtb	r3, r3
 80191be:	4618      	mov	r0, r3
 80191c0:	f7fd f8fc 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80191c4:	4603      	mov	r3, r0
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
	...

080191d0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b08a      	sub	sp, #40	; 0x28
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 80191d8:	482c      	ldr	r0, [pc, #176]	; (801928c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80191da:	f7ff ff9f 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80191de:	4603      	mov	r3, r0
 80191e0:	4618      	mov	r0, r3
 80191e2:	f7fe fe2c 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80191e6:	4603      	mov	r3, r0
 80191e8:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 80191ea:	4829      	ldr	r0, [pc, #164]	; (8019290 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 80191ec:	f7ff ff96 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80191f0:	4603      	mov	r3, r0
 80191f2:	4618      	mov	r0, r3
 80191f4:	f7fe fe23 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80191f8:	4603      	mov	r3, r0
 80191fa:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 80191fc:	f000 f86c 	bl	80192d8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8019200:	4603      	mov	r3, r0
 8019202:	4619      	mov	r1, r3
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	f000 f870 	bl	80192ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801920a:	4603      	mov	r3, r0
 801920c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801920e:	69f9      	ldr	r1, [r7, #28]
 8019210:	69f8      	ldr	r0, [r7, #28]
 8019212:	f000 f83f 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8019216:	4603      	mov	r3, r0
 8019218:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801921a:	69f9      	ldr	r1, [r7, #28]
 801921c:	69b8      	ldr	r0, [r7, #24]
 801921e:	f000 f839 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8019222:	4603      	mov	r3, r0
 8019224:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8019226:	69b9      	ldr	r1, [r7, #24]
 8019228:	69b8      	ldr	r0, [r7, #24]
 801922a:	f000 f833 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801922e:	4603      	mov	r3, r0
 8019230:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8019232:	6938      	ldr	r0, [r7, #16]
 8019234:	f000 f877 	bl	8019326 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8019238:	4603      	mov	r3, r0
 801923a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801923c:	6979      	ldr	r1, [r7, #20]
 801923e:	68f8      	ldr	r0, [r7, #12]
 8019240:	f000 f853 	bl	80192ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8019244:	4603      	mov	r3, r0
 8019246:	6a39      	ldr	r1, [r7, #32]
 8019248:	4618      	mov	r0, r3
 801924a:	f000 f823 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801924e:	4603      	mov	r3, r0
 8019250:	69b9      	ldr	r1, [r7, #24]
 8019252:	4618      	mov	r0, r3
 8019254:	f000 f849 	bl	80192ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8019258:	4603      	mov	r3, r0
 801925a:	4618      	mov	r0, r3
 801925c:	f000 f879 	bl	8019352 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8019260:	4603      	mov	r3, r0
 8019262:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8019264:	68b9      	ldr	r1, [r7, #8]
 8019266:	69f8      	ldr	r0, [r7, #28]
 8019268:	f000 f83f 	bl	80192ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801926c:	4603      	mov	r3, r0
 801926e:	4619      	mov	r1, r3
 8019270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019272:	f000 f80f 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8019276:	4603      	mov	r3, r0
 8019278:	4619      	mov	r1, r3
 801927a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801927c:	f000 f87f 	bl	801937e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8019280:	4603      	mov	r3, r0
}
 8019282:	4618      	mov	r0, r3
 8019284:	3728      	adds	r7, #40	; 0x28
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}
 801928a:	bf00      	nop
 801928c:	70f5a894 	.word	0x70f5a894
 8019290:	2aaaaaab 	.word	0x2aaaaaab

08019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8019294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019296:	b085      	sub	sp, #20
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
 801929c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801929e:	1d3b      	adds	r3, r7, #4
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7fe fdc1 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80192a6:	4603      	mov	r3, r0
 80192a8:	681d      	ldr	r5, [r3, #0]
 80192aa:	463b      	mov	r3, r7
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7fe fdbb 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80192b2:	4603      	mov	r3, r0
 80192b4:	681e      	ldr	r6, [r3, #0]
 80192b6:	f107 030c 	add.w	r3, r7, #12
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7fe fdb4 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80192c0:	4604      	mov	r4, r0
 80192c2:	4631      	mov	r1, r6
 80192c4:	4628      	mov	r0, r5
 80192c6:	f7fb ffe7 	bl	8015298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80192ca:	4603      	mov	r3, r0
 80192cc:	6023      	str	r3, [r4, #0]
  return c;
 80192ce:	68fb      	ldr	r3, [r7, #12]
}
 80192d0:	4618      	mov	r0, r3
 80192d2:	3714      	adds	r7, #20
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192d8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 80192d8:	b580      	push	{r7, lr}
 80192da:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80192dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80192e0:	f7fe fdad 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80192e4:	4603      	mov	r3, r0
  }
 80192e6:	4618      	mov	r0, r3
 80192e8:	bd80      	pop	{r7, pc}

080192ea <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80192ea:	b590      	push	{r4, r7, lr}
 80192ec:	b083      	sub	sp, #12
 80192ee:	af00      	add	r7, sp, #0
 80192f0:	6078      	str	r0, [r7, #4]
 80192f2:	6039      	str	r1, [r7, #0]
 80192f4:	1d3b      	adds	r3, r7, #4
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fe fd96 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80192fc:	4603      	mov	r3, r0
 80192fe:	681c      	ldr	r4, [r3, #0]
 8019300:	463b      	mov	r3, r7
 8019302:	4618      	mov	r0, r3
 8019304:	f7fe fd90 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8019308:	4603      	mov	r3, r0
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	4619      	mov	r1, r3
 801930e:	4620      	mov	r0, r4
 8019310:	f7fd f832 	bl	8016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8019314:	4603      	mov	r3, r0
 8019316:	4618      	mov	r0, r3
 8019318:	f7fe fd15 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801931c:	4603      	mov	r3, r0
 801931e:	4618      	mov	r0, r3
 8019320:	370c      	adds	r7, #12
 8019322:	46bd      	mov	sp, r7
 8019324:	bd90      	pop	{r4, r7, pc}

08019326 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8019326:	b580      	push	{r7, lr}
 8019328:	b082      	sub	sp, #8
 801932a:	af00      	add	r7, sp, #0
 801932c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801932e:	1d3b      	adds	r3, r7, #4
 8019330:	4618      	mov	r0, r3
 8019332:	f7fe fd79 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8019336:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	4618      	mov	r0, r3
 801933c:	f000 f83d 	bl	80193ba <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8019340:	4603      	mov	r3, r0
 8019342:	4618      	mov	r0, r3
 8019344:	f7fe fcff 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8019348:	4603      	mov	r3, r0
}
 801934a:	4618      	mov	r0, r3
 801934c:	3708      	adds	r7, #8
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}

08019352 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8019352:	b580      	push	{r7, lr}
 8019354:	b082      	sub	sp, #8
 8019356:	af00      	add	r7, sp, #0
 8019358:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801935a:	1d3b      	adds	r3, r7, #4
 801935c:	4618      	mov	r0, r3
 801935e:	f7fe fd63 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8019362:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	4618      	mov	r0, r3
 8019368:	f7ff fee5 	bl	8019136 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801936c:	4603      	mov	r3, r0
 801936e:	4618      	mov	r0, r3
 8019370:	f7fe fce9 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8019374:	4603      	mov	r3, r0
}
 8019376:	4618      	mov	r0, r3
 8019378:	3708      	adds	r7, #8
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}

0801937e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801937e:	b590      	push	{r4, r7, lr}
 8019380:	b083      	sub	sp, #12
 8019382:	af00      	add	r7, sp, #0
 8019384:	6078      	str	r0, [r7, #4]
 8019386:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8019388:	1d3b      	adds	r3, r7, #4
 801938a:	4618      	mov	r0, r3
 801938c:	f7fe fd4c 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8019390:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8019392:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8019394:	463b      	mov	r3, r7
 8019396:	4618      	mov	r0, r3
 8019398:	f7fe fd46 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801939c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	4619      	mov	r1, r3
 80193a2:	4620      	mov	r0, r4
 80193a4:	f000 f815 	bl	80193d2 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80193a8:	4603      	mov	r3, r0
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7fe fccb 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80193b0:	4603      	mov	r3, r0
}
 80193b2:	4618      	mov	r0, r3
 80193b4:	370c      	adds	r7, #12
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd90      	pop	{r4, r7, pc}

080193ba <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80193ba:	b580      	push	{r7, lr}
 80193bc:	b082      	sub	sp, #8
 80193be:	af00      	add	r7, sp, #0
 80193c0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80193c2:	6878      	ldr	r0, [r7, #4]
 80193c4:	f000 f813 	bl	80193ee <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 80193c8:	4603      	mov	r3, r0
}
 80193ca:	4618      	mov	r0, r3
 80193cc:	3708      	adds	r7, #8
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}

080193d2 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 80193d2:	b580      	push	{r7, lr}
 80193d4:	b082      	sub	sp, #8
 80193d6:	af00      	add	r7, sp, #0
 80193d8:	6078      	str	r0, [r7, #4]
 80193da:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80193dc:	6839      	ldr	r1, [r7, #0]
 80193de:	6878      	ldr	r0, [r7, #4]
 80193e0:	f000 f812 	bl	8019408 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 80193e4:	4603      	mov	r3, r0
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	3708      	adds	r7, #8
 80193ea:	46bd      	mov	sp, r7
 80193ec:	bd80      	pop	{r7, pc}

080193ee <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80193ee:	b580      	push	{r7, lr}
 80193f0:	b082      	sub	sp, #8
 80193f2:	af00      	add	r7, sp, #0
 80193f4:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80193f6:	2102      	movs	r1, #2
 80193f8:	6878      	ldr	r0, [r7, #4]
 80193fa:	f7fc fbbd 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80193fe:	4603      	mov	r3, r0
  }
 8019400:	4618      	mov	r0, r3
 8019402:	3708      	adds	r7, #8
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}

08019408 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	6039      	str	r1, [r7, #0]
 8019412:	6839      	ldr	r1, [r7, #0]
 8019414:	6878      	ldr	r0, [r7, #4]
 8019416:	f7fc ffaf 	bl	8016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801941a:	4603      	mov	r3, r0
 801941c:	4618      	mov	r0, r3
 801941e:	3708      	adds	r7, #8
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}

08019424 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8019424:	b590      	push	{r4, r7, lr}
 8019426:	ed2d 8b02 	vpush	{d8}
 801942a:	b0a7      	sub	sp, #156	; 0x9c
 801942c:	af02      	add	r7, sp, #8
 801942e:	60f8      	str	r0, [r7, #12]
 8019430:	60b9      	str	r1, [r7, #8]
 8019432:	607a      	str	r2, [r7, #4]
 8019434:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8019436:	68b8      	ldr	r0, [r7, #8]
 8019438:	f7fb fe09 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801943c:	4603      	mov	r3, r0
 801943e:	2b04      	cmp	r3, #4
 8019440:	d001      	beq.n	8019446 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8019442:	f006 fc4b 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8019446:	6838      	ldr	r0, [r7, #0]
 8019448:	f7fb fe01 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801944c:	4603      	mov	r3, r0
 801944e:	2b04      	cmp	r3, #4
 8019450:	d001      	beq.n	8019456 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8019452:	f006 fc43 	bl	801fcdc <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8019456:	2300      	movs	r3, #0
 8019458:	683a      	ldr	r2, [r7, #0]
 801945a:	2100      	movs	r1, #0
 801945c:	68b8      	ldr	r0, [r7, #8]
 801945e:	f7fd f8d4 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019462:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8019464:	2303      	movs	r3, #3
 8019466:	683a      	ldr	r2, [r7, #0]
 8019468:	2103      	movs	r1, #3
 801946a:	68b8      	ldr	r0, [r7, #8]
 801946c:	f7fd f8cd 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019470:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8019472:	2101      	movs	r1, #1
 8019474:	68b8      	ldr	r0, [r7, #8]
 8019476:	f7fb ff85 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801947a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801947c:	2102      	movs	r1, #2
 801947e:	68b8      	ldr	r0, [r7, #8]
 8019480:	f7fb ff80 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019484:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8019486:	2101      	movs	r1, #1
 8019488:	6838      	ldr	r0, [r7, #0]
 801948a:	f7fb ff7b 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801948e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8019490:	2102      	movs	r1, #2
 8019492:	6838      	ldr	r0, [r7, #0]
 8019494:	f7fb ff76 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019498:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	68db      	ldr	r3, [r3, #12]
 801949e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	691b      	ldr	r3, [r3, #16]
 80194a4:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80194a6:	2300      	movs	r3, #0
 80194a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80194ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80194b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194b2:	429a      	cmp	r2, r3
 80194b4:	f280 80f0 	bge.w	8019698 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x274>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80194b8:	2300      	movs	r3, #0
 80194ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80194be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80194c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80194c4:	429a      	cmp	r2, r3
 80194c6:	f280 80e1 	bge.w	801968c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80194ca:	2300      	movs	r3, #0
 80194cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80194d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80194d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80194d6:	429a      	cmp	r2, r3
 80194d8:	f280 80d2 	bge.w	8019680 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x25c>
        for (int channel = 0; channel < depth; ++channel) {
 80194dc:	2300      	movs	r3, #0
 80194de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80194e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80194e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80194e8:	429a      	cmp	r2, r3
 80194ea:	f280 80c3 	bge.w	8019674 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x250>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80194ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80194f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80194f4:	fb02 f303 	mul.w	r3, r2, r3
 80194f8:	68fa      	ldr	r2, [r7, #12]
 80194fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80194fe:	1a9b      	subs	r3, r3, r2
 8019500:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8019502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019508:	fb02 f303 	mul.w	r3, r2, r3
 801950c:	68fa      	ldr	r2, [r7, #12]
 801950e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8019512:	1a9b      	subs	r3, r3, r2
 8019514:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8019516:	2300      	movs	r3, #0
 8019518:	617b      	str	r3, [r7, #20]
 801951a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801951c:	425b      	negs	r3, r3
 801951e:	61bb      	str	r3, [r7, #24]
 8019520:	f107 0218 	add.w	r2, r7, #24
 8019524:	f107 0314 	add.w	r3, r7, #20
 8019528:	4611      	mov	r1, r2
 801952a:	4618      	mov	r0, r3
 801952c:	f7fb fd1c 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 8019530:	4603      	mov	r3, r0
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	f103 0018 	add.w	r0, r3, #24
 801953c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801953e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019540:	1ad3      	subs	r3, r2, r3
 8019542:	61fb      	str	r3, [r7, #28]
 8019544:	f107 031c 	add.w	r3, r7, #28
 8019548:	4619      	mov	r1, r3
 801954a:	f7ff fda4 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 801954e:	4603      	mov	r3, r0
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8019554:	2300      	movs	r3, #0
 8019556:	623b      	str	r3, [r7, #32]
 8019558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801955a:	425b      	negs	r3, r3
 801955c:	627b      	str	r3, [r7, #36]	; 0x24
 801955e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019562:	f107 0320 	add.w	r3, r7, #32
 8019566:	4611      	mov	r1, r2
 8019568:	4618      	mov	r0, r3
 801956a:	f7fb fcfd 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 801956e:	4603      	mov	r3, r0
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	f103 0014 	add.w	r0, r3, #20
 801957a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801957c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801957e:	1ad3      	subs	r3, r2, r3
 8019580:	62bb      	str	r3, [r7, #40]	; 0x28
 8019582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019586:	4619      	mov	r1, r3
 8019588:	f7ff fd85 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 801958c:	4603      	mov	r3, r0
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8019592:	f04f 0300 	mov.w	r3, #0
 8019596:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 8019598:	f04f 0300 	mov.w	r3, #0
 801959c:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801959e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195a0:	677b      	str	r3, [r7, #116]	; 0x74
 80195a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80195a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a6:	429a      	cmp	r2, r3
 80195a8:	da33      	bge.n	8019612 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80195aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80195ac:	673b      	str	r3, [r7, #112]	; 0x70
 80195ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80195b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195b2:	429a      	cmp	r2, r3
 80195b4:	da29      	bge.n	801960a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80195b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80195b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80195ba:	4413      	add	r3, r2
 80195bc:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80195be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80195c2:	4413      	add	r3, r2
 80195c4:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 80195c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195d0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80195d4:	68b8      	ldr	r0, [r7, #8]
 80195d6:	f7fc ff35 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80195da:	4603      	mov	r3, r0
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	687a      	ldr	r2, [r7, #4]
 80195e0:	4413      	add	r3, r2
 80195e2:	edd3 7a00 	vldr	s15, [r3]
              total +=
 80195e6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80195ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80195ee:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 80195f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80195f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80195fe:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8019602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019604:	3301      	adds	r3, #1
 8019606:	673b      	str	r3, [r7, #112]	; 0x70
 8019608:	e7d1      	b.n	80195ae <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801960a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801960c:	3301      	adds	r3, #1
 801960e:	677b      	str	r3, [r7, #116]	; 0x74
 8019610:	e7c7      	b.n	80195a2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          const float average = total / filter_count;
 8019612:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8019616:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801961a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801961e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801962e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019632:	9300      	str	r3, [sp, #0]
 8019634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019638:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801963c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8019640:	6838      	ldr	r0, [r7, #0]
 8019642:	f7fc feff 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019646:	4603      	mov	r3, r0
 8019648:	009b      	lsls	r3, r3, #2
 801964a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801964e:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8019650:	eeb0 1a68 	vmov.f32	s2, s17
 8019654:	eef0 0a48 	vmov.f32	s1, s16
 8019658:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 801965c:	f7fc ff4a 	bl	80164f4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8019660:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8019664:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8019668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801966c:	3301      	adds	r3, #1
 801966e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019672:	e736      	b.n	80194e2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019678:	3301      	adds	r3, #1
 801967a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801967e:	e727      	b.n	80194d0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019684:	3301      	adds	r3, #1
 8019686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801968a:	e718      	b.n	80194be <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 801968c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019690:	3301      	adds	r3, #1
 8019692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019696:	e709      	b.n	80194ac <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8019698:	bf00      	nop
 801969a:	3794      	adds	r7, #148	; 0x94
 801969c:	46bd      	mov	sp, r7
 801969e:	ecbd 8b02 	vpop	{d8}
 80196a2:	bd90      	pop	{r4, r7, pc}

080196a4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
 80196a4:	b590      	push	{r4, r7, lr}
 80196a6:	b0a5      	sub	sp, #148	; 0x94
 80196a8:	af02      	add	r7, sp, #8
 80196aa:	60f8      	str	r0, [r7, #12]
 80196ac:	60b9      	str	r1, [r7, #8]
 80196ae:	607a      	str	r2, [r7, #4]
 80196b0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	69da      	ldr	r2, [r3, #28]
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	6a1b      	ldr	r3, [r3, #32]
 80196ba:	429a      	cmp	r2, r3
 80196bc:	dd01      	ble.n	80196c2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 80196be:	f006 fb0d 	bl	801fcdc <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80196c2:	68b8      	ldr	r0, [r7, #8]
 80196c4:	f7fb fcc3 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80196c8:	4603      	mov	r3, r0
 80196ca:	2b04      	cmp	r3, #4
 80196cc:	d001      	beq.n	80196d2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2e>
 80196ce:	f006 fb05 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80196d2:	6838      	ldr	r0, [r7, #0]
 80196d4:	f7fb fcbb 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80196d8:	4603      	mov	r3, r0
 80196da:	2b04      	cmp	r3, #4
 80196dc:	d001      	beq.n	80196e2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x3e>
 80196de:	f006 fafd 	bl	801fcdc <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80196e2:	2300      	movs	r3, #0
 80196e4:	683a      	ldr	r2, [r7, #0]
 80196e6:	2100      	movs	r1, #0
 80196e8:	68b8      	ldr	r0, [r7, #8]
 80196ea:	f7fc ff8e 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80196ee:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80196f0:	2303      	movs	r3, #3
 80196f2:	683a      	ldr	r2, [r7, #0]
 80196f4:	2103      	movs	r1, #3
 80196f6:	68b8      	ldr	r0, [r7, #8]
 80196f8:	f7fc ff87 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80196fc:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 80196fe:	2101      	movs	r1, #1
 8019700:	68b8      	ldr	r0, [r7, #8]
 8019702:	f7fb fe3f 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019706:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 8019708:	2102      	movs	r1, #2
 801970a:	68b8      	ldr	r0, [r7, #8]
 801970c:	f7fb fe3a 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019710:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 8019712:	2101      	movs	r1, #1
 8019714:	6838      	ldr	r0, [r7, #0]
 8019716:	f7fb fe35 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801971a:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 801971c:	2102      	movs	r1, #2
 801971e:	6838      	ldr	r0, [r7, #0]
 8019720:	f7fb fe30 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019724:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	68db      	ldr	r3, [r3, #12]
 801972a:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	691b      	ldr	r3, [r3, #16]
 8019730:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 8019732:	2300      	movs	r3, #0
 8019734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019738:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801973c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801973e:	429a      	cmp	r2, r3
 8019740:	f280 80e6 	bge.w	8019910 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019744:	2300      	movs	r3, #0
 8019746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801974a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801974e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019750:	429a      	cmp	r2, r3
 8019752:	f280 80d7 	bge.w	8019904 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x260>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019756:	2300      	movs	r3, #0
 8019758:	67fb      	str	r3, [r7, #124]	; 0x7c
 801975a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801975c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801975e:	429a      	cmp	r2, r3
 8019760:	f280 80ca 	bge.w	80198f8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x254>
        for (int channel = 0; channel < depth; ++channel) {
 8019764:	2300      	movs	r3, #0
 8019766:	67bb      	str	r3, [r7, #120]	; 0x78
 8019768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801976a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801976c:	429a      	cmp	r2, r3
 801976e:	f280 80bf 	bge.w	80198f0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x24c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8019772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019776:	fb02 f303 	mul.w	r3, r2, r3
 801977a:	68fa      	ldr	r2, [r7, #12]
 801977c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8019780:	1a9b      	subs	r3, r3, r2
 8019782:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8019784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801978a:	fb02 f303 	mul.w	r3, r2, r3
 801978e:	68fa      	ldr	r2, [r7, #12]
 8019790:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8019794:	1a9b      	subs	r3, r3, r2
 8019796:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8019798:	2300      	movs	r3, #0
 801979a:	617b      	str	r3, [r7, #20]
 801979c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801979e:	425b      	negs	r3, r3
 80197a0:	61bb      	str	r3, [r7, #24]
 80197a2:	f107 0218 	add.w	r2, r7, #24
 80197a6:	f107 0314 	add.w	r3, r7, #20
 80197aa:	4611      	mov	r1, r2
 80197ac:	4618      	mov	r0, r3
 80197ae:	f7fb fbdb 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 80197b2:	4603      	mov	r3, r0
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	f103 0018 	add.w	r0, r3, #24
 80197be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80197c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197c2:	1ad3      	subs	r3, r2, r3
 80197c4:	61fb      	str	r3, [r7, #28]
 80197c6:	f107 031c 	add.w	r3, r7, #28
 80197ca:	4619      	mov	r1, r3
 80197cc:	f7ff fc63 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 80197d0:	4603      	mov	r3, r0
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 80197d6:	2300      	movs	r3, #0
 80197d8:	623b      	str	r3, [r7, #32]
 80197da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197dc:	425b      	negs	r3, r3
 80197de:	627b      	str	r3, [r7, #36]	; 0x24
 80197e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80197e4:	f107 0320 	add.w	r3, r7, #32
 80197e8:	4611      	mov	r1, r2
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7fb fbbc 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 80197f0:	4603      	mov	r3, r0
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	f103 0014 	add.w	r0, r3, #20
 80197fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80197fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019800:	1ad3      	subs	r3, r2, r3
 8019802:	62bb      	str	r3, [r7, #40]	; 0x28
 8019804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019808:	4619      	mov	r1, r3
 801980a:	f7ff fc44 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 801980e:	4603      	mov	r3, r0
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	637b      	str	r3, [r7, #52]	; 0x34
          int32_t acc = 0;
 8019814:	2300      	movs	r3, #0
 8019816:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 8019818:	2300      	movs	r3, #0
 801981a:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801981e:	673b      	str	r3, [r7, #112]	; 0x70
 8019820:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019824:	429a      	cmp	r2, r3
 8019826:	da2a      	bge.n	801987e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1da>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8019828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801982a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801982c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019830:	429a      	cmp	r2, r3
 8019832:	da20      	bge.n	8019876 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1d2>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8019834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019838:	4413      	add	r3, r2
 801983a:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 801983c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801983e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019840:	4413      	add	r3, r2
 8019842:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8019844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019846:	9300      	str	r3, [sp, #0]
 8019848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801984a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801984c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019850:	68b8      	ldr	r0, [r7, #8]
 8019852:	f7fc fdf7 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019856:	4603      	mov	r3, r0
 8019858:	461a      	mov	r2, r3
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	4413      	add	r3, r2
 801985e:	781b      	ldrb	r3, [r3, #0]
              acc +=
 8019860:	461a      	mov	r2, r3
 8019862:	693b      	ldr	r3, [r7, #16]
 8019864:	4413      	add	r3, r2
 8019866:	613b      	str	r3, [r7, #16]
              filter_count++;
 8019868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801986a:	3301      	adds	r3, #1
 801986c:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801986e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019870:	3301      	adds	r3, #1
 8019872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019874:	e7da      	b.n	801982c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8019876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019878:	3301      	adds	r3, #1
 801987a:	673b      	str	r3, [r7, #112]	; 0x70
 801987c:	e7d0      	b.n	8019820 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
 801987e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019880:	0fda      	lsrs	r2, r3, #31
 8019882:	4413      	add	r3, r2
 8019884:	105b      	asrs	r3, r3, #1
 8019886:	461a      	mov	r2, r3
 8019888:	693b      	ldr	r3, [r7, #16]
 801988a:	441a      	add	r2, r3
 801988c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801988e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019892:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	f103 021c 	add.w	r2, r3, #28
 801989a:	f107 0310 	add.w	r3, r7, #16
 801989e:	4611      	mov	r1, r2
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7fb fb89 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 80198a6:	4603      	mov	r3, r0
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	f103 0220 	add.w	r2, r3, #32
 80198b2:	f107 0310 	add.w	r3, r7, #16
 80198b6:	4611      	mov	r1, r2
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7fb fb69 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 80198be:	4603      	mov	r3, r0
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80198c4:	693c      	ldr	r4, [r7, #16]
 80198c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80198c8:	9300      	str	r3, [sp, #0]
 80198ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80198cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80198d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80198d4:	6838      	ldr	r0, [r7, #0]
 80198d6:	f7fc fdb5 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80198da:	4603      	mov	r3, r0
 80198dc:	461a      	mov	r2, r3
 80198de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80198e2:	4413      	add	r3, r2
 80198e4:	b2e2      	uxtb	r2, r4
 80198e6:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 80198e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80198ea:	3301      	adds	r3, #1
 80198ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80198ee:	e73b      	b.n	8019768 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xc4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80198f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80198f2:	3301      	adds	r3, #1
 80198f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80198f6:	e730      	b.n	801975a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80198f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80198fc:	3301      	adds	r3, #1
 80198fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019902:	e722      	b.n	801974a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
  for (int batch = 0; batch < batches; ++batch) {
 8019904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019908:	3301      	adds	r3, #1
 801990a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801990e:	e713      	b.n	8019738 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x94>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
 8019910:	bf00      	nop
 8019912:	378c      	adds	r7, #140	; 0x8c
 8019914:	46bd      	mov	sp, r7
 8019916:	bd90      	pop	{r4, r7, pc}

08019918 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8019918:	b590      	push	{r4, r7, lr}
 801991a:	ed2d 8b04 	vpush	{d8-d9}
 801991e:	b0a5      	sub	sp, #148	; 0x94
 8019920:	af02      	add	r7, sp, #8
 8019922:	60f8      	str	r0, [r7, #12]
 8019924:	60b9      	str	r1, [r7, #8]
 8019926:	607a      	str	r2, [r7, #4]
 8019928:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801992a:	68b8      	ldr	r0, [r7, #8]
 801992c:	f7fb fb8f 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019930:	4603      	mov	r3, r0
 8019932:	2b04      	cmp	r3, #4
 8019934:	d001      	beq.n	801993a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8019936:	f006 f9d1 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801993a:	6838      	ldr	r0, [r7, #0]
 801993c:	f7fb fb87 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019940:	4603      	mov	r3, r0
 8019942:	2b04      	cmp	r3, #4
 8019944:	d001      	beq.n	801994a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8019946:	f006 f9c9 	bl	801fcdc <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801994a:	2300      	movs	r3, #0
 801994c:	683a      	ldr	r2, [r7, #0]
 801994e:	2100      	movs	r1, #0
 8019950:	68b8      	ldr	r0, [r7, #8]
 8019952:	f7fc fe5a 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019956:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8019958:	2303      	movs	r3, #3
 801995a:	683a      	ldr	r2, [r7, #0]
 801995c:	2103      	movs	r1, #3
 801995e:	68b8      	ldr	r0, [r7, #8]
 8019960:	f7fc fe53 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019964:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8019966:	2101      	movs	r1, #1
 8019968:	68b8      	ldr	r0, [r7, #8]
 801996a:	f7fb fd0b 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801996e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8019970:	2102      	movs	r1, #2
 8019972:	68b8      	ldr	r0, [r7, #8]
 8019974:	f7fb fd06 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019978:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801997a:	2101      	movs	r1, #1
 801997c:	6838      	ldr	r0, [r7, #0]
 801997e:	f7fb fd01 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019982:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8019984:	2102      	movs	r1, #2
 8019986:	6838      	ldr	r0, [r7, #0]
 8019988:	f7fb fcfc 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801998c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	68db      	ldr	r3, [r3, #12]
 8019992:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	691b      	ldr	r3, [r3, #16]
 8019998:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801999a:	2300      	movs	r3, #0
 801999c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80199a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80199a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80199a6:	429a      	cmp	r2, r3
 80199a8:	f280 80d4 	bge.w	8019b54 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80199ac:	2300      	movs	r3, #0
 80199ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80199b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80199b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199b8:	429a      	cmp	r2, r3
 80199ba:	f280 80c5 	bge.w	8019b48 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80199be:	2300      	movs	r3, #0
 80199c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80199c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80199c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80199c6:	429a      	cmp	r2, r3
 80199c8:	f280 80b8 	bge.w	8019b3c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 80199cc:	2300      	movs	r3, #0
 80199ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80199d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80199d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80199d4:	429a      	cmp	r2, r3
 80199d6:	f280 80ad 	bge.w	8019b34 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80199da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80199dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80199de:	fb02 f303 	mul.w	r3, r2, r3
 80199e2:	68fa      	ldr	r2, [r7, #12]
 80199e4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80199e8:	1a9b      	subs	r3, r3, r2
 80199ea:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80199ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80199f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80199f2:	fb02 f303 	mul.w	r3, r2, r3
 80199f6:	68fa      	ldr	r2, [r7, #12]
 80199f8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80199fc:	1a9b      	subs	r3, r3, r2
 80199fe:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8019a00:	2300      	movs	r3, #0
 8019a02:	61bb      	str	r3, [r7, #24]
 8019a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a06:	425b      	negs	r3, r3
 8019a08:	61fb      	str	r3, [r7, #28]
 8019a0a:	f107 021c 	add.w	r2, r7, #28
 8019a0e:	f107 0318 	add.w	r3, r7, #24
 8019a12:	4611      	mov	r1, r2
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7fb faa7 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	f103 0018 	add.w	r0, r3, #24
 8019a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a2a:	1ad3      	subs	r3, r2, r3
 8019a2c:	623b      	str	r3, [r7, #32]
 8019a2e:	f107 0320 	add.w	r3, r7, #32
 8019a32:	4619      	mov	r1, r3
 8019a34:	f7ff fb2f 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8019a3e:	2300      	movs	r3, #0
 8019a40:	627b      	str	r3, [r7, #36]	; 0x24
 8019a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a44:	425b      	negs	r3, r3
 8019a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a50:	4611      	mov	r1, r2
 8019a52:	4618      	mov	r0, r3
 8019a54:	f7fb fa88 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	f103 0014 	add.w	r0, r3, #20
 8019a64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a68:	1ad3      	subs	r3, r2, r3
 8019a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a70:	4619      	mov	r1, r3
 8019a72:	f7ff fb10 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 8019a76:	4603      	mov	r3, r0
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8019a7c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8019a80:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8019a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a84:	677b      	str	r3, [r7, #116]	; 0x74
 8019a86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a8a:	429a      	cmp	r2, r3
 8019a8c:	da2b      	bge.n	8019ae6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8019a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a90:	673b      	str	r3, [r7, #112]	; 0x70
 8019a92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a96:	429a      	cmp	r2, r3
 8019a98:	da21      	bge.n	8019ade <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8019a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a9e:	4413      	add	r3, r2
 8019aa0:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8019aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019aa6:	4413      	add	r3, r2
 8019aa8:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8019aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019aac:	9300      	str	r3, [sp, #0]
 8019aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ab2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019ab6:	68b8      	ldr	r0, [r7, #8]
 8019ab8:	f7fc fcc4 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019abc:	4603      	mov	r3, r0
 8019abe:	009b      	lsls	r3, r3, #2
 8019ac0:	687a      	ldr	r2, [r7, #4]
 8019ac2:	441a      	add	r2, r3
 8019ac4:	f107 0314 	add.w	r3, r7, #20
 8019ac8:	4611      	mov	r1, r2
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7fa fd50 	bl	8014570 <_ZSt3maxIfERKT_S2_S2_>
 8019ad0:	4603      	mov	r3, r0
              max = std::max(
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8019ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ad8:	3301      	adds	r3, #1
 8019ada:	673b      	str	r3, [r7, #112]	; 0x70
 8019adc:	e7d9      	b.n	8019a92 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8019ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ae0:	3301      	adds	r3, #1
 8019ae2:	677b      	str	r3, [r7, #116]	; 0x74
 8019ae4:	e7cf      	b.n	8019a86 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8019ae6:	ed97 8a05 	vldr	s16, [r7, #20]
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8019af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019af8:	9300      	str	r3, [sp, #0]
 8019afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019b00:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019b04:	6838      	ldr	r0, [r7, #0]
 8019b06:	f7fc fc9d 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8019b12:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8019b14:	eeb0 1a49 	vmov.f32	s2, s18
 8019b18:	eef0 0a68 	vmov.f32	s1, s17
 8019b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8019b20:	f7fc fce8 	bl	80164f4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8019b24:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8019b28:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8019b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019b2e:	3301      	adds	r3, #1
 8019b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8019b32:	e74d      	b.n	80199d0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019b36:	3301      	adds	r3, #1
 8019b38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019b3a:	e742      	b.n	80199c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019b40:	3301      	adds	r3, #1
 8019b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019b46:	e734      	b.n	80199b2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8019b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019b52:	e725      	b.n	80199a0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8019b54:	bf00      	nop
 8019b56:	378c      	adds	r7, #140	; 0x8c
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	ecbd 8b04 	vpop	{d8-d9}
 8019b5e:	bd90      	pop	{r4, r7, pc}

08019b60 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b0a4      	sub	sp, #144	; 0x90
 8019b64:	af02      	add	r7, sp, #8
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	607a      	str	r2, [r7, #4]
 8019b6c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	69da      	ldr	r2, [r3, #28]
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	6a1b      	ldr	r3, [r3, #32]
 8019b76:	429a      	cmp	r2, r3
 8019b78:	dd01      	ble.n	8019b7e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8019b7a:	f006 f8af 	bl	801fcdc <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	69db      	ldr	r3, [r3, #28]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	da01      	bge.n	8019b8a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 8019b86:	f006 f8a9 	bl	801fcdc <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	6a1b      	ldr	r3, [r3, #32]
 8019b8e:	2bff      	cmp	r3, #255	; 0xff
 8019b90:	dd01      	ble.n	8019b96 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 8019b92:	f006 f8a3 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8019b96:	68b8      	ldr	r0, [r7, #8]
 8019b98:	f7fb fa59 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	2b04      	cmp	r3, #4
 8019ba0:	d001      	beq.n	8019ba6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 8019ba2:	f006 f89b 	bl	801fcdc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8019ba6:	6838      	ldr	r0, [r7, #0]
 8019ba8:	f7fb fa51 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019bac:	4603      	mov	r3, r0
 8019bae:	2b04      	cmp	r3, #4
 8019bb0:	d001      	beq.n	8019bb6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 8019bb2:	f006 f893 	bl	801fcdc <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	683a      	ldr	r2, [r7, #0]
 8019bba:	2100      	movs	r1, #0
 8019bbc:	68b8      	ldr	r0, [r7, #8]
 8019bbe:	f7fc fd24 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019bc2:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8019bc4:	2303      	movs	r3, #3
 8019bc6:	683a      	ldr	r2, [r7, #0]
 8019bc8:	2103      	movs	r1, #3
 8019bca:	68b8      	ldr	r0, [r7, #8]
 8019bcc:	f7fc fd1d 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019bd0:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8019bd2:	2101      	movs	r1, #1
 8019bd4:	68b8      	ldr	r0, [r7, #8]
 8019bd6:	f7fb fbd5 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019bda:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8019bdc:	2102      	movs	r1, #2
 8019bde:	68b8      	ldr	r0, [r7, #8]
 8019be0:	f7fb fbd0 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019be4:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8019be6:	2101      	movs	r1, #1
 8019be8:	6838      	ldr	r0, [r7, #0]
 8019bea:	f7fb fbcb 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019bee:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8019bf0:	2102      	movs	r1, #2
 8019bf2:	6838      	ldr	r0, [r7, #0]
 8019bf4:	f7fb fbc6 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019bf8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	68db      	ldr	r3, [r3, #12]
 8019bfe:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	691b      	ldr	r3, [r3, #16]
 8019c04:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8019c06:	2300      	movs	r3, #0
 8019c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c12:	429a      	cmp	r2, r3
 8019c14:	f280 80e1 	bge.w	8019dda <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019c18:	2300      	movs	r3, #0
 8019c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c24:	429a      	cmp	r2, r3
 8019c26:	f280 80d2 	bge.w	8019dce <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019c2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019c32:	429a      	cmp	r2, r3
 8019c34:	f280 80c5 	bge.w	8019dc2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 8019c38:	2300      	movs	r3, #0
 8019c3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8019c3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c40:	429a      	cmp	r2, r3
 8019c42:	f280 80ba 	bge.w	8019dba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8019c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019c4a:	fb02 f303 	mul.w	r3, r2, r3
 8019c4e:	68fa      	ldr	r2, [r7, #12]
 8019c50:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8019c54:	1a9b      	subs	r3, r3, r2
 8019c56:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8019c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019c5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019c5e:	fb02 f303 	mul.w	r3, r2, r3
 8019c62:	68fa      	ldr	r2, [r7, #12]
 8019c64:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8019c68:	1a9b      	subs	r3, r3, r2
 8019c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	617b      	str	r3, [r7, #20]
 8019c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c72:	425b      	negs	r3, r3
 8019c74:	61bb      	str	r3, [r7, #24]
 8019c76:	f107 0218 	add.w	r2, r7, #24
 8019c7a:	f107 0314 	add.w	r3, r7, #20
 8019c7e:	4611      	mov	r1, r2
 8019c80:	4618      	mov	r0, r3
 8019c82:	f7fb f971 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 8019c86:	4603      	mov	r3, r0
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	f103 0018 	add.w	r0, r3, #24
 8019c92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c96:	1ad3      	subs	r3, r2, r3
 8019c98:	61fb      	str	r3, [r7, #28]
 8019c9a:	f107 031c 	add.w	r3, r7, #28
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	f7ff f9f9 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8019caa:	2300      	movs	r3, #0
 8019cac:	623b      	str	r3, [r7, #32]
 8019cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019cb0:	425b      	negs	r3, r3
 8019cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8019cb4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019cb8:	f107 0320 	add.w	r3, r7, #32
 8019cbc:	4611      	mov	r1, r2
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	f7fb f952 	bl	8014f68 <_ZSt3maxIiERKT_S2_S2_>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	f103 0014 	add.w	r0, r3, #20
 8019cd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019cd4:	1ad3      	subs	r3, r2, r3
 8019cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019cdc:	4619      	mov	r1, r3
 8019cde:	f7ff f9da 	bl	8019096 <_ZSt3minIiERKT_S2_S2_>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8_t max = 0;
 8019ce8:	2300      	movs	r3, #0
 8019cea:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8019cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cee:	677b      	str	r3, [r7, #116]	; 0x74
 8019cf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	da2b      	bge.n	8019d50 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8019cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8019cfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d00:	429a      	cmp	r2, r3
 8019d02:	da21      	bge.n	8019d48 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8019d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d08:	4413      	add	r3, r2
 8019d0a:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8019d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d10:	4413      	add	r3, r2
 8019d12:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8019d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019d16:	9300      	str	r3, [sp, #0]
 8019d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d1c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019d20:	68b8      	ldr	r0, [r7, #8]
 8019d22:	f7fc fb8f 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019d26:	4603      	mov	r3, r0
 8019d28:	461a      	mov	r2, r3
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	441a      	add	r2, r3
 8019d2e:	f107 0313 	add.w	r3, r7, #19
 8019d32:	4611      	mov	r1, r2
 8019d34:	4618      	mov	r0, r3
 8019d36:	f000 fd67 	bl	801a808 <_ZSt3maxIhERKT_S2_S2_>
 8019d3a:	4603      	mov	r3, r0
              max = std::max(
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8019d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d42:	3301      	adds	r3, #1
 8019d44:	673b      	str	r3, [r7, #112]	; 0x70
 8019d46:	e7d9      	b.n	8019cfc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8019d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d4a:	3301      	adds	r3, #1
 8019d4c:	677b      	str	r3, [r7, #116]	; 0x74
 8019d4e:	e7cf      	b.n	8019cf0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	69db      	ldr	r3, [r3, #28]
 8019d54:	b2db      	uxtb	r3, r3
 8019d56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8019d5a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8019d5e:	f107 0313 	add.w	r3, r7, #19
 8019d62:	4611      	mov	r1, r2
 8019d64:	4618      	mov	r0, r3
 8019d66:	f000 fd4f 	bl	801a808 <_ZSt3maxIhERKT_S2_S2_>
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8_t>(max, params.quantized_activation_max);
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	6a1b      	ldr	r3, [r3, #32]
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019d7a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8019d7e:	f107 0313 	add.w	r3, r7, #19
 8019d82:	4611      	mov	r1, r2
 8019d84:	4618      	mov	r0, r3
 8019d86:	f000 fd53 	bl	801a830 <_ZSt3minIhERKT_S2_S2_>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8019d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019d92:	9300      	str	r3, [sp, #0]
 8019d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019d9a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019d9e:	6838      	ldr	r0, [r7, #0]
 8019da0:	f7fc fb50 	bl	8016444 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019da4:	4603      	mov	r3, r0
 8019da6:	461a      	mov	r2, r3
 8019da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019dac:	4413      	add	r3, r2
 8019dae:	7cfa      	ldrb	r2, [r7, #19]
 8019db0:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8019db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019db4:	3301      	adds	r3, #1
 8019db6:	67bb      	str	r3, [r7, #120]	; 0x78
 8019db8:	e740      	b.n	8019c3c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019dbc:	3301      	adds	r3, #1
 8019dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019dc0:	e735      	b.n	8019c2e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019dc6:	3301      	adds	r3, #1
 8019dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019dcc:	e727      	b.n	8019c1e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 8019dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019dd8:	e718      	b.n	8019c0c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
 8019dda:	bf00      	nop
 8019ddc:	3788      	adds	r7, #136	; 0x88
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bd80      	pop	{r7, pc}

08019de2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8019de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019de4:	b099      	sub	sp, #100	; 0x64
 8019de6:	af08      	add	r7, sp, #32
 8019de8:	6278      	str	r0, [r7, #36]	; 0x24
 8019dea:	6239      	str	r1, [r7, #32]
 8019dec:	61fa      	str	r2, [r7, #28]
 8019dee:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8019df0:	2101      	movs	r1, #1
 8019df2:	69f8      	ldr	r0, [r7, #28]
 8019df4:	f7fa fc3a 	bl	801466c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8019df8:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 8019dfa:	2102      	movs	r1, #2
 8019dfc:	69f8      	ldr	r0, [r7, #28]
 8019dfe:	f7fa fc35 	bl	801466c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8019e02:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8019e04:	6a3b      	ldr	r3, [r7, #32]
 8019e06:	689d      	ldr	r5, [r3, #8]
 8019e08:	6a3b      	ldr	r3, [r7, #32]
 8019e0a:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8019e0c:	6a3b      	ldr	r3, [r7, #32]
 8019e0e:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8019e10:	6a3a      	ldr	r2, [r7, #32]
 8019e12:	68d2      	ldr	r2, [r2, #12]
 8019e14:	6a39      	ldr	r1, [r7, #32]
 8019e16:	7809      	ldrb	r1, [r1, #0]
 8019e18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8019e1a:	6078      	str	r0, [r7, #4]
 8019e1c:	f107 0408 	add.w	r4, r7, #8
 8019e20:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019e24:	9007      	str	r0, [sp, #28]
 8019e26:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019e2a:	9006      	str	r0, [sp, #24]
 8019e2c:	9105      	str	r1, [sp, #20]
 8019e2e:	9204      	str	r2, [sp, #16]
 8019e30:	9303      	str	r3, [sp, #12]
 8019e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e34:	9302      	str	r3, [sp, #8]
 8019e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e38:	9301      	str	r3, [sp, #4]
 8019e3a:	2301      	movs	r3, #1
 8019e3c:	9300      	str	r3, [sp, #0]
 8019e3e:	2301      	movs	r3, #1
 8019e40:	4632      	mov	r2, r6
 8019e42:	4629      	mov	r1, r5
 8019e44:	4620      	mov	r0, r4
 8019e46:	f7fd fcf4 	bl	8017832 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8019e4a:	687c      	ldr	r4, [r7, #4]
 8019e4c:	f107 0308 	add.w	r3, r7, #8
 8019e50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 8019e56:	69fb      	ldr	r3, [r7, #28]
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	2b01      	cmp	r3, #1
 8019e5c:	d10a      	bne.n	8019e74 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 8019e5e:	6a3b      	ldr	r3, [r7, #32]
 8019e60:	7d18      	ldrb	r0, [r3, #20]
 8019e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e64:	f103 011c 	add.w	r1, r3, #28
 8019e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e6a:	3320      	adds	r3, #32
 8019e6c:	461a      	mov	r2, r3
 8019e6e:	f7fc fb61 	bl	8016534 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8019e72:	e01e      	b.n	8019eb2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8019e74:	6a3b      	ldr	r3, [r7, #32]
 8019e76:	7d19      	ldrb	r1, [r3, #20]
 8019e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e7a:	f103 0214 	add.w	r2, r3, #20
 8019e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e80:	3318      	adds	r3, #24
 8019e82:	9300      	str	r3, [sp, #0]
 8019e84:	4613      	mov	r3, r2
 8019e86:	69ba      	ldr	r2, [r7, #24]
 8019e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e8a:	f7fb f819 	bl	8014ec0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8019e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d002      	beq.n	8019ea2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 8019e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019ea0:	e00c      	b.n	8019ebc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8019ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019ea4:	695a      	ldr	r2, [r3, #20]
 8019ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019ea8:	699b      	ldr	r3, [r3, #24]
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	dd01      	ble.n	8019eb2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 8019eae:	f005 ff15 	bl	801fcdc <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8019eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8019eb8:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 8019eba:	2300      	movs	r3, #0
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3744      	adds	r7, #68	; 0x44
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ec4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8019ec4:	b590      	push	{r4, r7, lr}
 8019ec6:	b0a1      	sub	sp, #132	; 0x84
 8019ec8:	af02      	add	r7, sp, #8
 8019eca:	60f8      	str	r0, [r7, #12]
 8019ecc:	60b9      	str	r1, [r7, #8]
 8019ece:	607a      	str	r2, [r7, #4]
 8019ed0:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	7d1b      	ldrb	r3, [r3, #20]
 8019ed6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019eda:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7fc fb28 	bl	8016534 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	689b      	ldr	r3, [r3, #8]
 8019ee8:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	685b      	ldr	r3, [r3, #4]
 8019eee:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	691b      	ldr	r3, [r3, #16]
 8019ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	68db      	ldr	r3, [r3, #12]
 8019efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	685b      	ldr	r3, [r3, #4]
 8019f00:	b21b      	sxth	r3, r3
 8019f02:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	b21b      	sxth	r3, r3
 8019f0a:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 8019f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8019f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8019f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019f18:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7ff f882 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8019f22:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8019f26:	f7fb ffdf 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8019f2a:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8019f2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019f30:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7ff f876 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8019f3a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8019f3e:	f7fb ffe2 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8019f42:	4602      	mov	r2, r0
 8019f44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019f48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8019f4c:	f107 0014 	add.w	r0, r7, #20
 8019f50:	9200      	str	r2, [sp, #0]
 8019f52:	4622      	mov	r2, r4
 8019f54:	f7ff fa66 	bl	8019424 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 8019f58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	f7fb f860 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8019f62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7fb f85b 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 8019f6c:	bf00      	nop
 8019f6e:	377c      	adds	r7, #124	; 0x7c
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd90      	pop	{r4, r7, pc}

08019f74 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 8019f74:	b590      	push	{r4, r7, lr}
 8019f76:	b0c1      	sub	sp, #260	; 0x104
 8019f78:	af04      	add	r7, sp, #16
 8019f7a:	60f8      	str	r0, [r7, #12]
 8019f7c:	60b9      	str	r1, [r7, #8]
 8019f7e:	607a      	str	r2, [r7, #4]
 8019f80:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 8019f82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8019f86:	7a1b      	ldrb	r3, [r3, #8]
 8019f88:	2b03      	cmp	r3, #3
 8019f8a:	d006      	beq.n	8019f9a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 8019f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8019f90:	7a1b      	ldrb	r3, [r3, #8]
 8019f92:	2b09      	cmp	r3, #9
 8019f94:	d001      	beq.n	8019f9a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 8019f96:	f005 fea1 	bl	801fcdc <abort>

  if (input->type == kTfLiteUInt8) {
 8019f9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8019f9e:	7a1b      	ldrb	r3, [r3, #8]
 8019fa0:	2b03      	cmp	r3, #3
 8019fa2:	d146      	bne.n	801a032 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xbe>
    PoolParams op_params;
    op_params.stride_height = params->stride_height;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	689b      	ldr	r3, [r3, #8]
 8019fa8:	61fb      	str	r3, [r7, #28]
    op_params.stride_width = params->stride_width;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	623b      	str	r3, [r7, #32]
    op_params.filter_height = params->filter_height;
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	691b      	ldr	r3, [r3, #16]
 8019fb4:	627b      	str	r3, [r7, #36]	; 0x24
    op_params.filter_width = params->filter_width;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	68db      	ldr	r3, [r3, #12]
 8019fba:	62bb      	str	r3, [r7, #40]	; 0x28
    op_params.padding_values.height = data.padding.height;
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	685b      	ldr	r3, [r3, #4]
 8019fc0:	b21b      	sxth	r3, r3
 8019fc2:	82bb      	strh	r3, [r7, #20]
    op_params.padding_values.width = data.padding.width;
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	b21b      	sxth	r3, r3
 8019fca:	827b      	strh	r3, [r7, #18]
    op_params.quantized_activation_min = data.activation_min;
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	695b      	ldr	r3, [r3, #20]
 8019fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    op_params.quantized_activation_max = data.activation_max;
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	699b      	ldr	r3, [r3, #24]
 8019fd6:	633b      	str	r3, [r7, #48]	; 0x30

    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8019fd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8019fdc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f7ff f820 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8019fe6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8019fea:	f7fc f809 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8019fee:	4604      	mov	r4, r0
                               tflite::micro::GetTensorData<uint8_t>(input),
                               tflite::micro::GetTensorShape(output),
 8019ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019ff4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7ff f814 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8019ffe:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801a002:	f7fc f80c 	bl	801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801a006:	4602      	mov	r2, r0
 801a008:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801a00c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801a010:	f107 0010 	add.w	r0, r7, #16
 801a014:	9200      	str	r2, [sp, #0]
 801a016:	4622      	mov	r2, r4
 801a018:	f7ff fb44 	bl	80196a4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                               tflite::micro::GetTensorShape(output),
 801a01c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801a020:	4618      	mov	r0, r3
 801a022:	f7fa fffe 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801a026:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7fa fff9 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                       tflite::micro::GetTensorData<int8_t>(input),
                       &filter_dims, &output_dims,
                       tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  }
}
 801a030:	e0ae      	b.n	801a190 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x21c>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801a032:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a036:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801a03a:	4618      	mov	r0, r3
 801a03c:	f7fe fff3 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801a040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a044:	4618      	mov	r0, r3
 801a046:	f7fb f802 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801a04a:	4603      	mov	r3, r0
 801a04c:	2b04      	cmp	r3, #4
 801a04e:	d001      	beq.n	801a054 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xe0>
 801a050:	f005 fe44 	bl	801fcdc <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801a054:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a058:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801a05c:	4618      	mov	r0, r3
 801a05e:	f7fe ffe2 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801a062:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a066:	4618      	mov	r0, r3
 801a068:	f7fa fff1 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801a06c:	4603      	mov	r3, r0
 801a06e:	2b04      	cmp	r3, #4
 801a070:	d001      	beq.n	801a076 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x102>
 801a072:	f005 fe33 	bl	801fcdc <abort>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801a076:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801a07a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 801a07e:	2303      	movs	r3, #3
 801a080:	2103      	movs	r1, #3
 801a082:	f7fc fac2 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801a086:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    input_dims.n = 1;
 801a08a:	2301      	movs	r3, #1
 801a08c:	67fb      	str	r3, [r7, #124]	; 0x7c
    input_dims.h = input_shape.Dims(1);
 801a08e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a092:	2101      	movs	r1, #1
 801a094:	4618      	mov	r0, r3
 801a096:	f7fb f975 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a09a:	4603      	mov	r3, r0
 801a09c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    input_dims.w = input_shape.Dims(2);
 801a0a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a0a4:	2102      	movs	r1, #2
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7fb f96c 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    input_dims.c = depth;
 801a0b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a0b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    output_dims.n = 1;
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    output_dims.h = output_shape.Dims(1);
 801a0be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a0c2:	2101      	movs	r1, #1
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f7fb f95d 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	673b      	str	r3, [r7, #112]	; 0x70
    output_dims.w = output_shape.Dims(2);
 801a0ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a0d2:	2102      	movs	r1, #2
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f7fb f955 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	677b      	str	r3, [r7, #116]	; 0x74
    output_dims.c = depth;
 801a0de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a0e2:	67bb      	str	r3, [r7, #120]	; 0x78
    pool_params.stride.h = params->stride_height;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	689b      	ldr	r3, [r3, #8]
 801a0e8:	65bb      	str	r3, [r7, #88]	; 0x58
    pool_params.stride.w = params->stride_width;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	685b      	ldr	r3, [r3, #4]
 801a0ee:	657b      	str	r3, [r7, #84]	; 0x54
    pool_params.padding.h = data.padding.height;
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	685b      	ldr	r3, [r3, #4]
 801a0f4:	663b      	str	r3, [r7, #96]	; 0x60
    pool_params.padding.w = data.padding.width;
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    pool_params.activation.min = data.activation_min;
 801a0fc:	683b      	ldr	r3, [r7, #0]
 801a0fe:	695b      	ldr	r3, [r3, #20]
 801a100:	667b      	str	r3, [r7, #100]	; 0x64
    pool_params.activation.max = data.activation_max;
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	699b      	ldr	r3, [r3, #24]
 801a106:	66bb      	str	r3, [r7, #104]	; 0x68
    filter_dims.n = 1;
 801a108:	2301      	movs	r3, #1
 801a10a:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = params->filter_height;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	691b      	ldr	r3, [r3, #16]
 801a110:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = params->filter_width;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	68db      	ldr	r3, [r3, #12]
 801a116:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = 1;
 801a118:	2301      	movs	r3, #1
 801a11a:	653b      	str	r3, [r7, #80]	; 0x50
    ctx.buf = nullptr;
 801a11c:	2300      	movs	r3, #0
 801a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ctx.size = 0;
 801a120:	2300      	movs	r3, #0
 801a122:	643b      	str	r3, [r7, #64]	; 0x40
    if (data.buffer_idx > -1) {
 801a124:	683b      	ldr	r3, [r7, #0]
 801a126:	691b      	ldr	r3, [r3, #16]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	db08      	blt.n	801a13e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x1ca>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a130:	683a      	ldr	r2, [r7, #0]
 801a132:	6912      	ldr	r2, [r2, #16]
 801a134:	4611      	mov	r1, r2
 801a136:	68f8      	ldr	r0, [r7, #12]
 801a138:	4798      	blx	r3
 801a13a:	4603      	mov	r3, r0
 801a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(
 801a13e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 801a142:	f7fb fef1 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801a146:	4604      	mov	r4, r0
 801a148:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801a14c:	f7fb fefb 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801a150:	4603      	mov	r3, r0
 801a152:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801a156:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801a15a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801a15e:	9302      	str	r3, [sp, #8]
 801a160:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a164:	9301      	str	r3, [sp, #4]
 801a166:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a16a:	9300      	str	r3, [sp, #0]
 801a16c:	4623      	mov	r3, r4
 801a16e:	f7f5 faa6 	bl	800f6be <arm_avgpool_s8>
 801a172:	4603      	mov	r3, r0
 801a174:	2b00      	cmp	r3, #0
 801a176:	d001      	beq.n	801a17c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x208>
 801a178:	f005 fdb0 	bl	801fcdc <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801a17c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a180:	4618      	mov	r0, r3
 801a182:	f7fa ff4e 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801a186:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7fa ff49 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801a190:	bf00      	nop
 801a192:	37f4      	adds	r7, #244	; 0xf4
 801a194:	46bd      	mov	sp, r7
 801a196:	bd90      	pop	{r4, r7, pc}

0801a198 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 801a198:	b590      	push	{r4, r7, lr}
 801a19a:	b0a1      	sub	sp, #132	; 0x84
 801a19c:	af02      	add	r7, sp, #8
 801a19e:	60f8      	str	r0, [r7, #12]
 801a1a0:	60b9      	str	r1, [r7, #8]
 801a1a2:	607a      	str	r2, [r7, #4]
 801a1a4:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	7d1b      	ldrb	r3, [r3, #20]
 801a1aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a1ae:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f7fc f9be 	bl	8016534 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	689b      	ldr	r3, [r3, #8]
 801a1bc:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	685b      	ldr	r3, [r3, #4]
 801a1c2:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	691b      	ldr	r3, [r3, #16]
 801a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	68db      	ldr	r3, [r3, #12]
 801a1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	b21b      	sxth	r3, r3
 801a1d6:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	b21b      	sxth	r3, r3
 801a1de:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data.activation_min_f32;
 801a1e0:	683b      	ldr	r3, [r7, #0]
 801a1e2:	69db      	ldr	r3, [r3, #28]
 801a1e4:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data.activation_max_f32;
 801a1e6:	683b      	ldr	r3, [r7, #0]
 801a1e8:	6a1b      	ldr	r3, [r3, #32]
 801a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801a1ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a1f0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f7fe ff16 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801a1fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801a1fe:	f7fb fe73 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801a202:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 801a204:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a208:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801a20c:	4618      	mov	r0, r3
 801a20e:	f7fe ff0a 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801a212:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801a216:	f7fb fe76 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801a21a:	4602      	mov	r2, r0
 801a21c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a220:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801a224:	f107 0014 	add.w	r0, r7, #20
 801a228:	9200      	str	r2, [sp, #0]
 801a22a:	4622      	mov	r2, r4
 801a22c:	f7ff fb74 	bl	8019918 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 801a230:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a234:	4618      	mov	r0, r3
 801a236:	f7fa fef4 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801a23a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a23e:	4618      	mov	r0, r3
 801a240:	f7fa feef 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 801a244:	bf00      	nop
 801a246:	377c      	adds	r7, #124	; 0x7c
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd90      	pop	{r4, r7, pc}

0801a24c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,
                           TfLitePoolParams* params, const OpData& data,
                           const TfLiteEvalTensor* input,
                           TfLiteEvalTensor* output) {
 801a24c:	b590      	push	{r4, r7, lr}
 801a24e:	b09f      	sub	sp, #124	; 0x7c
 801a250:	af02      	add	r7, sp, #8
 801a252:	60f8      	str	r0, [r7, #12]
 801a254:	60b9      	str	r1, [r7, #8]
 801a256:	607a      	str	r2, [r7, #4]
 801a258:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	689b      	ldr	r3, [r3, #8]
 801a25e:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	685b      	ldr	r3, [r3, #4]
 801a264:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	691b      	ldr	r3, [r3, #16]
 801a26a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	68db      	ldr	r3, [r3, #12]
 801a270:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	685b      	ldr	r3, [r3, #4]
 801a276:	b21b      	sxth	r3, r3
 801a278:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801a27a:	683b      	ldr	r3, [r7, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	b21b      	sxth	r3, r3
 801a280:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data.activation_min;
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	695b      	ldr	r3, [r3, #20]
 801a286:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data.activation_max;
 801a288:	683b      	ldr	r3, [r7, #0]
 801a28a:	699b      	ldr	r3, [r3, #24]
 801a28c:	637b      	str	r3, [r7, #52]	; 0x34
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801a28e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a292:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801a296:	4618      	mov	r0, r3
 801a298:	f7fe fec5 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801a29c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801a2a0:	f7fb feae 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801a2a4:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<uint8_t>(input),
                         tflite::micro::GetTensorShape(output),
 801a2a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a2aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7fe feb9 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801a2b4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801a2b8:	f7fb feb1 	bl	801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801a2bc:	4602      	mov	r2, r0
 801a2be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a2c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801a2c6:	f107 0014 	add.w	r0, r7, #20
 801a2ca:	9200      	str	r2, [sp, #0]
 801a2cc:	4622      	mov	r2, r4
 801a2ce:	f7ff fc47 	bl	8019b60 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                         tflite::micro::GetTensorShape(output),
 801a2d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	f7fa fea3 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801a2dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7fa fe9e 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<uint8_t>(output));
}
 801a2e6:	bf00      	nop
 801a2e8:	3774      	adds	r7, #116	; 0x74
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bd90      	pop	{r4, r7, pc}

0801a2ee <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 801a2ee:	b590      	push	{r4, r7, lr}
 801a2f0:	b0ab      	sub	sp, #172	; 0xac
 801a2f2:	af04      	add	r7, sp, #16
 801a2f4:	60f8      	str	r0, [r7, #12]
 801a2f6:	60b9      	str	r1, [r7, #8]
 801a2f8:	607a      	str	r2, [r7, #4]
 801a2fa:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801a2fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a300:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801a304:	4618      	mov	r0, r3
 801a306:	f7fe fe8e 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801a30a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a30e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801a312:	4618      	mov	r0, r3
 801a314:	f7fe fe87 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801a318:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801a31c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 801a320:	2303      	movs	r3, #3
 801a322:	2103      	movs	r1, #3
 801a324:	f7fc f971 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801a328:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 801a32c:	2301      	movs	r3, #1
 801a32e:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 801a330:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a334:	2101      	movs	r1, #1
 801a336:	4618      	mov	r0, r3
 801a338:	f7fb f824 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a33c:	4603      	mov	r3, r0
 801a33e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 801a340:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a344:	2102      	movs	r1, #2
 801a346:	4618      	mov	r0, r3
 801a348:	f7fb f81c 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a34c:	4603      	mov	r3, r0
 801a34e:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 801a350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a354:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 801a356:	2301      	movs	r3, #1
 801a358:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 801a35a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a35e:	2101      	movs	r1, #1
 801a360:	4618      	mov	r0, r3
 801a362:	f7fb f80f 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a366:	4603      	mov	r3, r0
 801a368:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 801a36a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a36e:	2102      	movs	r1, #2
 801a370:	4618      	mov	r0, r3
 801a372:	f7fb f807 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a376:	4603      	mov	r3, r0
 801a378:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 801a37a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a37e:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	689b      	ldr	r3, [r3, #8]
 801a384:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 801a38c:	683b      	ldr	r3, [r7, #0]
 801a38e:	685b      	ldr	r3, [r3, #4]
 801a390:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 801a392:	683b      	ldr	r3, [r7, #0]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	695b      	ldr	r3, [r3, #20]
 801a39c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	699b      	ldr	r3, [r3, #24]
 801a3a2:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	691b      	ldr	r3, [r3, #16]
 801a3ac:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	68db      	ldr	r3, [r3, #12]
 801a3b2:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 801a3bc:	2300      	movs	r3, #0
 801a3be:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 801a3c0:	683b      	ldr	r3, [r7, #0]
 801a3c2:	691b      	ldr	r3, [r3, #16]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	db08      	blt.n	801a3da <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3cc:	683a      	ldr	r2, [r7, #0]
 801a3ce:	6912      	ldr	r2, [r2, #16]
 801a3d0:	4611      	mov	r1, r2
 801a3d2:	68f8      	ldr	r0, [r7, #12]
 801a3d4:	4798      	blx	r3
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 801a3da:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801a3de:	f7fb fda3 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801a3e8:	f7fb fdad 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801a3ec:	4603      	mov	r3, r0
 801a3ee:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801a3f2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801a3f6:	f107 0014 	add.w	r0, r7, #20
 801a3fa:	9302      	str	r3, [sp, #8]
 801a3fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a400:	9301      	str	r3, [sp, #4]
 801a402:	f107 031c 	add.w	r3, r7, #28
 801a406:	9300      	str	r3, [sp, #0]
 801a408:	4623      	mov	r3, r4
 801a40a:	f7f5 fb8f 	bl	800fb2c <arm_max_pool_s8>
 801a40e:	4603      	mov	r3, r0
 801a410:	2b00      	cmp	r3, #0
 801a412:	d001      	beq.n	801a418 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 801a414:	f005 fc62 	bl	801fcdc <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801a418:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801a41a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a41e:	4618      	mov	r0, r3
 801a420:	f7fa fdff 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801a424:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a428:	4618      	mov	r0, r3
 801a42a:	f7fa fdfa 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 801a42e:	4623      	mov	r3, r4
}
 801a430:	4618      	mov	r0, r3
 801a432:	379c      	adds	r7, #156	; 0x9c
 801a434:	46bd      	mov	sp, r7
 801a436:	bd90      	pop	{r4, r7, pc}

0801a438 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801a438:	b580      	push	{r7, lr}
 801a43a:	b084      	sub	sp, #16
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	60f8      	str	r0, [r7, #12]
 801a440:	60b9      	str	r1, [r7, #8]
 801a442:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d101      	bne.n	801a450 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 801a44c:	f005 fc46 	bl	801fcdc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a454:	2124      	movs	r1, #36	; 0x24
 801a456:	68f8      	ldr	r0, [r7, #12]
 801a458:	4798      	blx	r3
 801a45a:	4603      	mov	r3, r0
}
 801a45c:	4618      	mov	r0, r3
 801a45e:	3710      	adds	r7, #16
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801a464:	b590      	push	{r4, r7, lr}
 801a466:	b08b      	sub	sp, #44	; 0x2c
 801a468:	af02      	add	r7, sp, #8
 801a46a:	6078      	str	r0, [r7, #4]
 801a46c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	691b      	ldr	r3, [r3, #16]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d101      	bne.n	801a47a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801a476:	f005 fc31 	bl	801fcdc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	695b      	ldr	r3, [r3, #20]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d101      	bne.n	801a486 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801a482:	f005 fc2b 	bl	801fcdc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801a486:	683b      	ldr	r3, [r7, #0]
 801a488:	691b      	ldr	r3, [r3, #16]
 801a48a:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	695b      	ldr	r3, [r3, #20]
 801a490:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801a492:	2200      	movs	r2, #0
 801a494:	6839      	ldr	r1, [r7, #0]
 801a496:	6878      	ldr	r0, [r7, #4]
 801a498:	f7fa f9ae 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a49c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 801a49e:	697b      	ldr	r3, [r7, #20]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d10b      	bne.n	801a4bc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	695c      	ldr	r4, [r3, #20]
 801a4a8:	4b19      	ldr	r3, [pc, #100]	; (801a510 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 801a4aa:	9300      	str	r3, [sp, #0]
 801a4ac:	f44f 738e 	mov.w	r3, #284	; 0x11c
 801a4b0:	4a18      	ldr	r2, [pc, #96]	; (801a514 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 801a4b2:	4919      	ldr	r1, [pc, #100]	; (801a518 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801a4b4:	6878      	ldr	r0, [r7, #4]
 801a4b6:	47a0      	blx	r4
 801a4b8:	2301      	movs	r3, #1
 801a4ba:	e024      	b.n	801a506 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801a4bc:	2200      	movs	r2, #0
 801a4be:	6839      	ldr	r1, [r7, #0]
 801a4c0:	6878      	ldr	r0, [r7, #4]
 801a4c2:	f7fa f9a9 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801a4c6:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 801a4c8:	693b      	ldr	r3, [r7, #16]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d10b      	bne.n	801a4e6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	695c      	ldr	r4, [r3, #20]
 801a4d2:	4b12      	ldr	r3, [pc, #72]	; (801a51c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801a4d4:	9300      	str	r3, [sp, #0]
 801a4d6:	f44f 738f 	mov.w	r3, #286	; 0x11e
 801a4da:	4a0e      	ldr	r2, [pc, #56]	; (801a514 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 801a4dc:	490e      	ldr	r1, [pc, #56]	; (801a518 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801a4de:	6878      	ldr	r0, [r7, #4]
 801a4e0:	47a0      	blx	r4
 801a4e2:	2301      	movs	r3, #1
 801a4e4:	e00f      	b.n	801a506 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	9300      	str	r3, [sp, #0]
 801a4ea:	693b      	ldr	r3, [r7, #16]
 801a4ec:	697a      	ldr	r2, [r7, #20]
 801a4ee:	69b9      	ldr	r1, [r7, #24]
 801a4f0:	6878      	ldr	r0, [r7, #4]
 801a4f2:	f7ff fc76 	bl	8019de2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	73fb      	strb	r3, [r7, #15]
 801a4fa:	7bfb      	ldrb	r3, [r7, #15]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d001      	beq.n	801a504 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 801a500:	7bfb      	ldrb	r3, [r7, #15]
 801a502:	e000      	b.n	801a506 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  return kTfLiteOk;
 801a504:	2300      	movs	r3, #0
}
 801a506:	4618      	mov	r0, r3
 801a508:	3724      	adds	r7, #36	; 0x24
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd90      	pop	{r4, r7, pc}
 801a50e:	bf00      	nop
 801a510:	08022bec 	.word	0x08022bec
 801a514:	08022b44 	.word	0x08022b44
 801a518:	08022bd4 	.word	0x08022bd4
 801a51c:	08022c00 	.word	0x08022c00

0801a520 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 801a520:	b5b0      	push	{r4, r5, r7, lr}
 801a522:	b09a      	sub	sp, #104	; 0x68
 801a524:	af02      	add	r7, sp, #8
 801a526:	6078      	str	r0, [r7, #4]
 801a528:	6039      	str	r1, [r7, #0]
 801a52a:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	691b      	ldr	r3, [r3, #16]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d101      	bne.n	801a538 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801a534:	f005 fbd2 	bl	801fcdc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	695b      	ldr	r3, [r3, #20]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d101      	bne.n	801a544 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801a540:	f005 fbcc 	bl	801fcdc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	691b      	ldr	r3, [r3, #16]
 801a548:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801a54a:	683b      	ldr	r3, [r7, #0]
 801a54c:	695b      	ldr	r3, [r3, #20]
 801a54e:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801a550:	2200      	movs	r2, #0
 801a552:	6839      	ldr	r1, [r7, #0]
 801a554:	6878      	ldr	r0, [r7, #4]
 801a556:	f7fa f94f 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a55a:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801a55c:	2200      	movs	r2, #0
 801a55e:	6839      	ldr	r1, [r7, #0]
 801a560:	6878      	ldr	r0, [r7, #4]
 801a562:	f7fa f959 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801a566:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 801a568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a56a:	9300      	str	r3, [sp, #0]
 801a56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a56e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f7ff fc35 	bl	8019de2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 801a578:	4603      	mov	r3, r0
 801a57a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a57e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a582:	2b00      	cmp	r3, #0
 801a584:	d002      	beq.n	801a58c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801a586:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 801a58a:	e064      	b.n	801a656 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 801a58c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	2b09      	cmp	r3, #9
 801a592:	d15f      	bne.n	801a654 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 801a594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a59a:	4618      	mov	r0, r3
 801a59c:	f7fa fdbb 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801a5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7fa fd52 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	2b04      	cmp	r3, #4
 801a5ae:	d001      	beq.n	801a5b4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 801a5b0:	f005 fb94 	bl	801fcdc <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 801a5b4:	f107 030c 	add.w	r3, r7, #12
 801a5b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f7fa fdab 	bl	8015116 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801a5c0:	f107 030c 	add.w	r3, r7, #12
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f7fa fd42 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	2b04      	cmp	r3, #4
 801a5ce:	d001      	beq.n	801a5d4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 801a5d0:	f005 fb84 	bl	801fcdc <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801a5d4:	f107 020c 	add.w	r2, r7, #12
 801a5d8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801a5dc:	2303      	movs	r3, #3
 801a5de:	2103      	movs	r1, #3
 801a5e0:	f7fc f813 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801a5e4:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 801a5e6:	f107 030c 	add.w	r3, r7, #12
 801a5ea:	2102      	movs	r1, #2
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f7fa fec9 	bl	8015384 <_ZNK6tflite12RuntimeShape4DimsEi>
 801a5f2:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 801a5f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a5f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a5f8:	f7f5 f96b 	bl	800f8d2 <arm_avgpool_s8_get_buffer_size>
 801a5fc:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 801a5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a600:	2b00      	cmp	r3, #0
 801a602:	dd11      	ble.n	801a628 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a608:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a60a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a60c:	3210      	adds	r2, #16
 801a60e:	6878      	ldr	r0, [r7, #4]
 801a610:	4798      	blx	r3
 801a612:	4603      	mov	r3, r0
 801a614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801a618:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d007      	beq.n	801a630 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 801a620:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 801a624:	2500      	movs	r5, #0
 801a626:	e004      	b.n	801a632 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801a628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a62a:	f04f 32ff 	mov.w	r2, #4294967295
 801a62e:	611a      	str	r2, [r3, #16]
 801a630:	2501      	movs	r5, #1
 801a632:	f107 030c 	add.w	r3, r7, #12
 801a636:	4618      	mov	r0, r3
 801a638:	f7fa fcf3 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
 801a63c:	2d01      	cmp	r5, #1
 801a63e:	d001      	beq.n	801a644 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 801a640:	2500      	movs	r5, #0
 801a642:	e000      	b.n	801a646 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
 801a644:	2501      	movs	r5, #1
 801a646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7fa fce9 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
 801a650:	2d01      	cmp	r5, #1
 801a652:	d100      	bne.n	801a656 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 801a654:	2400      	movs	r4, #0
}
 801a656:	4623      	mov	r3, r4
 801a658:	4618      	mov	r0, r3
 801a65a:	3760      	adds	r7, #96	; 0x60
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bdb0      	pop	{r4, r5, r7, pc}

0801a660 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 801a660:	b590      	push	{r4, r7, lr}
 801a662:	b089      	sub	sp, #36	; 0x24
 801a664:	af02      	add	r7, sp, #8
 801a666:	6078      	str	r0, [r7, #4]
 801a668:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801a66a:	683b      	ldr	r3, [r7, #0]
 801a66c:	695b      	ldr	r3, [r3, #20]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d101      	bne.n	801a676 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801a672:	f005 fb33 	bl	801fcdc <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	695b      	ldr	r3, [r3, #20]
 801a67a:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 801a67c:	683b      	ldr	r3, [r7, #0]
 801a67e:	691b      	ldr	r3, [r3, #16]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d101      	bne.n	801a688 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 801a684:	f005 fb2a 	bl	801fcdc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801a688:	683b      	ldr	r3, [r7, #0]
 801a68a:	691b      	ldr	r3, [r3, #16]
 801a68c:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801a68e:	2200      	movs	r2, #0
 801a690:	6839      	ldr	r1, [r7, #0]
 801a692:	6878      	ldr	r0, [r7, #4]
 801a694:	f7fa ff4a 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801a698:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801a69a:	2200      	movs	r2, #0
 801a69c:	6839      	ldr	r1, [r7, #0]
 801a69e:	6878      	ldr	r0, [r7, #4]
 801a6a0:	f7fa ff54 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801a6a4:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	7a1b      	ldrb	r3, [r3, #8]
 801a6aa:	2b09      	cmp	r3, #9
 801a6ac:	d011      	beq.n	801a6d2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 801a6ae:	2b09      	cmp	r3, #9
 801a6b0:	dc1a      	bgt.n	801a6e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
 801a6b2:	2b01      	cmp	r3, #1
 801a6b4:	d002      	beq.n	801a6bc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 801a6b6:	2b03      	cmp	r3, #3
 801a6b8:	d00b      	beq.n	801a6d2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 801a6ba:	e015      	b.n	801a6e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	9301      	str	r3, [sp, #4]
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	9300      	str	r3, [sp, #0]
 801a6c4:	693b      	ldr	r3, [r7, #16]
 801a6c6:	697a      	ldr	r2, [r7, #20]
 801a6c8:	6839      	ldr	r1, [r7, #0]
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f7ff fbfa 	bl	8019ec4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>
      break;
 801a6d0:	e018      	b.n	801a704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	9301      	str	r3, [sp, #4]
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	9300      	str	r3, [sp, #0]
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	697a      	ldr	r2, [r7, #20]
 801a6de:	6839      	ldr	r1, [r7, #0]
 801a6e0:	6878      	ldr	r0, [r7, #4]
 801a6e2:	f7ff fc47 	bl	8019f74 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 801a6e6:	e00d      	b.n	801a704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	695c      	ldr	r4, [r3, #20]
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	7a1b      	ldrb	r3, [r3, #8]
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f7f9 fd23 	bl	801413c <TfLiteTypeGetName>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	461a      	mov	r2, r3
 801a6fa:	4905      	ldr	r1, [pc, #20]	; (801a710 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 801a6fc:	6878      	ldr	r0, [r7, #4]
 801a6fe:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801a700:	2301      	movs	r3, #1
 801a702:	e000      	b.n	801a706 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
  }
  return kTfLiteOk;
 801a704:	2300      	movs	r3, #0
}
 801a706:	4618      	mov	r0, r3
 801a708:	371c      	adds	r7, #28
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd90      	pop	{r4, r7, pc}
 801a70e:	bf00      	nop
 801a710:	08022c14 	.word	0x08022c14

0801a714 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 801a714:	b590      	push	{r4, r7, lr}
 801a716:	b089      	sub	sp, #36	; 0x24
 801a718:	af02      	add	r7, sp, #8
 801a71a:	6078      	str	r0, [r7, #4]
 801a71c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801a71e:	683b      	ldr	r3, [r7, #0]
 801a720:	695b      	ldr	r3, [r3, #20]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d101      	bne.n	801a72a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801a726:	f005 fad9 	bl	801fcdc <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	695b      	ldr	r3, [r3, #20]
 801a72e:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	691b      	ldr	r3, [r3, #16]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d101      	bne.n	801a73c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 801a738:	f005 fad0 	bl	801fcdc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801a73c:	683b      	ldr	r3, [r7, #0]
 801a73e:	691b      	ldr	r3, [r3, #16]
 801a740:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801a742:	2200      	movs	r2, #0
 801a744:	6839      	ldr	r1, [r7, #0]
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f7fa fef0 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801a74c:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801a74e:	2200      	movs	r2, #0
 801a750:	6839      	ldr	r1, [r7, #0]
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f7fa fefa 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801a758:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	7a1b      	ldrb	r3, [r3, #8]
 801a75e:	2b09      	cmp	r3, #9
 801a760:	d01c      	beq.n	801a79c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 801a762:	2b09      	cmp	r3, #9
 801a764:	dc25      	bgt.n	801a7b2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
 801a766:	2b01      	cmp	r3, #1
 801a768:	d002      	beq.n	801a770 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 801a76a:	2b03      	cmp	r3, #3
 801a76c:	d00b      	beq.n	801a786 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
 801a76e:	e020      	b.n	801a7b2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	9301      	str	r3, [sp, #4]
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	9300      	str	r3, [sp, #0]
 801a778:	693b      	ldr	r3, [r7, #16]
 801a77a:	697a      	ldr	r2, [r7, #20]
 801a77c:	6839      	ldr	r1, [r7, #0]
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	f7ff fd0a 	bl	801a198 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 801a784:	e023      	b.n	801a7ce <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, data, input, output);
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	9301      	str	r3, [sp, #4]
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	9300      	str	r3, [sp, #0]
 801a78e:	693b      	ldr	r3, [r7, #16]
 801a790:	697a      	ldr	r2, [r7, #20]
 801a792:	6839      	ldr	r1, [r7, #0]
 801a794:	6878      	ldr	r0, [r7, #4]
 801a796:	f7ff fd59 	bl	801a24c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 801a79a:	e018      	b.n	801a7ce <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	9301      	str	r3, [sp, #4]
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	693b      	ldr	r3, [r7, #16]
 801a7a6:	697a      	ldr	r2, [r7, #20]
 801a7a8:	6839      	ldr	r1, [r7, #0]
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f7ff fd9f 	bl	801a2ee <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 801a7b0:	e00d      	b.n	801a7ce <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	695c      	ldr	r4, [r3, #20]
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	7a1b      	ldrb	r3, [r3, #8]
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f7f9 fcbe 	bl	801413c <TfLiteTypeGetName>
 801a7c0:	4603      	mov	r3, r0
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	4904      	ldr	r1, [pc, #16]	; (801a7d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>)
 801a7c6:	6878      	ldr	r0, [r7, #4]
 801a7c8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801a7ca:	2301      	movs	r3, #1
 801a7cc:	e000      	b.n	801a7d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
  }
  return kTfLiteOk;
 801a7ce:	2300      	movs	r3, #0
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	371c      	adds	r7, #28
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd90      	pop	{r4, r7, pc}
 801a7d8:	08022c40 	.word	0x08022c40

0801a7dc <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 801a7dc:	b4b0      	push	{r4, r5, r7}
 801a7de:	b083      	sub	sp, #12
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	4a07      	ldr	r2, [pc, #28]	; (801a804 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x28>)
 801a7e8:	461c      	mov	r4, r3
 801a7ea:	4615      	mov	r5, r2
 801a7ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a7ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a7f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801a7f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801a7f8:	6878      	ldr	r0, [r7, #4]
 801a7fa:	370c      	adds	r7, #12
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bcb0      	pop	{r4, r5, r7}
 801a800:	4770      	bx	lr
 801a802:	bf00      	nop
 801a804:	08022c84 	.word	0x08022c84

0801a808 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801a808:	b480      	push	{r7}
 801a80a:	b083      	sub	sp, #12
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	6078      	str	r0, [r7, #4]
 801a810:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	781a      	ldrb	r2, [r3, #0]
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	781b      	ldrb	r3, [r3, #0]
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d201      	bcs.n	801a822 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	e000      	b.n	801a824 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801a822:	687b      	ldr	r3, [r7, #4]
    }
 801a824:	4618      	mov	r0, r3
 801a826:	370c      	adds	r7, #12
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr

0801a830 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a830:	b480      	push	{r7}
 801a832:	b083      	sub	sp, #12
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	781a      	ldrb	r2, [r3, #0]
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	781b      	ldrb	r3, [r3, #0]
 801a842:	429a      	cmp	r2, r3
 801a844:	d201      	bcs.n	801a84a <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 801a846:	683b      	ldr	r3, [r7, #0]
 801a848:	e000      	b.n	801a84c <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 801a84a:	687b      	ldr	r3, [r7, #4]
    }
 801a84c:	4618      	mov	r0, r3
 801a84e:	370c      	adds	r7, #12
 801a850:	46bd      	mov	sp, r7
 801a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a856:	4770      	bx	lr

0801a858 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801a858:	b480      	push	{r7}
 801a85a:	b083      	sub	sp, #12
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d002      	beq.n	801a86c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	e000      	b.n	801a86e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801a86c:	2300      	movs	r3, #0
}
 801a86e:	4618      	mov	r0, r3
 801a870:	370c      	adds	r7, #12
 801a872:	46bd      	mov	sp, r7
 801a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a878:	4770      	bx	lr
	...

0801a87c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 801a87c:	b5b0      	push	{r4, r5, r7, lr}
 801a87e:	b08e      	sub	sp, #56	; 0x38
 801a880:	af04      	add	r7, sp, #16
 801a882:	6078      	str	r0, [r7, #4]
 801a884:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801a886:	2200      	movs	r2, #0
 801a888:	6839      	ldr	r1, [r7, #0]
 801a88a:	6878      	ldr	r0, [r7, #4]
 801a88c:	f7f9 ffb4 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a890:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 801a892:	69bb      	ldr	r3, [r7, #24]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d10a      	bne.n	801a8ae <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	695c      	ldr	r4, [r3, #20]
 801a89c:	4b62      	ldr	r3, [pc, #392]	; (801aa28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 801a89e:	9300      	str	r3, [sp, #0]
 801a8a0:	2323      	movs	r3, #35	; 0x23
 801a8a2:	4a62      	ldr	r2, [pc, #392]	; (801aa2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801a8a4:	4962      	ldr	r1, [pc, #392]	; (801aa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 801a8a6:	6878      	ldr	r0, [r7, #4]
 801a8a8:	47a0      	blx	r4
 801a8aa:	2301      	movs	r3, #1
 801a8ac:	e0b8      	b.n	801aa20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	6839      	ldr	r1, [r7, #0]
 801a8b2:	6878      	ldr	r0, [r7, #4]
 801a8b4:	f7f9 ffb0 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801a8b8:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 801a8ba:	697b      	ldr	r3, [r7, #20]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d10a      	bne.n	801a8d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	695c      	ldr	r4, [r3, #20]
 801a8c4:	4b5b      	ldr	r3, [pc, #364]	; (801aa34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 801a8c6:	9300      	str	r3, [sp, #0]
 801a8c8:	2325      	movs	r3, #37	; 0x25
 801a8ca:	4a58      	ldr	r2, [pc, #352]	; (801aa2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801a8cc:	4958      	ldr	r1, [pc, #352]	; (801aa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	47a0      	blx	r4
 801a8d2:	2301      	movs	r3, #1
 801a8d4:	e0a4      	b.n	801aa20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 801a8d6:	69b8      	ldr	r0, [r7, #24]
 801a8d8:	f7f9 ff0e 	bl	80146f8 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 801a8dc:	4602      	mov	r2, r0
 801a8de:	460b      	mov	r3, r1
 801a8e0:	4613      	mov	r3, r2
 801a8e2:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 801a8e4:	697b      	ldr	r3, [r7, #20]
 801a8e6:	689b      	ldr	r3, [r3, #8]
 801a8e8:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 801a8ea:	6838      	ldr	r0, [r7, #0]
 801a8ec:	f7fb fe64 	bl	80165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801a8f0:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801a8f2:	2b01      	cmp	r3, #1
 801a8f4:	d109      	bne.n	801a90a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 801a8fa:	2b01      	cmp	r3, #1
 801a8fc:	d105      	bne.n	801a90a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	685b      	ldr	r3, [r3, #4]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d101      	bne.n	801a90a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 801a906:	2301      	movs	r3, #1
 801a908:	e000      	b.n	801a90c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 801a90a:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d002      	beq.n	801a916 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	2200      	movs	r2, #0
 801a914:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 801a916:	2301      	movs	r3, #1
 801a918:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 801a91a:	f04f 33ff 	mov.w	r3, #4294967295
 801a91e:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 801a920:	2300      	movs	r3, #0
 801a922:	61fb      	str	r3, [r7, #28]
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	69fa      	ldr	r2, [r7, #28]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	da2b      	bge.n	801a986 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 801a92e:	68fa      	ldr	r2, [r7, #12]
 801a930:	69fb      	ldr	r3, [r7, #28]
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	4413      	add	r3, r2
 801a936:	685b      	ldr	r3, [r3, #4]
 801a938:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a940:	d118      	bne.n	801a974 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 801a942:	6a3b      	ldr	r3, [r7, #32]
 801a944:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a948:	d011      	beq.n	801a96e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	695c      	ldr	r4, [r3, #20]
 801a94e:	f04f 33ff 	mov.w	r3, #4294967295
 801a952:	9303      	str	r3, [sp, #12]
 801a954:	6a3b      	ldr	r3, [r7, #32]
 801a956:	9302      	str	r3, [sp, #8]
 801a958:	4b37      	ldr	r3, [pc, #220]	; (801aa38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 801a95a:	9301      	str	r3, [sp, #4]
 801a95c:	4b37      	ldr	r3, [pc, #220]	; (801aa3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	233a      	movs	r3, #58	; 0x3a
 801a962:	4a32      	ldr	r2, [pc, #200]	; (801aa2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801a964:	4936      	ldr	r1, [pc, #216]	; (801aa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	47a0      	blx	r4
 801a96a:	2301      	movs	r3, #1
 801a96c:	e058      	b.n	801aa20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 801a96e:	69fb      	ldr	r3, [r7, #28]
 801a970:	623b      	str	r3, [r7, #32]
 801a972:	e004      	b.n	801a97e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 801a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a976:	68ba      	ldr	r2, [r7, #8]
 801a978:	fb02 f303 	mul.w	r3, r2, r3
 801a97c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	3301      	adds	r3, #1
 801a982:	61fb      	str	r3, [r7, #28]
 801a984:	e7ce      	b.n	801a924 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 801a986:	6a3b      	ldr	r3, [r7, #32]
 801a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a98c:	d011      	beq.n	801a9b2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 801a98e:	693a      	ldr	r2, [r7, #16]
 801a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a992:	fb92 f2f3 	sdiv	r2, r2, r3
 801a996:	68f9      	ldr	r1, [r7, #12]
 801a998:	6a3b      	ldr	r3, [r7, #32]
 801a99a:	009b      	lsls	r3, r3, #2
 801a99c:	440b      	add	r3, r1
 801a99e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 801a9a0:	68fa      	ldr	r2, [r7, #12]
 801a9a2:	6a3b      	ldr	r3, [r7, #32]
 801a9a4:	009b      	lsls	r3, r3, #2
 801a9a6:	4413      	add	r3, r2
 801a9a8:	685a      	ldr	r2, [r3, #4]
 801a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9ac:	fb02 f303 	mul.w	r3, r2, r3
 801a9b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	781a      	ldrb	r2, [r3, #0]
 801a9b6:	697b      	ldr	r3, [r7, #20]
 801a9b8:	781b      	ldrb	r3, [r3, #0]
 801a9ba:	429a      	cmp	r2, r3
 801a9bc:	d01a      	beq.n	801a9f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	695c      	ldr	r4, [r3, #20]
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	781b      	ldrb	r3, [r3, #0]
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f7f9 fbb8 	bl	801413c <TfLiteTypeGetName>
 801a9cc:	4605      	mov	r5, r0
 801a9ce:	697b      	ldr	r3, [r7, #20]
 801a9d0:	781b      	ldrb	r3, [r3, #0]
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f7f9 fbb2 	bl	801413c <TfLiteTypeGetName>
 801a9d8:	4603      	mov	r3, r0
 801a9da:	9303      	str	r3, [sp, #12]
 801a9dc:	9502      	str	r5, [sp, #8]
 801a9de:	4b19      	ldr	r3, [pc, #100]	; (801aa44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 801a9e0:	9301      	str	r3, [sp, #4]
 801a9e2:	4b19      	ldr	r3, [pc, #100]	; (801aa48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 801a9e4:	9300      	str	r3, [sp, #0]
 801a9e6:	2345      	movs	r3, #69	; 0x45
 801a9e8:	4a10      	ldr	r2, [pc, #64]	; (801aa2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801a9ea:	4918      	ldr	r1, [pc, #96]	; (801aa4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 801a9ec:	6878      	ldr	r0, [r7, #4]
 801a9ee:	47a0      	blx	r4
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	e015      	b.n	801aa20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 801a9f4:	693a      	ldr	r2, [r7, #16]
 801a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	d010      	beq.n	801aa1e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	695c      	ldr	r4, [r3, #20]
 801aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa02:	9303      	str	r3, [sp, #12]
 801aa04:	693b      	ldr	r3, [r7, #16]
 801aa06:	9302      	str	r3, [sp, #8]
 801aa08:	4b11      	ldr	r3, [pc, #68]	; (801aa50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 801aa0a:	9301      	str	r3, [sp, #4]
 801aa0c:	4b11      	ldr	r3, [pc, #68]	; (801aa54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 801aa0e:	9300      	str	r3, [sp, #0]
 801aa10:	2346      	movs	r3, #70	; 0x46
 801aa12:	4a06      	ldr	r2, [pc, #24]	; (801aa2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801aa14:	490a      	ldr	r1, [pc, #40]	; (801aa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 801aa16:	6878      	ldr	r0, [r7, #4]
 801aa18:	47a0      	blx	r4
 801aa1a:	2301      	movs	r3, #1
 801aa1c:	e000      	b.n	801aa20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 801aa1e:	2300      	movs	r3, #0
}
 801aa20:	4618      	mov	r0, r3
 801aa22:	3728      	adds	r7, #40	; 0x28
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bdb0      	pop	{r4, r5, r7, pc}
 801aa28:	08022d60 	.word	0x08022d60
 801aa2c:	08022cb8 	.word	0x08022cb8
 801aa30:	08022d48 	.word	0x08022d48
 801aa34:	08022d74 	.word	0x08022d74
 801aa38:	08022da4 	.word	0x08022da4
 801aa3c:	08022da8 	.word	0x08022da8
 801aa40:	08022d88 	.word	0x08022d88
 801aa44:	08022dd0 	.word	0x08022dd0
 801aa48:	08022de0 	.word	0x08022de0
 801aa4c:	08022db4 	.word	0x08022db4
 801aa50:	08022dec 	.word	0x08022dec
 801aa54:	08022e00 	.word	0x08022e00

0801aa58 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801aa58:	b590      	push	{r4, r7, lr}
 801aa5a:	b087      	sub	sp, #28
 801aa5c:	af04      	add	r7, sp, #16
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 801aa62:	6838      	ldr	r0, [r7, #0]
 801aa64:	f7fb fda8 	bl	80165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	2b01      	cmp	r3, #1
 801aa6c:	d007      	beq.n	801aa7e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 801aa6e:	6838      	ldr	r0, [r7, #0]
 801aa70:	f7fb fda2 	bl	80165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801aa74:	4603      	mov	r3, r0
 801aa76:	2b02      	cmp	r3, #2
 801aa78:	d001      	beq.n	801aa7e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 801aa7a:	2301      	movs	r3, #1
 801aa7c:	e000      	b.n	801aa80 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 801aa7e:	2300      	movs	r3, #0
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d00a      	beq.n	801aa9a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	695c      	ldr	r4, [r3, #20]
 801aa88:	4b27      	ldr	r3, [pc, #156]	; (801ab28 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801aa8a:	9300      	str	r3, [sp, #0]
 801aa8c:	234b      	movs	r3, #75	; 0x4b
 801aa8e:	4a27      	ldr	r2, [pc, #156]	; (801ab2c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 801aa90:	4927      	ldr	r1, [pc, #156]	; (801ab30 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 801aa92:	6878      	ldr	r0, [r7, #4]
 801aa94:	47a0      	blx	r4
 801aa96:	2301      	movs	r3, #1
 801aa98:	e041      	b.n	801ab1e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801aa9a:	6838      	ldr	r0, [r7, #0]
 801aa9c:	f7fb fd99 	bl	80165d2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	2b01      	cmp	r3, #1
 801aaa4:	bf14      	ite	ne
 801aaa6:	2301      	movne	r3, #1
 801aaa8:	2300      	moveq	r3, #0
 801aaaa:	b2db      	uxtb	r3, r3
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d013      	beq.n	801aad8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	695c      	ldr	r4, [r3, #20]
 801aab4:	6838      	ldr	r0, [r7, #0]
 801aab6:	f7fb fd8c 	bl	80165d2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801aaba:	4603      	mov	r3, r0
 801aabc:	2201      	movs	r2, #1
 801aabe:	9203      	str	r2, [sp, #12]
 801aac0:	9302      	str	r3, [sp, #8]
 801aac2:	4b1c      	ldr	r3, [pc, #112]	; (801ab34 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 801aac4:	9301      	str	r3, [sp, #4]
 801aac6:	4b1c      	ldr	r3, [pc, #112]	; (801ab38 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 801aac8:	9300      	str	r3, [sp, #0]
 801aaca:	234c      	movs	r3, #76	; 0x4c
 801aacc:	4a17      	ldr	r2, [pc, #92]	; (801ab2c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 801aace:	491b      	ldr	r1, [pc, #108]	; (801ab3c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	47a0      	blx	r4
 801aad4:	2301      	movs	r3, #1
 801aad6:	e022      	b.n	801ab1e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 801aad8:	6839      	ldr	r1, [r7, #0]
 801aada:	6878      	ldr	r0, [r7, #4]
 801aadc:	f7ff fece 	bl	801a87c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 801aae0:	4603      	mov	r3, r0
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	bf14      	ite	ne
 801aae6:	2301      	movne	r3, #1
 801aae8:	2300      	moveq	r3, #0
 801aaea:	b2db      	uxtb	r3, r3
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d015      	beq.n	801ab1c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	695c      	ldr	r4, [r3, #20]
 801aaf4:	6839      	ldr	r1, [r7, #0]
 801aaf6:	6878      	ldr	r0, [r7, #4]
 801aaf8:	f7ff fec0 	bl	801a87c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 801aafc:	4603      	mov	r3, r0
 801aafe:	461a      	mov	r2, r3
 801ab00:	2300      	movs	r3, #0
 801ab02:	9303      	str	r3, [sp, #12]
 801ab04:	9202      	str	r2, [sp, #8]
 801ab06:	4b0e      	ldr	r3, [pc, #56]	; (801ab40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 801ab08:	9301      	str	r3, [sp, #4]
 801ab0a:	4b0e      	ldr	r3, [pc, #56]	; (801ab44 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 801ab0c:	9300      	str	r3, [sp, #0]
 801ab0e:	234d      	movs	r3, #77	; 0x4d
 801ab10:	4a06      	ldr	r2, [pc, #24]	; (801ab2c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 801ab12:	490a      	ldr	r1, [pc, #40]	; (801ab3c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 801ab14:	6878      	ldr	r0, [r7, #4]
 801ab16:	47a0      	blx	r4
 801ab18:	2301      	movs	r3, #1
 801ab1a:	e000      	b.n	801ab1e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 801ab1c:	2300      	movs	r3, #0
}
 801ab1e:	4618      	mov	r0, r3
 801ab20:	370c      	adds	r7, #12
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd90      	pop	{r4, r7, pc}
 801ab26:	bf00      	nop
 801ab28:	08022e14 	.word	0x08022e14
 801ab2c:	08022cb8 	.word	0x08022cb8
 801ab30:	08022d48 	.word	0x08022d48
 801ab34:	08022e44 	.word	0x08022e44
 801ab38:	08022e48 	.word	0x08022e48
 801ab3c:	08022d88 	.word	0x08022d88
 801ab40:	08022e5c 	.word	0x08022e5c
 801ab44:	08022e68 	.word	0x08022e68

0801ab48 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801ab48:	b580      	push	{r7, lr}
 801ab4a:	b088      	sub	sp, #32
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801ab52:	2200      	movs	r2, #0
 801ab54:	6839      	ldr	r1, [r7, #0]
 801ab56:	6878      	ldr	r0, [r7, #4]
 801ab58:	f7fa fce8 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801ab5c:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801ab5e:	2200      	movs	r2, #0
 801ab60:	6839      	ldr	r1, [r7, #0]
 801ab62:	6878      	ldr	r0, [r7, #4]
 801ab64:	f7fa fcf2 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801ab68:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 801ab6a:	69bb      	ldr	r3, [r7, #24]
 801ab6c:	7a1b      	ldrb	r3, [r3, #8]
 801ab6e:	f107 020c 	add.w	r2, r7, #12
 801ab72:	4611      	mov	r1, r2
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7fa faed 	bl	8015154 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	74fb      	strb	r3, [r7, #19]
 801ab7e:	7cfb      	ldrb	r3, [r7, #19]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d001      	beq.n	801ab88 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 801ab84:	7cfb      	ldrb	r3, [r7, #19]
 801ab86:	e024      	b.n	801abd2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 801ab88:	69bb      	ldr	r3, [r7, #24]
 801ab8a:	685b      	ldr	r3, [r3, #4]
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	f7fa fb4d 	bl	801522c <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 801ab92:	4602      	mov	r2, r0
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	fb02 f303 	mul.w	r3, r2, r3
 801ab9a:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 801ab9c:	69bb      	ldr	r3, [r7, #24]
 801ab9e:	681a      	ldr	r2, [r3, #0]
 801aba0:	697b      	ldr	r3, [r7, #20]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d013      	beq.n	801abd0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 801aba8:	2300      	movs	r3, #0
 801abaa:	61fb      	str	r3, [r7, #28]
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	69fa      	ldr	r2, [r7, #28]
 801abb0:	429a      	cmp	r2, r3
 801abb2:	d20d      	bcs.n	801abd0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 801abb4:	69bb      	ldr	r3, [r7, #24]
 801abb6:	681a      	ldr	r2, [r3, #0]
 801abb8:	69fb      	ldr	r3, [r7, #28]
 801abba:	441a      	add	r2, r3
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	6819      	ldr	r1, [r3, #0]
 801abc0:	69fb      	ldr	r3, [r7, #28]
 801abc2:	440b      	add	r3, r1
 801abc4:	7812      	ldrb	r2, [r2, #0]
 801abc6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 801abc8:	69fb      	ldr	r3, [r7, #28]
 801abca:	3301      	adds	r3, #1
 801abcc:	61fb      	str	r3, [r7, #28]
 801abce:	e7ed      	b.n	801abac <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 801abd0:	2300      	movs	r3, #0
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	3720      	adds	r7, #32
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd80      	pop	{r7, pc}
	...

0801abdc <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 801abdc:	b4b0      	push	{r4, r5, r7}
 801abde:	b083      	sub	sp, #12
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	4a07      	ldr	r2, [pc, #28]	; (801ac04 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 801abe8:	461c      	mov	r4, r3
 801abea:	4615      	mov	r5, r2
 801abec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801abf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801abf8:	6878      	ldr	r0, [r7, #4]
 801abfa:	370c      	adds	r7, #12
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bcb0      	pop	{r4, r5, r7}
 801ac00:	4770      	bx	lr
 801ac02:	bf00      	nop
 801ac04:	08022e88 	.word	0x08022e88

0801ac08 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b086      	sub	sp, #24
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	4603      	mov	r3, r0
 801ac10:	6039      	str	r1, [r7, #0]
 801ac12:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801ac14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ac18:	11db      	asrs	r3, r3, #7
 801ac1a:	b21b      	sxth	r3, r3
 801ac1c:	b29b      	uxth	r3, r3
 801ac1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801ac22:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801ac24:	8afb      	ldrh	r3, [r7, #22]
 801ac26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac2a:	d306      	bcc.n	801ac3a <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801ac2c:	4b1a      	ldr	r3, [pc, #104]	; (801ac98 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801ac2e:	4a1b      	ldr	r2, [pc, #108]	; (801ac9c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801ac30:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801ac34:	481a      	ldr	r0, [pc, #104]	; (801aca0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801ac36:	f005 f859 	bl	801fcec <__assert_func>
  int16_t offset = value & 0x7f;
 801ac3a:	88fb      	ldrh	r3, [r7, #6]
 801ac3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ac40:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801ac42:	8afb      	ldrh	r3, [r7, #22]
 801ac44:	005b      	lsls	r3, r3, #1
 801ac46:	683a      	ldr	r2, [r7, #0]
 801ac48:	4413      	add	r3, r2
 801ac4a:	881b      	ldrh	r3, [r3, #0]
 801ac4c:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801ac4e:	8afb      	ldrh	r3, [r7, #22]
 801ac50:	3301      	adds	r3, #1
 801ac52:	005b      	lsls	r3, r3, #1
 801ac54:	683a      	ldr	r2, [r7, #0]
 801ac56:	4413      	add	r3, r2
 801ac58:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ac5c:	b29a      	uxth	r2, r3
 801ac5e:	8afb      	ldrh	r3, [r7, #22]
 801ac60:	005b      	lsls	r3, r3, #1
 801ac62:	6839      	ldr	r1, [r7, #0]
 801ac64:	440b      	add	r3, r1
 801ac66:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ac6a:	b29b      	uxth	r3, r3
 801ac6c:	1ad3      	subs	r3, r2, r3
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801ac72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801ac76:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ac7a:	fb02 f303 	mul.w	r3, r2, r3
 801ac7e:	3340      	adds	r3, #64	; 0x40
 801ac80:	11db      	asrs	r3, r3, #7
 801ac82:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	b29a      	uxth	r2, r3
 801ac88:	8a7b      	ldrh	r3, [r7, #18]
 801ac8a:	4413      	add	r3, r2
 801ac8c:	b29b      	uxth	r3, r3
 801ac8e:	b21b      	sxth	r3, r3
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3718      	adds	r7, #24
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	08022ea8 	.word	0x08022ea8
 801ac9c:	08022ed4 	.word	0x08022ed4
 801aca0:	08022f18 	.word	0x08022f18

0801aca4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 801aca4:	b580      	push	{r7, lr}
 801aca6:	ed2d 8b02 	vpush	{d8}
 801acaa:	b08e      	sub	sp, #56	; 0x38
 801acac:	af00      	add	r7, sp, #0
 801acae:	60f8      	str	r0, [r7, #12]
 801acb0:	60b9      	str	r1, [r7, #8]
 801acb2:	607a      	str	r2, [r7, #4]
 801acb4:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801acb6:	68b8      	ldr	r0, [r7, #8]
 801acb8:	f7fa f9c9 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801acbc:	4603      	mov	r3, r0
 801acbe:	3b01      	subs	r3, #1
 801acc0:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801acc2:	683a      	ldr	r2, [r7, #0]
 801acc4:	6a39      	ldr	r1, [r7, #32]
 801acc6:	68b8      	ldr	r0, [r7, #8]
 801acc8:	f7fe f9f9 	bl	80190be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801accc:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801acce:	6a3b      	ldr	r3, [r7, #32]
 801acd0:	683a      	ldr	r2, [r7, #0]
 801acd2:	6a39      	ldr	r1, [r7, #32]
 801acd4:	68b8      	ldr	r0, [r7, #8]
 801acd6:	f7fb fc98 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801acda:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 801acdc:	2300      	movs	r3, #0
 801acde:	637b      	str	r3, [r7, #52]	; 0x34
 801ace0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ace2:	69fb      	ldr	r3, [r7, #28]
 801ace4:	429a      	cmp	r2, r3
 801ace6:	f280 8087 	bge.w	801adf8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 801acea:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801acee:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801acf0:	2300      	movs	r3, #0
 801acf2:	633b      	str	r3, [r7, #48]	; 0x30
 801acf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801acf6:	69bb      	ldr	r3, [r7, #24]
 801acf8:	429a      	cmp	r2, r3
 801acfa:	da15      	bge.n	801ad28 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 801acfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acfe:	69ba      	ldr	r2, [r7, #24]
 801ad00:	fb03 f202 	mul.w	r2, r3, r2
 801ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad06:	4413      	add	r3, r2
 801ad08:	009b      	lsls	r3, r3, #2
 801ad0a:	687a      	ldr	r2, [r7, #4]
 801ad0c:	441a      	add	r2, r3
 801ad0e:	f107 0310 	add.w	r3, r7, #16
 801ad12:	4611      	mov	r1, r2
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7f9 fc2b 	bl	8014570 <_ZSt3maxIfERKT_S2_S2_>
 801ad1a:	4603      	mov	r3, r0
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad22:	3301      	adds	r3, #1
 801ad24:	633b      	str	r3, [r7, #48]	; 0x30
 801ad26:	e7e5      	b.n	801acf4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 801ad28:	f04f 0300 	mov.w	r3, #0
 801ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801ad2e:	2300      	movs	r3, #0
 801ad30:	62bb      	str	r3, [r7, #40]	; 0x28
 801ad32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ad34:	69bb      	ldr	r3, [r7, #24]
 801ad36:	429a      	cmp	r2, r3
 801ad38:	da36      	bge.n	801ada8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad3c:	69ba      	ldr	r2, [r7, #24]
 801ad3e:	fb03 f202 	mul.w	r2, r3, r2
 801ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad44:	4413      	add	r3, r2
 801ad46:	009b      	lsls	r3, r3, #2
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	4413      	add	r3, r2
 801ad4c:	ed93 7a00 	vldr	s14, [r3]
 801ad50:	edd7 7a04 	vldr	s15, [r7, #16]
 801ad54:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad5e:	4610      	mov	r0, r2
 801ad60:	4619      	mov	r1, r3
 801ad62:	f7e5 ff6b 	bl	8000c3c <__aeabi_d2f>
 801ad66:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801ad6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801ad6e:	eeb0 0a67 	vmov.f32	s0, s15
 801ad72:	f7e6 faf9 	bl	8001368 <_ZSt3expf>
 801ad76:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 801ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad7c:	69ba      	ldr	r2, [r7, #24]
 801ad7e:	fb03 f202 	mul.w	r2, r3, r2
 801ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad84:	4413      	add	r3, r2
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ad8a:	4413      	add	r3, r2
 801ad8c:	697a      	ldr	r2, [r7, #20]
 801ad8e:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 801ad90:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801ad94:	edd7 7a05 	vldr	s15, [r7, #20]
 801ad98:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ad9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ada2:	3301      	adds	r3, #1
 801ada4:	62bb      	str	r3, [r7, #40]	; 0x28
 801ada6:	e7c4      	b.n	801ad32 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801ada8:	2300      	movs	r3, #0
 801adaa:	627b      	str	r3, [r7, #36]	; 0x24
 801adac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adae:	69bb      	ldr	r3, [r7, #24]
 801adb0:	429a      	cmp	r2, r3
 801adb2:	da1d      	bge.n	801adf0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 801adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adb6:	69ba      	ldr	r2, [r7, #24]
 801adb8:	fb03 f202 	mul.w	r2, r3, r2
 801adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adbe:	4413      	add	r3, r2
 801adc0:	009b      	lsls	r3, r3, #2
 801adc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801adc4:	4413      	add	r3, r2
 801adc6:	edd3 6a00 	vldr	s13, [r3]
 801adca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adcc:	69ba      	ldr	r2, [r7, #24]
 801adce:	fb03 f202 	mul.w	r2, r3, r2
 801add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add4:	4413      	add	r3, r2
 801add6:	009b      	lsls	r3, r3, #2
 801add8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801adda:	4413      	add	r3, r2
 801addc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801ade0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ade4:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adea:	3301      	adds	r3, #1
 801adec:	627b      	str	r3, [r7, #36]	; 0x24
 801adee:	e7dd      	b.n	801adac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 801adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adf2:	3301      	adds	r3, #1
 801adf4:	637b      	str	r3, [r7, #52]	; 0x34
 801adf6:	e773      	b.n	801ace0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 801adf8:	bf00      	nop
 801adfa:	3738      	adds	r7, #56	; 0x38
 801adfc:	46bd      	mov	sp, r7
 801adfe:	ecbd 8b02 	vpop	{d8}
 801ae02:	bd80      	pop	{r7, pc}

0801ae04 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b08a      	sub	sp, #40	; 0x28
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	60f8      	str	r0, [r7, #12]
 801ae0c:	60b9      	str	r1, [r7, #8]
 801ae0e:	607a      	str	r2, [r7, #4]
 801ae10:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae14:	687a      	ldr	r2, [r7, #4]
 801ae16:	fb03 f202 	mul.w	r2, r3, r2
 801ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae1c:	4413      	add	r3, r2
 801ae1e:	005b      	lsls	r3, r3, #1
 801ae20:	68ba      	ldr	r2, [r7, #8]
 801ae22:	4413      	add	r3, r2
 801ae24:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae28:	461a      	mov	r2, r3
 801ae2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ae2e:	1ad3      	subs	r3, r2, r3
 801ae30:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	6899      	ldr	r1, [r3, #8]
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801ae3a:	461a      	mov	r2, r3
 801ae3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae3e:	f7fa fb31 	bl	80154a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801ae42:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801ae44:	6a3b      	ldr	r3, [r7, #32]
 801ae46:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801ae4a:	337f      	adds	r3, #127	; 0x7f
 801ae4c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801ae4e:	4b12      	ldr	r3, [pc, #72]	; (801ae98 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801ae50:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801ae52:	f107 0214 	add.w	r2, r7, #20
 801ae56:	f107 0310 	add.w	r3, r7, #16
 801ae5a:	4611      	mov	r1, r2
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	f7fa f8ab 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 801ae62:	4602      	mov	r2, r0
 801ae64:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ae68:	61bb      	str	r3, [r7, #24]
 801ae6a:	f107 0318 	add.w	r3, r7, #24
 801ae6e:	4619      	mov	r1, r3
 801ae70:	4610      	mov	r0, r2
 801ae72:	f7fa f88d 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 801ae76:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801ae78:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801ae7a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ae80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ae84:	4611      	mov	r1, r2
 801ae86:	4618      	mov	r0, r3
 801ae88:	f7ff febe 	bl	801ac08 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801ae8c:	4603      	mov	r3, r0
}
 801ae8e:	4618      	mov	r0, r3
 801ae90:	3728      	adds	r7, #40	; 0x28
 801ae92:	46bd      	mov	sp, r7
 801ae94:	bd80      	pop	{r7, pc}
 801ae96:	bf00      	nop
 801ae98:	ffff8000 	.word	0xffff8000

0801ae9c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea0:	b0ab      	sub	sp, #172	; 0xac
 801aea2:	af02      	add	r7, sp, #8
 801aea4:	63f8      	str	r0, [r7, #60]	; 0x3c
 801aea6:	63b9      	str	r1, [r7, #56]	; 0x38
 801aea8:	637a      	str	r2, [r7, #52]	; 0x34
 801aeaa:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801aeac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aeae:	f7fa f8ce 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	3b01      	subs	r3, #1
 801aeb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801aeba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aebc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801aec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aec2:	f7fe f8fc 	bl	80190be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801aec6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801aeca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801aece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aed0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801aed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aed6:	f7fb fb98 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801aeda:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801aede:	2300      	movs	r3, #0
 801aee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801aee4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801aee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801aeec:	429a      	cmp	r2, r3
 801aeee:	f280 8157 	bge.w	801b1a0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801aef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aef6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801aefa:	2300      	movs	r3, #0
 801aefc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801af00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801af04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af08:	429a      	cmp	r2, r3
 801af0a:	da1c      	bge.n	801af46 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801af0c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801af10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af14:	fb03 f202 	mul.w	r2, r3, r2
 801af18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801af1c:	4413      	add	r3, r2
 801af1e:	005a      	lsls	r2, r3, #1
 801af20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af22:	441a      	add	r2, r3
 801af24:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801af28:	4611      	mov	r1, r2
 801af2a:	4618      	mov	r0, r3
 801af2c:	f7fe f865 	bl	8018ffa <_ZSt3maxIsERKT_S2_S2_>
 801af30:	4603      	mov	r3, r0
 801af32:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801af3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801af3e:	3301      	adds	r3, #1
 801af40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801af44:	e7dc      	b.n	801af00 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801af46:	2300      	movs	r3, #0
 801af48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801af4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801af50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af54:	fb02 f303 	mul.w	r3, r2, r3
 801af58:	005a      	lsls	r2, r3, #1
 801af5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801af5e:	4413      	add	r3, r2
 801af60:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801af62:	2300      	movs	r3, #0
 801af64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801af68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801af6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af70:	429a      	cmp	r2, r3
 801af72:	da28      	bge.n	801afc6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801af74:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801af78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801af7c:	005a      	lsls	r2, r3, #1
 801af7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801af80:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801af82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801af86:	9301      	str	r3, [sp, #4]
 801af88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801af8c:	9300      	str	r3, [sp, #0]
 801af8e:	460b      	mov	r3, r1
 801af90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801af94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801af96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801af98:	f7ff ff34 	bl	801ae04 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801af9c:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801af9e:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801afa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801afa4:	005a      	lsls	r2, r3, #1
 801afa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801afa8:	4413      	add	r3, r2
 801afaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afae:	461a      	mov	r2, r3
 801afb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801afb4:	4413      	add	r3, r2
 801afb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801afba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801afbe:	3301      	adds	r3, #1
 801afc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801afc4:	e7d0      	b.n	801af68 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801afc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801afca:	4618      	mov	r0, r3
 801afcc:	f7fc fea9 	bl	8017d22 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801afd0:	4603      	mov	r3, r0
 801afd2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801afd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801afda:	17da      	asrs	r2, r3, #31
 801afdc:	623b      	str	r3, [r7, #32]
 801afde:	627a      	str	r2, [r7, #36]	; 0x24
 801afe0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801afe4:	1e59      	subs	r1, r3, #1
 801afe6:	f1a1 0320 	sub.w	r3, r1, #32
 801afea:	f1c1 0220 	rsb	r2, r1, #32
 801afee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aff0:	fa00 f901 	lsl.w	r9, r0, r1
 801aff4:	6a38      	ldr	r0, [r7, #32]
 801aff6:	fa00 f303 	lsl.w	r3, r0, r3
 801affa:	ea49 0903 	orr.w	r9, r9, r3
 801affe:	6a3b      	ldr	r3, [r7, #32]
 801b000:	fa23 f202 	lsr.w	r2, r3, r2
 801b004:	ea49 0902 	orr.w	r9, r9, r2
 801b008:	6a3b      	ldr	r3, [r7, #32]
 801b00a:	fa03 f801 	lsl.w	r8, r3, r1
 801b00e:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801b012:	61bb      	str	r3, [r7, #24]
 801b014:	f149 0300 	adc.w	r3, r9, #0
 801b018:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801b01a:	f04f 0200 	mov.w	r2, #0
 801b01e:	f04f 0300 	mov.w	r3, #0
 801b022:	69b9      	ldr	r1, [r7, #24]
 801b024:	0b8a      	lsrs	r2, r1, #14
 801b026:	69f9      	ldr	r1, [r7, #28]
 801b028:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801b02c:	69f9      	ldr	r1, [r7, #28]
 801b02e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801b030:	4613      	mov	r3, r2
 801b032:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801b034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b036:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801b03a:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801b03c:	4b5b      	ldr	r3, [pc, #364]	; (801b1ac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801b03e:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801b040:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b044:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b048:	4611      	mov	r1, r2
 801b04a:	4618      	mov	r0, r3
 801b04c:	f7f9 ffb4 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 801b050:	4602      	mov	r2, r0
 801b052:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b056:	657b      	str	r3, [r7, #84]	; 0x54
 801b058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b05c:	4619      	mov	r1, r3
 801b05e:	4610      	mov	r0, r2
 801b060:	f7f9 ff96 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 801b064:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801b066:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801b068:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801b06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801b070:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801b074:	4611      	mov	r1, r2
 801b076:	4618      	mov	r0, r3
 801b078:	f7ff fdc6 	bl	801ac08 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801b07c:	4603      	mov	r3, r0
 801b07e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801b082:	2300      	movs	r3, #0
 801b084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b088:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801b08c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b090:	429a      	cmp	r2, r3
 801b092:	da7f      	bge.n	801b194 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801b094:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b098:	f1c3 031f 	rsb	r3, r3, #31
 801b09c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801b0a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801b0a4:	1e5a      	subs	r2, r3, #1
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	4093      	lsls	r3, r2
 801b0aa:	17da      	asrs	r2, r3, #31
 801b0ac:	603b      	str	r3, [r7, #0]
 801b0ae:	607a      	str	r2, [r7, #4]
 801b0b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b0b4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801b0b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b0bc:	005a      	lsls	r2, r3, #1
 801b0be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b0c0:	4413      	add	r3, r2
 801b0c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0c6:	b21b      	sxth	r3, r3
 801b0c8:	17da      	asrs	r2, r3, #31
 801b0ca:	613b      	str	r3, [r7, #16]
 801b0cc:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801b0ce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801b0d2:	17da      	asrs	r2, r3, #31
 801b0d4:	60bb      	str	r3, [r7, #8]
 801b0d6:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801b0d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b0dc:	460b      	mov	r3, r1
 801b0de:	68ba      	ldr	r2, [r7, #8]
 801b0e0:	fb02 f203 	mul.w	r2, r2, r3
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801b0ea:	4601      	mov	r1, r0
 801b0ec:	fb01 f303 	mul.w	r3, r1, r3
 801b0f0:	4413      	add	r3, r2
 801b0f2:	693a      	ldr	r2, [r7, #16]
 801b0f4:	68b9      	ldr	r1, [r7, #8]
 801b0f6:	fba2 ab01 	umull	sl, fp, r2, r1
 801b0fa:	445b      	add	r3, fp
 801b0fc:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801b0fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801b102:	eb1a 0502 	adds.w	r5, sl, r2
 801b106:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801b10a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801b10e:	f1c1 0320 	rsb	r3, r1, #32
 801b112:	f1b1 0220 	subs.w	r2, r1, #32
 801b116:	fa25 f001 	lsr.w	r0, r5, r1
 801b11a:	62b8      	str	r0, [r7, #40]	; 0x28
 801b11c:	fa06 f303 	lsl.w	r3, r6, r3
 801b120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b122:	ea40 0003 	orr.w	r0, r0, r3
 801b126:	62b8      	str	r0, [r7, #40]	; 0x28
 801b128:	d404      	bmi.n	801b134 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801b12a:	fa46 f202 	asr.w	r2, r6, r2
 801b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b130:	4313      	orrs	r3, r2
 801b132:	62bb      	str	r3, [r7, #40]	; 0x28
 801b134:	fa46 f301 	asr.w	r3, r6, r1
 801b138:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b13c:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801b13e:	2300      	movs	r3, #0
 801b140:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801b142:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801b146:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b14a:	4611      	mov	r1, r2
 801b14c:	4618      	mov	r0, r3
 801b14e:	f7f9 ff33 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 801b152:	4602      	mov	r2, r0
 801b154:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b158:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b15a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b15e:	4619      	mov	r1, r3
 801b160:	4610      	mov	r0, r2
 801b162:	f7f9 ff15 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 801b166:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801b168:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801b16a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b16e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b172:	fb03 f202 	mul.w	r2, r3, r2
 801b176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b17a:	4413      	add	r3, r2
 801b17c:	005a      	lsls	r2, r3, #1
 801b17e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b182:	441a      	add	r2, r3
 801b184:	b20b      	sxth	r3, r1
 801b186:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801b188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b18c:	3301      	adds	r3, #1
 801b18e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b192:	e779      	b.n	801b088 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801b194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b198:	3301      	adds	r3, #1
 801b19a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801b19e:	e6a1      	b.n	801aee4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801b1a0:	bf00      	nop
 801b1a2:	37a4      	adds	r7, #164	; 0xa4
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1aa:	bf00      	nop
 801b1ac:	ffff8000 	.word	0xffff8000

0801b1b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801b1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1b4:	b0bc      	sub	sp, #240	; 0xf0
 801b1b6:	af04      	add	r7, sp, #16
 801b1b8:	60f8      	str	r0, [r7, #12]
 801b1ba:	60b9      	str	r1, [r7, #8]
 801b1bc:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	7a1b      	ldrb	r3, [r3, #8]
 801b1c2:	2b03      	cmp	r3, #3
 801b1c4:	d127      	bne.n	801b216 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801b1c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b1ca:	68f9      	ldr	r1, [r7, #12]
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7fd ff2a 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801b1d2:	68f8      	ldr	r0, [r7, #12]
 801b1d4:	f7fa ff14 	bl	8016000 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b1d8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801b1da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b1de:	68b9      	ldr	r1, [r7, #8]
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7fd ff20 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801b1e6:	68b8      	ldr	r0, [r7, #8]
 801b1e8:	f7fa ff19 	bl	801601e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b1ec:	4602      	mov	r2, r0
 801b1ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b1f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801b1f6:	9200      	str	r2, [sp, #0]
 801b1f8:	4622      	mov	r2, r4
 801b1fa:	6878      	ldr	r0, [r7, #4]
 801b1fc:	f000 f956 	bl	801b4ac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801b200:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b204:	4618      	mov	r0, r3
 801b206:	f7f9 ff0c 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801b20a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b20e:	4618      	mov	r0, r3
 801b210:	f7f9 ff07 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801b214:	e0a6      	b.n	801b364 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
  } else if (input->type == kTfLiteInt8) {
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	7a1b      	ldrb	r3, [r3, #8]
 801b21a:	2b09      	cmp	r3, #9
 801b21c:	d17b      	bne.n	801b316 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
    if (output->type == kTfLiteInt16) {
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	7a1b      	ldrb	r3, [r3, #8]
 801b222:	2b07      	cmp	r3, #7
 801b224:	d127      	bne.n	801b276 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 801b226:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801b22a:	68f9      	ldr	r1, [r7, #12]
 801b22c:	4618      	mov	r0, r3
 801b22e:	f7fd fefa 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801b232:	68f8      	ldr	r0, [r7, #12]
 801b234:	f7fa fe78 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b238:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 801b23a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801b23e:	68b9      	ldr	r1, [r7, #8]
 801b240:	4618      	mov	r0, r3
 801b242:	f7fd fef0 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801b246:	68b8      	ldr	r0, [r7, #8]
 801b248:	f7ff fb06 	bl	801a858 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801b24c:	4602      	mov	r2, r0
 801b24e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801b252:	f107 0174 	add.w	r1, r7, #116	; 0x74
 801b256:	9200      	str	r2, [sp, #0]
 801b258:	4622      	mov	r2, r4
 801b25a:	6878      	ldr	r0, [r7, #4]
 801b25c:	f000 fa41 	bl	801b6e2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 801b260:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801b264:	4618      	mov	r0, r3
 801b266:	f7f9 fedc 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 801b26a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801b26e:	4618      	mov	r0, r3
 801b270:	f7f9 fed7 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b274:	e076      	b.n	801b364 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801b276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b27a:	68f9      	ldr	r1, [r7, #12]
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7fd fed2 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801b282:	f107 0314 	add.w	r3, r7, #20
 801b286:	68b9      	ldr	r1, [r7, #8]
 801b288:	4618      	mov	r0, r3
 801b28a:	f7fd fecc 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801b28e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b292:	4618      	mov	r0, r3
 801b294:	f7f9 fedb 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b298:	4603      	mov	r3, r0
 801b29a:	3b01      	subs	r3, #1
 801b29c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801b2a0:	f107 0214 	add.w	r2, r7, #20
 801b2a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b2a8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	f7fd ff06 	bl	80190be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801b2b2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801b2b6:	f107 0214 	add.w	r2, r7, #20
 801b2ba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b2c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801b2c6:	f7fb f9a0 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801b2ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801b2ce:	68f8      	ldr	r0, [r7, #12]
 801b2d0:	f7fa fe2a 	bl	8015f28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b2d4:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	689e      	ldr	r6, [r3, #8]
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801b2e2:	68b8      	ldr	r0, [r7, #8]
 801b2e4:	f7fa fe2f 	bl	8015f46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	9302      	str	r3, [sp, #8]
 801b2ec:	9501      	str	r5, [sp, #4]
 801b2ee:	9400      	str	r4, [sp, #0]
 801b2f0:	4633      	mov	r3, r6
 801b2f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801b2f6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801b2fa:	4640      	mov	r0, r8
 801b2fc:	f7f4 fce0 	bl	800fcc0 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801b300:	f107 0314 	add.w	r3, r7, #20
 801b304:	4618      	mov	r0, r3
 801b306:	f7f9 fe8c 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801b30a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b30e:	4618      	mov	r0, r3
 801b310:	f7f9 fe87 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b314:	e026      	b.n	801b364 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
        op_data, tflite::micro::GetTensorShape(input),
 801b316:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b31a:	68f9      	ldr	r1, [r7, #12]
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7fd fe82 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801b322:	68f8      	ldr	r0, [r7, #12]
 801b324:	f7fc fc5e 	bl	8017be4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801b328:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 801b32a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b32e:	68b9      	ldr	r1, [r7, #8]
 801b330:	4618      	mov	r0, r3
 801b332:	f7fd fe78 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801b336:	68b8      	ldr	r0, [r7, #8]
 801b338:	f7ff fa8e 	bl	801a858 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801b33c:	4602      	mov	r2, r0
 801b33e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b342:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801b346:	9200      	str	r2, [sp, #0]
 801b348:	4622      	mov	r2, r4
 801b34a:	6878      	ldr	r0, [r7, #4]
 801b34c:	f7ff fda6 	bl	801ae9c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801b350:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b354:	4618      	mov	r0, r3
 801b356:	f7f9 fe64 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801b35a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b35e:	4618      	mov	r0, r3
 801b360:	f7f9 fe5f 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b364:	bf00      	nop
 801b366:	37e0      	adds	r7, #224	; 0xe0
 801b368:	46bd      	mov	sp, r7
 801b36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b370 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801b370:	b5b0      	push	{r4, r5, r7, lr}
 801b372:	b0a0      	sub	sp, #128	; 0x80
 801b374:	af02      	add	r7, sp, #8
 801b376:	6078      	str	r0, [r7, #4]
 801b378:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801b37a:	2200      	movs	r2, #0
 801b37c:	6839      	ldr	r1, [r7, #0]
 801b37e:	6878      	ldr	r0, [r7, #4]
 801b380:	f7fa f8d4 	bl	801552c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b384:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801b386:	2200      	movs	r2, #0
 801b388:	6839      	ldr	r1, [r7, #0]
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	f7fa f8de 	bl	801554c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b390:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	691b      	ldr	r3, [r3, #16]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d101      	bne.n	801b39e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801b39a:	f004 fc9f 	bl	801fcdc <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801b3a2:	f107 0408 	add.w	r4, r7, #8
 801b3a6:	461d      	mov	r5, r3
 801b3a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b3aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b3ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b3ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b3b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b3b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b3b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b3b8:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801b3bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b3be:	7a1b      	ldrb	r3, [r3, #8]
 801b3c0:	3b01      	subs	r3, #1
 801b3c2:	2b08      	cmp	r3, #8
 801b3c4:	d847      	bhi.n	801b456 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
 801b3c6:	a201      	add	r2, pc, #4	; (adr r2, 801b3cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3cc:	0801b3f1 	.word	0x0801b3f1
 801b3d0:	0801b457 	.word	0x0801b457
 801b3d4:	0801b445 	.word	0x0801b445
 801b3d8:	0801b457 	.word	0x0801b457
 801b3dc:	0801b457 	.word	0x0801b457
 801b3e0:	0801b457 	.word	0x0801b457
 801b3e4:	0801b445 	.word	0x0801b445
 801b3e8:	0801b457 	.word	0x0801b457
 801b3ec:	0801b445 	.word	0x0801b445
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 801b3f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b3f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7fd fe15 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801b3fc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b3fe:	f7fa fd73 	bl	8015ee8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b402:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 801b404:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b408:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b40a:	4618      	mov	r0, r3
 801b40c:	f7fd fe0b 	bl	8019026 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801b410:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801b412:	f7fa fd78 	bl	8015f06 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b416:	4602      	mov	r2, r0
 801b418:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b41c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b420:	f107 0008 	add.w	r0, r7, #8
 801b424:	9200      	str	r2, [sp, #0]
 801b426:	4622      	mov	r2, r4
 801b428:	f7ff fc3c 	bl	801aca4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 801b42c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b430:	4618      	mov	r0, r3
 801b432:	f7f9 fdf6 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 801b436:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b43a:	4618      	mov	r0, r3
 801b43c:	f7f9 fdf1 	bl	8015022 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 801b440:	2300      	movs	r3, #0
 801b442:	e016      	b.n	801b472 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 801b444:	f107 0308 	add.w	r3, r7, #8
 801b448:	461a      	mov	r2, r3
 801b44a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b44c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b44e:	f7ff feaf 	bl	801b1b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801b452:	2300      	movs	r3, #0
 801b454:	e00d      	b.n	801b472 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	695c      	ldr	r4, [r3, #20]
 801b45a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b45c:	7a1b      	ldrb	r3, [r3, #8]
 801b45e:	4618      	mov	r0, r3
 801b460:	f7f8 fe6c 	bl	801413c <TfLiteTypeGetName>
 801b464:	4602      	mov	r2, r0
 801b466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b468:	7a1b      	ldrb	r3, [r3, #8]
 801b46a:	4904      	ldr	r1, [pc, #16]	; (801b47c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 801b46c:	6878      	ldr	r0, [r7, #4]
 801b46e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801b470:	2301      	movs	r3, #1
  }
}
 801b472:	4618      	mov	r0, r3
 801b474:	3778      	adds	r7, #120	; 0x78
 801b476:	46bd      	mov	sp, r7
 801b478:	bdb0      	pop	{r4, r5, r7, pc}
 801b47a:	bf00      	nop
 801b47c:	08022fa8 	.word	0x08022fa8

0801b480 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801b480:	b4b0      	push	{r4, r5, r7}
 801b482:	b083      	sub	sp, #12
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	4a07      	ldr	r2, [pc, #28]	; (801b4a8 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801b48c:	461c      	mov	r4, r3
 801b48e:	4615      	mov	r5, r2
 801b490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b494:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801b49c:	6878      	ldr	r0, [r7, #4]
 801b49e:	370c      	adds	r7, #12
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bcb0      	pop	{r4, r5, r7}
 801b4a4:	4770      	bx	lr
 801b4a6:	bf00      	nop
 801b4a8:	08022fc4 	.word	0x08022fc4

0801b4ac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801b4ac:	b590      	push	{r4, r7, lr}
 801b4ae:	b09f      	sub	sp, #124	; 0x7c
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	60f8      	str	r0, [r7, #12]
 801b4b4:	60b9      	str	r1, [r7, #8]
 801b4b6:	607a      	str	r2, [r7, #4]
 801b4b8:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	689b      	ldr	r3, [r3, #8]
 801b4be:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	68db      	ldr	r3, [r3, #12]
 801b4c4:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	699b      	ldr	r3, [r3, #24]
 801b4ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801b4cc:	68b8      	ldr	r0, [r7, #8]
 801b4ce:	f7f9 fdbe 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	3b01      	subs	r3, #1
 801b4d6:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801b4d8:	683a      	ldr	r2, [r7, #0]
 801b4da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b4dc:	68b8      	ldr	r0, [r7, #8]
 801b4de:	f7fd fdee 	bl	80190be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801b4e2:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801b4e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b4e6:	683a      	ldr	r2, [r7, #0]
 801b4e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b4ea:	68b8      	ldr	r0, [r7, #8]
 801b4ec:	f7fb f88d 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801b4f0:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	677b      	str	r3, [r7, #116]	; 0x74
 801b4f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	f280 80ed 	bge.w	801b6da <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801b500:	2300      	movs	r3, #0
 801b502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801b506:	2300      	movs	r3, #0
 801b508:	673b      	str	r3, [r7, #112]	; 0x70
 801b50a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b50e:	429a      	cmp	r2, r3
 801b510:	da16      	bge.n	801b540 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801b512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b516:	fb03 f202 	mul.w	r2, r3, r2
 801b51a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b51c:	4413      	add	r3, r2
 801b51e:	461a      	mov	r2, r3
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	441a      	add	r2, r3
 801b524:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801b528:	4611      	mov	r1, r2
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7ff f96c 	bl	801a808 <_ZSt3maxIhERKT_S2_S2_>
 801b530:	4603      	mov	r3, r0
 801b532:	781b      	ldrb	r3, [r3, #0]
 801b534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801b538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b53a:	3301      	adds	r3, #1
 801b53c:	673b      	str	r3, [r7, #112]	; 0x70
 801b53e:	e7e4      	b.n	801b50a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801b540:	f000 f9ed 	bl	801b91e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801b544:	4603      	mov	r3, r0
 801b546:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801b548:	2300      	movs	r3, #0
 801b54a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b54c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b550:	429a      	cmp	r2, r3
 801b552:	da2f      	bge.n	801b5b4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801b554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b556:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b558:	fb03 f202 	mul.w	r2, r3, r2
 801b55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b55e:	4413      	add	r3, r2
 801b560:	461a      	mov	r2, r3
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	4413      	add	r3, r2
 801b566:	781b      	ldrb	r3, [r3, #0]
 801b568:	461a      	mov	r2, r3
 801b56a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801b56e:	1ad3      	subs	r3, r2, r3
 801b570:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801b572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b576:	429a      	cmp	r2, r3
 801b578:	db18      	blt.n	801b5ac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801b57a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b57c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801b57e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b580:	f7fc fb91 	bl	8017ca6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801b584:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801b586:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801b588:	f000 f9d1 	bl	801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801b58c:	4603      	mov	r3, r0
 801b58e:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801b590:	69f8      	ldr	r0, [r7, #28]
 801b592:	f000 f9fb 	bl	801b98c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801b596:	4603      	mov	r3, r0
 801b598:	4618      	mov	r0, r3
 801b59a:	f000 fb3f 	bl	801bc1c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801b59e:	4603      	mov	r3, r0
 801b5a0:	4619      	mov	r1, r3
 801b5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b5a4:	f000 f9d4 	bl	801b950 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801b5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5ae:	3301      	adds	r3, #1
 801b5b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b5b2:	e7cb      	b.n	801b54c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801b5b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f000 fb49 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801b5be:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b5c6:	210c      	movs	r1, #12
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	f7fc fb7f 	bl	8017ccc <_ZN6tflite13GetReciprocalEliPi>
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f7fc fbb8 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801b5da:	2300      	movs	r3, #0
 801b5dc:	66bb      	str	r3, [r7, #104]	; 0x68
 801b5de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5e2:	429a      	cmp	r2, r3
 801b5e4:	da75      	bge.n	801b6d2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801b5e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b5e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b5ea:	fb03 f202 	mul.w	r2, r3, r2
 801b5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b5f0:	4413      	add	r3, r2
 801b5f2:	461a      	mov	r2, r3
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	4413      	add	r3, r2
 801b5f8:	781b      	ldrb	r3, [r3, #0]
 801b5fa:	461a      	mov	r2, r3
 801b5fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801b600:	1ad3      	subs	r3, r2, r3
 801b602:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801b604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b608:	429a      	cmp	r2, r3
 801b60a:	db50      	blt.n	801b6ae <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801b60c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b60e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801b610:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b612:	f7fc fb48 	bl	8017ca6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801b616:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801b618:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b61a:	f000 f988 	bl	801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801b61e:	4603      	mov	r3, r0
 801b620:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801b622:	69b8      	ldr	r0, [r7, #24]
 801b624:	f000 f9b2 	bl	801b98c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801b628:	4603      	mov	r3, r0
 801b62a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801b62c:	6979      	ldr	r1, [r7, #20]
 801b62e:	6a38      	ldr	r0, [r7, #32]
 801b630:	f7fd fe30 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801b634:	4603      	mov	r3, r0
 801b636:	633b      	str	r3, [r7, #48]	; 0x30
 801b638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b63c:	4618      	mov	r0, r3
 801b63e:	f7fc fbf3 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801b642:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801b644:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801b646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b648:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801b64a:	4611      	mov	r1, r2
 801b64c:	4618      	mov	r0, r3
 801b64e:	f7fa fa93 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801b652:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801b654:	f7f8 ffda 	bl	801460c <_ZNSt14numeric_limitsIhE3minEv>
 801b658:	4603      	mov	r3, r0
 801b65a:	461a      	mov	r2, r3
            unsat_output +
 801b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b65e:	4413      	add	r3, r2
        const int32_t shifted_output =
 801b660:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801b662:	f7f8 ffdb 	bl	801461c <_ZNSt14numeric_limitsIhE3maxEv>
 801b666:	4603      	mov	r3, r0
 801b668:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801b66a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801b66e:	f107 0310 	add.w	r3, r7, #16
 801b672:	4611      	mov	r1, r2
 801b674:	4618      	mov	r0, r3
 801b676:	f7f9 fc8b 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 801b67a:	4604      	mov	r4, r0
 801b67c:	f7f8 ffc6 	bl	801460c <_ZNSt14numeric_limitsIhE3minEv>
 801b680:	4603      	mov	r3, r0
 801b682:	63bb      	str	r3, [r7, #56]	; 0x38
 801b684:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b688:	4619      	mov	r1, r3
 801b68a:	4620      	mov	r0, r4
 801b68c:	f7f9 fc94 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 801b690:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801b692:	6819      	ldr	r1, [r3, #0]
 801b694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b696:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b698:	fb03 f202 	mul.w	r2, r3, r2
 801b69c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b69e:	4413      	add	r3, r2
 801b6a0:	461a      	mov	r2, r3
 801b6a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b6a6:	4413      	add	r3, r2
 801b6a8:	b2ca      	uxtb	r2, r1
 801b6aa:	701a      	strb	r2, [r3, #0]
 801b6ac:	e00d      	b.n	801b6ca <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801b6ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b6b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b6b2:	fb03 f202 	mul.w	r2, r3, r2
 801b6b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b6b8:	4413      	add	r3, r2
 801b6ba:	461a      	mov	r2, r3
 801b6bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b6c0:	189c      	adds	r4, r3, r2
 801b6c2:	f7f8 ffa3 	bl	801460c <_ZNSt14numeric_limitsIhE3minEv>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801b6ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b6cc:	3301      	adds	r3, #1
 801b6ce:	66bb      	str	r3, [r7, #104]	; 0x68
 801b6d0:	e785      	b.n	801b5de <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801b6d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b6d4:	3301      	adds	r3, #1
 801b6d6:	677b      	str	r3, [r7, #116]	; 0x74
 801b6d8:	e70d      	b.n	801b4f6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801b6da:	bf00      	nop
 801b6dc:	377c      	adds	r7, #124	; 0x7c
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	bd90      	pop	{r4, r7, pc}

0801b6e2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801b6e2:	b590      	push	{r4, r7, lr}
 801b6e4:	b09f      	sub	sp, #124	; 0x7c
 801b6e6:	af00      	add	r7, sp, #0
 801b6e8:	60f8      	str	r0, [r7, #12]
 801b6ea:	60b9      	str	r1, [r7, #8]
 801b6ec:	607a      	str	r2, [r7, #4]
 801b6ee:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	689b      	ldr	r3, [r3, #8]
 801b6f4:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	68db      	ldr	r3, [r3, #12]
 801b6fa:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	699b      	ldr	r3, [r3, #24]
 801b700:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801b702:	68b8      	ldr	r0, [r7, #8]
 801b704:	f7f9 fca3 	bl	801504e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b708:	4603      	mov	r3, r0
 801b70a:	3b01      	subs	r3, #1
 801b70c:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801b70e:	683a      	ldr	r2, [r7, #0]
 801b710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b712:	68b8      	ldr	r0, [r7, #8]
 801b714:	f7fd fcd3 	bl	80190be <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801b718:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801b71a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b71c:	683a      	ldr	r2, [r7, #0]
 801b71e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b720:	68b8      	ldr	r0, [r7, #8]
 801b722:	f7fa ff72 	bl	801660a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801b726:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801b728:	2300      	movs	r3, #0
 801b72a:	677b      	str	r3, [r7, #116]	; 0x74
 801b72c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b730:	429a      	cmp	r2, r3
 801b732:	f280 80f0 	bge.w	801b916 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801b736:	2380      	movs	r3, #128	; 0x80
 801b738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801b73c:	2300      	movs	r3, #0
 801b73e:	673b      	str	r3, [r7, #112]	; 0x70
 801b740:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b744:	429a      	cmp	r2, r3
 801b746:	da17      	bge.n	801b778 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801b748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b74a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b74c:	fb03 f202 	mul.w	r2, r3, r2
 801b750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b752:	4413      	add	r3, r2
 801b754:	461a      	mov	r2, r3
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	441a      	add	r2, r3
 801b75a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801b75e:	4611      	mov	r1, r2
 801b760:	4618      	mov	r0, r3
 801b762:	f000 fa80 	bl	801bc66 <_ZSt3maxIaERKT_S2_S2_>
 801b766:	4603      	mov	r3, r0
 801b768:	f993 3000 	ldrsb.w	r3, [r3]
 801b76c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801b770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b772:	3301      	adds	r3, #1
 801b774:	673b      	str	r3, [r7, #112]	; 0x70
 801b776:	e7e3      	b.n	801b740 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801b778:	f000 f8d1 	bl	801b91e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801b77c:	4603      	mov	r3, r0
 801b77e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801b780:	2300      	movs	r3, #0
 801b782:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b788:	429a      	cmp	r2, r3
 801b78a:	da30      	bge.n	801b7ee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801b78c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b78e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b790:	fb03 f202 	mul.w	r2, r3, r2
 801b794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b796:	4413      	add	r3, r2
 801b798:	461a      	mov	r2, r3
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	4413      	add	r3, r2
 801b79e:	f993 3000 	ldrsb.w	r3, [r3]
 801b7a2:	461a      	mov	r2, r3
 801b7a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801b7a8:	1ad3      	subs	r3, r2, r3
 801b7aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801b7ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b7ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	db18      	blt.n	801b7e6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801b7b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b7b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801b7b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b7ba:	f7fc fa74 	bl	8017ca6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801b7be:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801b7c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801b7c2:	f000 f8b4 	bl	801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801b7ca:	69f8      	ldr	r0, [r7, #28]
 801b7cc:	f000 f8de 	bl	801b98c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801b7d0:	4603      	mov	r3, r0
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	f000 fa22 	bl	801bc1c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	4619      	mov	r1, r3
 801b7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b7de:	f000 f8b7 	bl	801b950 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801b7e2:	4603      	mov	r3, r0
 801b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801b7e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b7e8:	3301      	adds	r3, #1
 801b7ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b7ec:	e7ca      	b.n	801b784 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801b7ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f000 fa2c 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801b7f8:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b800:	210c      	movs	r1, #12
 801b802:	4618      	mov	r0, r3
 801b804:	f7fc fa62 	bl	8017ccc <_ZN6tflite13GetReciprocalEliPi>
 801b808:	4603      	mov	r3, r0
 801b80a:	4618      	mov	r0, r3
 801b80c:	f7fc fa9b 	bl	8017d46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801b810:	4603      	mov	r3, r0
 801b812:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801b814:	2300      	movs	r3, #0
 801b816:	66bb      	str	r3, [r7, #104]	; 0x68
 801b818:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b81c:	429a      	cmp	r2, r3
 801b81e:	da76      	bge.n	801b90e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801b820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b824:	fb03 f202 	mul.w	r2, r3, r2
 801b828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b82a:	4413      	add	r3, r2
 801b82c:	461a      	mov	r2, r3
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	4413      	add	r3, r2
 801b832:	f993 3000 	ldrsb.w	r3, [r3]
 801b836:	461a      	mov	r2, r3
 801b838:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801b83c:	1ad3      	subs	r3, r2, r3
 801b83e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801b840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b844:	429a      	cmp	r2, r3
 801b846:	db50      	blt.n	801b8ea <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801b848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b84a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801b84c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b84e:	f7fc fa2a 	bl	8017ca6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801b852:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801b854:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b856:	f000 f86a 	bl	801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801b85a:	4603      	mov	r3, r0
 801b85c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801b85e:	69b8      	ldr	r0, [r7, #24]
 801b860:	f000 f894 	bl	801b98c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801b864:	4603      	mov	r3, r0
 801b866:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801b868:	6979      	ldr	r1, [r7, #20]
 801b86a:	6a38      	ldr	r0, [r7, #32]
 801b86c:	f7fd fd12 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801b870:	4603      	mov	r3, r0
 801b872:	633b      	str	r3, [r7, #48]	; 0x30
 801b874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b878:	4618      	mov	r0, r3
 801b87a:	f7fc fad5 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801b87e:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801b880:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801b882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b884:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801b886:	4611      	mov	r1, r2
 801b888:	4618      	mov	r0, r3
 801b88a:	f7fa f975 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801b88e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801b890:	f7f8 fecc 	bl	801462c <_ZNSt14numeric_limitsIsE3minEv>
 801b894:	4603      	mov	r3, r0
 801b896:	461a      	mov	r2, r3
            unsat_output +
 801b898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b89a:	4413      	add	r3, r2
        const int32_t shifted_output =
 801b89c:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801b89e:	f7f8 fecf 	bl	8014640 <_ZNSt14numeric_limitsIsE3maxEv>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801b8a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801b8aa:	f107 0310 	add.w	r3, r7, #16
 801b8ae:	4611      	mov	r1, r2
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f7f9 fb6d 	bl	8014f90 <_ZSt3minIlERKT_S2_S2_>
 801b8b6:	4604      	mov	r4, r0
 801b8b8:	f7f8 feb8 	bl	801462c <_ZNSt14numeric_limitsIsE3minEv>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	63bb      	str	r3, [r7, #56]	; 0x38
 801b8c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b8c4:	4619      	mov	r1, r3
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	f7f9 fb76 	bl	8014fb8 <_ZSt3maxIlERKT_S2_S2_>
 801b8cc:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801b8ce:	6819      	ldr	r1, [r3, #0]
 801b8d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b8d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b8d4:	fb03 f202 	mul.w	r2, r3, r2
 801b8d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b8da:	4413      	add	r3, r2
 801b8dc:	005b      	lsls	r3, r3, #1
 801b8de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b8e2:	4413      	add	r3, r2
 801b8e4:	b20a      	sxth	r2, r1
 801b8e6:	801a      	strh	r2, [r3, #0]
 801b8e8:	e00d      	b.n	801b906 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801b8ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b8ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b8ee:	fb03 f202 	mul.w	r2, r3, r2
 801b8f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b8f4:	4413      	add	r3, r2
 801b8f6:	005b      	lsls	r3, r3, #1
 801b8f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b8fc:	18d4      	adds	r4, r2, r3
 801b8fe:	f7f8 fe95 	bl	801462c <_ZNSt14numeric_limitsIsE3minEv>
 801b902:	4603      	mov	r3, r0
 801b904:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801b906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b908:	3301      	adds	r3, #1
 801b90a:	66bb      	str	r3, [r7, #104]	; 0x68
 801b90c:	e784      	b.n	801b818 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 801b90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b910:	3301      	adds	r3, #1
 801b912:	677b      	str	r3, [r7, #116]	; 0x74
 801b914:	e70a      	b.n	801b72c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801b916:	bf00      	nop
 801b918:	377c      	adds	r7, #124	; 0x7c
 801b91a:	46bd      	mov	sp, r7
 801b91c:	bd90      	pop	{r4, r7, pc}

0801b91e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801b91e:	b580      	push	{r7, lr}
 801b920:	af00      	add	r7, sp, #0
 801b922:	2000      	movs	r0, #0
 801b924:	f000 f9b5 	bl	801bc92 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801b928:	4603      	mov	r3, r0
 801b92a:	4618      	mov	r0, r3
 801b92c:	bd80      	pop	{r7, pc}

0801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801b92e:	b580      	push	{r7, lr}
 801b930:	b084      	sub	sp, #16
 801b932:	af00      	add	r7, sp, #0
 801b934:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801b936:	f107 030c 	add.w	r3, r7, #12
 801b93a:	4618      	mov	r0, r3
 801b93c:	f000 f9bd 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801b940:	4602      	mov	r2, r0
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	6013      	str	r3, [r2, #0]
    return retval;
 801b946:	68fb      	ldr	r3, [r7, #12]
  }
 801b948:	4618      	mov	r0, r3
 801b94a:	3710      	adds	r7, #16
 801b94c:	46bd      	mov	sp, r7
 801b94e:	bd80      	pop	{r7, pc}

0801b950 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801b950:	b590      	push	{r4, r7, lr}
 801b952:	b083      	sub	sp, #12
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
 801b958:	6039      	str	r1, [r7, #0]
 801b95a:	1d3b      	adds	r3, r7, #4
 801b95c:	4618      	mov	r0, r3
 801b95e:	f000 f977 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801b962:	4603      	mov	r3, r0
 801b964:	681c      	ldr	r4, [r3, #0]
 801b966:	463b      	mov	r3, r7
 801b968:	4618      	mov	r0, r3
 801b96a:	f000 f971 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801b96e:	4603      	mov	r3, r0
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	4619      	mov	r1, r3
 801b974:	4620      	mov	r0, r4
 801b976:	f7fa fcff 	bl	8016378 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b97a:	4603      	mov	r3, r0
 801b97c:	4618      	mov	r0, r3
 801b97e:	f000 f9a7 	bl	801bcd0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801b982:	4603      	mov	r3, r0
 801b984:	4618      	mov	r0, r3
 801b986:	370c      	adds	r7, #12
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd90      	pop	{r4, r7, pc}

0801b98c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801b98c:	b590      	push	{r4, r7, lr}
 801b98e:	b091      	sub	sp, #68	; 0x44
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801b994:	f000 f9ad 	bl	801bcf2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801b998:	4603      	mov	r3, r0
 801b99a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801b99c:	2001      	movs	r0, #1
 801b99e:	f000 f9b1 	bl	801bd04 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	4619      	mov	r1, r3
 801b9a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b9a8:	f000 f9c0 	bl	801bd2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801b9ac:	4603      	mov	r3, r0
 801b9ae:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801b9b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b9b2:	6878      	ldr	r0, [r7, #4]
 801b9b4:	f000 f9d8 	bl	801bd68 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b9bc:	4618      	mov	r0, r3
 801b9be:	f000 f9b5 	bl	801bd2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801b9c2:	4603      	mov	r3, r0
 801b9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801b9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b9c8:	f000 f9ec 	bl	801bda4 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	f7fd fbfe 	bl	80191d0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801b9d4:	4603      	mov	r3, r0
 801b9d6:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801b9d8:	6879      	ldr	r1, [r7, #4]
 801b9da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b9dc:	f000 f9a6 	bl	801bd2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	63bb      	str	r3, [r7, #56]	; 0x38
 801b9e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f000 f966 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801b9ee:	4603      	mov	r3, r0
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801b9f4:	4883      	ldr	r0, [pc, #524]	; (801bc04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801b9f6:	f7fd fb91 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7fc fa1e 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ba02:	4603      	mov	r3, r0
 801ba04:	627b      	str	r3, [r7, #36]	; 0x24
 801ba06:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801ba0a:	f7fa fc79 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	4619      	mov	r1, r3
 801ba12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ba14:	f7fa fc7f 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ba18:	4603      	mov	r3, r0
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	f7fa fcce 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ba20:	4604      	mov	r4, r0
 801ba22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ba24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ba26:	f7fd fc35 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba2e:	4619      	mov	r1, r3
 801ba30:	4620      	mov	r0, r4
 801ba32:	f7fd fb99 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ba36:	4603      	mov	r3, r0
 801ba38:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801ba3a:	4873      	ldr	r0, [pc, #460]	; (801bc08 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801ba3c:	f7fd fb6e 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ba40:	4603      	mov	r3, r0
 801ba42:	4618      	mov	r0, r3
 801ba44:	f7fc f9fb 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ba48:	4603      	mov	r3, r0
 801ba4a:	623b      	str	r3, [r7, #32]
 801ba4c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801ba50:	f7fa fc56 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ba54:	4603      	mov	r3, r0
 801ba56:	4619      	mov	r1, r3
 801ba58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ba5a:	f7fa fc5c 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ba5e:	4603      	mov	r3, r0
 801ba60:	4618      	mov	r0, r3
 801ba62:	f7fa fcab 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ba66:	4604      	mov	r4, r0
 801ba68:	6a39      	ldr	r1, [r7, #32]
 801ba6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ba6c:	f7fd fc12 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ba70:	4603      	mov	r3, r0
 801ba72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba74:	4619      	mov	r1, r3
 801ba76:	4620      	mov	r0, r4
 801ba78:	f7fd fb76 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801ba80:	4862      	ldr	r0, [pc, #392]	; (801bc0c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801ba82:	f7fd fb4b 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ba86:	4603      	mov	r3, r0
 801ba88:	4618      	mov	r0, r3
 801ba8a:	f7fc f9d8 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ba8e:	4603      	mov	r3, r0
 801ba90:	61fb      	str	r3, [r7, #28]
 801ba92:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801ba96:	f7fa fc33 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	4619      	mov	r1, r3
 801ba9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801baa0:	f7fa fc39 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801baa4:	4603      	mov	r3, r0
 801baa6:	4618      	mov	r0, r3
 801baa8:	f7fa fc88 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801baac:	4604      	mov	r4, r0
 801baae:	69f9      	ldr	r1, [r7, #28]
 801bab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bab2:	f7fd fbef 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bab6:	4603      	mov	r3, r0
 801bab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801baba:	4619      	mov	r1, r3
 801babc:	4620      	mov	r0, r4
 801babe:	f7fd fb53 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801bac2:	4603      	mov	r3, r0
 801bac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801bac6:	4852      	ldr	r0, [pc, #328]	; (801bc10 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801bac8:	f7fd fb28 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801bacc:	4603      	mov	r3, r0
 801bace:	4618      	mov	r0, r3
 801bad0:	f7fc f9b5 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801bad4:	4603      	mov	r3, r0
 801bad6:	61bb      	str	r3, [r7, #24]
 801bad8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801badc:	f7fa fc10 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bae0:	4603      	mov	r3, r0
 801bae2:	4619      	mov	r1, r3
 801bae4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bae6:	f7fa fc16 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801baea:	4603      	mov	r3, r0
 801baec:	4618      	mov	r0, r3
 801baee:	f7fa fc65 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801baf2:	4604      	mov	r4, r0
 801baf4:	69b9      	ldr	r1, [r7, #24]
 801baf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801baf8:	f7fd fbcc 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bafc:	4603      	mov	r3, r0
 801bafe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb00:	4619      	mov	r1, r3
 801bb02:	4620      	mov	r0, r4
 801bb04:	f7fd fb30 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801bb0c:	4841      	ldr	r0, [pc, #260]	; (801bc14 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801bb0e:	f7fd fb05 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801bb12:	4603      	mov	r3, r0
 801bb14:	4618      	mov	r0, r3
 801bb16:	f7fc f992 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	617b      	str	r3, [r7, #20]
 801bb1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801bb22:	f7fa fbed 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bb26:	4603      	mov	r3, r0
 801bb28:	4619      	mov	r1, r3
 801bb2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bb2c:	f7fa fbf3 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801bb30:	4603      	mov	r3, r0
 801bb32:	4618      	mov	r0, r3
 801bb34:	f7fa fc42 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bb38:	4604      	mov	r4, r0
 801bb3a:	6979      	ldr	r1, [r7, #20]
 801bb3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bb3e:	f7fd fba9 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bb42:	4603      	mov	r3, r0
 801bb44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb46:	4619      	mov	r1, r3
 801bb48:	4620      	mov	r0, r4
 801bb4a:	f7fd fb0d 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801bb4e:	4603      	mov	r3, r0
 801bb50:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801bb52:	4831      	ldr	r0, [pc, #196]	; (801bc18 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801bb54:	f7fd fae2 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	4618      	mov	r0, r3
 801bb5c:	f7fc f96f 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801bb60:	4603      	mov	r3, r0
 801bb62:	613b      	str	r3, [r7, #16]
 801bb64:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801bb68:	f7fa fbca 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bb6c:	4603      	mov	r3, r0
 801bb6e:	4619      	mov	r1, r3
 801bb70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bb72:	f7fa fbd0 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801bb76:	4603      	mov	r3, r0
 801bb78:	4618      	mov	r0, r3
 801bb7a:	f7fa fc1f 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bb7e:	4604      	mov	r4, r0
 801bb80:	6939      	ldr	r1, [r7, #16]
 801bb82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bb84:	f7fd fb86 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bb88:	4603      	mov	r3, r0
 801bb8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb8c:	4619      	mov	r1, r3
 801bb8e:	4620      	mov	r0, r4
 801bb90:	f7fd faea 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801bb94:	4603      	mov	r3, r0
 801bb96:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801bb98:	20f2      	movs	r0, #242	; 0xf2
 801bb9a:	f7fd fabf 	bl	801911c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801bb9e:	4603      	mov	r3, r0
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7fc f94c 	bl	8017e3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801bba6:	4603      	mov	r3, r0
 801bba8:	60fb      	str	r3, [r7, #12]
 801bbaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801bbae:	f7fa fba7 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bbb2:	4603      	mov	r3, r0
 801bbb4:	4619      	mov	r1, r3
 801bbb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bbb8:	f7fa fbad 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	4618      	mov	r0, r3
 801bbc0:	f7fa fbfc 	bl	80163bc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bbc4:	4604      	mov	r4, r0
 801bbc6:	68f9      	ldr	r1, [r7, #12]
 801bbc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bbca:	f7fd fb63 	bl	8019294 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bbce:	4603      	mov	r3, r0
 801bbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bbd2:	4619      	mov	r1, r3
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f7fd fac7 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801bbda:	4603      	mov	r3, r0
 801bbdc:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801bbde:	6878      	ldr	r0, [r7, #4]
 801bbe0:	f000 f8fa 	bl	801bdd8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801bbe4:	4604      	mov	r4, r0
 801bbe6:	f7fc f93e 	bl	8017e66 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801bbea:	4603      	mov	r3, r0
 801bbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bbee:	4619      	mov	r1, r3
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	f7fd fab9 	bl	8019168 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801bbf6:	4603      	mov	r3, r0
 801bbf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	3744      	adds	r7, #68	; 0x44
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd90      	pop	{r4, r7, pc}
 801bc04:	63afbe7b 	.word	0x63afbe7b
 801bc08:	4da2cbf2 	.word	0x4da2cbf2
 801bc0c:	2f16ac6c 	.word	0x2f16ac6c
 801bc10:	1152aaa4 	.word	0x1152aaa4
 801bc14:	02582ab7 	.word	0x02582ab7
 801bc18:	000afe11 	.word	0x000afe11

0801bc1c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801bc1c:	b5b0      	push	{r4, r5, r7, lr}
 801bc1e:	b084      	sub	sp, #16
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801bc24:	1d3b      	adds	r3, r7, #4
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7fc f8fe 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	681d      	ldr	r5, [r3, #0]
 801bc30:	f107 030c 	add.w	r3, r7, #12
 801bc34:	4618      	mov	r0, r3
 801bc36:	f000 f80b 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801bc3a:	4604      	mov	r4, r0
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	f000 f8dd 	bl	801bdfc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801bc42:	4603      	mov	r3, r0
 801bc44:	6023      	str	r3, [r4, #0]
  return result;
 801bc46:	68fb      	ldr	r3, [r7, #12]
}
 801bc48:	4618      	mov	r0, r3
 801bc4a:	3710      	adds	r7, #16
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bdb0      	pop	{r4, r5, r7, pc}

0801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801bc50:	b480      	push	{r7}
 801bc52:	b083      	sub	sp, #12
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	6078      	str	r0, [r7, #4]
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	370c      	adds	r7, #12
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc64:	4770      	bx	lr

0801bc66 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801bc66:	b480      	push	{r7}
 801bc68:	b083      	sub	sp, #12
 801bc6a:	af00      	add	r7, sp, #0
 801bc6c:	6078      	str	r0, [r7, #4]
 801bc6e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	f993 2000 	ldrsb.w	r2, [r3]
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	f993 3000 	ldrsb.w	r3, [r3]
 801bc7c:	429a      	cmp	r2, r3
 801bc7e:	da01      	bge.n	801bc84 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	e000      	b.n	801bc86 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 801bc84:	687b      	ldr	r3, [r7, #4]
    }
 801bc86:	4618      	mov	r0, r3
 801bc88:	370c      	adds	r7, #12
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc90:	4770      	bx	lr

0801bc92 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801bc92:	b590      	push	{r4, r7, lr}
 801bc94:	b085      	sub	sp, #20
 801bc96:	af00      	add	r7, sp, #0
 801bc98:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801bc9a:	f107 030c 	add.w	r3, r7, #12
 801bc9e:	4618      	mov	r0, r3
 801bca0:	f7ff ffd6 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801bca4:	4604      	mov	r4, r0
 801bca6:	6878      	ldr	r0, [r7, #4]
 801bca8:	f7fa fb2a 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bcac:	4603      	mov	r3, r0
 801bcae:	6023      	str	r3, [r4, #0]
    return retval;
 801bcb0:	68fb      	ldr	r3, [r7, #12]
  }
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	3714      	adds	r7, #20
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd90      	pop	{r4, r7, pc}

0801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801bcba:	b480      	push	{r7}
 801bcbc:	b083      	sub	sp, #12
 801bcbe:	af00      	add	r7, sp, #0
 801bcc0:	6078      	str	r0, [r7, #4]
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	370c      	adds	r7, #12
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcce:	4770      	bx	lr

0801bcd0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b084      	sub	sp, #16
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801bcd8:	f107 030c 	add.w	r3, r7, #12
 801bcdc:	4618      	mov	r0, r3
 801bcde:	f7ff ffb7 	bl	801bc50 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801bce2:	4602      	mov	r2, r0
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	6013      	str	r3, [r2, #0]
    return retval;
 801bce8:	68fb      	ldr	r3, [r7, #12]
  }
 801bcea:	4618      	mov	r0, r3
 801bcec:	3710      	adds	r7, #16
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}

0801bcf2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801bcf2:	b580      	push	{r7, lr}
 801bcf4:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801bcf6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801bcfa:	f000 f803 	bl	801bd04 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801bcfe:	4603      	mov	r3, r0
  }
 801bd00:	4618      	mov	r0, r3
 801bd02:	bd80      	pop	{r7, pc}

0801bd04 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801bd04:	b590      	push	{r4, r7, lr}
 801bd06:	b085      	sub	sp, #20
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801bd0c:	f107 030c 	add.w	r3, r7, #12
 801bd10:	4618      	mov	r0, r3
 801bd12:	f7ff ffd2 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bd16:	4604      	mov	r4, r0
 801bd18:	6878      	ldr	r0, [r7, #4]
 801bd1a:	f7fa faf1 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bd1e:	4603      	mov	r3, r0
 801bd20:	6023      	str	r3, [r4, #0]
    return retval;
 801bd22:	68fb      	ldr	r3, [r7, #12]
  }
 801bd24:	4618      	mov	r0, r3
 801bd26:	3714      	adds	r7, #20
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	bd90      	pop	{r4, r7, pc}

0801bd2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801bd2c:	b590      	push	{r4, r7, lr}
 801bd2e:	b083      	sub	sp, #12
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]
 801bd34:	6039      	str	r1, [r7, #0]
 801bd36:	1d3b      	adds	r3, r7, #4
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7ff ffbe 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	681c      	ldr	r4, [r3, #0]
 801bd42:	463b      	mov	r3, r7
 801bd44:	4618      	mov	r0, r3
 801bd46:	f7ff ffb8 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	4619      	mov	r1, r3
 801bd50:	4620      	mov	r0, r4
 801bd52:	f7fc f9a5 	bl	80180a0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801bd56:	4603      	mov	r3, r0
 801bd58:	4618      	mov	r0, r3
 801bd5a:	f7ff fde8 	bl	801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801bd5e:	4603      	mov	r3, r0
 801bd60:	4618      	mov	r0, r3
 801bd62:	370c      	adds	r7, #12
 801bd64:	46bd      	mov	sp, r7
 801bd66:	bd90      	pop	{r4, r7, pc}

0801bd68 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801bd68:	b590      	push	{r4, r7, lr}
 801bd6a:	b083      	sub	sp, #12
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
 801bd70:	6039      	str	r1, [r7, #0]
 801bd72:	1d3b      	adds	r3, r7, #4
 801bd74:	4618      	mov	r0, r3
 801bd76:	f7ff ffa0 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	681c      	ldr	r4, [r3, #0]
 801bd7e:	463b      	mov	r3, r7
 801bd80:	4618      	mov	r0, r3
 801bd82:	f7ff ff9a 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bd86:	4603      	mov	r3, r0
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	4619      	mov	r1, r3
 801bd8c:	4620      	mov	r0, r4
 801bd8e:	f7fa fac2 	bl	8016316 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801bd92:	4603      	mov	r3, r0
 801bd94:	4618      	mov	r0, r3
 801bd96:	f7ff fdca 	bl	801b92e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	370c      	adds	r7, #12
 801bda0:	46bd      	mov	sp, r7
 801bda2:	bd90      	pop	{r4, r7, pc}

0801bda4 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801bda4:	b5b0      	push	{r4, r5, r7, lr}
 801bda6:	b084      	sub	sp, #16
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801bdac:	1d3b      	adds	r3, r7, #4
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f7ff ff83 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	681d      	ldr	r5, [r3, #0]
 801bdb8:	f107 030c 	add.w	r3, r7, #12
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	f7fc f833 	bl	8017e28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bdc2:	4604      	mov	r4, r0
 801bdc4:	4628      	mov	r0, r5
 801bdc6:	f000 f825 	bl	801be14 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801bdca:	4603      	mov	r3, r0
 801bdcc:	6023      	str	r3, [r4, #0]
  return result;
 801bdce:	68fb      	ldr	r3, [r7, #12]
}
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	3710      	adds	r7, #16
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	bdb0      	pop	{r4, r5, r7, pc}

0801bdd8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b082      	sub	sp, #8
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
 801bde0:	1d3b      	adds	r3, r7, #4
 801bde2:	4618      	mov	r0, r3
 801bde4:	f7ff ff69 	bl	801bcba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801bde8:	4603      	mov	r3, r0
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	4618      	mov	r0, r3
 801bdee:	f7fd f9dc 	bl	80191aa <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801bdf2:	4603      	mov	r3, r0
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	3708      	adds	r7, #8
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	bd80      	pop	{r7, pc}

0801bdfc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b082      	sub	sp, #8
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801be04:	6878      	ldr	r0, [r7, #4]
 801be06:	f000 f811 	bl	801be2c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801be0a:	4603      	mov	r3, r0
}
 801be0c:	4618      	mov	r0, r3
 801be0e:	3708      	adds	r7, #8
 801be10:	46bd      	mov	sp, r7
 801be12:	bd80      	pop	{r7, pc}

0801be14 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801be14:	b580      	push	{r7, lr}
 801be16:	b082      	sub	sp, #8
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801be1c:	6878      	ldr	r0, [r7, #4]
 801be1e:	f000 f813 	bl	801be48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801be22:	4603      	mov	r3, r0
}
 801be24:	4618      	mov	r0, r3
 801be26:	3708      	adds	r7, #8
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}

0801be2c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801be2c:	b580      	push	{r7, lr}
 801be2e:	b082      	sub	sp, #8
 801be30:	af00      	add	r7, sp, #0
 801be32:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801be34:	210c      	movs	r1, #12
 801be36:	6878      	ldr	r0, [r7, #4]
 801be38:	f7f9 fe9e 	bl	8015b78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801be3c:	4603      	mov	r3, r0
  }
 801be3e:	4618      	mov	r0, r3
 801be40:	3708      	adds	r7, #8
 801be42:	46bd      	mov	sp, r7
 801be44:	bd80      	pop	{r7, pc}
	...

0801be48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801be48:	b580      	push	{r7, lr}
 801be4a:	b08a      	sub	sp, #40	; 0x28
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801be50:	f7f9 fa0d 	bl	801526e <_ZNSt14numeric_limitsIlE3minEv>
 801be54:	4603      	mov	r3, r0
 801be56:	4618      	mov	r0, r3
 801be58:	f7fa fa52 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801be5c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801be5e:	f7f8 f9e9 	bl	8014234 <_ZNSt14numeric_limitsIlE3maxEv>
 801be62:	4603      	mov	r3, r0
 801be64:	4618      	mov	r0, r3
 801be66:	f7fa fa4b 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801be6a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801be6c:	2320      	movs	r3, #32
 801be6e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801be70:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801be74:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801be76:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801be7a:	f7fa fa41 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801be7e:	4603      	mov	r3, r0
 801be80:	4619      	mov	r1, r3
 801be82:	6878      	ldr	r0, [r7, #4]
 801be84:	f7fa fa86 	bl	8016394 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801be88:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801be8a:	480f      	ldr	r0, [pc, #60]	; (801bec8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801be8c:	f7fa fa38 	bl	8016300 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801be90:	4603      	mov	r3, r0
 801be92:	4619      	mov	r1, r3
 801be94:	6878      	ldr	r0, [r7, #4]
 801be96:	f7fa fa5b 	bl	8016350 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801be9a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801be9c:	2105      	movs	r1, #5
 801be9e:	6878      	ldr	r0, [r7, #4]
 801bea0:	f7fc f9e2 	bl	8018268 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801bea4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801bea6:	68fa      	ldr	r2, [r7, #12]
 801bea8:	6a39      	ldr	r1, [r7, #32]
 801beaa:	6978      	ldr	r0, [r7, #20]
 801beac:	f7fc fa20 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801beb0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801beb2:	68fa      	ldr	r2, [r7, #12]
 801beb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801beb6:	6938      	ldr	r0, [r7, #16]
 801beb8:	f7fc fa1a 	bl	80182f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801bebc:	60f8      	str	r0, [r7, #12]
    return result;
 801bebe:	68fb      	ldr	r3, [r7, #12]
  }
 801bec0:	4618      	mov	r0, r3
 801bec2:	3728      	adds	r7, #40	; 0x28
 801bec4:	46bd      	mov	sp, r7
 801bec6:	bd80      	pop	{r7, pc}
 801bec8:	fc000001 	.word	0xfc000001

0801becc <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801becc:	b580      	push	{r7, lr}
 801bece:	ed2d 8b02 	vpush	{d8}
 801bed2:	b094      	sub	sp, #80	; 0x50
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	6178      	str	r0, [r7, #20]
 801bed8:	ed87 0a04 	vstr	s0, [r7, #16]
 801bedc:	edc7 0a03 	vstr	s1, [r7, #12]
 801bee0:	60b9      	str	r1, [r7, #8]
 801bee2:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801bee4:	ed97 7a03 	vldr	s14, [r7, #12]
 801bee8:	edd7 7a04 	vldr	s15, [r7, #16]
 801beec:	ee77 6a67 	vsub.f32	s13, s14, s15
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	3b01      	subs	r3, #1
 801bef4:	ee07 3a90 	vmov	s15, r3
 801bef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801befc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bf00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801bf04:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801bf08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801bf0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801bf10:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801bf14:	2300      	movs	r3, #0
 801bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	3b01      	subs	r3, #1
 801bf1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bf1e:	429a      	cmp	r2, r3
 801bf20:	f280 80c0 	bge.w	801c0a4 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801bf24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf26:	ee07 3a90 	vmov	s15, r3
 801bf2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bf2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801bf32:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bf36:	edd7 7a04 	vldr	s15, [r7, #16]
 801bf3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bf3e:	697b      	ldr	r3, [r7, #20]
 801bf40:	eeb0 0a67 	vmov.f32	s0, s15
 801bf44:	4798      	blx	r3
 801bf46:	eef0 7a40 	vmov.f32	s15, s0
 801bf4a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801c11c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801bf4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bf52:	eeb0 0a67 	vmov.f32	s0, s15
 801bf56:	f7f8 fb38 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801bf5a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801bf5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf60:	3301      	adds	r3, #1
 801bf62:	ee07 3a90 	vmov	s15, r3
 801bf66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bf6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801bf6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bf72:	edd7 7a04 	vldr	s15, [r7, #16]
 801bf76:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	eeb0 0a67 	vmov.f32	s0, s15
 801bf80:	4798      	blx	r3
 801bf82:	eef0 7a40 	vmov.f32	s15, s0
 801bf86:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801c11c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801bf8a:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801bf8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf90:	ee07 3a90 	vmov	s15, r3
 801bf94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bf98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801bf9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bfa0:	edd7 7a04 	vldr	s15, [r7, #16]
 801bfa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	eeb0 0a67 	vmov.f32	s0, s15
 801bfae:	4798      	blx	r3
 801bfb0:	eef0 7a40 	vmov.f32	s15, s0
 801bfb4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801c11c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801bfb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bfbc:	eeb0 0a67 	vmov.f32	s0, s15
 801bfc0:	f7f8 fb03 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801bfc4:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801bfc8:	ee78 7a27 	vadd.f32	s15, s16, s15
 801bfcc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801bfd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801bfd4:	eeb0 0a47 	vmov.f32	s0, s14
 801bfd8:	f7f8 faf7 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801bfdc:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801bfe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfe2:	ee07 3a90 	vmov	s15, r3
 801bfe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bfea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801bfee:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bff2:	edd7 7a04 	vldr	s15, [r7, #16]
 801bff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bffa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801bffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c002:	697b      	ldr	r3, [r7, #20]
 801c004:	eeb0 0a67 	vmov.f32	s0, s15
 801c008:	4798      	blx	r3
 801c00a:	eef0 7a40 	vmov.f32	s15, s0
 801c00e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801c11c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801c012:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c016:	eeb0 0a67 	vmov.f32	s0, s15
 801c01a:	f7f8 fad6 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801c01e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801c022:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801c026:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c02a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c02e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801c032:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801c036:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c03a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c03e:	eeb0 0a47 	vmov.f32	s0, s14
 801c042:	f7f8 fac2 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801c046:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801c04a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801c04e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801c052:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c056:	edc7 7a06 	vstr	s15, [r7, #24]
 801c05a:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801c05e:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801c060:	f107 021c 	add.w	r2, r7, #28
 801c064:	f107 0318 	add.w	r3, r7, #24
 801c068:	4611      	mov	r1, r2
 801c06a:	4618      	mov	r0, r3
 801c06c:	f7f8 fa80 	bl	8014570 <_ZSt3maxIfERKT_S2_S2_>
 801c070:	4602      	mov	r2, r0
 801c072:	4b2b      	ldr	r3, [pc, #172]	; (801c120 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801c074:	623b      	str	r3, [r7, #32]
 801c076:	f107 0320 	add.w	r3, r7, #32
 801c07a:	4619      	mov	r1, r3
 801c07c:	4610      	mov	r0, r2
 801c07e:	f7f8 fa5e 	bl	801453e <_ZSt3minIfERKT_S2_S2_>
 801c082:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801c084:	edd3 7a00 	vldr	s15, [r3]
 801c088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c08a:	005b      	lsls	r3, r3, #1
 801c08c:	68ba      	ldr	r2, [r7, #8]
 801c08e:	4413      	add	r3, r2
 801c090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c094:	ee17 2a90 	vmov	r2, s15
 801c098:	b212      	sxth	r2, r2
 801c09a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801c09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c09e:	3301      	adds	r3, #1
 801c0a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c0a2:	e739      	b.n	801bf18 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801c0a4:	697b      	ldr	r3, [r7, #20]
 801c0a6:	ed97 0a03 	vldr	s0, [r7, #12]
 801c0aa:	4798      	blx	r3
 801c0ac:	eef0 7a40 	vmov.f32	s15, s0
 801c0b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801c11c <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801c0b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c0b8:	eeb0 0a67 	vmov.f32	s0, s15
 801c0bc:	f7f8 fa85 	bl	80145ca <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801c0c0:	eef0 7a40 	vmov.f32	s15, s0
 801c0c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801c0c8:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801c0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 801c0ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c0d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c0d6:	4611      	mov	r1, r2
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7f8 fa49 	bl	8014570 <_ZSt3maxIfERKT_S2_S2_>
 801c0de:	4602      	mov	r2, r0
 801c0e0:	4b0f      	ldr	r3, [pc, #60]	; (801c120 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801c0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c0e8:	4619      	mov	r1, r3
 801c0ea:	4610      	mov	r0, r2
 801c0ec:	f7f8 fa27 	bl	801453e <_ZSt3minIfERKT_S2_S2_>
 801c0f0:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801c0f2:	edd3 7a00 	vldr	s15, [r3]
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c0fc:	3b01      	subs	r3, #1
 801c0fe:	005b      	lsls	r3, r3, #1
 801c100:	68ba      	ldr	r2, [r7, #8]
 801c102:	4413      	add	r3, r2
 801c104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c108:	ee17 2a90 	vmov	r2, s15
 801c10c:	b212      	sxth	r2, r2
 801c10e:	801a      	strh	r2, [r3, #0]
}
 801c110:	bf00      	nop
 801c112:	3750      	adds	r7, #80	; 0x50
 801c114:	46bd      	mov	sp, r7
 801c116:	ecbd 8b02 	vpop	{d8}
 801c11a:	bd80      	pop	{r7, pc}
 801c11c:	47000000 	.word	0x47000000
 801c120:	46fffe00 	.word	0x46fffe00
 801c124:	00000000 	.word	0x00000000

0801c128 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801c128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c12c:	b090      	sub	sp, #64	; 0x40
 801c12e:	af06      	add	r7, sp, #24
 801c130:	60f8      	str	r0, [r7, #12]
 801c132:	60b9      	str	r1, [r7, #8]
 801c134:	607a      	str	r2, [r7, #4]
 801c136:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	781b      	ldrb	r3, [r3, #0]
 801c13c:	2b09      	cmp	r3, #9
 801c13e:	d004      	beq.n	801c14a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	781b      	ldrb	r3, [r3, #0]
 801c144:	2b07      	cmp	r3, #7
 801c146:	f040 81b6 	bne.w	801c4b6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	781b      	ldrb	r3, [r3, #0]
 801c14e:	2b07      	cmp	r3, #7
 801c150:	d156      	bne.n	801c200 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	691b      	ldr	r3, [r3, #16]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d011      	beq.n	801c17e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	695c      	ldr	r4, [r3, #20]
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	691b      	ldr	r3, [r3, #16]
 801c162:	2200      	movs	r2, #0
 801c164:	9203      	str	r2, [sp, #12]
 801c166:	9302      	str	r3, [sp, #8]
 801c168:	4ba1      	ldr	r3, [pc, #644]	; (801c3f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801c16a:	9301      	str	r3, [sp, #4]
 801c16c:	4ba1      	ldr	r3, [pc, #644]	; (801c3f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801c16e:	9300      	str	r3, [sp, #0]
 801c170:	2325      	movs	r3, #37	; 0x25
 801c172:	4aa1      	ldr	r2, [pc, #644]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c174:	49a1      	ldr	r1, [pc, #644]	; (801c3fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801c176:	68f8      	ldr	r0, [r7, #12]
 801c178:	47a0      	blx	r4
 801c17a:	2301      	movs	r3, #1
 801c17c:	e1e0      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	edd3 7a03 	vldr	s15, [r3, #12]
 801c184:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801c400 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801c188:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c190:	dd07      	ble.n	801c1a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	edd3 7a03 	vldr	s15, [r3, #12]
 801c198:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801c400 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801c19c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c1a0:	e006      	b.n	801c1b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	edd3 7a03 	vldr	s15, [r3, #12]
 801c1a8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801c400 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801c1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c1b0:	edc7 7a08 	vstr	s15, [r7, #32]
 801c1b4:	edd7 7a08 	vldr	s15, [r7, #32]
 801c1b8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801c404 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801c1bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1c4:	f340 80dd 	ble.w	801c382 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	695c      	ldr	r4, [r3, #20]
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	68db      	ldr	r3, [r3, #12]
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	f7e4 f9e3 	bl	800059c <__aeabi_f2d>
 801c1d6:	4602      	mov	r2, r0
 801c1d8:	460b      	mov	r3, r1
 801c1da:	f04f 0000 	mov.w	r0, #0
 801c1de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801c1e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c1e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c1ea:	4b87      	ldr	r3, [pc, #540]	; (801c408 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801c1ec:	9301      	str	r3, [sp, #4]
 801c1ee:	4b87      	ldr	r3, [pc, #540]	; (801c40c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801c1f0:	9300      	str	r3, [sp, #0]
 801c1f2:	2326      	movs	r3, #38	; 0x26
 801c1f4:	4a80      	ldr	r2, [pc, #512]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c1f6:	4986      	ldr	r1, [pc, #536]	; (801c410 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801c1f8:	68f8      	ldr	r0, [r7, #12]
 801c1fa:	47a0      	blx	r4
 801c1fc:	2301      	movs	r3, #1
 801c1fe:	e19f      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801c200:	68bb      	ldr	r3, [r7, #8]
 801c202:	781b      	ldrb	r3, [r3, #0]
 801c204:	2b09      	cmp	r3, #9
 801c206:	d018      	beq.n	801c23a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	695c      	ldr	r4, [r3, #20]
 801c20c:	68bb      	ldr	r3, [r7, #8]
 801c20e:	781b      	ldrb	r3, [r3, #0]
 801c210:	4618      	mov	r0, r3
 801c212:	f7f7 ff93 	bl	801413c <TfLiteTypeGetName>
 801c216:	4605      	mov	r5, r0
 801c218:	2009      	movs	r0, #9
 801c21a:	f7f7 ff8f 	bl	801413c <TfLiteTypeGetName>
 801c21e:	4603      	mov	r3, r0
 801c220:	9303      	str	r3, [sp, #12]
 801c222:	9502      	str	r5, [sp, #8]
 801c224:	4b7b      	ldr	r3, [pc, #492]	; (801c414 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801c226:	9301      	str	r3, [sp, #4]
 801c228:	4b7b      	ldr	r3, [pc, #492]	; (801c418 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801c22a:	9300      	str	r3, [sp, #0]
 801c22c:	2329      	movs	r3, #41	; 0x29
 801c22e:	4a72      	ldr	r2, [pc, #456]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c230:	497a      	ldr	r1, [pc, #488]	; (801c41c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801c232:	68f8      	ldr	r0, [r7, #12]
 801c234:	47a0      	blx	r4
 801c236:	2301      	movs	r3, #1
 801c238:	e182      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	781b      	ldrb	r3, [r3, #0]
 801c23e:	2b07      	cmp	r3, #7
 801c240:	d155      	bne.n	801c2ee <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	691b      	ldr	r3, [r3, #16]
 801c246:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c24a:	d011      	beq.n	801c270 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	695c      	ldr	r4, [r3, #20]
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	691b      	ldr	r3, [r3, #16]
 801c254:	4a72      	ldr	r2, [pc, #456]	; (801c420 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801c256:	9203      	str	r2, [sp, #12]
 801c258:	9302      	str	r3, [sp, #8]
 801c25a:	4b72      	ldr	r3, [pc, #456]	; (801c424 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801c25c:	9301      	str	r3, [sp, #4]
 801c25e:	4b65      	ldr	r3, [pc, #404]	; (801c3f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801c260:	9300      	str	r3, [sp, #0]
 801c262:	232b      	movs	r3, #43	; 0x2b
 801c264:	4a64      	ldr	r2, [pc, #400]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c266:	4965      	ldr	r1, [pc, #404]	; (801c3fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801c268:	68f8      	ldr	r0, [r7, #12]
 801c26a:	47a0      	blx	r4
 801c26c:	2301      	movs	r3, #1
 801c26e:	e167      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	edd3 7a03 	vldr	s15, [r3, #12]
 801c276:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801c428 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801c27a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c282:	dd07      	ble.n	801c294 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	edd3 7a03 	vldr	s15, [r3, #12]
 801c28a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801c428 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801c28e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c292:	e006      	b.n	801c2a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	edd3 7a03 	vldr	s15, [r3, #12]
 801c29a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801c428 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801c29e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c2a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801c2a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c2aa:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801c42c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801c2ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2b6:	dd64      	ble.n	801c382 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	695c      	ldr	r4, [r3, #20]
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	68db      	ldr	r3, [r3, #12]
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	f7e4 f96b 	bl	800059c <__aeabi_f2d>
 801c2c6:	4602      	mov	r2, r0
 801c2c8:	460b      	mov	r3, r1
 801c2ca:	f04f 0000 	mov.w	r0, #0
 801c2ce:	4958      	ldr	r1, [pc, #352]	; (801c430 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801c2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c2d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c2d8:	4b56      	ldr	r3, [pc, #344]	; (801c434 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801c2da:	9301      	str	r3, [sp, #4]
 801c2dc:	4b4b      	ldr	r3, [pc, #300]	; (801c40c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801c2de:	9300      	str	r3, [sp, #0]
 801c2e0:	232c      	movs	r3, #44	; 0x2c
 801c2e2:	4a45      	ldr	r2, [pc, #276]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c2e4:	494a      	ldr	r1, [pc, #296]	; (801c410 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801c2e6:	68f8      	ldr	r0, [r7, #12]
 801c2e8:	47a0      	blx	r4
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	e128      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	2b09      	cmp	r3, #9
 801c2f4:	d018      	beq.n	801c328 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	695c      	ldr	r4, [r3, #20]
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7f7 ff1c 	bl	801413c <TfLiteTypeGetName>
 801c304:	4605      	mov	r5, r0
 801c306:	2009      	movs	r0, #9
 801c308:	f7f7 ff18 	bl	801413c <TfLiteTypeGetName>
 801c30c:	4603      	mov	r3, r0
 801c30e:	9303      	str	r3, [sp, #12]
 801c310:	9502      	str	r5, [sp, #8]
 801c312:	4b40      	ldr	r3, [pc, #256]	; (801c414 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801c314:	9301      	str	r3, [sp, #4]
 801c316:	4b48      	ldr	r3, [pc, #288]	; (801c438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801c318:	9300      	str	r3, [sp, #0]
 801c31a:	232f      	movs	r3, #47	; 0x2f
 801c31c:	4a36      	ldr	r2, [pc, #216]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c31e:	493f      	ldr	r1, [pc, #252]	; (801c41c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801c320:	68f8      	ldr	r0, [r7, #12]
 801c322:	47a0      	blx	r4
 801c324:	2301      	movs	r3, #1
 801c326:	e10b      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	691b      	ldr	r3, [r3, #16]
 801c32c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801c330:	d012      	beq.n	801c358 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	695c      	ldr	r4, [r3, #20]
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	691b      	ldr	r3, [r3, #16]
 801c33a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801c33e:	9203      	str	r2, [sp, #12]
 801c340:	9302      	str	r3, [sp, #8]
 801c342:	4b3e      	ldr	r3, [pc, #248]	; (801c43c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801c344:	9301      	str	r3, [sp, #4]
 801c346:	4b2b      	ldr	r3, [pc, #172]	; (801c3f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801c348:	9300      	str	r3, [sp, #0]
 801c34a:	2330      	movs	r3, #48	; 0x30
 801c34c:	4a2a      	ldr	r2, [pc, #168]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c34e:	492b      	ldr	r1, [pc, #172]	; (801c3fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801c350:	68f8      	ldr	r0, [r7, #12]
 801c352:	47a0      	blx	r4
 801c354:	2301      	movs	r3, #1
 801c356:	e0f3      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	edd3 7a03 	vldr	s15, [r3, #12]
 801c35e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801c440 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801c362:	eef4 7a47 	vcmp.f32	s15, s14
 801c366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c36a:	d00a      	beq.n	801c382 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	695c      	ldr	r4, [r3, #20]
 801c370:	4b34      	ldr	r3, [pc, #208]	; (801c444 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801c372:	9300      	str	r3, [sp, #0]
 801c374:	2331      	movs	r3, #49	; 0x31
 801c376:	4a20      	ldr	r2, [pc, #128]	; (801c3f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801c378:	4933      	ldr	r1, [pc, #204]	; (801c448 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801c37a:	68f8      	ldr	r0, [r7, #12]
 801c37c:	47a0      	blx	r4
 801c37e:	2301      	movs	r3, #1
 801c380:	e0de      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	781b      	ldrb	r3, [r3, #0]
 801c386:	2b07      	cmp	r3, #7
 801c388:	d160      	bne.n	801c44c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	68db      	ldr	r3, [r3, #12]
 801c38e:	4618      	mov	r0, r3
 801c390:	f7e4 f904 	bl	800059c <__aeabi_f2d>
 801c394:	4604      	mov	r4, r0
 801c396:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	4618      	mov	r0, r3
 801c39e:	f7e4 f8fd 	bl	800059c <__aeabi_f2d>
 801c3a2:	4602      	mov	r2, r0
 801c3a4:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801c3a6:	4620      	mov	r0, r4
 801c3a8:	4629      	mov	r1, r5
 801c3aa:	f7e4 f94f 	bl	800064c <__aeabi_dmul>
 801c3ae:	4602      	mov	r2, r0
 801c3b0:	460b      	mov	r3, r1
 801c3b2:	4610      	mov	r0, r2
 801c3b4:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801c3b6:	a30c      	add	r3, pc, #48	; (adr r3, 801c3e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3bc:	f7e4 fa70 	bl	80008a0 <__aeabi_ddiv>
 801c3c0:	4602      	mov	r2, r0
 801c3c2:	460b      	mov	r3, r1
 801c3c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801c3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3ca:	3308      	adds	r3, #8
 801c3cc:	f107 0214 	add.w	r2, r7, #20
 801c3d0:	4611      	mov	r1, r2
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	ed97 0b06 	vldr	d0, [r7, #24]
 801c3d8:	f7f7 ff36 	bl	8014248 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801c3dc:	697a      	ldr	r2, [r7, #20]
 801c3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3e0:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801c3e2:	e0ac      	b.n	801c53e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801c3e4:	f3af 8000 	nop.w
 801c3e8:	00140014 	.word	0x00140014
 801c3ec:	3f240014 	.word	0x3f240014
 801c3f0:	080231a8 	.word	0x080231a8
 801c3f4:	080231ac 	.word	0x080231ac
 801c3f8:	080230f4 	.word	0x080230f4
 801c3fc:	0802318c 	.word	0x0802318c
 801c400:	38000000 	.word	0x38000000
 801c404:	3303126f 	.word	0x3303126f
 801c408:	080231e8 	.word	0x080231e8
 801c40c:	080231f4 	.word	0x080231f4
 801c410:	080231c8 	.word	0x080231c8
 801c414:	08023228 	.word	0x08023228
 801c418:	08023234 	.word	0x08023234
 801c41c:	0802320c 	.word	0x0802320c
 801c420:	ffff8000 	.word	0xffff8000
 801c424:	08023240 	.word	0x08023240
 801c428:	37800000 	.word	0x37800000
 801c42c:	3283126f 	.word	0x3283126f
 801c430:	3ef00000 	.word	0x3ef00000
 801c434:	08023248 	.word	0x08023248
 801c438:	08023254 	.word	0x08023254
 801c43c:	08023264 	.word	0x08023264
 801c440:	3b800000 	.word	0x3b800000
 801c444:	08023284 	.word	0x08023284
 801c448:	0802326c 	.word	0x0802326c
          static_cast<double>(params->beta),
 801c44c:	683b      	ldr	r3, [r7, #0]
 801c44e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801c450:	4618      	mov	r0, r3
 801c452:	f7e4 f8a3 	bl	800059c <__aeabi_f2d>
 801c456:	4680      	mov	r8, r0
 801c458:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801c45a:	68bb      	ldr	r3, [r7, #8]
 801c45c:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801c45e:	4618      	mov	r0, r3
 801c460:	f7e4 f89c 	bl	800059c <__aeabi_f2d>
 801c464:	4682      	mov	sl, r0
 801c466:	468b      	mov	fp, r1
 801c468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c46a:	3308      	adds	r3, #8
 801c46c:	f107 0210 	add.w	r2, r7, #16
 801c470:	4619      	mov	r1, r3
 801c472:	2005      	movs	r0, #5
 801c474:	ec4b ab11 	vmov	d1, sl, fp
 801c478:	ec49 8b10 	vmov	d0, r8, r9
 801c47c:	f7f7 ffb0 	bl	80143e0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801c480:	693a      	ldr	r2, [r7, #16]
 801c482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c484:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801c486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c488:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801c48a:	221f      	movs	r2, #31
 801c48c:	4619      	mov	r1, r3
 801c48e:	2005      	movs	r0, #5
 801c490:	f7f7 ffee 	bl	8014470 <_ZN6tflite20CalculateInputRadiusEiii>
 801c494:	4603      	mov	r3, r0
 801c496:	4618      	mov	r0, r3
 801c498:	f7e4 f86e 	bl	8000578 <__aeabi_i2d>
 801c49c:	4602      	mov	r2, r0
 801c49e:	460b      	mov	r3, r1
 801c4a0:	4614      	mov	r4, r2
 801c4a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	4629      	mov	r1, r5
 801c4aa:	f7e4 fb7f 	bl	8000bac <__aeabi_d2iz>
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c4b2:	619a      	str	r2, [r3, #24]
    }
 801c4b4:	e043      	b.n	801c53e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801c4b6:	68bb      	ldr	r3, [r7, #8]
 801c4b8:	781b      	ldrb	r3, [r3, #0]
 801c4ba:	2b01      	cmp	r3, #1
 801c4bc:	d018      	beq.n	801c4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	695c      	ldr	r4, [r3, #20]
 801c4c2:	68bb      	ldr	r3, [r7, #8]
 801c4c4:	781b      	ldrb	r3, [r3, #0]
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	f7f7 fe38 	bl	801413c <TfLiteTypeGetName>
 801c4cc:	4605      	mov	r5, r0
 801c4ce:	2001      	movs	r0, #1
 801c4d0:	f7f7 fe34 	bl	801413c <TfLiteTypeGetName>
 801c4d4:	4603      	mov	r3, r0
 801c4d6:	9303      	str	r3, [sp, #12]
 801c4d8:	9502      	str	r5, [sp, #8]
 801c4da:	4b1c      	ldr	r3, [pc, #112]	; (801c54c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801c4dc:	9301      	str	r3, [sp, #4]
 801c4de:	4b1c      	ldr	r3, [pc, #112]	; (801c550 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801c4e0:	9300      	str	r3, [sp, #0]
 801c4e2:	234e      	movs	r3, #78	; 0x4e
 801c4e4:	4a1b      	ldr	r2, [pc, #108]	; (801c554 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801c4e6:	491c      	ldr	r1, [pc, #112]	; (801c558 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801c4e8:	68f8      	ldr	r0, [r7, #12]
 801c4ea:	47a0      	blx	r4
 801c4ec:	2301      	movs	r3, #1
 801c4ee:	e027      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	781b      	ldrb	r3, [r3, #0]
 801c4f4:	2b01      	cmp	r3, #1
 801c4f6:	d018      	beq.n	801c52a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	695c      	ldr	r4, [r3, #20]
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	781b      	ldrb	r3, [r3, #0]
 801c500:	4618      	mov	r0, r3
 801c502:	f7f7 fe1b 	bl	801413c <TfLiteTypeGetName>
 801c506:	4605      	mov	r5, r0
 801c508:	2001      	movs	r0, #1
 801c50a:	f7f7 fe17 	bl	801413c <TfLiteTypeGetName>
 801c50e:	4603      	mov	r3, r0
 801c510:	9303      	str	r3, [sp, #12]
 801c512:	9502      	str	r5, [sp, #8]
 801c514:	4b0d      	ldr	r3, [pc, #52]	; (801c54c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801c516:	9301      	str	r3, [sp, #4]
 801c518:	4b10      	ldr	r3, [pc, #64]	; (801c55c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801c51a:	9300      	str	r3, [sp, #0]
 801c51c:	234f      	movs	r3, #79	; 0x4f
 801c51e:	4a0d      	ldr	r2, [pc, #52]	; (801c554 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801c520:	490d      	ldr	r1, [pc, #52]	; (801c558 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801c522:	68f8      	ldr	r0, [r7, #12]
 801c524:	47a0      	blx	r4
 801c526:	2301      	movs	r3, #1
 801c528:	e00a      	b.n	801c540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	4618      	mov	r0, r3
 801c530:	f7e4 f834 	bl	800059c <__aeabi_f2d>
 801c534:	4602      	mov	r2, r0
 801c536:	460b      	mov	r3, r1
 801c538:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c53a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801c53e:	2300      	movs	r3, #0
}
 801c540:	4618      	mov	r0, r3
 801c542:	3728      	adds	r7, #40	; 0x28
 801c544:	46bd      	mov	sp, r7
 801c546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c54a:	bf00      	nop
 801c54c:	080232a8 	.word	0x080232a8
 801c550:	08023234 	.word	0x08023234
 801c554:	080230f4 	.word	0x080230f4
 801c558:	0802320c 	.word	0x0802320c
 801c55c:	08023254 	.word	0x08023254

0801c560 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801c560:	b580      	push	{r7, lr}
 801c562:	b084      	sub	sp, #16
 801c564:	af00      	add	r7, sp, #0
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	60b9      	str	r1, [r7, #8]
 801c56a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c570:	2b00      	cmp	r3, #0
 801c572:	d101      	bne.n	801c578 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801c574:	f003 fbb2 	bl	801fcdc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c57c:	2138      	movs	r1, #56	; 0x38
 801c57e:	68f8      	ldr	r0, [r7, #12]
 801c580:	4798      	blx	r3
 801c582:	4603      	mov	r3, r0
}
 801c584:	4618      	mov	r0, r3
 801c586:	3710      	adds	r7, #16
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd80      	pop	{r7, pc}

0801c58c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b082      	sub	sp, #8
 801c590:	af00      	add	r7, sp, #0
 801c592:	6078      	str	r0, [r7, #4]
 801c594:	ed87 0a00 	vstr	s0, [r7]
 801c598:	ed97 0a00 	vldr	s0, [r7]
 801c59c:	f7e4 fee4 	bl	8001368 <_ZSt3expf>
 801c5a0:	eef0 7a40 	vmov.f32	s15, s0
 801c5a4:	eeb0 0a67 	vmov.f32	s0, s15
 801c5a8:	3708      	adds	r7, #8
 801c5aa:	46bd      	mov	sp, r7
 801c5ac:	bd80      	pop	{r7, pc}

0801c5ae <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801c5ae:	b580      	push	{r7, lr}
 801c5b0:	b082      	sub	sp, #8
 801c5b2:	af00      	add	r7, sp, #0
 801c5b4:	ed87 0a01 	vstr	s0, [r7, #4]
 801c5b8:	ed97 0a01 	vldr	s0, [r7, #4]
 801c5bc:	2000      	movs	r0, #0
 801c5be:	f7ff ffe5 	bl	801c58c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801c5c2:	eef0 7a40 	vmov.f32	s15, s0
 801c5c6:	eeb0 0a67 	vmov.f32	s0, s15
 801c5ca:	3708      	adds	r7, #8
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}

0801c5d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801c5d0:	b480      	push	{r7}
 801c5d2:	b083      	sub	sp, #12
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	6078      	str	r0, [r7, #4]
 801c5d8:	4b03      	ldr	r3, [pc, #12]	; (801c5e8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801c5da:	4618      	mov	r0, r3
 801c5dc:	370c      	adds	r7, #12
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e4:	4770      	bx	lr
 801c5e6:	bf00      	nop
 801c5e8:	0801c5af 	.word	0x0801c5af

0801c5ec <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801c5ec:	b480      	push	{r7}
 801c5ee:	b083      	sub	sp, #12
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
 801c5f4:	ed87 0a00 	vstr	s0, [r7]
 801c5f8:	edd7 7a00 	vldr	s15, [r7]
 801c5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c600:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c608:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c60c:	eef0 7a66 	vmov.f32	s15, s13
 801c610:	eeb0 0a67 	vmov.f32	s0, s15
 801c614:	370c      	adds	r7, #12
 801c616:	46bd      	mov	sp, r7
 801c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c61c:	4770      	bx	lr

0801c61e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801c61e:	b580      	push	{r7, lr}
 801c620:	b082      	sub	sp, #8
 801c622:	af00      	add	r7, sp, #0
 801c624:	ed87 0a01 	vstr	s0, [r7, #4]
 801c628:	ed97 0a01 	vldr	s0, [r7, #4]
 801c62c:	2000      	movs	r0, #0
 801c62e:	f7ff ffdd 	bl	801c5ec <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801c632:	eef0 7a40 	vmov.f32	s15, s0
 801c636:	eeb0 0a67 	vmov.f32	s0, s15
 801c63a:	3708      	adds	r7, #8
 801c63c:	46bd      	mov	sp, r7
 801c63e:	bd80      	pop	{r7, pc}

0801c640 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801c640:	b480      	push	{r7}
 801c642:	b083      	sub	sp, #12
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
 801c648:	4b03      	ldr	r3, [pc, #12]	; (801c658 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801c64a:	4618      	mov	r0, r3
 801c64c:	370c      	adds	r7, #12
 801c64e:	46bd      	mov	sp, r7
 801c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c654:	4770      	bx	lr
 801c656:	bf00      	nop
 801c658:	0801c61f 	.word	0x0801c61f

0801c65c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801c65c:	b590      	push	{r4, r7, lr}
 801c65e:	b08f      	sub	sp, #60	; 0x3c
 801c660:	af04      	add	r7, sp, #16
 801c662:	6078      	str	r0, [r7, #4]
 801c664:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801c666:	6838      	ldr	r0, [r7, #0]
 801c668:	f7f9 ffa6 	bl	80165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801c66c:	4603      	mov	r3, r0
 801c66e:	2b01      	cmp	r3, #1
 801c670:	bf14      	ite	ne
 801c672:	2301      	movne	r3, #1
 801c674:	2300      	moveq	r3, #0
 801c676:	b2db      	uxtb	r3, r3
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d013      	beq.n	801c6a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	695c      	ldr	r4, [r3, #20]
 801c680:	6838      	ldr	r0, [r7, #0]
 801c682:	f7f9 ff99 	bl	80165b8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801c686:	4603      	mov	r3, r0
 801c688:	2201      	movs	r2, #1
 801c68a:	9203      	str	r2, [sp, #12]
 801c68c:	9302      	str	r3, [sp, #8]
 801c68e:	4b7c      	ldr	r3, [pc, #496]	; (801c880 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801c690:	9301      	str	r3, [sp, #4]
 801c692:	4b7c      	ldr	r3, [pc, #496]	; (801c884 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801c694:	9300      	str	r3, [sp, #0]
 801c696:	235d      	movs	r3, #93	; 0x5d
 801c698:	4a7b      	ldr	r2, [pc, #492]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c69a:	497c      	ldr	r1, [pc, #496]	; (801c88c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801c69c:	6878      	ldr	r0, [r7, #4]
 801c69e:	47a0      	blx	r4
 801c6a0:	2301      	movs	r3, #1
 801c6a2:	e146      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801c6a4:	6838      	ldr	r0, [r7, #0]
 801c6a6:	f7f9 ff94 	bl	80165d2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801c6aa:	4603      	mov	r3, r0
 801c6ac:	2b01      	cmp	r3, #1
 801c6ae:	bf14      	ite	ne
 801c6b0:	2301      	movne	r3, #1
 801c6b2:	2300      	moveq	r3, #0
 801c6b4:	b2db      	uxtb	r3, r3
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d013      	beq.n	801c6e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	695c      	ldr	r4, [r3, #20]
 801c6be:	6838      	ldr	r0, [r7, #0]
 801c6c0:	f7f9 ff87 	bl	80165d2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	2201      	movs	r2, #1
 801c6c8:	9203      	str	r2, [sp, #12]
 801c6ca:	9302      	str	r3, [sp, #8]
 801c6cc:	4b6c      	ldr	r3, [pc, #432]	; (801c880 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801c6ce:	9301      	str	r3, [sp, #4]
 801c6d0:	4b6f      	ldr	r3, [pc, #444]	; (801c890 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801c6d2:	9300      	str	r3, [sp, #0]
 801c6d4:	235e      	movs	r3, #94	; 0x5e
 801c6d6:	4a6c      	ldr	r2, [pc, #432]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c6d8:	496c      	ldr	r1, [pc, #432]	; (801c88c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801c6da:	6878      	ldr	r0, [r7, #4]
 801c6dc:	47a0      	blx	r4
 801c6de:	2301      	movs	r3, #1
 801c6e0:	e127      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	6839      	ldr	r1, [r7, #0]
 801c6e6:	6878      	ldr	r0, [r7, #4]
 801c6e8:	f7f8 f886 	bl	80147f8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c6ec:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d10a      	bne.n	801c70a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	695c      	ldr	r4, [r3, #20]
 801c6f8:	4b66      	ldr	r3, [pc, #408]	; (801c894 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801c6fa:	9300      	str	r3, [sp, #0]
 801c6fc:	2360      	movs	r3, #96	; 0x60
 801c6fe:	4a62      	ldr	r2, [pc, #392]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c700:	4965      	ldr	r1, [pc, #404]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c702:	6878      	ldr	r0, [r7, #4]
 801c704:	47a0      	blx	r4
 801c706:	2301      	movs	r3, #1
 801c708:	e113      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801c70a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c70c:	f7f7 ffa1 	bl	8014652 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801c710:	4603      	mov	r3, r0
 801c712:	2b00      	cmp	r3, #0
 801c714:	bfd4      	ite	le
 801c716:	2301      	movle	r3, #1
 801c718:	2300      	movgt	r3, #0
 801c71a:	b2db      	uxtb	r3, r3
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d00a      	beq.n	801c736 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	695c      	ldr	r4, [r3, #20]
 801c724:	4b5d      	ldr	r3, [pc, #372]	; (801c89c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c726:	9300      	str	r3, [sp, #0]
 801c728:	2361      	movs	r3, #97	; 0x61
 801c72a:	4a57      	ldr	r2, [pc, #348]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c72c:	495a      	ldr	r1, [pc, #360]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c72e:	6878      	ldr	r0, [r7, #4]
 801c730:	47a0      	blx	r4
 801c732:	2301      	movs	r3, #1
 801c734:	e0fd      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801c736:	2200      	movs	r2, #0
 801c738:	6839      	ldr	r1, [r7, #0]
 801c73a:	6878      	ldr	r0, [r7, #4]
 801c73c:	f7f8 f86c 	bl	8014818 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801c740:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801c742:	6a3b      	ldr	r3, [r7, #32]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d10a      	bne.n	801c75e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	695c      	ldr	r4, [r3, #20]
 801c74c:	4b54      	ldr	r3, [pc, #336]	; (801c8a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c74e:	9300      	str	r3, [sp, #0]
 801c750:	2363      	movs	r3, #99	; 0x63
 801c752:	4a4d      	ldr	r2, [pc, #308]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c754:	4950      	ldr	r1, [pc, #320]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c756:	6878      	ldr	r0, [r7, #4]
 801c758:	47a0      	blx	r4
 801c75a:	2301      	movs	r3, #1
 801c75c:	e0e9      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801c75e:	683b      	ldr	r3, [r7, #0]
 801c760:	691b      	ldr	r3, [r3, #16]
 801c762:	2b00      	cmp	r3, #0
 801c764:	d10a      	bne.n	801c77c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	695c      	ldr	r4, [r3, #20]
 801c76a:	4b4e      	ldr	r3, [pc, #312]	; (801c8a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801c76c:	9300      	str	r3, [sp, #0]
 801c76e:	2365      	movs	r3, #101	; 0x65
 801c770:	4a45      	ldr	r2, [pc, #276]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c772:	4949      	ldr	r1, [pc, #292]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c774:	6878      	ldr	r0, [r7, #4]
 801c776:	47a0      	blx	r4
 801c778:	2301      	movs	r3, #1
 801c77a:	e0da      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	691b      	ldr	r3, [r3, #16]
 801c780:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c784:	781b      	ldrb	r3, [r3, #0]
 801c786:	2b07      	cmp	r3, #7
 801c788:	d12f      	bne.n	801c7ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c78e:	f240 4102 	movw	r1, #1026	; 0x402
 801c792:	6878      	ldr	r0, [r7, #4]
 801c794:	4798      	blx	r3
 801c796:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801c798:	69bb      	ldr	r3, [r7, #24]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d10a      	bne.n	801c7b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	695c      	ldr	r4, [r3, #20]
 801c7a2:	4b41      	ldr	r3, [pc, #260]	; (801c8a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801c7a4:	9300      	str	r3, [sp, #0]
 801c7a6:	236b      	movs	r3, #107	; 0x6b
 801c7a8:	4a37      	ldr	r2, [pc, #220]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c7aa:	493b      	ldr	r1, [pc, #236]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c7ac:	6878      	ldr	r0, [r7, #4]
 801c7ae:	47a0      	blx	r4
 801c7b0:	2301      	movs	r3, #1
 801c7b2:	e0be      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801c7b4:	69fb      	ldr	r3, [r7, #28]
 801c7b6:	69ba      	ldr	r2, [r7, #24]
 801c7b8:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7be:	f240 4102 	movw	r1, #1026	; 0x402
 801c7c2:	6878      	ldr	r0, [r7, #4]
 801c7c4:	4798      	blx	r3
 801c7c6:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d10a      	bne.n	801c7e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	695c      	ldr	r4, [r3, #20]
 801c7d2:	4b36      	ldr	r3, [pc, #216]	; (801c8ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801c7d4:	9300      	str	r3, [sp, #0]
 801c7d6:	236f      	movs	r3, #111	; 0x6f
 801c7d8:	4a2b      	ldr	r2, [pc, #172]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c7da:	492f      	ldr	r1, [pc, #188]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c7dc:	6878      	ldr	r0, [r7, #4]
 801c7de:	47a0      	blx	r4
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	e0a6      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801c7e4:	69fb      	ldr	r3, [r7, #28]
 801c7e6:	697a      	ldr	r2, [r7, #20]
 801c7e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801c7ea:	6a3b      	ldr	r3, [r7, #32]
 801c7ec:	781b      	ldrb	r3, [r3, #0]
 801c7ee:	2b07      	cmp	r3, #7
 801c7f0:	d112      	bne.n	801c818 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7f4:	781b      	ldrb	r3, [r3, #0]
 801c7f6:	2b09      	cmp	r3, #9
 801c7f8:	d028      	beq.n	801c84c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7fc:	781b      	ldrb	r3, [r3, #0]
 801c7fe:	2b07      	cmp	r3, #7
 801c800:	d024      	beq.n	801c84c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	695c      	ldr	r4, [r3, #20]
 801c806:	4b2a      	ldr	r3, [pc, #168]	; (801c8b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801c808:	9300      	str	r3, [sp, #0]
 801c80a:	2375      	movs	r3, #117	; 0x75
 801c80c:	4a1e      	ldr	r2, [pc, #120]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c80e:	4922      	ldr	r1, [pc, #136]	; (801c898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c810:	6878      	ldr	r0, [r7, #4]
 801c812:	47a0      	blx	r4
 801c814:	2301      	movs	r3, #1
 801c816:	e08c      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c81a:	781a      	ldrb	r2, [r3, #0]
 801c81c:	6a3b      	ldr	r3, [r7, #32]
 801c81e:	781b      	ldrb	r3, [r3, #0]
 801c820:	429a      	cmp	r2, r3
 801c822:	d013      	beq.n	801c84c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	695c      	ldr	r4, [r3, #20]
 801c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c82a:	781b      	ldrb	r3, [r3, #0]
 801c82c:	461a      	mov	r2, r3
 801c82e:	6a3b      	ldr	r3, [r7, #32]
 801c830:	781b      	ldrb	r3, [r3, #0]
 801c832:	9303      	str	r3, [sp, #12]
 801c834:	9202      	str	r2, [sp, #8]
 801c836:	4b1f      	ldr	r3, [pc, #124]	; (801c8b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801c838:	9301      	str	r3, [sp, #4]
 801c83a:	4b1f      	ldr	r3, [pc, #124]	; (801c8b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801c83c:	9300      	str	r3, [sp, #0]
 801c83e:	2378      	movs	r3, #120	; 0x78
 801c840:	4a11      	ldr	r2, [pc, #68]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c842:	4912      	ldr	r1, [pc, #72]	; (801c88c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	47a0      	blx	r4
 801c848:	2301      	movs	r3, #1
 801c84a:	e072      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c84e:	781b      	ldrb	r3, [r3, #0]
 801c850:	2b07      	cmp	r3, #7
 801c852:	d161      	bne.n	801c918 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801c854:	6a3b      	ldr	r3, [r7, #32]
 801c856:	691b      	ldr	r3, [r3, #16]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d035      	beq.n	801c8c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	695c      	ldr	r4, [r3, #20]
 801c860:	6a3b      	ldr	r3, [r7, #32]
 801c862:	691b      	ldr	r3, [r3, #16]
 801c864:	2200      	movs	r2, #0
 801c866:	9203      	str	r2, [sp, #12]
 801c868:	9302      	str	r3, [sp, #8]
 801c86a:	4b14      	ldr	r3, [pc, #80]	; (801c8bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801c86c:	9301      	str	r3, [sp, #4]
 801c86e:	4b14      	ldr	r3, [pc, #80]	; (801c8c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801c870:	9300      	str	r3, [sp, #0]
 801c872:	237d      	movs	r3, #125	; 0x7d
 801c874:	4a04      	ldr	r2, [pc, #16]	; (801c888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801c876:	4905      	ldr	r1, [pc, #20]	; (801c88c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801c878:	6878      	ldr	r0, [r7, #4]
 801c87a:	47a0      	blx	r4
 801c87c:	2301      	movs	r3, #1
 801c87e:	e058      	b.n	801c932 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801c880:	080232b8 	.word	0x080232b8
 801c884:	080232bc 	.word	0x080232bc
 801c888:	080230f4 	.word	0x080230f4
 801c88c:	0802318c 	.word	0x0802318c
 801c890:	080232cc 	.word	0x080232cc
 801c894:	080232e0 	.word	0x080232e0
 801c898:	0802326c 	.word	0x0802326c
 801c89c:	080232f4 	.word	0x080232f4
 801c8a0:	08023310 	.word	0x08023310
 801c8a4:	08023324 	.word	0x08023324
 801c8a8:	08023340 	.word	0x08023340
 801c8ac:	08023358 	.word	0x08023358
 801c8b0:	0802337c 	.word	0x0802337c
 801c8b4:	08023254 	.word	0x08023254
 801c8b8:	08023234 	.word	0x08023234
 801c8bc:	080231a8 	.word	0x080231a8
 801c8c0:	080231ac 	.word	0x080231ac
 801c8c4:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801c8c8:	f107 0308 	add.w	r3, r7, #8
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	f7ff fe7f 	bl	801c5d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801c8d2:	69fb      	ldr	r3, [r7, #28]
 801c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8d6:	f240 2201 	movw	r2, #513	; 0x201
 801c8da:	4619      	mov	r1, r3
 801c8dc:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801c8c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801c8e0:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801c8e4:	f7ff faf2 	bl	801becc <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801c8e8:	f107 030c 	add.w	r3, r7, #12
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	f7ff fea7 	bl	801c640 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801c8f2:	69fb      	ldr	r3, [r7, #28]
 801c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8f6:	f240 2201 	movw	r2, #513	; 0x201
 801c8fa:	4619      	mov	r1, r3
 801c8fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c900:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801c8c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801c904:	f7ff fae2 	bl	801becc <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801c908:	6a3b      	ldr	r3, [r7, #32]
 801c90a:	691a      	ldr	r2, [r3, #16]
 801c90c:	69fb      	ldr	r3, [r7, #28]
 801c90e:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801c910:	6a3b      	ldr	r3, [r7, #32]
 801c912:	68da      	ldr	r2, [r3, #12]
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	695b      	ldr	r3, [r3, #20]
 801c91c:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801c91e:	69fb      	ldr	r3, [r7, #28]
 801c920:	9300      	str	r3, [sp, #0]
 801c922:	693b      	ldr	r3, [r7, #16]
 801c924:	6a3a      	ldr	r2, [r7, #32]
 801c926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c928:	6878      	ldr	r0, [r7, #4]
 801c92a:	f7ff fbfd 	bl	801c128 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801c92e:	4603      	mov	r3, r0
 801c930:	bf00      	nop
}
 801c932:	4618      	mov	r0, r3
 801c934:	372c      	adds	r7, #44	; 0x2c
 801c936:	46bd      	mov	sp, r7
 801c938:	bd90      	pop	{r4, r7, pc}
 801c93a:	bf00      	nop

0801c93c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b082      	sub	sp, #8
 801c940:	af00      	add	r7, sp, #0
 801c942:	6078      	str	r0, [r7, #4]
 801c944:	6878      	ldr	r0, [r7, #4]
 801c946:	f000 fc03 	bl	801d150 <_ZNSaIPvED1Ev>
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	4618      	mov	r0, r3
 801c94e:	3708      	adds	r7, #8
 801c950:	46bd      	mov	sp, r7
 801c952:	bd80      	pop	{r7, pc}

0801c954 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 801c954:	b580      	push	{r7, lr}
 801c956:	b082      	sub	sp, #8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	4618      	mov	r0, r3
 801c960:	f000 fbe6 	bl	801d130 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	4618      	mov	r0, r3
 801c968:	3708      	adds	r7, #8
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}

0801c96e <_ZNSt6vectorIPvSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 801c96e:	b580      	push	{r7, lr}
 801c970:	b082      	sub	sp, #8
 801c972:	af00      	add	r7, sp, #0
 801c974:	6078      	str	r0, [r7, #4]
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	4618      	mov	r0, r3
 801c97a:	f7ff ffeb 	bl	801c954 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	4618      	mov	r0, r3
 801c982:	3708      	adds	r7, #8
 801c984:	46bd      	mov	sp, r7
 801c986:	bd80      	pop	{r7, pc}

0801c988 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801c988:	b580      	push	{r7, lr}
 801c98a:	b084      	sub	sp, #16
 801c98c:	af00      	add	r7, sp, #0
 801c98e:	6078      	str	r0, [r7, #4]
 801c990:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801c992:	4b1b      	ldr	r3, [pc, #108]	; (801ca00 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801c994:	681a      	ldr	r2, [r3, #0]
 801c996:	683b      	ldr	r3, [r7, #0]
 801c998:	425b      	negs	r3, r3
 801c99a:	441a      	add	r2, r3
 801c99c:	4b19      	ldr	r3, [pc, #100]	; (801ca04 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x7c>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	429a      	cmp	r2, r3
 801c9a2:	d217      	bcs.n	801c9d4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801c9a4:	2101      	movs	r1, #1
 801c9a6:	6838      	ldr	r0, [r7, #0]
 801c9a8:	f7f7 fb92 	bl	80140d0 <_Z9ei_callocjj>
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	60fb      	str	r3, [r7, #12]
    if (ptr == NULL) {
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d106      	bne.n	801c9c4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x3c>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801c9b6:	683b      	ldr	r3, [r7, #0]
 801c9b8:	4619      	mov	r1, r3
 801c9ba:	4813      	ldr	r0, [pc, #76]	; (801ca08 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x80>)
 801c9bc:	f003 fe20 	bl	8020600 <iprintf>
      return NULL;
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	e018      	b.n	801c9f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
    }
    overflow_buffers.push_back(ptr);
 801c9c4:	f107 030c 	add.w	r3, r7, #12
 801c9c8:	4619      	mov	r1, r3
 801c9ca:	4810      	ldr	r0, [pc, #64]	; (801ca0c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x84>)
 801c9cc:	f000 fbe5 	bl	801d19a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return ptr;
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	e010      	b.n	801c9f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
  }

  current_location -= bytes;
 801c9d4:	4b0a      	ldr	r3, [pc, #40]	; (801ca00 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801c9d6:	681a      	ldr	r2, [r3, #0]
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	425b      	negs	r3, r3
 801c9dc:	4413      	add	r3, r2
 801c9de:	4a08      	ldr	r2, [pc, #32]	; (801ca00 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801c9e0:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801c9e2:	4b07      	ldr	r3, [pc, #28]	; (801ca00 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	683a      	ldr	r2, [r7, #0]
 801c9ec:	2100      	movs	r1, #0
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f003 fa1a 	bl	801fe28 <memset>

  return ptr;
 801c9f4:	68fb      	ldr	r3, [r7, #12]
}
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	3710      	adds	r7, #16
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	bd80      	pop	{r7, pc}
 801c9fe:	bf00      	nop
 801ca00:	200026ac 	.word	0x200026ac
 801ca04:	200026a8 	.word	0x200026a8
 801ca08:	080233cc 	.word	0x080233cc
 801ca0c:	20002d18 	.word	0x20002d18

0801ca10 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b082      	sub	sp, #8
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
 801ca18:	6878      	ldr	r0, [r7, #4]
 801ca1a:	f000 fbf3 	bl	801d204 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	4618      	mov	r0, r3
 801ca22:	3708      	adds	r7, #8
 801ca24:	46bd      	mov	sp, r7
 801ca26:	bd80      	pop	{r7, pc}

0801ca28 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b082      	sub	sp, #8
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	4618      	mov	r0, r3
 801ca34:	f000 fbd6 	bl	801d1e4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	3708      	adds	r7, #8
 801ca3e:	46bd      	mov	sp, r7
 801ca40:	bd80      	pop	{r7, pc}

0801ca42 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 801ca42:	b580      	push	{r7, lr}
 801ca44:	b082      	sub	sp, #8
 801ca46:	af00      	add	r7, sp, #0
 801ca48:	6078      	str	r0, [r7, #4]
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	f7ff ffeb 	bl	801ca28 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	4618      	mov	r0, r3
 801ca56:	3708      	adds	r7, #8
 801ca58:	46bd      	mov	sp, r7
 801ca5a:	bd80      	pop	{r7, pc}

0801ca5c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b086      	sub	sp, #24
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	60f8      	str	r0, [r7, #12]
 801ca64:	60b9      	str	r1, [r7, #8]
 801ca66:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 801ca68:	68bb      	ldr	r3, [r7, #8]
 801ca6a:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801ca6c:	693b      	ldr	r3, [r7, #16]
 801ca6e:	4619      	mov	r1, r3
 801ca70:	68f8      	ldr	r0, [r7, #12]
 801ca72:	f7ff ff89 	bl	801c988 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801ca76:	4603      	mov	r3, r0
 801ca78:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801ca7a:	697b      	ldr	r3, [r7, #20]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d101      	bne.n	801ca84 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x28>
    return kTfLiteError;
 801ca80:	2301      	movs	r3, #1
 801ca82:	e00e      	b.n	801caa2 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x46>
  }

  scratch_buffers.push_back(b);
 801ca84:	f107 0310 	add.w	r3, r7, #16
 801ca88:	4619      	mov	r1, r3
 801ca8a:	4808      	ldr	r0, [pc, #32]	; (801caac <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 801ca8c:	f000 fbdf 	bl	801d24e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 801ca90:	4806      	ldr	r0, [pc, #24]	; (801caac <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 801ca92:	f000 fc02 	bl	801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801ca96:	4603      	mov	r3, r0
 801ca98:	3b01      	subs	r3, #1
 801ca9a:	461a      	mov	r2, r3
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 801caa0:	2300      	movs	r3, #0
}
 801caa2:	4618      	mov	r0, r3
 801caa4:	3718      	adds	r7, #24
 801caa6:	46bd      	mov	sp, r7
 801caa8:	bd80      	pop	{r7, pc}
 801caaa:	bf00      	nop
 801caac:	20002d24 	.word	0x20002d24

0801cab0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801cab0:	b580      	push	{r7, lr}
 801cab2:	b082      	sub	sp, #8
 801cab4:	af00      	add	r7, sp, #0
 801cab6:	6078      	str	r0, [r7, #4]
 801cab8:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 801caba:	480d      	ldr	r0, [pc, #52]	; (801caf0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 801cabc:	f000 fbed 	bl	801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801cac0:	4603      	mov	r3, r0
 801cac2:	461a      	mov	r2, r3
 801cac4:	683b      	ldr	r3, [r7, #0]
 801cac6:	4293      	cmp	r3, r2
 801cac8:	bfac      	ite	ge
 801caca:	2301      	movge	r3, #1
 801cacc:	2300      	movlt	r3, #0
 801cace:	b2db      	uxtb	r3, r3
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d001      	beq.n	801cad8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 801cad4:	2300      	movs	r3, #0
 801cad6:	e006      	b.n	801cae6 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 801cad8:	683b      	ldr	r3, [r7, #0]
 801cada:	4619      	mov	r1, r3
 801cadc:	4804      	ldr	r0, [pc, #16]	; (801caf0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 801cade:	f000 fbec 	bl	801d2ba <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 801cae2:	4603      	mov	r3, r0
 801cae4:	685b      	ldr	r3, [r3, #4]
}
 801cae6:	4618      	mov	r0, r3
 801cae8:	3708      	adds	r7, #8
 801caea:	46bd      	mov	sp, r7
 801caec:	bd80      	pop	{r7, pc}
 801caee:	bf00      	nop
 801caf0:	20002d24 	.word	0x20002d24

0801caf4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801caf4:	b480      	push	{r7}
 801caf6:	b083      	sub	sp, #12
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
 801cafc:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801cafe:	683b      	ldr	r3, [r7, #0]
 801cb00:	019b      	lsls	r3, r3, #6
 801cb02:	4a04      	ldr	r2, [pc, #16]	; (801cb14 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801cb04:	4413      	add	r3, r2
}
 801cb06:	4618      	mov	r0, r3
 801cb08:	370c      	adds	r7, #12
 801cb0a:	46bd      	mov	sp, r7
 801cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb10:	4770      	bx	lr
 801cb12:	bf00      	nop
 801cb14:	20002708 	.word	0x20002708

0801cb18 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801cb18:	b480      	push	{r7}
 801cb1a:	b083      	sub	sp, #12
 801cb1c:	af00      	add	r7, sp, #0
 801cb1e:	6078      	str	r0, [r7, #4]
 801cb20:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801cb22:	683a      	ldr	r2, [r7, #0]
 801cb24:	4613      	mov	r3, r2
 801cb26:	005b      	lsls	r3, r3, #1
 801cb28:	4413      	add	r3, r2
 801cb2a:	009b      	lsls	r3, r3, #2
 801cb2c:	4a03      	ldr	r2, [pc, #12]	; (801cb3c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801cb2e:	4413      	add	r3, r2
}
 801cb30:	4618      	mov	r0, r3
 801cb32:	370c      	adds	r7, #12
 801cb34:	46bd      	mov	sp, r7
 801cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb3a:	4770      	bx	lr
 801cb3c:	20002ac8 	.word	0x20002ac8

0801cb40 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801cb40:	b5b0      	push	{r4, r5, r7, lr}
 801cb42:	b092      	sub	sp, #72	; 0x48
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4a:	49a6      	ldr	r1, [pc, #664]	; (801cde4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801cb4c:	2010      	movs	r0, #16
 801cb4e:	4798      	blx	r3
 801cb50:	4603      	mov	r3, r0
 801cb52:	4aa5      	ldr	r2, [pc, #660]	; (801cde8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801cb54:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801cb56:	4ba4      	ldr	r3, [pc, #656]	; (801cde8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d104      	bne.n	801cb68 <_Z18trained_model_initPFPvjjE+0x28>
    printf("ERR: failed to allocate tensor arena\n");
 801cb5e:	48a3      	ldr	r0, [pc, #652]	; (801cdec <_Z18trained_model_initPFPvjjE+0x2ac>)
 801cb60:	f003 fdd4 	bl	802070c <puts>
    return kTfLiteError;
 801cb64:	2301      	movs	r3, #1
 801cb66:	e247      	b.n	801cff8 <_Z18trained_model_initPFPvjjE+0x4b8>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801cb68:	4b9f      	ldr	r3, [pc, #636]	; (801cde8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	4aa0      	ldr	r2, [pc, #640]	; (801cdf0 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801cb6e:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801cb70:	4b9d      	ldr	r3, [pc, #628]	; (801cde8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	f503 33b7 	add.w	r3, r3, #93696	; 0x16e00
 801cb78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801cb7c:	4a9d      	ldr	r2, [pc, #628]	; (801cdf4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801cb7e:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801cb80:	4b9d      	ldr	r3, [pc, #628]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cb82:	4a9e      	ldr	r2, [pc, #632]	; (801cdfc <_Z18trained_model_initPFPvjjE+0x2bc>)
 801cb84:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801cb86:	4b9c      	ldr	r3, [pc, #624]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cb88:	4a9d      	ldr	r2, [pc, #628]	; (801ce00 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801cb8a:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801cb8c:	4b9a      	ldr	r3, [pc, #616]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cb8e:	4a9d      	ldr	r2, [pc, #628]	; (801ce04 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801cb90:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801cb92:	4b99      	ldr	r3, [pc, #612]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cb94:	4a9c      	ldr	r2, [pc, #624]	; (801ce08 <_Z18trained_model_initPFPvjjE+0x2c8>)
 801cb96:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801cb98:	4b97      	ldr	r3, [pc, #604]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cb9a:	4a9c      	ldr	r2, [pc, #624]	; (801ce0c <_Z18trained_model_initPFPvjjE+0x2cc>)
 801cb9c:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801cb9e:	4b96      	ldr	r3, [pc, #600]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cba0:	4a9b      	ldr	r2, [pc, #620]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cba2:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 15;
 801cba4:	4b94      	ldr	r3, [pc, #592]	; (801cdf8 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801cba6:	220f      	movs	r2, #15
 801cba8:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 15; ++i) {
 801cbaa:	2300      	movs	r3, #0
 801cbac:	647b      	str	r3, [r7, #68]	; 0x44
 801cbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbb0:	2b0e      	cmp	r3, #14
 801cbb2:	f200 810c 	bhi.w	801cdce <_Z18trained_model_initPFPvjjE+0x28e>
    tflTensors[i].type = tensorData[i].type;
 801cbb6:	4997      	ldr	r1, [pc, #604]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cbb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cbba:	4613      	mov	r3, r2
 801cbbc:	005b      	lsls	r3, r3, #1
 801cbbe:	4413      	add	r3, r2
 801cbc0:	00db      	lsls	r3, r3, #3
 801cbc2:	440b      	add	r3, r1
 801cbc4:	3301      	adds	r3, #1
 801cbc6:	7819      	ldrb	r1, [r3, #0]
 801cbc8:	4a91      	ldr	r2, [pc, #580]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbcc:	019b      	lsls	r3, r3, #6
 801cbce:	4413      	add	r3, r2
 801cbd0:	460a      	mov	r2, r1
 801cbd2:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801cbd4:	498f      	ldr	r1, [pc, #572]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cbd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cbd8:	4613      	mov	r3, r2
 801cbda:	005b      	lsls	r3, r3, #1
 801cbdc:	4413      	add	r3, r2
 801cbde:	00db      	lsls	r3, r3, #3
 801cbe0:	440b      	add	r3, r1
 801cbe2:	3301      	adds	r3, #1
 801cbe4:	7818      	ldrb	r0, [r3, #0]
 801cbe6:	498c      	ldr	r1, [pc, #560]	; (801ce18 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801cbe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cbea:	4613      	mov	r3, r2
 801cbec:	005b      	lsls	r3, r3, #1
 801cbee:	4413      	add	r3, r2
 801cbf0:	009b      	lsls	r3, r3, #2
 801cbf2:	440b      	add	r3, r1
 801cbf4:	3308      	adds	r3, #8
 801cbf6:	4602      	mov	r2, r0
 801cbf8:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801cbfa:	4a85      	ldr	r2, [pc, #532]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbfe:	019b      	lsls	r3, r3, #6
 801cc00:	4413      	add	r3, r2
 801cc02:	332d      	adds	r3, #45	; 0x2d
 801cc04:	2200      	movs	r2, #0
 801cc06:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801cc08:	4982      	ldr	r1, [pc, #520]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cc0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc0c:	4613      	mov	r3, r2
 801cc0e:	005b      	lsls	r3, r3, #1
 801cc10:	4413      	add	r3, r2
 801cc12:	00db      	lsls	r3, r3, #3
 801cc14:	440b      	add	r3, r1
 801cc16:	7819      	ldrb	r1, [r3, #0]
 801cc18:	4a7d      	ldr	r2, [pc, #500]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cc1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc1c:	019b      	lsls	r3, r3, #6
 801cc1e:	4413      	add	r3, r2
 801cc20:	3314      	adds	r3, #20
 801cc22:	460a      	mov	r2, r1
 801cc24:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801cc26:	497b      	ldr	r1, [pc, #492]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cc28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc2a:	4613      	mov	r3, r2
 801cc2c:	005b      	lsls	r3, r3, #1
 801cc2e:	4413      	add	r3, r2
 801cc30:	00db      	lsls	r3, r3, #3
 801cc32:	440b      	add	r3, r1
 801cc34:	330c      	adds	r3, #12
 801cc36:	681a      	ldr	r2, [r3, #0]
 801cc38:	4975      	ldr	r1, [pc, #468]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cc3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc3c:	019b      	lsls	r3, r3, #6
 801cc3e:	440b      	add	r3, r1
 801cc40:	3318      	adds	r3, #24
 801cc42:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801cc44:	4973      	ldr	r1, [pc, #460]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cc46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc48:	4613      	mov	r3, r2
 801cc4a:	005b      	lsls	r3, r3, #1
 801cc4c:	4413      	add	r3, r2
 801cc4e:	00db      	lsls	r3, r3, #3
 801cc50:	440b      	add	r3, r1
 801cc52:	3308      	adds	r3, #8
 801cc54:	681a      	ldr	r2, [r3, #0]
 801cc56:	496e      	ldr	r1, [pc, #440]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cc58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc5a:	019b      	lsls	r3, r3, #6
 801cc5c:	440b      	add	r3, r1
 801cc5e:	3308      	adds	r3, #8
 801cc60:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801cc62:	496c      	ldr	r1, [pc, #432]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cc64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc66:	4613      	mov	r3, r2
 801cc68:	005b      	lsls	r3, r3, #1
 801cc6a:	4413      	add	r3, r2
 801cc6c:	00db      	lsls	r3, r3, #3
 801cc6e:	440b      	add	r3, r1
 801cc70:	3308      	adds	r3, #8
 801cc72:	6819      	ldr	r1, [r3, #0]
 801cc74:	4868      	ldr	r0, [pc, #416]	; (801ce18 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801cc76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc78:	4613      	mov	r3, r2
 801cc7a:	005b      	lsls	r3, r3, #1
 801cc7c:	4413      	add	r3, r2
 801cc7e:	009b      	lsls	r3, r3, #2
 801cc80:	4403      	add	r3, r0
 801cc82:	3304      	adds	r3, #4
 801cc84:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801cc86:	4a62      	ldr	r2, [pc, #392]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cc88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc8a:	019b      	lsls	r3, r3, #6
 801cc8c:	4413      	add	r3, r2
 801cc8e:	3314      	adds	r3, #20
 801cc90:	781b      	ldrb	r3, [r3, #0]
 801cc92:	2b02      	cmp	r3, #2
 801cc94:	d11e      	bne.n	801ccd4 <_Z18trained_model_initPFPvjjE+0x194>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801cc96:	495f      	ldr	r1, [pc, #380]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cc98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc9a:	4613      	mov	r3, r2
 801cc9c:	005b      	lsls	r3, r3, #1
 801cc9e:	4413      	add	r3, r2
 801cca0:	00db      	lsls	r3, r3, #3
 801cca2:	440b      	add	r3, r1
 801cca4:	3304      	adds	r3, #4
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	461a      	mov	r2, r3
 801ccaa:	4b4f      	ldr	r3, [pc, #316]	; (801cde8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	4413      	add	r3, r2
 801ccb0:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801ccb2:	4a57      	ldr	r2, [pc, #348]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ccb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ccb6:	019b      	lsls	r3, r3, #6
 801ccb8:	4413      	add	r3, r2
 801ccba:	3304      	adds	r3, #4
 801ccbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ccbe:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801ccc0:	4955      	ldr	r1, [pc, #340]	; (801ce18 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801ccc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ccc4:	4613      	mov	r3, r2
 801ccc6:	005b      	lsls	r3, r3, #1
 801ccc8:	4413      	add	r3, r2
 801ccca:	009b      	lsls	r3, r3, #2
 801cccc:	440b      	add	r3, r1
 801ccce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ccd0:	601a      	str	r2, [r3, #0]
 801ccd2:	e01f      	b.n	801cd14 <_Z18trained_model_initPFPvjjE+0x1d4>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 801ccd4:	494f      	ldr	r1, [pc, #316]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ccd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ccd8:	4613      	mov	r3, r2
 801ccda:	005b      	lsls	r3, r3, #1
 801ccdc:	4413      	add	r3, r2
 801ccde:	00db      	lsls	r3, r3, #3
 801cce0:	440b      	add	r3, r1
 801cce2:	3304      	adds	r3, #4
 801cce4:	681a      	ldr	r2, [r3, #0]
 801cce6:	494a      	ldr	r1, [pc, #296]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ccea:	019b      	lsls	r3, r3, #6
 801ccec:	440b      	add	r3, r1
 801ccee:	3304      	adds	r3, #4
 801ccf0:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801ccf2:	4948      	ldr	r1, [pc, #288]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ccf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ccf6:	4613      	mov	r3, r2
 801ccf8:	005b      	lsls	r3, r3, #1
 801ccfa:	4413      	add	r3, r2
 801ccfc:	00db      	lsls	r3, r3, #3
 801ccfe:	440b      	add	r3, r1
 801cd00:	3304      	adds	r3, #4
 801cd02:	6819      	ldr	r1, [r3, #0]
 801cd04:	4844      	ldr	r0, [pc, #272]	; (801ce18 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801cd06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd08:	4613      	mov	r3, r2
 801cd0a:	005b      	lsls	r3, r3, #1
 801cd0c:	4413      	add	r3, r2
 801cd0e:	009b      	lsls	r3, r3, #2
 801cd10:	4403      	add	r3, r0
 801cd12:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801cd14:	4a3e      	ldr	r2, [pc, #248]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd18:	019b      	lsls	r3, r3, #6
 801cd1a:	4413      	add	r3, r2
 801cd1c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801cd20:	493c      	ldr	r1, [pc, #240]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cd22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd24:	4613      	mov	r3, r2
 801cd26:	005b      	lsls	r3, r3, #1
 801cd28:	4413      	add	r3, r2
 801cd2a:	00db      	lsls	r3, r3, #3
 801cd2c:	440b      	add	r3, r1
 801cd2e:	f103 0210 	add.w	r2, r3, #16
 801cd32:	4603      	mov	r3, r0
 801cd34:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cd38:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801cd3c:	4a34      	ldr	r2, [pc, #208]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd40:	019b      	lsls	r3, r3, #6
 801cd42:	4413      	add	r3, r2
 801cd44:	3330      	adds	r3, #48	; 0x30
 801cd46:	781b      	ldrb	r3, [r3, #0]
 801cd48:	2b01      	cmp	r3, #1
 801cd4a:	d11b      	bne.n	801cd84 <_Z18trained_model_initPFPvjjE+0x244>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801cd4c:	4931      	ldr	r1, [pc, #196]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cd4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd50:	4613      	mov	r3, r2
 801cd52:	005b      	lsls	r3, r3, #1
 801cd54:	4413      	add	r3, r2
 801cd56:	00db      	lsls	r3, r3, #3
 801cd58:	440b      	add	r3, r1
 801cd5a:	3314      	adds	r3, #20
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	685a      	ldr	r2, [r3, #4]
 801cd66:	492a      	ldr	r1, [pc, #168]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cd68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd6a:	019b      	lsls	r3, r3, #6
 801cd6c:	440b      	add	r3, r1
 801cd6e:	330c      	adds	r3, #12
 801cd70:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801cd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd74:	685b      	ldr	r3, [r3, #4]
 801cd76:	685a      	ldr	r2, [r3, #4]
 801cd78:	4925      	ldr	r1, [pc, #148]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd7c:	019b      	lsls	r3, r3, #6
 801cd7e:	440b      	add	r3, r1
 801cd80:	3310      	adds	r3, #16
 801cd82:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801cd84:	4a22      	ldr	r2, [pc, #136]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd88:	019b      	lsls	r3, r3, #6
 801cd8a:	4413      	add	r3, r2
 801cd8c:	3314      	adds	r3, #20
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	2b02      	cmp	r3, #2
 801cd92:	d118      	bne.n	801cdc6 <_Z18trained_model_initPFPvjjE+0x286>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801cd94:	4a1e      	ldr	r2, [pc, #120]	; (801ce10 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801cd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd98:	019b      	lsls	r3, r3, #6
 801cd9a:	4413      	add	r3, r2
 801cd9c:	3304      	adds	r3, #4
 801cd9e:	6819      	ldr	r1, [r3, #0]
 801cda0:	481c      	ldr	r0, [pc, #112]	; (801ce14 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801cda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cda4:	4613      	mov	r3, r2
 801cda6:	005b      	lsls	r3, r3, #1
 801cda8:	4413      	add	r3, r2
 801cdaa:	00db      	lsls	r3, r3, #3
 801cdac:	4403      	add	r3, r0
 801cdae:	330c      	adds	r3, #12
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	440b      	add	r3, r1
 801cdb4:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801cdb6:	4b0e      	ldr	r3, [pc, #56]	; (801cdf0 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	d902      	bls.n	801cdc6 <_Z18trained_model_initPFPvjjE+0x286>
        tensor_boundary = data_end_ptr;
 801cdc0:	4a0b      	ldr	r2, [pc, #44]	; (801cdf0 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdc4:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 15; ++i) {
 801cdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdc8:	3301      	adds	r3, #1
 801cdca:	647b      	str	r3, [r7, #68]	; 0x44
 801cdcc:	e6ef      	b.n	801cbae <_Z18trained_model_initPFPvjjE+0x6e>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801cdce:	4b08      	ldr	r3, [pc, #32]	; (801cdf0 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801cdd0:	681a      	ldr	r2, [r3, #0]
 801cdd2:	4b08      	ldr	r3, [pc, #32]	; (801cdf4 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	429a      	cmp	r2, r3
 801cdd8:	d922      	bls.n	801ce20 <_Z18trained_model_initPFPvjjE+0x2e0>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801cdda:	4810      	ldr	r0, [pc, #64]	; (801ce1c <_Z18trained_model_initPFPvjjE+0x2dc>)
 801cddc:	f003 fc96 	bl	802070c <puts>
    return kTfLiteError;
 801cde0:	2301      	movs	r3, #1
 801cde2:	e109      	b.n	801cff8 <_Z18trained_model_initPFPvjjE+0x4b8>
 801cde4:	00016fc0 	.word	0x00016fc0
 801cde8:	200026a4 	.word	0x200026a4
 801cdec:	08023404 	.word	0x08023404
 801cdf0:	200026a8 	.word	0x200026a8
 801cdf4:	200026ac 	.word	0x200026ac
 801cdf8:	200026b0 	.word	0x200026b0
 801cdfc:	0801c989 	.word	0x0801c989
 801ce00:	0801ca5d 	.word	0x0801ca5d
 801ce04:	0801cab1 	.word	0x0801cab1
 801ce08:	0801caf5 	.word	0x0801caf5
 801ce0c:	0801cb19 	.word	0x0801cb19
 801ce10:	20002708 	.word	0x20002708
 801ce14:	20002444 	.word	0x20002444
 801ce18:	20002ac8 	.word	0x20002ac8
 801ce1c:	0802342c 	.word	0x0802342c
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
 801ce20:	4c77      	ldr	r4, [pc, #476]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801ce22:	463b      	mov	r3, r7
 801ce24:	4618      	mov	r0, r3
 801ce26:	f7fa fc8d 	bl	8017744 <_ZN6tflite16Register_CONV_2DEv>
 801ce2a:	4625      	mov	r5, r4
 801ce2c:	463c      	mov	r4, r7
 801ce2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ce30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ce32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ce36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 801ce3a:	4c71      	ldr	r4, [pc, #452]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801ce3c:	463b      	mov	r3, r7
 801ce3e:	4618      	mov	r0, r3
 801ce40:	f7fd fccc 	bl	801a7dc <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 801ce44:	3420      	adds	r4, #32
 801ce46:	463d      	mov	r5, r7
 801ce48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ce4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ce4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ce50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_RESHAPE] = Register_RESHAPE();
 801ce54:	4c6a      	ldr	r4, [pc, #424]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801ce56:	463b      	mov	r3, r7
 801ce58:	4618      	mov	r0, r3
 801ce5a:	f7fd febf 	bl	801abdc <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 801ce5e:	3440      	adds	r4, #64	; 0x40
 801ce60:	463d      	mov	r5, r7
 801ce62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ce64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ce66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ce6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801ce6e:	4c64      	ldr	r4, [pc, #400]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801ce70:	463b      	mov	r3, r7
 801ce72:	4618      	mov	r0, r3
 801ce74:	f7fb fffe 	bl	8018e74 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801ce78:	3460      	adds	r4, #96	; 0x60
 801ce7a:	463d      	mov	r5, r7
 801ce7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ce7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ce80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ce84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801ce88:	4c5d      	ldr	r4, [pc, #372]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801ce8a:	463b      	mov	r3, r7
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	f7fe faf7 	bl	801b480 <_ZN6tflite16Register_SOFTMAXEv>
 801ce92:	3480      	adds	r4, #128	; 0x80
 801ce94:	463d      	mov	r5, r7
 801ce96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ce98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ce9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ce9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 7; ++i) {
 801cea2:	2300      	movs	r3, #0
 801cea4:	643b      	str	r3, [r7, #64]	; 0x40
 801cea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cea8:	2b06      	cmp	r3, #6
 801ceaa:	d86f      	bhi.n	801cf8c <_Z18trained_model_initPFPvjjE+0x44c>
    tflNodes[i].inputs = nodeData[i].inputs;
 801ceac:	4a55      	ldr	r2, [pc, #340]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801ceae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ceb0:	011b      	lsls	r3, r3, #4
 801ceb2:	4413      	add	r3, r2
 801ceb4:	6819      	ldr	r1, [r3, #0]
 801ceb6:	4854      	ldr	r0, [pc, #336]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801ceb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ceba:	4613      	mov	r3, r2
 801cebc:	00db      	lsls	r3, r3, #3
 801cebe:	4413      	add	r3, r2
 801cec0:	009b      	lsls	r3, r3, #2
 801cec2:	4403      	add	r3, r0
 801cec4:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801cec6:	4a4f      	ldr	r2, [pc, #316]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801cec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ceca:	011b      	lsls	r3, r3, #4
 801cecc:	4413      	add	r3, r2
 801cece:	3304      	adds	r3, #4
 801ced0:	6819      	ldr	r1, [r3, #0]
 801ced2:	484d      	ldr	r0, [pc, #308]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801ced4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ced6:	4613      	mov	r3, r2
 801ced8:	00db      	lsls	r3, r3, #3
 801ceda:	4413      	add	r3, r2
 801cedc:	009b      	lsls	r3, r3, #2
 801cede:	4403      	add	r3, r0
 801cee0:	3304      	adds	r3, #4
 801cee2:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801cee4:	4a47      	ldr	r2, [pc, #284]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801cee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cee8:	011b      	lsls	r3, r3, #4
 801ceea:	4413      	add	r3, r2
 801ceec:	3308      	adds	r3, #8
 801ceee:	6819      	ldr	r1, [r3, #0]
 801cef0:	4845      	ldr	r0, [pc, #276]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801cef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cef4:	4613      	mov	r3, r2
 801cef6:	00db      	lsls	r3, r3, #3
 801cef8:	4413      	add	r3, r2
 801cefa:	009b      	lsls	r3, r3, #2
 801cefc:	4403      	add	r3, r0
 801cefe:	3314      	adds	r3, #20
 801cf00:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801cf02:	4941      	ldr	r1, [pc, #260]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801cf04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cf06:	4613      	mov	r3, r2
 801cf08:	00db      	lsls	r3, r3, #3
 801cf0a:	4413      	add	r3, r2
 801cf0c:	009b      	lsls	r3, r3, #2
 801cf0e:	440b      	add	r3, r1
 801cf10:	3318      	adds	r3, #24
 801cf12:	2200      	movs	r2, #0
 801cf14:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801cf16:	493c      	ldr	r1, [pc, #240]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801cf18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cf1a:	4613      	mov	r3, r2
 801cf1c:	00db      	lsls	r3, r3, #3
 801cf1e:	4413      	add	r3, r2
 801cf20:	009b      	lsls	r3, r3, #2
 801cf22:	440b      	add	r3, r1
 801cf24:	331c      	adds	r3, #28
 801cf26:	2200      	movs	r2, #0
 801cf28:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801cf2a:	4a36      	ldr	r2, [pc, #216]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801cf2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf2e:	011b      	lsls	r3, r3, #4
 801cf30:	4413      	add	r3, r2
 801cf32:	330c      	adds	r3, #12
 801cf34:	781b      	ldrb	r3, [r3, #0]
 801cf36:	4a32      	ldr	r2, [pc, #200]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801cf38:	015b      	lsls	r3, r3, #5
 801cf3a:	4413      	add	r3, r2
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d020      	beq.n	801cf84 <_Z18trained_model_initPFPvjjE+0x444>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801cf42:	4a30      	ldr	r2, [pc, #192]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801cf44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf46:	011b      	lsls	r3, r3, #4
 801cf48:	4413      	add	r3, r2
 801cf4a:	330c      	adds	r3, #12
 801cf4c:	781b      	ldrb	r3, [r3, #0]
 801cf4e:	4a2c      	ldr	r2, [pc, #176]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801cf50:	015b      	lsls	r3, r3, #5
 801cf52:	4413      	add	r3, r2
 801cf54:	681c      	ldr	r4, [r3, #0]
 801cf56:	492c      	ldr	r1, [pc, #176]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801cf58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cf5a:	4613      	mov	r3, r2
 801cf5c:	00db      	lsls	r3, r3, #3
 801cf5e:	4413      	add	r3, r2
 801cf60:	009b      	lsls	r3, r3, #2
 801cf62:	440b      	add	r3, r1
 801cf64:	3314      	adds	r3, #20
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	2200      	movs	r2, #0
 801cf6a:	4619      	mov	r1, r3
 801cf6c:	4827      	ldr	r0, [pc, #156]	; (801d00c <_Z18trained_model_initPFPvjjE+0x4cc>)
 801cf6e:	47a0      	blx	r4
 801cf70:	4601      	mov	r1, r0
 801cf72:	4825      	ldr	r0, [pc, #148]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801cf74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cf76:	4613      	mov	r3, r2
 801cf78:	00db      	lsls	r3, r3, #3
 801cf7a:	4413      	add	r3, r2
 801cf7c:	009b      	lsls	r3, r3, #2
 801cf7e:	4403      	add	r3, r0
 801cf80:	3310      	adds	r3, #16
 801cf82:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 7; ++i) {
 801cf84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf86:	3301      	adds	r3, #1
 801cf88:	643b      	str	r3, [r7, #64]	; 0x40
 801cf8a:	e78c      	b.n	801cea6 <_Z18trained_model_initPFPvjjE+0x366>
    }
  }
  for(size_t i = 0; i < 7; ++i) {
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf92:	2b06      	cmp	r3, #6
 801cf94:	d82f      	bhi.n	801cff6 <_Z18trained_model_initPFPvjjE+0x4b6>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801cf96:	4a1b      	ldr	r2, [pc, #108]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801cf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf9a:	011b      	lsls	r3, r3, #4
 801cf9c:	4413      	add	r3, r2
 801cf9e:	330c      	adds	r3, #12
 801cfa0:	781b      	ldrb	r3, [r3, #0]
 801cfa2:	4a17      	ldr	r2, [pc, #92]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801cfa4:	015b      	lsls	r3, r3, #5
 801cfa6:	4413      	add	r3, r2
 801cfa8:	3308      	adds	r3, #8
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d01e      	beq.n	801cfee <_Z18trained_model_initPFPvjjE+0x4ae>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801cfb0:	4a14      	ldr	r2, [pc, #80]	; (801d004 <_Z18trained_model_initPFPvjjE+0x4c4>)
 801cfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cfb4:	011b      	lsls	r3, r3, #4
 801cfb6:	4413      	add	r3, r2
 801cfb8:	330c      	adds	r3, #12
 801cfba:	781b      	ldrb	r3, [r3, #0]
 801cfbc:	4a10      	ldr	r2, [pc, #64]	; (801d000 <_Z18trained_model_initPFPvjjE+0x4c0>)
 801cfbe:	015b      	lsls	r3, r3, #5
 801cfc0:	4413      	add	r3, r2
 801cfc2:	3308      	adds	r3, #8
 801cfc4:	681c      	ldr	r4, [r3, #0]
 801cfc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cfc8:	4613      	mov	r3, r2
 801cfca:	00db      	lsls	r3, r3, #3
 801cfcc:	4413      	add	r3, r2
 801cfce:	009b      	lsls	r3, r3, #2
 801cfd0:	4a0d      	ldr	r2, [pc, #52]	; (801d008 <_Z18trained_model_initPFPvjjE+0x4c8>)
 801cfd2:	4413      	add	r3, r2
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	480d      	ldr	r0, [pc, #52]	; (801d00c <_Z18trained_model_initPFPvjjE+0x4cc>)
 801cfd8:	47a0      	blx	r4
 801cfda:	4603      	mov	r3, r0
 801cfdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801cfe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d002      	beq.n	801cfee <_Z18trained_model_initPFPvjjE+0x4ae>
        return status;
 801cfe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cfec:	e004      	b.n	801cff8 <_Z18trained_model_initPFPvjjE+0x4b8>
  for(size_t i = 0; i < 7; ++i) {
 801cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cff0:	3301      	adds	r3, #1
 801cff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cff4:	e7cc      	b.n	801cf90 <_Z18trained_model_initPFPvjjE+0x450>
      }
    }
  }
  return kTfLiteOk;
 801cff6:	2300      	movs	r3, #0
}
 801cff8:	4618      	mov	r0, r3
 801cffa:	3748      	adds	r7, #72	; 0x48
 801cffc:	46bd      	mov	sp, r7
 801cffe:	bdb0      	pop	{r4, r5, r7, pc}
 801d000:	20002b7c 	.word	0x20002b7c
 801d004:	080263a4 	.word	0x080263a4
 801d008:	20002c1c 	.word	0x20002c1c
 801d00c:	200026b0 	.word	0x200026b0

0801d010 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801d010:	b480      	push	{r7}
 801d012:	b083      	sub	sp, #12
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801d018:	4b05      	ldr	r3, [pc, #20]	; (801d030 <_Z19trained_model_inputi+0x20>)
 801d01a:	689a      	ldr	r2, [r3, #8]
 801d01c:	2300      	movs	r3, #0
 801d01e:	019b      	lsls	r3, r3, #6
 801d020:	4413      	add	r3, r2
}
 801d022:	4618      	mov	r0, r3
 801d024:	370c      	adds	r7, #12
 801d026:	46bd      	mov	sp, r7
 801d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d02c:	4770      	bx	lr
 801d02e:	bf00      	nop
 801d030:	200026b0 	.word	0x200026b0

0801d034 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
 801d034:	b480      	push	{r7}
 801d036:	b083      	sub	sp, #12
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 801d03c:	4b05      	ldr	r3, [pc, #20]	; (801d054 <_Z20trained_model_outputi+0x20>)
 801d03e:	689a      	ldr	r2, [r3, #8]
 801d040:	230e      	movs	r3, #14
 801d042:	019b      	lsls	r3, r3, #6
 801d044:	4413      	add	r3, r2
}
 801d046:	4618      	mov	r0, r3
 801d048:	370c      	adds	r7, #12
 801d04a:	46bd      	mov	sp, r7
 801d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d050:	4770      	bx	lr
 801d052:	bf00      	nop
 801d054:	200026b0 	.word	0x200026b0

0801d058 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801d058:	b590      	push	{r4, r7, lr}
 801d05a:	b083      	sub	sp, #12
 801d05c:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 7; ++i) {
 801d05e:	2300      	movs	r3, #0
 801d060:	607b      	str	r3, [r7, #4]
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	2b06      	cmp	r3, #6
 801d066:	d81f      	bhi.n	801d0a8 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801d068:	4a12      	ldr	r2, [pc, #72]	; (801d0b4 <_Z20trained_model_invokev+0x5c>)
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	011b      	lsls	r3, r3, #4
 801d06e:	4413      	add	r3, r2
 801d070:	330c      	adds	r3, #12
 801d072:	781b      	ldrb	r3, [r3, #0]
 801d074:	4a10      	ldr	r2, [pc, #64]	; (801d0b8 <_Z20trained_model_invokev+0x60>)
 801d076:	015b      	lsls	r3, r3, #5
 801d078:	4413      	add	r3, r2
 801d07a:	330c      	adds	r3, #12
 801d07c:	681c      	ldr	r4, [r3, #0]
 801d07e:	687a      	ldr	r2, [r7, #4]
 801d080:	4613      	mov	r3, r2
 801d082:	00db      	lsls	r3, r3, #3
 801d084:	4413      	add	r3, r2
 801d086:	009b      	lsls	r3, r3, #2
 801d088:	4a0c      	ldr	r2, [pc, #48]	; (801d0bc <_Z20trained_model_invokev+0x64>)
 801d08a:	4413      	add	r3, r2
 801d08c:	4619      	mov	r1, r3
 801d08e:	480c      	ldr	r0, [pc, #48]	; (801d0c0 <_Z20trained_model_invokev+0x68>)
 801d090:	47a0      	blx	r4
 801d092:	4603      	mov	r3, r0
 801d094:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801d096:	78fb      	ldrb	r3, [r7, #3]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d001      	beq.n	801d0a0 <_Z20trained_model_invokev+0x48>
      return status;
 801d09c:	78fb      	ldrb	r3, [r7, #3]
 801d09e:	e004      	b.n	801d0aa <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 7; ++i) {
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	3301      	adds	r3, #1
 801d0a4:	607b      	str	r3, [r7, #4]
 801d0a6:	e7dc      	b.n	801d062 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801d0a8:	2300      	movs	r3, #0
}
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	370c      	adds	r7, #12
 801d0ae:	46bd      	mov	sp, r7
 801d0b0:	bd90      	pop	{r4, r7, pc}
 801d0b2:	bf00      	nop
 801d0b4:	080263a4 	.word	0x080263a4
 801d0b8:	20002b7c 	.word	0x20002b7c
 801d0bc:	20002c1c 	.word	0x20002c1c
 801d0c0:	200026b0 	.word	0x200026b0

0801d0c4 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b084      	sub	sp, #16
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801d0cc:	4b15      	ldr	r3, [pc, #84]	; (801d124 <_Z19trained_model_resetPFvPvE+0x60>)
 801d0ce:	681a      	ldr	r2, [r3, #0]
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	4610      	mov	r0, r2
 801d0d4:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 801d0d6:	4814      	ldr	r0, [pc, #80]	; (801d128 <_Z19trained_model_resetPFvPvE+0x64>)
 801d0d8:	f000 f8ff 	bl	801d2da <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 801d0dc:	2300      	movs	r3, #0
 801d0de:	60fb      	str	r3, [r7, #12]
 801d0e0:	4812      	ldr	r0, [pc, #72]	; (801d12c <_Z19trained_model_resetPFvPvE+0x68>)
 801d0e2:	f000 f908 	bl	801d2f6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801d0e6:	4602      	mov	r2, r0
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	4293      	cmp	r3, r2
 801d0ec:	bf34      	ite	cc
 801d0ee:	2301      	movcc	r3, #1
 801d0f0:	2300      	movcs	r3, #0
 801d0f2:	b2db      	uxtb	r3, r3
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d00c      	beq.n	801d112 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 801d0f8:	68f9      	ldr	r1, [r7, #12]
 801d0fa:	480c      	ldr	r0, [pc, #48]	; (801d12c <_Z19trained_model_resetPFvPvE+0x68>)
 801d0fc:	f000 f90b 	bl	801d316 <_ZNSt6vectorIPvSaIS0_EEixEj>
 801d100:	4603      	mov	r3, r0
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	4618      	mov	r0, r3
 801d106:	f002 fe5f 	bl	801fdc8 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	3301      	adds	r3, #1
 801d10e:	60fb      	str	r3, [r7, #12]
 801d110:	e7e6      	b.n	801d0e0 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 801d112:	4806      	ldr	r0, [pc, #24]	; (801d12c <_Z19trained_model_resetPFvPvE+0x68>)
 801d114:	f000 f90f 	bl	801d336 <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 801d118:	2300      	movs	r3, #0
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3710      	adds	r7, #16
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}
 801d122:	bf00      	nop
 801d124:	200026a4 	.word	0x200026a4
 801d128:	20002d24 	.word	0x20002d24
 801d12c:	20002d18 	.word	0x20002d18

0801d130 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801d130:	b580      	push	{r7, lr}
 801d132:	b082      	sub	sp, #8
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801d138:	6878      	ldr	r0, [r7, #4]
 801d13a:	f000 f90a 	bl	801d352 <_ZNSaIPvEC1Ev>
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	4618      	mov	r0, r3
 801d142:	f000 f912 	bl	801d36a <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	4618      	mov	r0, r3
 801d14a:	3708      	adds	r7, #8
 801d14c:	46bd      	mov	sp, r7
 801d14e:	bd80      	pop	{r7, pc}

0801d150 <_ZNSaIPvED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 801d150:	b580      	push	{r7, lr}
 801d152:	b082      	sub	sp, #8
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
 801d158:	6878      	ldr	r0, [r7, #4]
 801d15a:	f000 f91a 	bl	801d392 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	4618      	mov	r0, r3
 801d162:	3708      	adds	r7, #8
 801d164:	46bd      	mov	sp, r7
 801d166:	bd80      	pop	{r7, pc}

0801d168 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801d168:	b580      	push	{r7, lr}
 801d16a:	b082      	sub	sp, #8
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	689a      	ldr	r2, [r3, #8]
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	1ad3      	subs	r3, r2, r3
 801d17e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801d180:	461a      	mov	r2, r3
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	f000 f910 	bl	801d3a8 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7ff fbd6 	bl	801c93c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	4618      	mov	r0, r3
 801d194:	3708      	adds	r7, #8
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}

0801d19a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 801d19a:	b580      	push	{r7, lr}
 801d19c:	b082      	sub	sp, #8
 801d19e:	af00      	add	r7, sp, #0
 801d1a0:	6078      	str	r0, [r7, #4]
 801d1a2:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	685a      	ldr	r2, [r3, #4]
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	689b      	ldr	r3, [r3, #8]
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	d00c      	beq.n	801d1ca <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801d1b0:	6878      	ldr	r0, [r7, #4]
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	685b      	ldr	r3, [r3, #4]
 801d1b6:	683a      	ldr	r2, [r7, #0]
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	f000 f908 	bl	801d3ce <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	685b      	ldr	r3, [r3, #4]
 801d1c2:	1d1a      	adds	r2, r3, #4
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 801d1c8:	e008      	b.n	801d1dc <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 801d1ca:	6878      	ldr	r0, [r7, #4]
 801d1cc:	f000 f912 	bl	801d3f4 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	683a      	ldr	r2, [r7, #0]
 801d1d4:	4619      	mov	r1, r3
 801d1d6:	6878      	ldr	r0, [r7, #4]
 801d1d8:	f000 f934 	bl	801d444 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 801d1dc:	bf00      	nop
 801d1de:	3708      	adds	r7, #8
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	bd80      	pop	{r7, pc}

0801d1e4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b082      	sub	sp, #8
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801d1ec:	6878      	ldr	r0, [r7, #4]
 801d1ee:	f000 f9e5 	bl	801d5bc <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f000 f9ed 	bl	801d5d4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3708      	adds	r7, #8
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}

0801d204 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 801d204:	b580      	push	{r7, lr}
 801d206:	b082      	sub	sp, #8
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
 801d20c:	6878      	ldr	r0, [r7, #4]
 801d20e:	f000 f9f5 	bl	801d5fc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	4618      	mov	r0, r3
 801d216:	3708      	adds	r7, #8
 801d218:	46bd      	mov	sp, r7
 801d21a:	bd80      	pop	{r7, pc}

0801d21c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b082      	sub	sp, #8
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	689a      	ldr	r2, [r3, #8]
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	1ad3      	subs	r3, r2, r3
 801d232:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 801d234:	461a      	mov	r2, r3
 801d236:	6878      	ldr	r0, [r7, #4]
 801d238:	f000 f9eb 	bl	801d612 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	4618      	mov	r0, r3
 801d240:	f7ff fbe6 	bl	801ca10 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	4618      	mov	r0, r3
 801d248:	3708      	adds	r7, #8
 801d24a:	46bd      	mov	sp, r7
 801d24c:	bd80      	pop	{r7, pc}

0801d24e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801d24e:	b580      	push	{r7, lr}
 801d250:	b082      	sub	sp, #8
 801d252:	af00      	add	r7, sp, #0
 801d254:	6078      	str	r0, [r7, #4]
 801d256:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	685a      	ldr	r2, [r3, #4]
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	689b      	ldr	r3, [r3, #8]
 801d260:	429a      	cmp	r2, r3
 801d262:	d00d      	beq.n	801d280 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801d264:	6878      	ldr	r0, [r7, #4]
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	685b      	ldr	r3, [r3, #4]
 801d26a:	683a      	ldr	r2, [r7, #0]
 801d26c:	4619      	mov	r1, r3
 801d26e:	f000 f9e3 	bl	801d638 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	f103 0208 	add.w	r2, r3, #8
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	605a      	str	r2, [r3, #4]
      }
 801d27e:	e008      	b.n	801d292 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 801d280:	6878      	ldr	r0, [r7, #4]
 801d282:	f000 f9ec 	bl	801d65e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 801d286:	4603      	mov	r3, r0
 801d288:	683a      	ldr	r2, [r7, #0]
 801d28a:	4619      	mov	r1, r3
 801d28c:	6878      	ldr	r0, [r7, #4]
 801d28e:	f000 fa0d 	bl	801d6ac <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801d292:	bf00      	nop
 801d294:	3708      	adds	r7, #8
 801d296:	46bd      	mov	sp, r7
 801d298:	bd80      	pop	{r7, pc}

0801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801d29a:	b480      	push	{r7}
 801d29c:	b083      	sub	sp, #12
 801d29e:	af00      	add	r7, sp, #0
 801d2a0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	685a      	ldr	r2, [r3, #4]
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	1ad3      	subs	r3, r2, r3
 801d2ac:	10db      	asrs	r3, r3, #3
 801d2ae:	4618      	mov	r0, r3
 801d2b0:	370c      	adds	r7, #12
 801d2b2:	46bd      	mov	sp, r7
 801d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2b8:	4770      	bx	lr

0801d2ba <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801d2ba:	b480      	push	{r7}
 801d2bc:	b083      	sub	sp, #12
 801d2be:	af00      	add	r7, sp, #0
 801d2c0:	6078      	str	r0, [r7, #4]
 801d2c2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	681a      	ldr	r2, [r3, #0]
 801d2c8:	683b      	ldr	r3, [r7, #0]
 801d2ca:	00db      	lsls	r3, r3, #3
 801d2cc:	4413      	add	r3, r2
      }
 801d2ce:	4618      	mov	r0, r3
 801d2d0:	370c      	adds	r7, #12
 801d2d2:	46bd      	mov	sp, r7
 801d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2d8:	4770      	bx	lr

0801d2da <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 801d2da:	b580      	push	{r7, lr}
 801d2dc:	b082      	sub	sp, #8
 801d2de:	af00      	add	r7, sp, #0
 801d2e0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	4619      	mov	r1, r3
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f000 fa9b 	bl	801d824 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 801d2ee:	bf00      	nop
 801d2f0:	3708      	adds	r7, #8
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bd80      	pop	{r7, pc}

0801d2f6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801d2f6:	b480      	push	{r7}
 801d2f8:	b083      	sub	sp, #12
 801d2fa:	af00      	add	r7, sp, #0
 801d2fc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	685a      	ldr	r2, [r3, #4]
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	1ad3      	subs	r3, r2, r3
 801d308:	109b      	asrs	r3, r3, #2
 801d30a:	4618      	mov	r0, r3
 801d30c:	370c      	adds	r7, #12
 801d30e:	46bd      	mov	sp, r7
 801d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d314:	4770      	bx	lr

0801d316 <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801d316:	b480      	push	{r7}
 801d318:	b083      	sub	sp, #12
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	6078      	str	r0, [r7, #4]
 801d31e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	681a      	ldr	r2, [r3, #0]
 801d324:	683b      	ldr	r3, [r7, #0]
 801d326:	009b      	lsls	r3, r3, #2
 801d328:	4413      	add	r3, r2
      }
 801d32a:	4618      	mov	r0, r3
 801d32c:	370c      	adds	r7, #12
 801d32e:	46bd      	mov	sp, r7
 801d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d334:	4770      	bx	lr

0801d336 <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 801d336:	b580      	push	{r7, lr}
 801d338:	b082      	sub	sp, #8
 801d33a:	af00      	add	r7, sp, #0
 801d33c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	4619      	mov	r1, r3
 801d344:	6878      	ldr	r0, [r7, #4]
 801d346:	f000 fa8e 	bl	801d866 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 801d34a:	bf00      	nop
 801d34c:	3708      	adds	r7, #8
 801d34e:	46bd      	mov	sp, r7
 801d350:	bd80      	pop	{r7, pc}

0801d352 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801d352:	b580      	push	{r7, lr}
 801d354:	b082      	sub	sp, #8
 801d356:	af00      	add	r7, sp, #0
 801d358:	6078      	str	r0, [r7, #4]
 801d35a:	6878      	ldr	r0, [r7, #4]
 801d35c:	f000 faa4 	bl	801d8a8 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	4618      	mov	r0, r3
 801d364:	3708      	adds	r7, #8
 801d366:	46bd      	mov	sp, r7
 801d368:	bd80      	pop	{r7, pc}

0801d36a <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801d36a:	b480      	push	{r7}
 801d36c:	b083      	sub	sp, #12
 801d36e:	af00      	add	r7, sp, #0
 801d370:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	2200      	movs	r2, #0
 801d376:	601a      	str	r2, [r3, #0]
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	2200      	movs	r2, #0
 801d37c:	605a      	str	r2, [r3, #4]
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	2200      	movs	r2, #0
 801d382:	609a      	str	r2, [r3, #8]
	{ }
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	4618      	mov	r0, r3
 801d388:	370c      	adds	r7, #12
 801d38a:	46bd      	mov	sp, r7
 801d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d390:	4770      	bx	lr

0801d392 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801d392:	b480      	push	{r7}
 801d394:	b083      	sub	sp, #12
 801d396:	af00      	add	r7, sp, #0
 801d398:	6078      	str	r0, [r7, #4]
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	4618      	mov	r0, r3
 801d39e:	370c      	adds	r7, #12
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a6:	4770      	bx	lr

0801d3a8 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b084      	sub	sp, #16
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	60f8      	str	r0, [r7, #12]
 801d3b0:	60b9      	str	r1, [r7, #8]
 801d3b2:	607a      	str	r2, [r7, #4]
	if (__p)
 801d3b4:	68bb      	ldr	r3, [r7, #8]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d005      	beq.n	801d3c6 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	687a      	ldr	r2, [r7, #4]
 801d3be:	68b9      	ldr	r1, [r7, #8]
 801d3c0:	4618      	mov	r0, r3
 801d3c2:	f000 fa7c 	bl	801d8be <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 801d3c6:	bf00      	nop
 801d3c8:	3710      	adds	r7, #16
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	bd80      	pop	{r7, pc}

0801d3ce <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801d3ce:	b580      	push	{r7, lr}
 801d3d0:	b084      	sub	sp, #16
 801d3d2:	af00      	add	r7, sp, #0
 801d3d4:	60f8      	str	r0, [r7, #12]
 801d3d6:	60b9      	str	r1, [r7, #8]
 801d3d8:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801d3da:	6878      	ldr	r0, [r7, #4]
 801d3dc:	f000 fa7e 	bl	801d8dc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 801d3e0:	4603      	mov	r3, r0
 801d3e2:	461a      	mov	r2, r3
 801d3e4:	68b9      	ldr	r1, [r7, #8]
 801d3e6:	68f8      	ldr	r0, [r7, #12]
 801d3e8:	f000 fa83 	bl	801d8f2 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 801d3ec:	bf00      	nop
 801d3ee:	3710      	adds	r7, #16
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	bd80      	pop	{r7, pc}

0801d3f4 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b084      	sub	sp, #16
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	1d1a      	adds	r2, r3, #4
 801d400:	f107 030c 	add.w	r3, r7, #12
 801d404:	4611      	mov	r1, r2
 801d406:	4618      	mov	r0, r3
 801d408:	f000 fa89 	bl	801d91e <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	4618      	mov	r0, r3
 801d410:	3710      	adds	r7, #16
 801d412:	46bd      	mov	sp, r7
 801d414:	bd80      	pop	{r7, pc}

0801d416 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 801d416:	b580      	push	{r7, lr}
 801d418:	b082      	sub	sp, #8
 801d41a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 801d41c:	4618      	mov	r0, r3
 801d41e:	f000 f805 	bl	801d42c <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 801d422:	4603      	mov	r3, r0
      }
 801d424:	4618      	mov	r0, r3
 801d426:	3708      	adds	r7, #8
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}

0801d42c <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 801d42c:	b480      	push	{r7}
 801d42e:	b083      	sub	sp, #12
 801d430:	af00      	add	r7, sp, #0
 801d432:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 801d434:	2301      	movs	r3, #1
      }
 801d436:	4618      	mov	r0, r3
 801d438:	370c      	adds	r7, #12
 801d43a:	46bd      	mov	sp, r7
 801d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d440:	4770      	bx	lr
	...

0801d444 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 801d444:	b5b0      	push	{r4, r5, r7, lr}
 801d446:	b08c      	sub	sp, #48	; 0x30
 801d448:	af00      	add	r7, sp, #0
 801d44a:	60f8      	str	r0, [r7, #12]
 801d44c:	60b9      	str	r1, [r7, #8]
 801d44e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801d450:	4a59      	ldr	r2, [pc, #356]	; (801d5b8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 801d452:	2101      	movs	r1, #1
 801d454:	68f8      	ldr	r0, [r7, #12]
 801d456:	f000 fa72 	bl	801d93e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 801d45a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	685b      	ldr	r3, [r3, #4]
 801d466:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 801d468:	68f8      	ldr	r0, [r7, #12]
 801d46a:	f000 faaf 	bl	801d9cc <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 801d46e:	4603      	mov	r3, r0
 801d470:	617b      	str	r3, [r7, #20]
 801d472:	f107 0214 	add.w	r2, r7, #20
 801d476:	f107 0308 	add.w	r3, r7, #8
 801d47a:	4611      	mov	r1, r2
 801d47c:	4618      	mov	r0, r3
 801d47e:	f000 fab5 	bl	801d9ec <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 801d482:	4603      	mov	r3, r0
 801d484:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d48a:	4618      	mov	r0, r3
 801d48c:	f000 fac3 	bl	801da16 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 801d490:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 801d492:	69bb      	ldr	r3, [r7, #24]
 801d494:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 801d496:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801d498:	69fb      	ldr	r3, [r7, #28]
 801d49a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801d49c:	69ba      	ldr	r2, [r7, #24]
 801d49e:	18d5      	adds	r5, r2, r3
 801d4a0:	6878      	ldr	r0, [r7, #4]
 801d4a2:	f000 fa1b 	bl	801d8dc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 801d4a6:	4603      	mov	r3, r0
 801d4a8:	461a      	mov	r2, r3
 801d4aa:	4629      	mov	r1, r5
 801d4ac:	4620      	mov	r0, r4
 801d4ae:	f7ff ff8e 	bl	801d3ce <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 801d4b6:	f7ff ffae 	bl	801d416 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d027      	beq.n	801d510 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801d4c0:	f107 0308 	add.w	r3, r7, #8
 801d4c4:	4618      	mov	r0, r3
 801d4c6:	f000 face 	bl	801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801d4ca:	4603      	mov	r3, r0
 801d4cc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f000 fad3 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801d4d6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801d4d8:	69ba      	ldr	r2, [r7, #24]
 801d4da:	4621      	mov	r1, r4
 801d4dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d4de:	f000 faae 	bl	801da3e <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 801d4e2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 801d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4e6:	3304      	adds	r3, #4
 801d4e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801d4ea:	f107 0308 	add.w	r3, r7, #8
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f000 fab9 	bl	801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f000 fabe 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801d500:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801d502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d504:	6a39      	ldr	r1, [r7, #32]
 801d506:	4620      	mov	r0, r4
 801d508:	f000 fa99 	bl	801da3e <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 801d50c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d50e:	e026      	b.n	801d55e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 801d510:	f107 0308 	add.w	r3, r7, #8
 801d514:	4618      	mov	r0, r3
 801d516:	f000 faa6 	bl	801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801d51a:	4603      	mov	r3, r0
 801d51c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	4618      	mov	r0, r3
 801d522:	f000 faab 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801d526:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 801d528:	69ba      	ldr	r2, [r7, #24]
 801d52a:	4621      	mov	r1, r4
 801d52c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d52e:	f000 fab0 	bl	801da92 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801d532:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 801d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d536:	3304      	adds	r3, #4
 801d538:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 801d53a:	f107 0308 	add.w	r3, r7, #8
 801d53e:	4618      	mov	r0, r3
 801d540:	f000 fa91 	bl	801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801d544:	4603      	mov	r3, r0
 801d546:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	4618      	mov	r0, r3
 801d54c:	f000 fa96 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801d550:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 801d552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d554:	6a39      	ldr	r1, [r7, #32]
 801d556:	4620      	mov	r0, r4
 801d558:	f000 fa9b 	bl	801da92 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801d55c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 801d55e:	f7ff ff5a 	bl	801d416 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 801d562:	4603      	mov	r3, r0
 801d564:	f083 0301 	eor.w	r3, r3, #1
 801d568:	b2db      	uxtb	r3, r3
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d009      	beq.n	801d582 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	4618      	mov	r0, r3
 801d572:	f000 fa83 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801d576:	4603      	mov	r3, r0
 801d578:	461a      	mov	r2, r3
 801d57a:	6a39      	ldr	r1, [r7, #32]
 801d57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d57e:	f000 faa1 	bl	801dac4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 801d582:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	689a      	ldr	r2, [r3, #8]
 801d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d58a:	1ad3      	subs	r3, r2, r3
 801d58c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 801d58e:	461a      	mov	r2, r3
 801d590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d592:	f7ff ff09 	bl	801d3a8 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	69ba      	ldr	r2, [r7, #24]
 801d59a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5a0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5a4:	009b      	lsls	r3, r3, #2
 801d5a6:	69ba      	ldr	r2, [r7, #24]
 801d5a8:	441a      	add	r2, r3
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	609a      	str	r2, [r3, #8]
    }
 801d5ae:	bf00      	nop
 801d5b0:	3730      	adds	r7, #48	; 0x30
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bdb0      	pop	{r4, r5, r7, pc}
 801d5b6:	bf00      	nop
 801d5b8:	08023480 	.word	0x08023480

0801d5bc <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
 801d5c4:	6878      	ldr	r0, [r7, #4]
 801d5c6:	f000 fa8b 	bl	801dae0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	3708      	adds	r7, #8
 801d5d0:	46bd      	mov	sp, r7
 801d5d2:	bd80      	pop	{r7, pc}

0801d5d4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801d5d4:	b480      	push	{r7}
 801d5d6:	b083      	sub	sp, #12
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	2200      	movs	r2, #0
 801d5e0:	601a      	str	r2, [r3, #0]
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	2200      	movs	r2, #0
 801d5e6:	605a      	str	r2, [r3, #4]
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	609a      	str	r2, [r3, #8]
	{ }
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	370c      	adds	r7, #12
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5fa:	4770      	bx	lr

0801d5fc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 801d5fc:	b480      	push	{r7}
 801d5fe:	b083      	sub	sp, #12
 801d600:	af00      	add	r7, sp, #0
 801d602:	6078      	str	r0, [r7, #4]
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	4618      	mov	r0, r3
 801d608:	370c      	adds	r7, #12
 801d60a:	46bd      	mov	sp, r7
 801d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d610:	4770      	bx	lr

0801d612 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 801d612:	b580      	push	{r7, lr}
 801d614:	b084      	sub	sp, #16
 801d616:	af00      	add	r7, sp, #0
 801d618:	60f8      	str	r0, [r7, #12]
 801d61a:	60b9      	str	r1, [r7, #8]
 801d61c:	607a      	str	r2, [r7, #4]
	if (__p)
 801d61e:	68bb      	ldr	r3, [r7, #8]
 801d620:	2b00      	cmp	r3, #0
 801d622:	d005      	beq.n	801d630 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	687a      	ldr	r2, [r7, #4]
 801d628:	68b9      	ldr	r1, [r7, #8]
 801d62a:	4618      	mov	r0, r3
 801d62c:	f000 fa63 	bl	801daf6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 801d630:	bf00      	nop
 801d632:	3710      	adds	r7, #16
 801d634:	46bd      	mov	sp, r7
 801d636:	bd80      	pop	{r7, pc}

0801d638 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801d638:	b580      	push	{r7, lr}
 801d63a:	b084      	sub	sp, #16
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	60f8      	str	r0, [r7, #12]
 801d640:	60b9      	str	r1, [r7, #8]
 801d642:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801d644:	6878      	ldr	r0, [r7, #4]
 801d646:	f000 fa65 	bl	801db14 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d64a:	4603      	mov	r3, r0
 801d64c:	461a      	mov	r2, r3
 801d64e:	68b9      	ldr	r1, [r7, #8]
 801d650:	68f8      	ldr	r0, [r7, #12]
 801d652:	f000 fa6a 	bl	801db2a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 801d656:	bf00      	nop
 801d658:	3710      	adds	r7, #16
 801d65a:	46bd      	mov	sp, r7
 801d65c:	bd80      	pop	{r7, pc}

0801d65e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d65e:	b580      	push	{r7, lr}
 801d660:	b084      	sub	sp, #16
 801d662:	af00      	add	r7, sp, #0
 801d664:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	1d1a      	adds	r2, r3, #4
 801d66a:	f107 030c 	add.w	r3, r7, #12
 801d66e:	4611      	mov	r1, r2
 801d670:	4618      	mov	r0, r3
 801d672:	f000 fa73 	bl	801db5c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	4618      	mov	r0, r3
 801d67a:	3710      	adds	r7, #16
 801d67c:	46bd      	mov	sp, r7
 801d67e:	bd80      	pop	{r7, pc}

0801d680 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 801d680:	b580      	push	{r7, lr}
 801d682:	b082      	sub	sp, #8
 801d684:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 801d686:	4618      	mov	r0, r3
 801d688:	f000 f805 	bl	801d696 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 801d68c:	4603      	mov	r3, r0
      }
 801d68e:	4618      	mov	r0, r3
 801d690:	3708      	adds	r7, #8
 801d692:	46bd      	mov	sp, r7
 801d694:	bd80      	pop	{r7, pc}

0801d696 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 801d696:	b480      	push	{r7}
 801d698:	b083      	sub	sp, #12
 801d69a:	af00      	add	r7, sp, #0
 801d69c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 801d69e:	2301      	movs	r3, #1
      }
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	370c      	adds	r7, #12
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6aa:	4770      	bx	lr

0801d6ac <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801d6ac:	b5b0      	push	{r4, r5, r7, lr}
 801d6ae:	b08c      	sub	sp, #48	; 0x30
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	60f8      	str	r0, [r7, #12]
 801d6b4:	60b9      	str	r1, [r7, #8]
 801d6b6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801d6b8:	4a59      	ldr	r2, [pc, #356]	; (801d820 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 801d6ba:	2101      	movs	r1, #1
 801d6bc:	68f8      	ldr	r0, [r7, #12]
 801d6be:	f000 fa5d 	bl	801db7c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 801d6c2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 801d6ca:	68fb      	ldr	r3, [r7, #12]
 801d6cc:	685b      	ldr	r3, [r3, #4]
 801d6ce:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 801d6d0:	68f8      	ldr	r0, [r7, #12]
 801d6d2:	f000 fa9a 	bl	801dc0a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 801d6d6:	4603      	mov	r3, r0
 801d6d8:	617b      	str	r3, [r7, #20]
 801d6da:	f107 0214 	add.w	r2, r7, #20
 801d6de:	f107 0308 	add.w	r3, r7, #8
 801d6e2:	4611      	mov	r1, r2
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f000 faa0 	bl	801dc2a <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d6f2:	4618      	mov	r0, r3
 801d6f4:	f000 faae 	bl	801dc54 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 801d6f8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 801d6fa:	69bb      	ldr	r3, [r7, #24]
 801d6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 801d6fe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801d700:	69fb      	ldr	r3, [r7, #28]
 801d702:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801d704:	69ba      	ldr	r2, [r7, #24]
 801d706:	18d5      	adds	r5, r2, r3
 801d708:	6878      	ldr	r0, [r7, #4]
 801d70a:	f000 fa03 	bl	801db14 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d70e:	4603      	mov	r3, r0
 801d710:	461a      	mov	r2, r3
 801d712:	4629      	mov	r1, r5
 801d714:	4620      	mov	r0, r4
 801d716:	f7ff ff8f 	bl	801d638 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801d71a:	2300      	movs	r3, #0
 801d71c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 801d71e:	f7ff ffaf 	bl	801d680 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 801d722:	4603      	mov	r3, r0
 801d724:	2b00      	cmp	r3, #0
 801d726:	d027      	beq.n	801d778 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801d728:	f107 0308 	add.w	r3, r7, #8
 801d72c:	4618      	mov	r0, r3
 801d72e:	f000 fab9 	bl	801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801d732:	4603      	mov	r3, r0
 801d734:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	4618      	mov	r0, r3
 801d73a:	f000 fabe 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801d73e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801d740:	69ba      	ldr	r2, [r7, #24]
 801d742:	4621      	mov	r1, r4
 801d744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d746:	f000 fa99 	bl	801dc7c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801d74a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d74e:	3308      	adds	r3, #8
 801d750:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801d752:	f107 0308 	add.w	r3, r7, #8
 801d756:	4618      	mov	r0, r3
 801d758:	f000 faa4 	bl	801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801d75c:	4603      	mov	r3, r0
 801d75e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	4618      	mov	r0, r3
 801d764:	f000 faa9 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801d768:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801d76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d76c:	6a39      	ldr	r1, [r7, #32]
 801d76e:	4620      	mov	r0, r4
 801d770:	f000 fa84 	bl	801dc7c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801d774:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d776:	e026      	b.n	801d7c6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 801d778:	f107 0308 	add.w	r3, r7, #8
 801d77c:	4618      	mov	r0, r3
 801d77e:	f000 fa91 	bl	801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801d782:	4603      	mov	r3, r0
 801d784:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	4618      	mov	r0, r3
 801d78a:	f000 fa96 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801d78e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 801d790:	69ba      	ldr	r2, [r7, #24]
 801d792:	4621      	mov	r1, r4
 801d794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d796:	f000 fa9b 	bl	801dcd0 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 801d79a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d79e:	3308      	adds	r3, #8
 801d7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 801d7a2:	f107 0308 	add.w	r3, r7, #8
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	f000 fa7c 	bl	801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801d7ac:	4603      	mov	r3, r0
 801d7ae:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f000 fa81 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801d7b8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 801d7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d7bc:	6a39      	ldr	r1, [r7, #32]
 801d7be:	4620      	mov	r0, r4
 801d7c0:	f000 fa86 	bl	801dcd0 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 801d7c4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 801d7c6:	f7ff ff5b 	bl	801d680 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 801d7ca:	4603      	mov	r3, r0
 801d7cc:	f083 0301 	eor.w	r3, r3, #1
 801d7d0:	b2db      	uxtb	r3, r3
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d009      	beq.n	801d7ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	4618      	mov	r0, r3
 801d7da:	f000 fa6e 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801d7de:	4603      	mov	r3, r0
 801d7e0:	461a      	mov	r2, r3
 801d7e2:	6a39      	ldr	r1, [r7, #32]
 801d7e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d7e6:	f000 fa8c 	bl	801dd02 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 801d7ea:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	689a      	ldr	r2, [r3, #8]
 801d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7f2:	1ad3      	subs	r3, r2, r3
 801d7f4:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801d7f6:	461a      	mov	r2, r3
 801d7f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d7fa:	f7ff ff0a 	bl	801d612 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	69ba      	ldr	r2, [r7, #24]
 801d802:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d808:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d80c:	00db      	lsls	r3, r3, #3
 801d80e:	69ba      	ldr	r2, [r7, #24]
 801d810:	441a      	add	r2, r3
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	609a      	str	r2, [r3, #8]
    }
 801d816:	bf00      	nop
 801d818:	3730      	adds	r7, #48	; 0x30
 801d81a:	46bd      	mov	sp, r7
 801d81c:	bdb0      	pop	{r4, r5, r7, pc}
 801d81e:	bf00      	nop
 801d820:	08023480 	.word	0x08023480

0801d824 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801d824:	b590      	push	{r4, r7, lr}
 801d826:	b085      	sub	sp, #20
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
 801d82c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	685a      	ldr	r2, [r3, #4]
 801d832:	683b      	ldr	r3, [r7, #0]
 801d834:	1ad3      	subs	r3, r2, r3
 801d836:	10db      	asrs	r3, r3, #3
 801d838:	60fb      	str	r3, [r7, #12]
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d00e      	beq.n	801d85e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	4618      	mov	r0, r3
 801d848:	f000 fa37 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801d84c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801d84e:	461a      	mov	r2, r3
 801d850:	4621      	mov	r1, r4
 801d852:	6838      	ldr	r0, [r7, #0]
 801d854:	f000 fa55 	bl	801dd02 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	683a      	ldr	r2, [r7, #0]
 801d85c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 801d85e:	bf00      	nop
 801d860:	3714      	adds	r7, #20
 801d862:	46bd      	mov	sp, r7
 801d864:	bd90      	pop	{r4, r7, pc}

0801d866 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801d866:	b590      	push	{r4, r7, lr}
 801d868:	b085      	sub	sp, #20
 801d86a:	af00      	add	r7, sp, #0
 801d86c:	6078      	str	r0, [r7, #4]
 801d86e:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	685a      	ldr	r2, [r3, #4]
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	1ad3      	subs	r3, r2, r3
 801d878:	109b      	asrs	r3, r3, #2
 801d87a:	60fb      	str	r3, [r7, #12]
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d00e      	beq.n	801d8a0 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	4618      	mov	r0, r3
 801d88a:	f000 f8f7 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801d88e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801d890:	461a      	mov	r2, r3
 801d892:	4621      	mov	r1, r4
 801d894:	6838      	ldr	r0, [r7, #0]
 801d896:	f000 f915 	bl	801dac4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	683a      	ldr	r2, [r7, #0]
 801d89e:	605a      	str	r2, [r3, #4]
      }
 801d8a0:	bf00      	nop
 801d8a2:	3714      	adds	r7, #20
 801d8a4:	46bd      	mov	sp, r7
 801d8a6:	bd90      	pop	{r4, r7, pc}

0801d8a8 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801d8a8:	b480      	push	{r7}
 801d8aa:	b083      	sub	sp, #12
 801d8ac:	af00      	add	r7, sp, #0
 801d8ae:	6078      	str	r0, [r7, #4]
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	370c      	adds	r7, #12
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8bc:	4770      	bx	lr

0801d8be <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801d8be:	b580      	push	{r7, lr}
 801d8c0:	b084      	sub	sp, #16
 801d8c2:	af00      	add	r7, sp, #0
 801d8c4:	60f8      	str	r0, [r7, #12]
 801d8c6:	60b9      	str	r1, [r7, #8]
 801d8c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801d8ca:	687a      	ldr	r2, [r7, #4]
 801d8cc:	68b9      	ldr	r1, [r7, #8]
 801d8ce:	68f8      	ldr	r0, [r7, #12]
 801d8d0:	f000 fa25 	bl	801dd1e <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 801d8d4:	bf00      	nop
 801d8d6:	3710      	adds	r7, #16
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	bd80      	pop	{r7, pc}

0801d8dc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d8dc:	b480      	push	{r7}
 801d8de:	b083      	sub	sp, #12
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	4618      	mov	r0, r3
 801d8e8:	370c      	adds	r7, #12
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8f0:	4770      	bx	lr

0801d8f2 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 801d8f2:	b590      	push	{r4, r7, lr}
 801d8f4:	b085      	sub	sp, #20
 801d8f6:	af00      	add	r7, sp, #0
 801d8f8:	60f8      	str	r0, [r7, #12]
 801d8fa:	60b9      	str	r1, [r7, #8]
 801d8fc:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801d8fe:	6878      	ldr	r0, [r7, #4]
 801d900:	f7ff ffec 	bl	801d8dc <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 801d904:	4603      	mov	r3, r0
 801d906:	681c      	ldr	r4, [r3, #0]
 801d908:	68bb      	ldr	r3, [r7, #8]
 801d90a:	4619      	mov	r1, r3
 801d90c:	2004      	movs	r0, #4
 801d90e:	f7e3 fbed 	bl	80010ec <_ZnwjPv>
 801d912:	4603      	mov	r3, r0
 801d914:	601c      	str	r4, [r3, #0]
 801d916:	bf00      	nop
 801d918:	3714      	adds	r7, #20
 801d91a:	46bd      	mov	sp, r7
 801d91c:	bd90      	pop	{r4, r7, pc}

0801d91e <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801d91e:	b480      	push	{r7}
 801d920:	b083      	sub	sp, #12
 801d922:	af00      	add	r7, sp, #0
 801d924:	6078      	str	r0, [r7, #4]
 801d926:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801d928:	683b      	ldr	r3, [r7, #0]
 801d92a:	681a      	ldr	r2, [r3, #0]
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	601a      	str	r2, [r3, #0]
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	4618      	mov	r0, r3
 801d934:	370c      	adds	r7, #12
 801d936:	46bd      	mov	sp, r7
 801d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d93c:	4770      	bx	lr

0801d93e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801d93e:	b590      	push	{r4, r7, lr}
 801d940:	b087      	sub	sp, #28
 801d942:	af00      	add	r7, sp, #0
 801d944:	60f8      	str	r0, [r7, #12]
 801d946:	60b9      	str	r1, [r7, #8]
 801d948:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801d94a:	68f8      	ldr	r0, [r7, #12]
 801d94c:	f000 f9f7 	bl	801dd3e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801d950:	4604      	mov	r4, r0
 801d952:	68f8      	ldr	r0, [r7, #12]
 801d954:	f7ff fccf 	bl	801d2f6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801d958:	4603      	mov	r3, r0
 801d95a:	1ae2      	subs	r2, r4, r3
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	429a      	cmp	r2, r3
 801d960:	bf34      	ite	cc
 801d962:	2301      	movcc	r3, #1
 801d964:	2300      	movcs	r3, #0
 801d966:	b2db      	uxtb	r3, r3
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d002      	beq.n	801d972 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f000 feb7 	bl	801e6e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801d972:	68f8      	ldr	r0, [r7, #12]
 801d974:	f7ff fcbf 	bl	801d2f6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801d978:	4604      	mov	r4, r0
 801d97a:	68f8      	ldr	r0, [r7, #12]
 801d97c:	f7ff fcbb 	bl	801d2f6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801d980:	4603      	mov	r3, r0
 801d982:	613b      	str	r3, [r7, #16]
 801d984:	f107 0208 	add.w	r2, r7, #8
 801d988:	f107 0310 	add.w	r3, r7, #16
 801d98c:	4611      	mov	r1, r2
 801d98e:	4618      	mov	r0, r3
 801d990:	f7e5 fa4e 	bl	8002e30 <_ZSt3maxIjERKT_S2_S2_>
 801d994:	4603      	mov	r3, r0
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	4423      	add	r3, r4
 801d99a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801d99c:	68f8      	ldr	r0, [r7, #12]
 801d99e:	f7ff fcaa 	bl	801d2f6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801d9a2:	4602      	mov	r2, r0
 801d9a4:	697b      	ldr	r3, [r7, #20]
 801d9a6:	4293      	cmp	r3, r2
 801d9a8:	d306      	bcc.n	801d9b8 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 801d9aa:	68f8      	ldr	r0, [r7, #12]
 801d9ac:	f000 f9c7 	bl	801dd3e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	697b      	ldr	r3, [r7, #20]
 801d9b4:	4293      	cmp	r3, r2
 801d9b6:	d904      	bls.n	801d9c2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 801d9b8:	68f8      	ldr	r0, [r7, #12]
 801d9ba:	f000 f9c0 	bl	801dd3e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	e000      	b.n	801d9c4 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 801d9c2:	697b      	ldr	r3, [r7, #20]
      }
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	371c      	adds	r7, #28
 801d9c8:	46bd      	mov	sp, r7
 801d9ca:	bd90      	pop	{r4, r7, pc}

0801d9cc <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801d9cc:	b580      	push	{r7, lr}
 801d9ce:	b084      	sub	sp, #16
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801d9d4:	687a      	ldr	r2, [r7, #4]
 801d9d6:	f107 030c 	add.w	r3, r7, #12
 801d9da:	4611      	mov	r1, r2
 801d9dc:	4618      	mov	r0, r3
 801d9de:	f7ff ff9e 	bl	801d91e <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801d9e2:	68fb      	ldr	r3, [r7, #12]
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	3710      	adds	r7, #16
 801d9e8:	46bd      	mov	sp, r7
 801d9ea:	bd80      	pop	{r7, pc}

0801d9ec <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801d9ec:	b590      	push	{r4, r7, lr}
 801d9ee:	b083      	sub	sp, #12
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
 801d9f4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 801d9f6:	6878      	ldr	r0, [r7, #4]
 801d9f8:	f000 f835 	bl	801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801d9fc:	4603      	mov	r3, r0
 801d9fe:	681c      	ldr	r4, [r3, #0]
 801da00:	6838      	ldr	r0, [r7, #0]
 801da02:	f000 f830 	bl	801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801da06:	4603      	mov	r3, r0
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	1ae3      	subs	r3, r4, r3
 801da0c:	109b      	asrs	r3, r3, #2
 801da0e:	4618      	mov	r0, r3
 801da10:	370c      	adds	r7, #12
 801da12:	46bd      	mov	sp, r7
 801da14:	bd90      	pop	{r4, r7, pc}

0801da16 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801da16:	b580      	push	{r7, lr}
 801da18:	b082      	sub	sp, #8
 801da1a:	af00      	add	r7, sp, #0
 801da1c:	6078      	str	r0, [r7, #4]
 801da1e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d006      	beq.n	801da34 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	6839      	ldr	r1, [r7, #0]
 801da2a:	4618      	mov	r0, r3
 801da2c:	f000 f998 	bl	801dd60 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 801da30:	4603      	mov	r3, r0
 801da32:	e000      	b.n	801da36 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 801da34:	2300      	movs	r3, #0
      }
 801da36:	4618      	mov	r0, r3
 801da38:	3708      	adds	r7, #8
 801da3a:	46bd      	mov	sp, r7
 801da3c:	bd80      	pop	{r7, pc}

0801da3e <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801da3e:	b590      	push	{r4, r7, lr}
 801da40:	b087      	sub	sp, #28
 801da42:	af02      	add	r7, sp, #8
 801da44:	60f8      	str	r0, [r7, #12]
 801da46:	60b9      	str	r1, [r7, #8]
 801da48:	607a      	str	r2, [r7, #4]
 801da4a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801da4c:	f88d 4000 	strb.w	r4, [sp]
 801da50:	683b      	ldr	r3, [r7, #0]
 801da52:	687a      	ldr	r2, [r7, #4]
 801da54:	68b9      	ldr	r1, [r7, #8]
 801da56:	68f8      	ldr	r0, [r7, #12]
 801da58:	f000 f991 	bl	801dd7e <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 801da5c:	4603      	mov	r3, r0
      }
 801da5e:	4618      	mov	r0, r3
 801da60:	3714      	adds	r7, #20
 801da62:	46bd      	mov	sp, r7
 801da64:	bd90      	pop	{r4, r7, pc}

0801da66 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801da66:	b480      	push	{r7}
 801da68:	b083      	sub	sp, #12
 801da6a:	af00      	add	r7, sp, #0
 801da6c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	4618      	mov	r0, r3
 801da72:	370c      	adds	r7, #12
 801da74:	46bd      	mov	sp, r7
 801da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da7a:	4770      	bx	lr

0801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801da7c:	b480      	push	{r7}
 801da7e:	b083      	sub	sp, #12
 801da80:	af00      	add	r7, sp, #0
 801da82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	4618      	mov	r0, r3
 801da88:	370c      	adds	r7, #12
 801da8a:	46bd      	mov	sp, r7
 801da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da90:	4770      	bx	lr

0801da92 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 801da92:	b590      	push	{r4, r7, lr}
 801da94:	b085      	sub	sp, #20
 801da96:	af00      	add	r7, sp, #0
 801da98:	60f8      	str	r0, [r7, #12]
 801da9a:	60b9      	str	r1, [r7, #8]
 801da9c:	607a      	str	r2, [r7, #4]
 801da9e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 801daa0:	68f8      	ldr	r0, [r7, #12]
 801daa2:	f000 f97e 	bl	801dda2 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801daa6:	4604      	mov	r4, r0
 801daa8:	68b8      	ldr	r0, [r7, #8]
 801daaa:	f000 f97a 	bl	801dda2 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801daae:	4601      	mov	r1, r0
 801dab0:	683b      	ldr	r3, [r7, #0]
 801dab2:	687a      	ldr	r2, [r7, #4]
 801dab4:	4620      	mov	r0, r4
 801dab6:	f000 f983 	bl	801ddc0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 801daba:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 801dabc:	4618      	mov	r0, r3
 801dabe:	3714      	adds	r7, #20
 801dac0:	46bd      	mov	sp, r7
 801dac2:	bd90      	pop	{r4, r7, pc}

0801dac4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b084      	sub	sp, #16
 801dac8:	af00      	add	r7, sp, #0
 801daca:	60f8      	str	r0, [r7, #12]
 801dacc:	60b9      	str	r1, [r7, #8]
 801dace:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 801dad0:	68b9      	ldr	r1, [r7, #8]
 801dad2:	68f8      	ldr	r0, [r7, #12]
 801dad4:	f000 f985 	bl	801dde2 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 801dad8:	bf00      	nop
 801dada:	3710      	adds	r7, #16
 801dadc:	46bd      	mov	sp, r7
 801dade:	bd80      	pop	{r7, pc}

0801dae0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801dae0:	b480      	push	{r7}
 801dae2:	b083      	sub	sp, #12
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	4618      	mov	r0, r3
 801daec:	370c      	adds	r7, #12
 801daee:	46bd      	mov	sp, r7
 801daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daf4:	4770      	bx	lr

0801daf6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801daf6:	b580      	push	{r7, lr}
 801daf8:	b084      	sub	sp, #16
 801dafa:	af00      	add	r7, sp, #0
 801dafc:	60f8      	str	r0, [r7, #12]
 801dafe:	60b9      	str	r1, [r7, #8]
 801db00:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801db02:	687a      	ldr	r2, [r7, #4]
 801db04:	68b9      	ldr	r1, [r7, #8]
 801db06:	68f8      	ldr	r0, [r7, #12]
 801db08:	f000 f978 	bl	801ddfc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 801db0c:	bf00      	nop
 801db0e:	3710      	adds	r7, #16
 801db10:	46bd      	mov	sp, r7
 801db12:	bd80      	pop	{r7, pc}

0801db14 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801db14:	b480      	push	{r7}
 801db16:	b083      	sub	sp, #12
 801db18:	af00      	add	r7, sp, #0
 801db1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	4618      	mov	r0, r3
 801db20:	370c      	adds	r7, #12
 801db22:	46bd      	mov	sp, r7
 801db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db28:	4770      	bx	lr

0801db2a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801db2a:	b590      	push	{r4, r7, lr}
 801db2c:	b085      	sub	sp, #20
 801db2e:	af00      	add	r7, sp, #0
 801db30:	60f8      	str	r0, [r7, #12]
 801db32:	60b9      	str	r1, [r7, #8]
 801db34:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801db36:	6878      	ldr	r0, [r7, #4]
 801db38:	f7ff ffec 	bl	801db14 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 801db3c:	4604      	mov	r4, r0
 801db3e:	68bb      	ldr	r3, [r7, #8]
 801db40:	4619      	mov	r1, r3
 801db42:	2008      	movs	r0, #8
 801db44:	f7e3 fad2 	bl	80010ec <_ZnwjPv>
 801db48:	4603      	mov	r3, r0
 801db4a:	4622      	mov	r2, r4
 801db4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801db50:	e883 0003 	stmia.w	r3, {r0, r1}
 801db54:	bf00      	nop
 801db56:	3714      	adds	r7, #20
 801db58:	46bd      	mov	sp, r7
 801db5a:	bd90      	pop	{r4, r7, pc}

0801db5c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801db5c:	b480      	push	{r7}
 801db5e:	b083      	sub	sp, #12
 801db60:	af00      	add	r7, sp, #0
 801db62:	6078      	str	r0, [r7, #4]
 801db64:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	681a      	ldr	r2, [r3, #0]
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	601a      	str	r2, [r3, #0]
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	4618      	mov	r0, r3
 801db72:	370c      	adds	r7, #12
 801db74:	46bd      	mov	sp, r7
 801db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db7a:	4770      	bx	lr

0801db7c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801db7c:	b590      	push	{r4, r7, lr}
 801db7e:	b087      	sub	sp, #28
 801db80:	af00      	add	r7, sp, #0
 801db82:	60f8      	str	r0, [r7, #12]
 801db84:	60b9      	str	r1, [r7, #8]
 801db86:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801db88:	68f8      	ldr	r0, [r7, #12]
 801db8a:	f000 f947 	bl	801de1c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 801db8e:	4604      	mov	r4, r0
 801db90:	68f8      	ldr	r0, [r7, #12]
 801db92:	f7ff fb82 	bl	801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801db96:	4603      	mov	r3, r0
 801db98:	1ae2      	subs	r2, r4, r3
 801db9a:	68bb      	ldr	r3, [r7, #8]
 801db9c:	429a      	cmp	r2, r3
 801db9e:	bf34      	ite	cc
 801dba0:	2301      	movcc	r3, #1
 801dba2:	2300      	movcs	r3, #0
 801dba4:	b2db      	uxtb	r3, r3
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d002      	beq.n	801dbb0 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801dbaa:	6878      	ldr	r0, [r7, #4]
 801dbac:	f000 fd98 	bl	801e6e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801dbb0:	68f8      	ldr	r0, [r7, #12]
 801dbb2:	f7ff fb72 	bl	801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	68f8      	ldr	r0, [r7, #12]
 801dbba:	f7ff fb6e 	bl	801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	613b      	str	r3, [r7, #16]
 801dbc2:	f107 0208 	add.w	r2, r7, #8
 801dbc6:	f107 0310 	add.w	r3, r7, #16
 801dbca:	4611      	mov	r1, r2
 801dbcc:	4618      	mov	r0, r3
 801dbce:	f7e5 f92f 	bl	8002e30 <_ZSt3maxIjERKT_S2_S2_>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	4423      	add	r3, r4
 801dbd8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801dbda:	68f8      	ldr	r0, [r7, #12]
 801dbdc:	f7ff fb5d 	bl	801d29a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801dbe0:	4602      	mov	r2, r0
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	4293      	cmp	r3, r2
 801dbe6:	d306      	bcc.n	801dbf6 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 801dbe8:	68f8      	ldr	r0, [r7, #12]
 801dbea:	f000 f917 	bl	801de1c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 801dbee:	4602      	mov	r2, r0
 801dbf0:	697b      	ldr	r3, [r7, #20]
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	d904      	bls.n	801dc00 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 801dbf6:	68f8      	ldr	r0, [r7, #12]
 801dbf8:	f000 f910 	bl	801de1c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 801dbfc:	4603      	mov	r3, r0
 801dbfe:	e000      	b.n	801dc02 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 801dc00:	697b      	ldr	r3, [r7, #20]
      }
 801dc02:	4618      	mov	r0, r3
 801dc04:	371c      	adds	r7, #28
 801dc06:	46bd      	mov	sp, r7
 801dc08:	bd90      	pop	{r4, r7, pc}

0801dc0a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801dc0a:	b580      	push	{r7, lr}
 801dc0c:	b084      	sub	sp, #16
 801dc0e:	af00      	add	r7, sp, #0
 801dc10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801dc12:	687a      	ldr	r2, [r7, #4]
 801dc14:	f107 030c 	add.w	r3, r7, #12
 801dc18:	4611      	mov	r1, r2
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f7ff ff9e 	bl	801db5c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	4618      	mov	r0, r3
 801dc24:	3710      	adds	r7, #16
 801dc26:	46bd      	mov	sp, r7
 801dc28:	bd80      	pop	{r7, pc}

0801dc2a <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801dc2a:	b590      	push	{r4, r7, lr}
 801dc2c:	b083      	sub	sp, #12
 801dc2e:	af00      	add	r7, sp, #0
 801dc30:	6078      	str	r0, [r7, #4]
 801dc32:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801dc34:	6878      	ldr	r0, [r7, #4]
 801dc36:	f000 f835 	bl	801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	681c      	ldr	r4, [r3, #0]
 801dc3e:	6838      	ldr	r0, [r7, #0]
 801dc40:	f000 f830 	bl	801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801dc44:	4603      	mov	r3, r0
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	1ae3      	subs	r3, r4, r3
 801dc4a:	10db      	asrs	r3, r3, #3
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	370c      	adds	r7, #12
 801dc50:	46bd      	mov	sp, r7
 801dc52:	bd90      	pop	{r4, r7, pc}

0801dc54 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801dc54:	b580      	push	{r7, lr}
 801dc56:	b082      	sub	sp, #8
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
 801dc5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801dc5e:	683b      	ldr	r3, [r7, #0]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d006      	beq.n	801dc72 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	6839      	ldr	r1, [r7, #0]
 801dc68:	4618      	mov	r0, r3
 801dc6a:	f000 f8e8 	bl	801de3e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 801dc6e:	4603      	mov	r3, r0
 801dc70:	e000      	b.n	801dc74 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 801dc72:	2300      	movs	r3, #0
      }
 801dc74:	4618      	mov	r0, r3
 801dc76:	3708      	adds	r7, #8
 801dc78:	46bd      	mov	sp, r7
 801dc7a:	bd80      	pop	{r7, pc}

0801dc7c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801dc7c:	b590      	push	{r4, r7, lr}
 801dc7e:	b087      	sub	sp, #28
 801dc80:	af02      	add	r7, sp, #8
 801dc82:	60f8      	str	r0, [r7, #12]
 801dc84:	60b9      	str	r1, [r7, #8]
 801dc86:	607a      	str	r2, [r7, #4]
 801dc88:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801dc8a:	f88d 4000 	strb.w	r4, [sp]
 801dc8e:	683b      	ldr	r3, [r7, #0]
 801dc90:	687a      	ldr	r2, [r7, #4]
 801dc92:	68b9      	ldr	r1, [r7, #8]
 801dc94:	68f8      	ldr	r0, [r7, #12]
 801dc96:	f000 f8e1 	bl	801de5c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801dc9a:	4603      	mov	r3, r0
      }
 801dc9c:	4618      	mov	r0, r3
 801dc9e:	3714      	adds	r7, #20
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd90      	pop	{r4, r7, pc}

0801dca4 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801dca4:	b480      	push	{r7}
 801dca6:	b083      	sub	sp, #12
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	4618      	mov	r0, r3
 801dcb0:	370c      	adds	r7, #12
 801dcb2:	46bd      	mov	sp, r7
 801dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb8:	4770      	bx	lr

0801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801dcba:	b480      	push	{r7}
 801dcbc:	b083      	sub	sp, #12
 801dcbe:	af00      	add	r7, sp, #0
 801dcc0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	370c      	adds	r7, #12
 801dcc8:	46bd      	mov	sp, r7
 801dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcce:	4770      	bx	lr

0801dcd0 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 801dcd0:	b590      	push	{r4, r7, lr}
 801dcd2:	b085      	sub	sp, #20
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	60f8      	str	r0, [r7, #12]
 801dcd8:	60b9      	str	r1, [r7, #8]
 801dcda:	607a      	str	r2, [r7, #4]
 801dcdc:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 801dcde:	68f8      	ldr	r0, [r7, #12]
 801dce0:	f000 f8ce 	bl	801de80 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 801dce4:	4604      	mov	r4, r0
 801dce6:	68b8      	ldr	r0, [r7, #8]
 801dce8:	f000 f8ca 	bl	801de80 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 801dcec:	4601      	mov	r1, r0
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	687a      	ldr	r2, [r7, #4]
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	f000 f8d3 	bl	801de9e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 801dcf8:	4603      	mov	r3, r0
    }
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	3714      	adds	r7, #20
 801dcfe:	46bd      	mov	sp, r7
 801dd00:	bd90      	pop	{r4, r7, pc}

0801dd02 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801dd02:	b580      	push	{r7, lr}
 801dd04:	b084      	sub	sp, #16
 801dd06:	af00      	add	r7, sp, #0
 801dd08:	60f8      	str	r0, [r7, #12]
 801dd0a:	60b9      	str	r1, [r7, #8]
 801dd0c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 801dd0e:	68b9      	ldr	r1, [r7, #8]
 801dd10:	68f8      	ldr	r0, [r7, #12]
 801dd12:	f000 f8d5 	bl	801dec0 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 801dd16:	bf00      	nop
 801dd18:	3710      	adds	r7, #16
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd80      	pop	{r7, pc}

0801dd1e <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 801dd1e:	b580      	push	{r7, lr}
 801dd20:	b084      	sub	sp, #16
 801dd22:	af00      	add	r7, sp, #0
 801dd24:	60f8      	str	r0, [r7, #12]
 801dd26:	60b9      	str	r1, [r7, #8]
 801dd28:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	009b      	lsls	r3, r3, #2
 801dd2e:	4619      	mov	r1, r3
 801dd30:	68b8      	ldr	r0, [r7, #8]
 801dd32:	f000 fcbb 	bl	801e6ac <_ZdlPvj>
      }
 801dd36:	bf00      	nop
 801dd38:	3710      	adds	r7, #16
 801dd3a:	46bd      	mov	sp, r7
 801dd3c:	bd80      	pop	{r7, pc}

0801dd3e <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801dd3e:	b580      	push	{r7, lr}
 801dd40:	b082      	sub	sp, #8
 801dd42:	af00      	add	r7, sp, #0
 801dd44:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f000 f8e0 	bl	801df0e <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	4618      	mov	r0, r3
 801dd52:	f000 f8c2 	bl	801deda <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 801dd56:	4603      	mov	r3, r0
 801dd58:	4618      	mov	r0, r3
 801dd5a:	3708      	adds	r7, #8
 801dd5c:	46bd      	mov	sp, r7
 801dd5e:	bd80      	pop	{r7, pc}

0801dd60 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 801dd60:	b580      	push	{r7, lr}
 801dd62:	b082      	sub	sp, #8
 801dd64:	af00      	add	r7, sp, #0
 801dd66:	6078      	str	r0, [r7, #4]
 801dd68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	6839      	ldr	r1, [r7, #0]
 801dd6e:	6878      	ldr	r0, [r7, #4]
 801dd70:	f000 f8d8 	bl	801df24 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 801dd74:	4603      	mov	r3, r0
 801dd76:	4618      	mov	r0, r3
 801dd78:	3708      	adds	r7, #8
 801dd7a:	46bd      	mov	sp, r7
 801dd7c:	bd80      	pop	{r7, pc}

0801dd7e <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801dd7e:	b580      	push	{r7, lr}
 801dd80:	b084      	sub	sp, #16
 801dd82:	af00      	add	r7, sp, #0
 801dd84:	60f8      	str	r0, [r7, #12]
 801dd86:	60b9      	str	r1, [r7, #8]
 801dd88:	607a      	str	r2, [r7, #4]
 801dd8a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801dd8c:	683b      	ldr	r3, [r7, #0]
 801dd8e:	687a      	ldr	r2, [r7, #4]
 801dd90:	68b9      	ldr	r1, [r7, #8]
 801dd92:	68f8      	ldr	r0, [r7, #12]
 801dd94:	f000 f8e4 	bl	801df60 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801dd98:	4603      	mov	r3, r0
      }
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	3710      	adds	r7, #16
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	bd80      	pop	{r7, pc}

0801dda2 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 801dda2:	b580      	push	{r7, lr}
 801dda4:	b084      	sub	sp, #16
 801dda6:	af00      	add	r7, sp, #0
 801dda8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801ddaa:	f107 030c 	add.w	r3, r7, #12
 801ddae:	6879      	ldr	r1, [r7, #4]
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f000 f8f2 	bl	801df9a <_ZNSt13move_iteratorIPPvEC1ES1_>
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	4618      	mov	r0, r3
 801ddba:	3710      	adds	r7, #16
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	bd80      	pop	{r7, pc}

0801ddc0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801ddc0:	b580      	push	{r7, lr}
 801ddc2:	b084      	sub	sp, #16
 801ddc4:	af00      	add	r7, sp, #0
 801ddc6:	60f8      	str	r0, [r7, #12]
 801ddc8:	60b9      	str	r1, [r7, #8]
 801ddca:	607a      	str	r2, [r7, #4]
 801ddcc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801ddce:	687a      	ldr	r2, [r7, #4]
 801ddd0:	68b9      	ldr	r1, [r7, #8]
 801ddd2:	68f8      	ldr	r0, [r7, #12]
 801ddd4:	f000 f8f3 	bl	801dfbe <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801ddd8:	4603      	mov	r3, r0
 801ddda:	4618      	mov	r0, r3
 801dddc:	3710      	adds	r7, #16
 801ddde:	46bd      	mov	sp, r7
 801dde0:	bd80      	pop	{r7, pc}

0801dde2 <_ZSt8_DestroyIPPvEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801dde2:	b580      	push	{r7, lr}
 801dde4:	b082      	sub	sp, #8
 801dde6:	af00      	add	r7, sp, #0
 801dde8:	6078      	str	r0, [r7, #4]
 801ddea:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 801ddec:	6839      	ldr	r1, [r7, #0]
 801ddee:	6878      	ldr	r0, [r7, #4]
 801ddf0:	f000 f8f7 	bl	801dfe2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 801ddf4:	bf00      	nop
 801ddf6:	3708      	adds	r7, #8
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	bd80      	pop	{r7, pc}

0801ddfc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b084      	sub	sp, #16
 801de00:	af00      	add	r7, sp, #0
 801de02:	60f8      	str	r0, [r7, #12]
 801de04:	60b9      	str	r1, [r7, #8]
 801de06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	00db      	lsls	r3, r3, #3
 801de0c:	4619      	mov	r1, r3
 801de0e:	68b8      	ldr	r0, [r7, #8]
 801de10:	f000 fc4c 	bl	801e6ac <_ZdlPvj>
      }
 801de14:	bf00      	nop
 801de16:	3710      	adds	r7, #16
 801de18:	46bd      	mov	sp, r7
 801de1a:	bd80      	pop	{r7, pc}

0801de1c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801de1c:	b580      	push	{r7, lr}
 801de1e:	b082      	sub	sp, #8
 801de20:	af00      	add	r7, sp, #0
 801de22:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	4618      	mov	r0, r3
 801de28:	f000 f900 	bl	801e02c <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801de2c:	4603      	mov	r3, r0
 801de2e:	4618      	mov	r0, r3
 801de30:	f000 f8e2 	bl	801dff8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 801de34:	4603      	mov	r3, r0
 801de36:	4618      	mov	r0, r3
 801de38:	3708      	adds	r7, #8
 801de3a:	46bd      	mov	sp, r7
 801de3c:	bd80      	pop	{r7, pc}

0801de3e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801de3e:	b580      	push	{r7, lr}
 801de40:	b082      	sub	sp, #8
 801de42:	af00      	add	r7, sp, #0
 801de44:	6078      	str	r0, [r7, #4]
 801de46:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801de48:	2200      	movs	r2, #0
 801de4a:	6839      	ldr	r1, [r7, #0]
 801de4c:	6878      	ldr	r0, [r7, #4]
 801de4e:	f000 f8f8 	bl	801e042 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 801de52:	4603      	mov	r3, r0
 801de54:	4618      	mov	r0, r3
 801de56:	3708      	adds	r7, #8
 801de58:	46bd      	mov	sp, r7
 801de5a:	bd80      	pop	{r7, pc}

0801de5c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801de5c:	b580      	push	{r7, lr}
 801de5e:	b084      	sub	sp, #16
 801de60:	af00      	add	r7, sp, #0
 801de62:	60f8      	str	r0, [r7, #12]
 801de64:	60b9      	str	r1, [r7, #8]
 801de66:	607a      	str	r2, [r7, #4]
 801de68:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801de6a:	683b      	ldr	r3, [r7, #0]
 801de6c:	687a      	ldr	r2, [r7, #4]
 801de6e:	68b9      	ldr	r1, [r7, #8]
 801de70:	68f8      	ldr	r0, [r7, #12]
 801de72:	f000 f904 	bl	801e07e <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 801de76:	4603      	mov	r3, r0
      }
 801de78:	4618      	mov	r0, r3
 801de7a:	3710      	adds	r7, #16
 801de7c:	46bd      	mov	sp, r7
 801de7e:	bd80      	pop	{r7, pc}

0801de80 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 801de80:	b580      	push	{r7, lr}
 801de82:	b084      	sub	sp, #16
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801de88:	f107 030c 	add.w	r3, r7, #12
 801de8c:	6879      	ldr	r1, [r7, #4]
 801de8e:	4618      	mov	r0, r3
 801de90:	f000 f912 	bl	801e0b8 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	4618      	mov	r0, r3
 801de98:	3710      	adds	r7, #16
 801de9a:	46bd      	mov	sp, r7
 801de9c:	bd80      	pop	{r7, pc}

0801de9e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801de9e:	b580      	push	{r7, lr}
 801dea0:	b084      	sub	sp, #16
 801dea2:	af00      	add	r7, sp, #0
 801dea4:	60f8      	str	r0, [r7, #12]
 801dea6:	60b9      	str	r1, [r7, #8]
 801dea8:	607a      	str	r2, [r7, #4]
 801deaa:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801deac:	687a      	ldr	r2, [r7, #4]
 801deae:	68b9      	ldr	r1, [r7, #8]
 801deb0:	68f8      	ldr	r0, [r7, #12]
 801deb2:	f000 f913 	bl	801e0dc <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801deb6:	4603      	mov	r3, r0
 801deb8:	4618      	mov	r0, r3
 801deba:	3710      	adds	r7, #16
 801debc:	46bd      	mov	sp, r7
 801debe:	bd80      	pop	{r7, pc}

0801dec0 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801dec0:	b580      	push	{r7, lr}
 801dec2:	b082      	sub	sp, #8
 801dec4:	af00      	add	r7, sp, #0
 801dec6:	6078      	str	r0, [r7, #4]
 801dec8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801deca:	6839      	ldr	r1, [r7, #0]
 801decc:	6878      	ldr	r0, [r7, #4]
 801dece:	f000 f917 	bl	801e100 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 801ded2:	bf00      	nop
 801ded4:	3708      	adds	r7, #8
 801ded6:	46bd      	mov	sp, r7
 801ded8:	bd80      	pop	{r7, pc}

0801deda <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801deda:	b580      	push	{r7, lr}
 801dedc:	b084      	sub	sp, #16
 801dede:	af00      	add	r7, sp, #0
 801dee0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801dee2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801dee6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801dee8:	6878      	ldr	r0, [r7, #4]
 801deea:	f000 f914 	bl	801e116 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 801deee:	4603      	mov	r3, r0
 801def0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801def2:	f107 0208 	add.w	r2, r7, #8
 801def6:	f107 030c 	add.w	r3, r7, #12
 801defa:	4611      	mov	r1, r2
 801defc:	4618      	mov	r0, r3
 801defe:	f7e5 fa27 	bl	8003350 <_ZSt3minIjERKT_S2_S2_>
 801df02:	4603      	mov	r3, r0
 801df04:	681b      	ldr	r3, [r3, #0]
      }
 801df06:	4618      	mov	r0, r3
 801df08:	3710      	adds	r7, #16
 801df0a:	46bd      	mov	sp, r7
 801df0c:	bd80      	pop	{r7, pc}

0801df0e <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801df0e:	b480      	push	{r7}
 801df10:	b083      	sub	sp, #12
 801df12:	af00      	add	r7, sp, #0
 801df14:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	4618      	mov	r0, r3
 801df1a:	370c      	adds	r7, #12
 801df1c:	46bd      	mov	sp, r7
 801df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df22:	4770      	bx	lr

0801df24 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801df24:	b580      	push	{r7, lr}
 801df26:	b084      	sub	sp, #16
 801df28:	af00      	add	r7, sp, #0
 801df2a:	60f8      	str	r0, [r7, #12]
 801df2c:	60b9      	str	r1, [r7, #8]
 801df2e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801df30:	68f8      	ldr	r0, [r7, #12]
 801df32:	f000 f8fc 	bl	801e12e <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 801df36:	4602      	mov	r2, r0
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	4293      	cmp	r3, r2
 801df3c:	bf8c      	ite	hi
 801df3e:	2301      	movhi	r3, #1
 801df40:	2300      	movls	r3, #0
 801df42:	b2db      	uxtb	r3, r3
 801df44:	2b00      	cmp	r3, #0
 801df46:	d001      	beq.n	801df4c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801df48:	f000 fbc7 	bl	801e6da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801df4c:	68bb      	ldr	r3, [r7, #8]
 801df4e:	009b      	lsls	r3, r3, #2
 801df50:	4618      	mov	r0, r3
 801df52:	f000 fbaf 	bl	801e6b4 <_Znwj>
 801df56:	4603      	mov	r3, r0
      }
 801df58:	4618      	mov	r0, r3
 801df5a:	3710      	adds	r7, #16
 801df5c:	46bd      	mov	sp, r7
 801df5e:	bd80      	pop	{r7, pc}

0801df60 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801df60:	b5b0      	push	{r4, r5, r7, lr}
 801df62:	b084      	sub	sp, #16
 801df64:	af00      	add	r7, sp, #0
 801df66:	60f8      	str	r0, [r7, #12]
 801df68:	60b9      	str	r1, [r7, #8]
 801df6a:	607a      	str	r2, [r7, #4]
 801df6c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 801df6e:	68f8      	ldr	r0, [r7, #12]
 801df70:	f000 f8e9 	bl	801e146 <_ZSt12__niter_baseIPPvET_S2_>
 801df74:	4604      	mov	r4, r0
 801df76:	68b8      	ldr	r0, [r7, #8]
 801df78:	f000 f8e5 	bl	801e146 <_ZSt12__niter_baseIPPvET_S2_>
 801df7c:	4605      	mov	r5, r0
 801df7e:	6878      	ldr	r0, [r7, #4]
 801df80:	f000 f8e1 	bl	801e146 <_ZSt12__niter_baseIPPvET_S2_>
 801df84:	4602      	mov	r2, r0
 801df86:	683b      	ldr	r3, [r7, #0]
 801df88:	4629      	mov	r1, r5
 801df8a:	4620      	mov	r0, r4
 801df8c:	f000 f8e6 	bl	801e15c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 801df90:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 801df92:	4618      	mov	r0, r3
 801df94:	3710      	adds	r7, #16
 801df96:	46bd      	mov	sp, r7
 801df98:	bdb0      	pop	{r4, r5, r7, pc}

0801df9a <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 801df9a:	b580      	push	{r7, lr}
 801df9c:	b082      	sub	sp, #8
 801df9e:	af00      	add	r7, sp, #0
 801dfa0:	6078      	str	r0, [r7, #4]
 801dfa2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 801dfa4:	463b      	mov	r3, r7
 801dfa6:	4618      	mov	r0, r3
 801dfa8:	f000 f8f6 	bl	801e198 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>
 801dfac:	4603      	mov	r3, r0
 801dfae:	681a      	ldr	r2, [r3, #0]
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	601a      	str	r2, [r3, #0]
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	3708      	adds	r7, #8
 801dfba:	46bd      	mov	sp, r7
 801dfbc:	bd80      	pop	{r7, pc}

0801dfbe <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801dfbe:	b580      	push	{r7, lr}
 801dfc0:	b086      	sub	sp, #24
 801dfc2:	af00      	add	r7, sp, #0
 801dfc4:	60f8      	str	r0, [r7, #12]
 801dfc6:	60b9      	str	r1, [r7, #8]
 801dfc8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801dfca:	2301      	movs	r3, #1
 801dfcc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801dfce:	687a      	ldr	r2, [r7, #4]
 801dfd0:	68b9      	ldr	r1, [r7, #8]
 801dfd2:	68f8      	ldr	r0, [r7, #12]
 801dfd4:	f000 f8eb 	bl	801e1ae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 801dfd8:	4603      	mov	r3, r0
    }
 801dfda:	4618      	mov	r0, r3
 801dfdc:	3718      	adds	r7, #24
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	bd80      	pop	{r7, pc}

0801dfe2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 801dfe2:	b480      	push	{r7}
 801dfe4:	b083      	sub	sp, #12
 801dfe6:	af00      	add	r7, sp, #0
 801dfe8:	6078      	str	r0, [r7, #4]
 801dfea:	6039      	str	r1, [r7, #0]
 801dfec:	bf00      	nop
 801dfee:	370c      	adds	r7, #12
 801dff0:	46bd      	mov	sp, r7
 801dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff6:	4770      	bx	lr

0801dff8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801dff8:	b580      	push	{r7, lr}
 801dffa:	b084      	sub	sp, #16
 801dffc:	af00      	add	r7, sp, #0
 801dffe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801e000:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801e004:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f000 f8e1 	bl	801e1ce <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 801e00c:	4603      	mov	r3, r0
 801e00e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801e010:	f107 0208 	add.w	r2, r7, #8
 801e014:	f107 030c 	add.w	r3, r7, #12
 801e018:	4611      	mov	r1, r2
 801e01a:	4618      	mov	r0, r3
 801e01c:	f7e5 f998 	bl	8003350 <_ZSt3minIjERKT_S2_S2_>
 801e020:	4603      	mov	r3, r0
 801e022:	681b      	ldr	r3, [r3, #0]
      }
 801e024:	4618      	mov	r0, r3
 801e026:	3710      	adds	r7, #16
 801e028:	46bd      	mov	sp, r7
 801e02a:	bd80      	pop	{r7, pc}

0801e02c <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801e02c:	b480      	push	{r7}
 801e02e:	b083      	sub	sp, #12
 801e030:	af00      	add	r7, sp, #0
 801e032:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	4618      	mov	r0, r3
 801e038:	370c      	adds	r7, #12
 801e03a:	46bd      	mov	sp, r7
 801e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e040:	4770      	bx	lr

0801e042 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801e042:	b580      	push	{r7, lr}
 801e044:	b084      	sub	sp, #16
 801e046:	af00      	add	r7, sp, #0
 801e048:	60f8      	str	r0, [r7, #12]
 801e04a:	60b9      	str	r1, [r7, #8]
 801e04c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801e04e:	68f8      	ldr	r0, [r7, #12]
 801e050:	f000 f8c9 	bl	801e1e6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 801e054:	4602      	mov	r2, r0
 801e056:	68bb      	ldr	r3, [r7, #8]
 801e058:	4293      	cmp	r3, r2
 801e05a:	bf8c      	ite	hi
 801e05c:	2301      	movhi	r3, #1
 801e05e:	2300      	movls	r3, #0
 801e060:	b2db      	uxtb	r3, r3
 801e062:	2b00      	cmp	r3, #0
 801e064:	d001      	beq.n	801e06a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801e066:	f000 fb38 	bl	801e6da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801e06a:	68bb      	ldr	r3, [r7, #8]
 801e06c:	00db      	lsls	r3, r3, #3
 801e06e:	4618      	mov	r0, r3
 801e070:	f000 fb20 	bl	801e6b4 <_Znwj>
 801e074:	4603      	mov	r3, r0
      }
 801e076:	4618      	mov	r0, r3
 801e078:	3710      	adds	r7, #16
 801e07a:	46bd      	mov	sp, r7
 801e07c:	bd80      	pop	{r7, pc}

0801e07e <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801e07e:	b5b0      	push	{r4, r5, r7, lr}
 801e080:	b084      	sub	sp, #16
 801e082:	af00      	add	r7, sp, #0
 801e084:	60f8      	str	r0, [r7, #12]
 801e086:	60b9      	str	r1, [r7, #8]
 801e088:	607a      	str	r2, [r7, #4]
 801e08a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801e08c:	68f8      	ldr	r0, [r7, #12]
 801e08e:	f000 f8b6 	bl	801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e092:	4604      	mov	r4, r0
 801e094:	68b8      	ldr	r0, [r7, #8]
 801e096:	f000 f8b2 	bl	801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e09a:	4605      	mov	r5, r0
 801e09c:	6878      	ldr	r0, [r7, #4]
 801e09e:	f000 f8ae 	bl	801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e0a2:	4602      	mov	r2, r0
 801e0a4:	683b      	ldr	r3, [r7, #0]
 801e0a6:	4629      	mov	r1, r5
 801e0a8:	4620      	mov	r0, r4
 801e0aa:	f000 f8b3 	bl	801e214 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 801e0ae:	4603      	mov	r3, r0
    }
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	3710      	adds	r7, #16
 801e0b4:	46bd      	mov	sp, r7
 801e0b6:	bdb0      	pop	{r4, r5, r7, pc}

0801e0b8 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 801e0b8:	b580      	push	{r7, lr}
 801e0ba:	b082      	sub	sp, #8
 801e0bc:	af00      	add	r7, sp, #0
 801e0be:	6078      	str	r0, [r7, #4]
 801e0c0:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 801e0c2:	463b      	mov	r3, r7
 801e0c4:	4618      	mov	r0, r3
 801e0c6:	f000 f8c3 	bl	801e250 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	681a      	ldr	r2, [r3, #0]
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	601a      	str	r2, [r3, #0]
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	4618      	mov	r0, r3
 801e0d6:	3708      	adds	r7, #8
 801e0d8:	46bd      	mov	sp, r7
 801e0da:	bd80      	pop	{r7, pc}

0801e0dc <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b086      	sub	sp, #24
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	60f8      	str	r0, [r7, #12]
 801e0e4:	60b9      	str	r1, [r7, #8]
 801e0e6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801e0e8:	2301      	movs	r3, #1
 801e0ea:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801e0ec:	687a      	ldr	r2, [r7, #4]
 801e0ee:	68b9      	ldr	r1, [r7, #8]
 801e0f0:	68f8      	ldr	r0, [r7, #12]
 801e0f2:	f000 f8b8 	bl	801e266 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 801e0f6:	4603      	mov	r3, r0
    }
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	3718      	adds	r7, #24
 801e0fc:	46bd      	mov	sp, r7
 801e0fe:	bd80      	pop	{r7, pc}

0801e100 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 801e100:	b480      	push	{r7}
 801e102:	b083      	sub	sp, #12
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
 801e108:	6039      	str	r1, [r7, #0]
 801e10a:	bf00      	nop
 801e10c:	370c      	adds	r7, #12
 801e10e:	46bd      	mov	sp, r7
 801e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e114:	4770      	bx	lr

0801e116 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801e116:	b580      	push	{r7, lr}
 801e118:	b082      	sub	sp, #8
 801e11a:	af00      	add	r7, sp, #0
 801e11c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 801e11e:	6878      	ldr	r0, [r7, #4]
 801e120:	f000 f8b1 	bl	801e286 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 801e124:	4603      	mov	r3, r0
      }
 801e126:	4618      	mov	r0, r3
 801e128:	3708      	adds	r7, #8
 801e12a:	46bd      	mov	sp, r7
 801e12c:	bd80      	pop	{r7, pc}

0801e12e <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801e12e:	b480      	push	{r7}
 801e130:	b083      	sub	sp, #12
 801e132:	af00      	add	r7, sp, #0
 801e134:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801e136:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 801e13a:	4618      	mov	r0, r3
 801e13c:	370c      	adds	r7, #12
 801e13e:	46bd      	mov	sp, r7
 801e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e144:	4770      	bx	lr

0801e146 <_ZSt12__niter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 801e146:	b480      	push	{r7}
 801e148:	b083      	sub	sp, #12
 801e14a:	af00      	add	r7, sp, #0
 801e14c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	4618      	mov	r0, r3
 801e152:	370c      	adds	r7, #12
 801e154:	46bd      	mov	sp, r7
 801e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e15a:	4770      	bx	lr

0801e15c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801e15c:	b580      	push	{r7, lr}
 801e15e:	b086      	sub	sp, #24
 801e160:	af00      	add	r7, sp, #0
 801e162:	60f8      	str	r0, [r7, #12]
 801e164:	60b9      	str	r1, [r7, #8]
 801e166:	607a      	str	r2, [r7, #4]
 801e168:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801e16a:	68ba      	ldr	r2, [r7, #8]
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	1ad3      	subs	r3, r2, r3
 801e170:	109b      	asrs	r3, r3, #2
 801e172:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801e174:	697b      	ldr	r3, [r7, #20]
 801e176:	2b00      	cmp	r3, #0
 801e178:	dd06      	ble.n	801e188 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	009b      	lsls	r3, r3, #2
 801e17e:	461a      	mov	r2, r3
 801e180:	68f9      	ldr	r1, [r7, #12]
 801e182:	6878      	ldr	r0, [r7, #4]
 801e184:	f001 fe36 	bl	801fdf4 <memmove>
      return __result + __count;
 801e188:	697b      	ldr	r3, [r7, #20]
 801e18a:	009b      	lsls	r3, r3, #2
 801e18c:	687a      	ldr	r2, [r7, #4]
 801e18e:	4413      	add	r3, r2
    }
 801e190:	4618      	mov	r0, r3
 801e192:	3718      	adds	r7, #24
 801e194:	46bd      	mov	sp, r7
 801e196:	bd80      	pop	{r7, pc}

0801e198 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801e198:	b480      	push	{r7}
 801e19a:	b083      	sub	sp, #12
 801e19c:	af00      	add	r7, sp, #0
 801e19e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	4618      	mov	r0, r3
 801e1a4:	370c      	adds	r7, #12
 801e1a6:	46bd      	mov	sp, r7
 801e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1ac:	4770      	bx	lr

0801e1ae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801e1ae:	b580      	push	{r7, lr}
 801e1b0:	b084      	sub	sp, #16
 801e1b2:	af00      	add	r7, sp, #0
 801e1b4:	60f8      	str	r0, [r7, #12]
 801e1b6:	60b9      	str	r1, [r7, #8]
 801e1b8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801e1ba:	687a      	ldr	r2, [r7, #4]
 801e1bc:	68b9      	ldr	r1, [r7, #8]
 801e1be:	68f8      	ldr	r0, [r7, #12]
 801e1c0:	f000 f86d 	bl	801e29e <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801e1c4:	4603      	mov	r3, r0
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	3710      	adds	r7, #16
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	bd80      	pop	{r7, pc}

0801e1ce <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801e1ce:	b580      	push	{r7, lr}
 801e1d0:	b082      	sub	sp, #8
 801e1d2:	af00      	add	r7, sp, #0
 801e1d4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 801e1d6:	6878      	ldr	r0, [r7, #4]
 801e1d8:	f000 f879 	bl	801e2ce <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 801e1dc:	4603      	mov	r3, r0
      }
 801e1de:	4618      	mov	r0, r3
 801e1e0:	3708      	adds	r7, #8
 801e1e2:	46bd      	mov	sp, r7
 801e1e4:	bd80      	pop	{r7, pc}

0801e1e6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801e1e6:	b480      	push	{r7}
 801e1e8:	b083      	sub	sp, #12
 801e1ea:	af00      	add	r7, sp, #0
 801e1ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801e1ee:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	370c      	adds	r7, #12
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1fc:	4770      	bx	lr

0801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 801e1fe:	b480      	push	{r7}
 801e200:	b083      	sub	sp, #12
 801e202:	af00      	add	r7, sp, #0
 801e204:	6078      	str	r0, [r7, #4]
    { return __it; }
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	4618      	mov	r0, r3
 801e20a:	370c      	adds	r7, #12
 801e20c:	46bd      	mov	sp, r7
 801e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e212:	4770      	bx	lr

0801e214 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801e214:	b580      	push	{r7, lr}
 801e216:	b086      	sub	sp, #24
 801e218:	af00      	add	r7, sp, #0
 801e21a:	60f8      	str	r0, [r7, #12]
 801e21c:	60b9      	str	r1, [r7, #8]
 801e21e:	607a      	str	r2, [r7, #4]
 801e220:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801e222:	68ba      	ldr	r2, [r7, #8]
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	1ad3      	subs	r3, r2, r3
 801e228:	10db      	asrs	r3, r3, #3
 801e22a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801e22c:	697b      	ldr	r3, [r7, #20]
 801e22e:	2b00      	cmp	r3, #0
 801e230:	dd06      	ble.n	801e240 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801e232:	697b      	ldr	r3, [r7, #20]
 801e234:	00db      	lsls	r3, r3, #3
 801e236:	461a      	mov	r2, r3
 801e238:	68f9      	ldr	r1, [r7, #12]
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f001 fdda 	bl	801fdf4 <memmove>
      return __result + __count;
 801e240:	697b      	ldr	r3, [r7, #20]
 801e242:	00db      	lsls	r3, r3, #3
 801e244:	687a      	ldr	r2, [r7, #4]
 801e246:	4413      	add	r3, r2
    }
 801e248:	4618      	mov	r0, r3
 801e24a:	3718      	adds	r7, #24
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801e250:	b480      	push	{r7}
 801e252:	b083      	sub	sp, #12
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	4618      	mov	r0, r3
 801e25c:	370c      	adds	r7, #12
 801e25e:	46bd      	mov	sp, r7
 801e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e264:	4770      	bx	lr

0801e266 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801e266:	b580      	push	{r7, lr}
 801e268:	b084      	sub	sp, #16
 801e26a:	af00      	add	r7, sp, #0
 801e26c:	60f8      	str	r0, [r7, #12]
 801e26e:	60b9      	str	r1, [r7, #8]
 801e270:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801e272:	687a      	ldr	r2, [r7, #4]
 801e274:	68b9      	ldr	r1, [r7, #8]
 801e276:	68f8      	ldr	r0, [r7, #12]
 801e278:	f000 f835 	bl	801e2e6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801e27c:	4603      	mov	r3, r0
 801e27e:	4618      	mov	r0, r3
 801e280:	3710      	adds	r7, #16
 801e282:	46bd      	mov	sp, r7
 801e284:	bd80      	pop	{r7, pc}

0801e286 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801e286:	b580      	push	{r7, lr}
 801e288:	b082      	sub	sp, #8
 801e28a:	af00      	add	r7, sp, #0
 801e28c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 801e28e:	6878      	ldr	r0, [r7, #4]
 801e290:	f7ff ff4d 	bl	801e12e <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 801e294:	4603      	mov	r3, r0
 801e296:	4618      	mov	r0, r3
 801e298:	3708      	adds	r7, #8
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}

0801e29e <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 801e29e:	b590      	push	{r4, r7, lr}
 801e2a0:	b085      	sub	sp, #20
 801e2a2:	af00      	add	r7, sp, #0
 801e2a4:	60f8      	str	r0, [r7, #12]
 801e2a6:	60b9      	str	r1, [r7, #8]
 801e2a8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801e2aa:	68f8      	ldr	r0, [r7, #12]
 801e2ac:	f000 f833 	bl	801e316 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801e2b0:	4604      	mov	r4, r0
 801e2b2:	68b8      	ldr	r0, [r7, #8]
 801e2b4:	f000 f82f 	bl	801e316 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801e2b8:	4603      	mov	r3, r0
 801e2ba:	687a      	ldr	r2, [r7, #4]
 801e2bc:	4619      	mov	r1, r3
 801e2be:	4620      	mov	r0, r4
 801e2c0:	f000 f83a 	bl	801e338 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 801e2c4:	4603      	mov	r3, r0
    }
 801e2c6:	4618      	mov	r0, r3
 801e2c8:	3714      	adds	r7, #20
 801e2ca:	46bd      	mov	sp, r7
 801e2cc:	bd90      	pop	{r4, r7, pc}

0801e2ce <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801e2ce:	b580      	push	{r7, lr}
 801e2d0:	b082      	sub	sp, #8
 801e2d2:	af00      	add	r7, sp, #0
 801e2d4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 801e2d6:	6878      	ldr	r0, [r7, #4]
 801e2d8:	f7ff ff85 	bl	801e1e6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 801e2dc:	4603      	mov	r3, r0
 801e2de:	4618      	mov	r0, r3
 801e2e0:	3708      	adds	r7, #8
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	bd80      	pop	{r7, pc}

0801e2e6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 801e2e6:	b590      	push	{r4, r7, lr}
 801e2e8:	b085      	sub	sp, #20
 801e2ea:	af00      	add	r7, sp, #0
 801e2ec:	60f8      	str	r0, [r7, #12]
 801e2ee:	60b9      	str	r1, [r7, #8]
 801e2f0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801e2f2:	68f8      	ldr	r0, [r7, #12]
 801e2f4:	f000 f843 	bl	801e37e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801e2f8:	4604      	mov	r4, r0
 801e2fa:	68b8      	ldr	r0, [r7, #8]
 801e2fc:	f000 f83f 	bl	801e37e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801e300:	4603      	mov	r3, r0
 801e302:	687a      	ldr	r2, [r7, #4]
 801e304:	4619      	mov	r1, r3
 801e306:	4620      	mov	r0, r4
 801e308:	f000 f84a 	bl	801e3a0 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 801e30c:	4603      	mov	r3, r0
    }
 801e30e:	4618      	mov	r0, r3
 801e310:	3714      	adds	r7, #20
 801e312:	46bd      	mov	sp, r7
 801e314:	bd90      	pop	{r4, r7, pc}

0801e316 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 801e316:	b580      	push	{r7, lr}
 801e318:	b082      	sub	sp, #8
 801e31a:	af00      	add	r7, sp, #0
 801e31c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 801e31e:	1d3b      	adds	r3, r7, #4
 801e320:	4618      	mov	r0, r3
 801e322:	f000 f860 	bl	801e3e6 <_ZNKSt13move_iteratorIPPvE4baseEv>
 801e326:	4603      	mov	r3, r0
 801e328:	4618      	mov	r0, r3
 801e32a:	f000 f868 	bl	801e3fe <_ZSt12__miter_baseIPPvET_S2_>
 801e32e:	4603      	mov	r3, r0
 801e330:	4618      	mov	r0, r3
 801e332:	3708      	adds	r7, #8
 801e334:	46bd      	mov	sp, r7
 801e336:	bd80      	pop	{r7, pc}

0801e338 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801e338:	b5b0      	push	{r4, r5, r7, lr}
 801e33a:	b084      	sub	sp, #16
 801e33c:	af00      	add	r7, sp, #0
 801e33e:	60f8      	str	r0, [r7, #12]
 801e340:	60b9      	str	r1, [r7, #8]
 801e342:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801e344:	68f8      	ldr	r0, [r7, #12]
 801e346:	f7ff fefe 	bl	801e146 <_ZSt12__niter_baseIPPvET_S2_>
 801e34a:	4604      	mov	r4, r0
 801e34c:	68b8      	ldr	r0, [r7, #8]
 801e34e:	f7ff fefa 	bl	801e146 <_ZSt12__niter_baseIPPvET_S2_>
 801e352:	4605      	mov	r5, r0
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	4618      	mov	r0, r3
 801e358:	f7ff fef5 	bl	801e146 <_ZSt12__niter_baseIPPvET_S2_>
 801e35c:	4603      	mov	r3, r0
 801e35e:	461a      	mov	r2, r3
 801e360:	4629      	mov	r1, r5
 801e362:	4620      	mov	r0, r4
 801e364:	f000 f856 	bl	801e414 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>
 801e368:	4602      	mov	r2, r0
 801e36a:	1d3b      	adds	r3, r7, #4
 801e36c:	4611      	mov	r1, r2
 801e36e:	4618      	mov	r0, r3
 801e370:	f000 f860 	bl	801e434 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 801e374:	4603      	mov	r3, r0
    }
 801e376:	4618      	mov	r0, r3
 801e378:	3710      	adds	r7, #16
 801e37a:	46bd      	mov	sp, r7
 801e37c:	bdb0      	pop	{r4, r5, r7, pc}

0801e37e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 801e37e:	b580      	push	{r7, lr}
 801e380:	b082      	sub	sp, #8
 801e382:	af00      	add	r7, sp, #0
 801e384:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 801e386:	1d3b      	adds	r3, r7, #4
 801e388:	4618      	mov	r0, r3
 801e38a:	f000 f85f 	bl	801e44c <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 801e38e:	4603      	mov	r3, r0
 801e390:	4618      	mov	r0, r3
 801e392:	f000 f867 	bl	801e464 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e396:	4603      	mov	r3, r0
 801e398:	4618      	mov	r0, r3
 801e39a:	3708      	adds	r7, #8
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}

0801e3a0 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801e3a0:	b5b0      	push	{r4, r5, r7, lr}
 801e3a2:	b084      	sub	sp, #16
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	60f8      	str	r0, [r7, #12]
 801e3a8:	60b9      	str	r1, [r7, #8]
 801e3aa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801e3ac:	68f8      	ldr	r0, [r7, #12]
 801e3ae:	f7ff ff26 	bl	801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e3b2:	4604      	mov	r4, r0
 801e3b4:	68b8      	ldr	r0, [r7, #8]
 801e3b6:	f7ff ff22 	bl	801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e3ba:	4605      	mov	r5, r0
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	4618      	mov	r0, r3
 801e3c0:	f7ff ff1d 	bl	801e1fe <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801e3c4:	4603      	mov	r3, r0
 801e3c6:	461a      	mov	r2, r3
 801e3c8:	4629      	mov	r1, r5
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	f000 f855 	bl	801e47a <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 801e3d0:	4602      	mov	r2, r0
 801e3d2:	1d3b      	adds	r3, r7, #4
 801e3d4:	4611      	mov	r1, r2
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f000 f85f 	bl	801e49a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 801e3dc:	4603      	mov	r3, r0
    }
 801e3de:	4618      	mov	r0, r3
 801e3e0:	3710      	adds	r7, #16
 801e3e2:	46bd      	mov	sp, r7
 801e3e4:	bdb0      	pop	{r4, r5, r7, pc}

0801e3e6 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 801e3e6:	b480      	push	{r7}
 801e3e8:	b083      	sub	sp, #12
 801e3ea:	af00      	add	r7, sp, #0
 801e3ec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	681b      	ldr	r3, [r3, #0]
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	370c      	adds	r7, #12
 801e3f6:	46bd      	mov	sp, r7
 801e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3fc:	4770      	bx	lr

0801e3fe <_ZSt12__miter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801e3fe:	b480      	push	{r7}
 801e400:	b083      	sub	sp, #12
 801e402:	af00      	add	r7, sp, #0
 801e404:	6078      	str	r0, [r7, #4]
    { return __it; }
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	4618      	mov	r0, r3
 801e40a:	370c      	adds	r7, #12
 801e40c:	46bd      	mov	sp, r7
 801e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e412:	4770      	bx	lr

0801e414 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801e414:	b580      	push	{r7, lr}
 801e416:	b084      	sub	sp, #16
 801e418:	af00      	add	r7, sp, #0
 801e41a:	60f8      	str	r0, [r7, #12]
 801e41c:	60b9      	str	r1, [r7, #8]
 801e41e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801e420:	687a      	ldr	r2, [r7, #4]
 801e422:	68b9      	ldr	r1, [r7, #8]
 801e424:	68f8      	ldr	r0, [r7, #12]
 801e426:	f000 f844 	bl	801e4b2 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 801e42a:	4603      	mov	r3, r0
 801e42c:	4618      	mov	r0, r3
 801e42e:	3710      	adds	r7, #16
 801e430:	46bd      	mov	sp, r7
 801e432:	bd80      	pop	{r7, pc}

0801e434 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801e434:	b480      	push	{r7}
 801e436:	b083      	sub	sp, #12
 801e438:	af00      	add	r7, sp, #0
 801e43a:	6078      	str	r0, [r7, #4]
 801e43c:	6039      	str	r1, [r7, #0]
    { return __res; }
 801e43e:	683b      	ldr	r3, [r7, #0]
 801e440:	4618      	mov	r0, r3
 801e442:	370c      	adds	r7, #12
 801e444:	46bd      	mov	sp, r7
 801e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e44a:	4770      	bx	lr

0801e44c <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 801e44c:	b480      	push	{r7}
 801e44e:	b083      	sub	sp, #12
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	4618      	mov	r0, r3
 801e45a:	370c      	adds	r7, #12
 801e45c:	46bd      	mov	sp, r7
 801e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e462:	4770      	bx	lr

0801e464 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 801e464:	b480      	push	{r7}
 801e466:	b083      	sub	sp, #12
 801e468:	af00      	add	r7, sp, #0
 801e46a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	4618      	mov	r0, r3
 801e470:	370c      	adds	r7, #12
 801e472:	46bd      	mov	sp, r7
 801e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e478:	4770      	bx	lr

0801e47a <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801e47a:	b580      	push	{r7, lr}
 801e47c:	b084      	sub	sp, #16
 801e47e:	af00      	add	r7, sp, #0
 801e480:	60f8      	str	r0, [r7, #12]
 801e482:	60b9      	str	r1, [r7, #8]
 801e484:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801e486:	687a      	ldr	r2, [r7, #4]
 801e488:	68b9      	ldr	r1, [r7, #8]
 801e48a:	68f8      	ldr	r0, [r7, #12]
 801e48c:	f000 f821 	bl	801e4d2 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 801e490:	4603      	mov	r3, r0
 801e492:	4618      	mov	r0, r3
 801e494:	3710      	adds	r7, #16
 801e496:	46bd      	mov	sp, r7
 801e498:	bd80      	pop	{r7, pc}

0801e49a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801e49a:	b480      	push	{r7}
 801e49c:	b083      	sub	sp, #12
 801e49e:	af00      	add	r7, sp, #0
 801e4a0:	6078      	str	r0, [r7, #4]
 801e4a2:	6039      	str	r1, [r7, #0]
    { return __res; }
 801e4a4:	683b      	ldr	r3, [r7, #0]
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	370c      	adds	r7, #12
 801e4aa:	46bd      	mov	sp, r7
 801e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4b0:	4770      	bx	lr

0801e4b2 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801e4b2:	b580      	push	{r7, lr}
 801e4b4:	b084      	sub	sp, #16
 801e4b6:	af00      	add	r7, sp, #0
 801e4b8:	60f8      	str	r0, [r7, #12]
 801e4ba:	60b9      	str	r1, [r7, #8]
 801e4bc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801e4be:	687a      	ldr	r2, [r7, #4]
 801e4c0:	68b9      	ldr	r1, [r7, #8]
 801e4c2:	68f8      	ldr	r0, [r7, #12]
 801e4c4:	f000 f815 	bl	801e4f2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 801e4c8:	4603      	mov	r3, r0
    }
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	3710      	adds	r7, #16
 801e4ce:	46bd      	mov	sp, r7
 801e4d0:	bd80      	pop	{r7, pc}

0801e4d2 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801e4d2:	b580      	push	{r7, lr}
 801e4d4:	b084      	sub	sp, #16
 801e4d6:	af00      	add	r7, sp, #0
 801e4d8:	60f8      	str	r0, [r7, #12]
 801e4da:	60b9      	str	r1, [r7, #8]
 801e4dc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801e4de:	687a      	ldr	r2, [r7, #4]
 801e4e0:	68b9      	ldr	r1, [r7, #8]
 801e4e2:	68f8      	ldr	r0, [r7, #12]
 801e4e4:	f000 f822 	bl	801e52c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 801e4e8:	4603      	mov	r3, r0
    }
 801e4ea:	4618      	mov	r0, r3
 801e4ec:	3710      	adds	r7, #16
 801e4ee:	46bd      	mov	sp, r7
 801e4f0:	bd80      	pop	{r7, pc}

0801e4f2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801e4f2:	b580      	push	{r7, lr}
 801e4f4:	b086      	sub	sp, #24
 801e4f6:	af00      	add	r7, sp, #0
 801e4f8:	60f8      	str	r0, [r7, #12]
 801e4fa:	60b9      	str	r1, [r7, #8]
 801e4fc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801e4fe:	68ba      	ldr	r2, [r7, #8]
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	1ad3      	subs	r3, r2, r3
 801e504:	109b      	asrs	r3, r3, #2
 801e506:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801e508:	697b      	ldr	r3, [r7, #20]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d006      	beq.n	801e51c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801e50e:	697b      	ldr	r3, [r7, #20]
 801e510:	009b      	lsls	r3, r3, #2
 801e512:	461a      	mov	r2, r3
 801e514:	68f9      	ldr	r1, [r7, #12]
 801e516:	6878      	ldr	r0, [r7, #4]
 801e518:	f001 fc6c 	bl	801fdf4 <memmove>
	  return __result + _Num;
 801e51c:	697b      	ldr	r3, [r7, #20]
 801e51e:	009b      	lsls	r3, r3, #2
 801e520:	687a      	ldr	r2, [r7, #4]
 801e522:	4413      	add	r3, r2
	}
 801e524:	4618      	mov	r0, r3
 801e526:	3718      	adds	r7, #24
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}

0801e52c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b086      	sub	sp, #24
 801e530:	af00      	add	r7, sp, #0
 801e532:	60f8      	str	r0, [r7, #12]
 801e534:	60b9      	str	r1, [r7, #8]
 801e536:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801e538:	68ba      	ldr	r2, [r7, #8]
 801e53a:	68fb      	ldr	r3, [r7, #12]
 801e53c:	1ad3      	subs	r3, r2, r3
 801e53e:	10db      	asrs	r3, r3, #3
 801e540:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801e542:	697b      	ldr	r3, [r7, #20]
 801e544:	2b00      	cmp	r3, #0
 801e546:	d006      	beq.n	801e556 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801e548:	697b      	ldr	r3, [r7, #20]
 801e54a:	00db      	lsls	r3, r3, #3
 801e54c:	461a      	mov	r2, r3
 801e54e:	68f9      	ldr	r1, [r7, #12]
 801e550:	6878      	ldr	r0, [r7, #4]
 801e552:	f001 fc4f 	bl	801fdf4 <memmove>
	  return __result + _Num;
 801e556:	697b      	ldr	r3, [r7, #20]
 801e558:	00db      	lsls	r3, r3, #3
 801e55a:	687a      	ldr	r2, [r7, #4]
 801e55c:	4413      	add	r3, r2
	}
 801e55e:	4618      	mov	r0, r3
 801e560:	3718      	adds	r7, #24
 801e562:	46bd      	mov	sp, r7
 801e564:	bd80      	pop	{r7, pc}
	...

0801e568 <_Z41__static_initialization_and_destruction_0ii>:
 801e568:	b580      	push	{r7, lr}
 801e56a:	b082      	sub	sp, #8
 801e56c:	af00      	add	r7, sp, #0
 801e56e:	6078      	str	r0, [r7, #4]
 801e570:	6039      	str	r1, [r7, #0]
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	2b01      	cmp	r3, #1
 801e576:	d139      	bne.n	801e5ec <_Z41__static_initialization_and_destruction_0ii+0x84>
 801e578:	683b      	ldr	r3, [r7, #0]
 801e57a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e57e:	4293      	cmp	r3, r2
 801e580:	d134      	bne.n	801e5ec <_Z41__static_initialization_and_destruction_0ii+0x84>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 801e582:	4b23      	ldr	r3, [pc, #140]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
};const NodeInfo_t nodeData[] = {
 801e58a:	4a22      	ldr	r2, [pc, #136]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e58c:	6053      	str	r3, [r2, #4]
 801e58e:	4b20      	ldr	r3, [pc, #128]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	4a20      	ldr	r2, [pc, #128]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e594:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension9, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801e598:	4b1d      	ldr	r3, [pc, #116]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
};const NodeInfo_t nodeData[] = {
 801e5a0:	4a1c      	ldr	r2, [pc, #112]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e5a2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801e5a6:	4b1a      	ldr	r3, [pc, #104]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	4a1a      	ldr	r2, [pc, #104]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e5ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension11, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
 801e5b0:	4b17      	ldr	r3, [pc, #92]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
};const NodeInfo_t nodeData[] = {
 801e5b8:	4a16      	ldr	r2, [pc, #88]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e5ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 801e5be:	4b14      	ldr	r3, [pc, #80]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	4a14      	ldr	r2, [pc, #80]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e5c4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2304, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
 801e5c8:	4b11      	ldr	r3, [pc, #68]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
};const NodeInfo_t nodeData[] = {
 801e5d0:	4a10      	ldr	r2, [pc, #64]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e5d2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 801e5d6:	4b0e      	ldr	r3, [pc, #56]	; (801e610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	4a0e      	ldr	r2, [pc, #56]	; (801e614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e5dc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
static std::vector<void*> overflow_buffers;
 801e5e0:	480d      	ldr	r0, [pc, #52]	; (801e618 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 801e5e2:	f7fe f9c4 	bl	801c96e <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 801e5e6:	480d      	ldr	r0, [pc, #52]	; (801e61c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801e5e8:	f7fe fa2b 	bl	801ca42 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d10a      	bne.n	801e608 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 801e5f2:	683b      	ldr	r3, [r7, #0]
 801e5f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e5f8:	4293      	cmp	r3, r2
 801e5fa:	d105      	bne.n	801e608 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 801e5fc:	4807      	ldr	r0, [pc, #28]	; (801e61c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801e5fe:	f000 f80f 	bl	801e620 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 801e602:	4805      	ldr	r0, [pc, #20]	; (801e618 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 801e604:	f000 f827 	bl	801e656 <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 801e608:	bf00      	nop
 801e60a:	3708      	adds	r7, #8
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}
 801e610:	200026a4 	.word	0x200026a4
 801e614:	20002444 	.word	0x20002444
 801e618:	20002d18 	.word	0x20002d18
 801e61c:	20002d24 	.word	0x20002d24

0801e620 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801e620:	b5b0      	push	{r4, r5, r7, lr}
 801e622:	b082      	sub	sp, #8
 801e624:	af00      	add	r7, sp, #0
 801e626:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	681c      	ldr	r4, [r3, #0]
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	4618      	mov	r0, r3
 801e634:	f7ff fb41 	bl	801dcba <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801e638:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801e63a:	461a      	mov	r2, r3
 801e63c:	4629      	mov	r1, r5
 801e63e:	4620      	mov	r0, r4
 801e640:	f7ff fb5f 	bl	801dd02 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	4618      	mov	r0, r3
 801e648:	f7fe fde8 	bl	801d21c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	4618      	mov	r0, r3
 801e650:	3708      	adds	r7, #8
 801e652:	46bd      	mov	sp, r7
 801e654:	bdb0      	pop	{r4, r5, r7, pc}

0801e656 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801e656:	b5b0      	push	{r4, r5, r7, lr}
 801e658:	b082      	sub	sp, #8
 801e65a:	af00      	add	r7, sp, #0
 801e65c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	681c      	ldr	r4, [r3, #0]
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	4618      	mov	r0, r3
 801e66a:	f7ff fa07 	bl	801da7c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801e66e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801e670:	461a      	mov	r2, r3
 801e672:	4629      	mov	r1, r5
 801e674:	4620      	mov	r0, r4
 801e676:	f7ff fa25 	bl	801dac4 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	4618      	mov	r0, r3
 801e67e:	f7fe fd73 	bl	801d168 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	4618      	mov	r0, r3
 801e686:	3708      	adds	r7, #8
 801e688:	46bd      	mov	sp, r7
 801e68a:	bdb0      	pop	{r4, r5, r7, pc}

0801e68c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 801e68c:	b580      	push	{r7, lr}
 801e68e:	af00      	add	r7, sp, #0
 801e690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e694:	2001      	movs	r0, #1
 801e696:	f7ff ff67 	bl	801e568 <_Z41__static_initialization_and_destruction_0ii>
 801e69a:	bd80      	pop	{r7, pc}

0801e69c <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 801e69c:	b580      	push	{r7, lr}
 801e69e:	af00      	add	r7, sp, #0
 801e6a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e6a4:	2000      	movs	r0, #0
 801e6a6:	f7ff ff5f 	bl	801e568 <_Z41__static_initialization_and_destruction_0ii>
 801e6aa:	bd80      	pop	{r7, pc}

0801e6ac <_ZdlPvj>:
 801e6ac:	f000 b81b 	b.w	801e6e6 <_ZdlPv>

0801e6b0 <_ZdaPv>:
 801e6b0:	f000 b819 	b.w	801e6e6 <_ZdlPv>

0801e6b4 <_Znwj>:
 801e6b4:	2801      	cmp	r0, #1
 801e6b6:	bf38      	it	cc
 801e6b8:	2001      	movcc	r0, #1
 801e6ba:	b510      	push	{r4, lr}
 801e6bc:	4604      	mov	r4, r0
 801e6be:	4620      	mov	r0, r4
 801e6c0:	f001 fb7a 	bl	801fdb8 <malloc>
 801e6c4:	b930      	cbnz	r0, 801e6d4 <_Znwj+0x20>
 801e6c6:	f000 f811 	bl	801e6ec <_ZSt15get_new_handlerv>
 801e6ca:	b908      	cbnz	r0, 801e6d0 <_Znwj+0x1c>
 801e6cc:	f001 fb06 	bl	801fcdc <abort>
 801e6d0:	4780      	blx	r0
 801e6d2:	e7f4      	b.n	801e6be <_Znwj+0xa>
 801e6d4:	bd10      	pop	{r4, pc}

0801e6d6 <_Znaj>:
 801e6d6:	f7ff bfed 	b.w	801e6b4 <_Znwj>

0801e6da <_ZSt17__throw_bad_allocv>:
 801e6da:	b508      	push	{r3, lr}
 801e6dc:	f001 fafe 	bl	801fcdc <abort>

0801e6e0 <_ZSt20__throw_length_errorPKc>:
 801e6e0:	b508      	push	{r3, lr}
 801e6e2:	f001 fafb 	bl	801fcdc <abort>

0801e6e6 <_ZdlPv>:
 801e6e6:	f001 bb6f 	b.w	801fdc8 <free>
	...

0801e6ec <_ZSt15get_new_handlerv>:
 801e6ec:	4b02      	ldr	r3, [pc, #8]	; (801e6f8 <_ZSt15get_new_handlerv+0xc>)
 801e6ee:	6818      	ldr	r0, [r3, #0]
 801e6f0:	f3bf 8f5b 	dmb	ish
 801e6f4:	4770      	bx	lr
 801e6f6:	bf00      	nop
 801e6f8:	20002d30 	.word	0x20002d30
 801e6fc:	00000000 	.word	0x00000000

0801e700 <floor>:
 801e700:	ec51 0b10 	vmov	r0, r1, d0
 801e704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e708:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e70c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e710:	2e13      	cmp	r6, #19
 801e712:	ee10 5a10 	vmov	r5, s0
 801e716:	ee10 8a10 	vmov	r8, s0
 801e71a:	460c      	mov	r4, r1
 801e71c:	dc32      	bgt.n	801e784 <floor+0x84>
 801e71e:	2e00      	cmp	r6, #0
 801e720:	da14      	bge.n	801e74c <floor+0x4c>
 801e722:	a333      	add	r3, pc, #204	; (adr r3, 801e7f0 <floor+0xf0>)
 801e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e728:	f7e1 fdda 	bl	80002e0 <__adddf3>
 801e72c:	2200      	movs	r2, #0
 801e72e:	2300      	movs	r3, #0
 801e730:	f7e2 fa1c 	bl	8000b6c <__aeabi_dcmpgt>
 801e734:	b138      	cbz	r0, 801e746 <floor+0x46>
 801e736:	2c00      	cmp	r4, #0
 801e738:	da57      	bge.n	801e7ea <floor+0xea>
 801e73a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e73e:	431d      	orrs	r5, r3
 801e740:	d001      	beq.n	801e746 <floor+0x46>
 801e742:	4c2d      	ldr	r4, [pc, #180]	; (801e7f8 <floor+0xf8>)
 801e744:	2500      	movs	r5, #0
 801e746:	4621      	mov	r1, r4
 801e748:	4628      	mov	r0, r5
 801e74a:	e025      	b.n	801e798 <floor+0x98>
 801e74c:	4f2b      	ldr	r7, [pc, #172]	; (801e7fc <floor+0xfc>)
 801e74e:	4137      	asrs	r7, r6
 801e750:	ea01 0307 	and.w	r3, r1, r7
 801e754:	4303      	orrs	r3, r0
 801e756:	d01f      	beq.n	801e798 <floor+0x98>
 801e758:	a325      	add	r3, pc, #148	; (adr r3, 801e7f0 <floor+0xf0>)
 801e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e75e:	f7e1 fdbf 	bl	80002e0 <__adddf3>
 801e762:	2200      	movs	r2, #0
 801e764:	2300      	movs	r3, #0
 801e766:	f7e2 fa01 	bl	8000b6c <__aeabi_dcmpgt>
 801e76a:	2800      	cmp	r0, #0
 801e76c:	d0eb      	beq.n	801e746 <floor+0x46>
 801e76e:	2c00      	cmp	r4, #0
 801e770:	bfbe      	ittt	lt
 801e772:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e776:	fa43 f606 	asrlt.w	r6, r3, r6
 801e77a:	19a4      	addlt	r4, r4, r6
 801e77c:	ea24 0407 	bic.w	r4, r4, r7
 801e780:	2500      	movs	r5, #0
 801e782:	e7e0      	b.n	801e746 <floor+0x46>
 801e784:	2e33      	cmp	r6, #51	; 0x33
 801e786:	dd0b      	ble.n	801e7a0 <floor+0xa0>
 801e788:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e78c:	d104      	bne.n	801e798 <floor+0x98>
 801e78e:	ee10 2a10 	vmov	r2, s0
 801e792:	460b      	mov	r3, r1
 801e794:	f7e1 fda4 	bl	80002e0 <__adddf3>
 801e798:	ec41 0b10 	vmov	d0, r0, r1
 801e79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 801e7a8:	fa23 f707 	lsr.w	r7, r3, r7
 801e7ac:	4207      	tst	r7, r0
 801e7ae:	d0f3      	beq.n	801e798 <floor+0x98>
 801e7b0:	a30f      	add	r3, pc, #60	; (adr r3, 801e7f0 <floor+0xf0>)
 801e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b6:	f7e1 fd93 	bl	80002e0 <__adddf3>
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	2300      	movs	r3, #0
 801e7be:	f7e2 f9d5 	bl	8000b6c <__aeabi_dcmpgt>
 801e7c2:	2800      	cmp	r0, #0
 801e7c4:	d0bf      	beq.n	801e746 <floor+0x46>
 801e7c6:	2c00      	cmp	r4, #0
 801e7c8:	da02      	bge.n	801e7d0 <floor+0xd0>
 801e7ca:	2e14      	cmp	r6, #20
 801e7cc:	d103      	bne.n	801e7d6 <floor+0xd6>
 801e7ce:	3401      	adds	r4, #1
 801e7d0:	ea25 0507 	bic.w	r5, r5, r7
 801e7d4:	e7b7      	b.n	801e746 <floor+0x46>
 801e7d6:	2301      	movs	r3, #1
 801e7d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e7dc:	fa03 f606 	lsl.w	r6, r3, r6
 801e7e0:	4435      	add	r5, r6
 801e7e2:	4545      	cmp	r5, r8
 801e7e4:	bf38      	it	cc
 801e7e6:	18e4      	addcc	r4, r4, r3
 801e7e8:	e7f2      	b.n	801e7d0 <floor+0xd0>
 801e7ea:	2500      	movs	r5, #0
 801e7ec:	462c      	mov	r4, r5
 801e7ee:	e7aa      	b.n	801e746 <floor+0x46>
 801e7f0:	8800759c 	.word	0x8800759c
 801e7f4:	7e37e43c 	.word	0x7e37e43c
 801e7f8:	bff00000 	.word	0xbff00000
 801e7fc:	000fffff 	.word	0x000fffff

0801e800 <frexp>:
 801e800:	b570      	push	{r4, r5, r6, lr}
 801e802:	2100      	movs	r1, #0
 801e804:	ec55 4b10 	vmov	r4, r5, d0
 801e808:	6001      	str	r1, [r0, #0]
 801e80a:	4916      	ldr	r1, [pc, #88]	; (801e864 <frexp+0x64>)
 801e80c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801e810:	428a      	cmp	r2, r1
 801e812:	4606      	mov	r6, r0
 801e814:	462b      	mov	r3, r5
 801e816:	dc22      	bgt.n	801e85e <frexp+0x5e>
 801e818:	ee10 1a10 	vmov	r1, s0
 801e81c:	4311      	orrs	r1, r2
 801e81e:	d01e      	beq.n	801e85e <frexp+0x5e>
 801e820:	4911      	ldr	r1, [pc, #68]	; (801e868 <frexp+0x68>)
 801e822:	4029      	ands	r1, r5
 801e824:	b969      	cbnz	r1, 801e842 <frexp+0x42>
 801e826:	4b11      	ldr	r3, [pc, #68]	; (801e86c <frexp+0x6c>)
 801e828:	2200      	movs	r2, #0
 801e82a:	ee10 0a10 	vmov	r0, s0
 801e82e:	4629      	mov	r1, r5
 801e830:	f7e1 ff0c 	bl	800064c <__aeabi_dmul>
 801e834:	460b      	mov	r3, r1
 801e836:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801e83a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801e83e:	4604      	mov	r4, r0
 801e840:	6031      	str	r1, [r6, #0]
 801e842:	6831      	ldr	r1, [r6, #0]
 801e844:	1512      	asrs	r2, r2, #20
 801e846:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e84a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801e84e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e852:	440a      	add	r2, r1
 801e854:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801e858:	6032      	str	r2, [r6, #0]
 801e85a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801e85e:	ec45 4b10 	vmov	d0, r4, r5
 801e862:	bd70      	pop	{r4, r5, r6, pc}
 801e864:	7fefffff 	.word	0x7fefffff
 801e868:	7ff00000 	.word	0x7ff00000
 801e86c:	43500000 	.word	0x43500000

0801e870 <round>:
 801e870:	ec51 0b10 	vmov	r0, r1, d0
 801e874:	b570      	push	{r4, r5, r6, lr}
 801e876:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801e87a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801e87e:	2c13      	cmp	r4, #19
 801e880:	ee10 2a10 	vmov	r2, s0
 801e884:	460b      	mov	r3, r1
 801e886:	dc19      	bgt.n	801e8bc <round+0x4c>
 801e888:	2c00      	cmp	r4, #0
 801e88a:	da09      	bge.n	801e8a0 <round+0x30>
 801e88c:	3401      	adds	r4, #1
 801e88e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801e892:	d103      	bne.n	801e89c <round+0x2c>
 801e894:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801e898:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e89c:	2200      	movs	r2, #0
 801e89e:	e028      	b.n	801e8f2 <round+0x82>
 801e8a0:	4d15      	ldr	r5, [pc, #84]	; (801e8f8 <round+0x88>)
 801e8a2:	4125      	asrs	r5, r4
 801e8a4:	ea01 0605 	and.w	r6, r1, r5
 801e8a8:	4332      	orrs	r2, r6
 801e8aa:	d00e      	beq.n	801e8ca <round+0x5a>
 801e8ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801e8b0:	fa42 f404 	asr.w	r4, r2, r4
 801e8b4:	4423      	add	r3, r4
 801e8b6:	ea23 0305 	bic.w	r3, r3, r5
 801e8ba:	e7ef      	b.n	801e89c <round+0x2c>
 801e8bc:	2c33      	cmp	r4, #51	; 0x33
 801e8be:	dd07      	ble.n	801e8d0 <round+0x60>
 801e8c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801e8c4:	d101      	bne.n	801e8ca <round+0x5a>
 801e8c6:	f7e1 fd0b 	bl	80002e0 <__adddf3>
 801e8ca:	ec41 0b10 	vmov	d0, r0, r1
 801e8ce:	bd70      	pop	{r4, r5, r6, pc}
 801e8d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801e8d4:	f04f 35ff 	mov.w	r5, #4294967295
 801e8d8:	40f5      	lsrs	r5, r6
 801e8da:	4228      	tst	r0, r5
 801e8dc:	d0f5      	beq.n	801e8ca <round+0x5a>
 801e8de:	2101      	movs	r1, #1
 801e8e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801e8e4:	fa01 f404 	lsl.w	r4, r1, r4
 801e8e8:	1912      	adds	r2, r2, r4
 801e8ea:	bf28      	it	cs
 801e8ec:	185b      	addcs	r3, r3, r1
 801e8ee:	ea22 0205 	bic.w	r2, r2, r5
 801e8f2:	4619      	mov	r1, r3
 801e8f4:	4610      	mov	r0, r2
 801e8f6:	e7e8      	b.n	801e8ca <round+0x5a>
 801e8f8:	000fffff 	.word	0x000fffff

0801e8fc <roundf>:
 801e8fc:	ee10 0a10 	vmov	r0, s0
 801e900:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801e904:	3a7f      	subs	r2, #127	; 0x7f
 801e906:	2a16      	cmp	r2, #22
 801e908:	dc15      	bgt.n	801e936 <roundf+0x3a>
 801e90a:	2a00      	cmp	r2, #0
 801e90c:	da08      	bge.n	801e920 <roundf+0x24>
 801e90e:	3201      	adds	r2, #1
 801e910:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801e914:	d101      	bne.n	801e91a <roundf+0x1e>
 801e916:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801e91a:	ee00 3a10 	vmov	s0, r3
 801e91e:	4770      	bx	lr
 801e920:	4907      	ldr	r1, [pc, #28]	; (801e940 <roundf+0x44>)
 801e922:	4111      	asrs	r1, r2
 801e924:	4208      	tst	r0, r1
 801e926:	d0fa      	beq.n	801e91e <roundf+0x22>
 801e928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801e92c:	4113      	asrs	r3, r2
 801e92e:	4403      	add	r3, r0
 801e930:	ea23 0301 	bic.w	r3, r3, r1
 801e934:	e7f1      	b.n	801e91a <roundf+0x1e>
 801e936:	2a80      	cmp	r2, #128	; 0x80
 801e938:	d1f1      	bne.n	801e91e <roundf+0x22>
 801e93a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e93e:	4770      	bx	lr
 801e940:	007fffff 	.word	0x007fffff

0801e944 <pow>:
 801e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e946:	ed2d 8b02 	vpush	{d8}
 801e94a:	eeb0 8a40 	vmov.f32	s16, s0
 801e94e:	eef0 8a60 	vmov.f32	s17, s1
 801e952:	ec55 4b11 	vmov	r4, r5, d1
 801e956:	f000 f8cb 	bl	801eaf0 <__ieee754_pow>
 801e95a:	4622      	mov	r2, r4
 801e95c:	462b      	mov	r3, r5
 801e95e:	4620      	mov	r0, r4
 801e960:	4629      	mov	r1, r5
 801e962:	ec57 6b10 	vmov	r6, r7, d0
 801e966:	f7e2 f90b 	bl	8000b80 <__aeabi_dcmpun>
 801e96a:	2800      	cmp	r0, #0
 801e96c:	d13b      	bne.n	801e9e6 <pow+0xa2>
 801e96e:	ec51 0b18 	vmov	r0, r1, d8
 801e972:	2200      	movs	r2, #0
 801e974:	2300      	movs	r3, #0
 801e976:	f7e2 f8d1 	bl	8000b1c <__aeabi_dcmpeq>
 801e97a:	b1b8      	cbz	r0, 801e9ac <pow+0x68>
 801e97c:	2200      	movs	r2, #0
 801e97e:	2300      	movs	r3, #0
 801e980:	4620      	mov	r0, r4
 801e982:	4629      	mov	r1, r5
 801e984:	f7e2 f8ca 	bl	8000b1c <__aeabi_dcmpeq>
 801e988:	2800      	cmp	r0, #0
 801e98a:	d146      	bne.n	801ea1a <pow+0xd6>
 801e98c:	ec45 4b10 	vmov	d0, r4, r5
 801e990:	f001 f8ff 	bl	801fb92 <finite>
 801e994:	b338      	cbz	r0, 801e9e6 <pow+0xa2>
 801e996:	2200      	movs	r2, #0
 801e998:	2300      	movs	r3, #0
 801e99a:	4620      	mov	r0, r4
 801e99c:	4629      	mov	r1, r5
 801e99e:	f7e2 f8c7 	bl	8000b30 <__aeabi_dcmplt>
 801e9a2:	b300      	cbz	r0, 801e9e6 <pow+0xa2>
 801e9a4:	f001 f9c8 	bl	801fd38 <__errno>
 801e9a8:	2322      	movs	r3, #34	; 0x22
 801e9aa:	e01b      	b.n	801e9e4 <pow+0xa0>
 801e9ac:	ec47 6b10 	vmov	d0, r6, r7
 801e9b0:	f001 f8ef 	bl	801fb92 <finite>
 801e9b4:	b9e0      	cbnz	r0, 801e9f0 <pow+0xac>
 801e9b6:	eeb0 0a48 	vmov.f32	s0, s16
 801e9ba:	eef0 0a68 	vmov.f32	s1, s17
 801e9be:	f001 f8e8 	bl	801fb92 <finite>
 801e9c2:	b1a8      	cbz	r0, 801e9f0 <pow+0xac>
 801e9c4:	ec45 4b10 	vmov	d0, r4, r5
 801e9c8:	f001 f8e3 	bl	801fb92 <finite>
 801e9cc:	b180      	cbz	r0, 801e9f0 <pow+0xac>
 801e9ce:	4632      	mov	r2, r6
 801e9d0:	463b      	mov	r3, r7
 801e9d2:	4630      	mov	r0, r6
 801e9d4:	4639      	mov	r1, r7
 801e9d6:	f7e2 f8d3 	bl	8000b80 <__aeabi_dcmpun>
 801e9da:	2800      	cmp	r0, #0
 801e9dc:	d0e2      	beq.n	801e9a4 <pow+0x60>
 801e9de:	f001 f9ab 	bl	801fd38 <__errno>
 801e9e2:	2321      	movs	r3, #33	; 0x21
 801e9e4:	6003      	str	r3, [r0, #0]
 801e9e6:	ecbd 8b02 	vpop	{d8}
 801e9ea:	ec47 6b10 	vmov	d0, r6, r7
 801e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9f0:	2200      	movs	r2, #0
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	4630      	mov	r0, r6
 801e9f6:	4639      	mov	r1, r7
 801e9f8:	f7e2 f890 	bl	8000b1c <__aeabi_dcmpeq>
 801e9fc:	2800      	cmp	r0, #0
 801e9fe:	d0f2      	beq.n	801e9e6 <pow+0xa2>
 801ea00:	eeb0 0a48 	vmov.f32	s0, s16
 801ea04:	eef0 0a68 	vmov.f32	s1, s17
 801ea08:	f001 f8c3 	bl	801fb92 <finite>
 801ea0c:	2800      	cmp	r0, #0
 801ea0e:	d0ea      	beq.n	801e9e6 <pow+0xa2>
 801ea10:	ec45 4b10 	vmov	d0, r4, r5
 801ea14:	f001 f8bd 	bl	801fb92 <finite>
 801ea18:	e7c3      	b.n	801e9a2 <pow+0x5e>
 801ea1a:	4f01      	ldr	r7, [pc, #4]	; (801ea20 <pow+0xdc>)
 801ea1c:	2600      	movs	r6, #0
 801ea1e:	e7e2      	b.n	801e9e6 <pow+0xa2>
 801ea20:	3ff00000 	.word	0x3ff00000

0801ea24 <expf>:
 801ea24:	b508      	push	{r3, lr}
 801ea26:	ed2d 8b02 	vpush	{d8}
 801ea2a:	eef0 8a40 	vmov.f32	s17, s0
 801ea2e:	f000 fe3f 	bl	801f6b0 <__ieee754_expf>
 801ea32:	eeb0 8a40 	vmov.f32	s16, s0
 801ea36:	eeb0 0a68 	vmov.f32	s0, s17
 801ea3a:	f001 f93b 	bl	801fcb4 <finitef>
 801ea3e:	b160      	cbz	r0, 801ea5a <expf+0x36>
 801ea40:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801ea80 <expf+0x5c>
 801ea44:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea4c:	dd0a      	ble.n	801ea64 <expf+0x40>
 801ea4e:	f001 f973 	bl	801fd38 <__errno>
 801ea52:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801ea84 <expf+0x60>
 801ea56:	2322      	movs	r3, #34	; 0x22
 801ea58:	6003      	str	r3, [r0, #0]
 801ea5a:	eeb0 0a48 	vmov.f32	s0, s16
 801ea5e:	ecbd 8b02 	vpop	{d8}
 801ea62:	bd08      	pop	{r3, pc}
 801ea64:	eddf 7a08 	vldr	s15, [pc, #32]	; 801ea88 <expf+0x64>
 801ea68:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ea6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea70:	d5f3      	bpl.n	801ea5a <expf+0x36>
 801ea72:	f001 f961 	bl	801fd38 <__errno>
 801ea76:	2322      	movs	r3, #34	; 0x22
 801ea78:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801ea8c <expf+0x68>
 801ea7c:	6003      	str	r3, [r0, #0]
 801ea7e:	e7ec      	b.n	801ea5a <expf+0x36>
 801ea80:	42b17180 	.word	0x42b17180
 801ea84:	7f800000 	.word	0x7f800000
 801ea88:	c2cff1b5 	.word	0xc2cff1b5
 801ea8c:	00000000 	.word	0x00000000

0801ea90 <log10f>:
 801ea90:	b508      	push	{r3, lr}
 801ea92:	ed2d 8b02 	vpush	{d8}
 801ea96:	eeb0 8a40 	vmov.f32	s16, s0
 801ea9a:	f000 ffc7 	bl	801fa2c <__ieee754_log10f>
 801ea9e:	eeb4 8a48 	vcmp.f32	s16, s16
 801eaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaa6:	d60f      	bvs.n	801eac8 <log10f+0x38>
 801eaa8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801eaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eab0:	d80a      	bhi.n	801eac8 <log10f+0x38>
 801eab2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801eab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaba:	d108      	bne.n	801eace <log10f+0x3e>
 801eabc:	f001 f93c 	bl	801fd38 <__errno>
 801eac0:	2322      	movs	r3, #34	; 0x22
 801eac2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801eae4 <log10f+0x54>
 801eac6:	6003      	str	r3, [r0, #0]
 801eac8:	ecbd 8b02 	vpop	{d8}
 801eacc:	bd08      	pop	{r3, pc}
 801eace:	f001 f933 	bl	801fd38 <__errno>
 801ead2:	ecbd 8b02 	vpop	{d8}
 801ead6:	2321      	movs	r3, #33	; 0x21
 801ead8:	6003      	str	r3, [r0, #0]
 801eada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801eade:	4802      	ldr	r0, [pc, #8]	; (801eae8 <log10f+0x58>)
 801eae0:	f001 b8f6 	b.w	801fcd0 <nanf>
 801eae4:	ff800000 	.word	0xff800000
 801eae8:	0802649b 	.word	0x0802649b
 801eaec:	00000000 	.word	0x00000000

0801eaf0 <__ieee754_pow>:
 801eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf4:	ed2d 8b06 	vpush	{d8-d10}
 801eaf8:	b089      	sub	sp, #36	; 0x24
 801eafa:	ed8d 1b00 	vstr	d1, [sp]
 801eafe:	e9dd 2900 	ldrd	r2, r9, [sp]
 801eb02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801eb06:	ea58 0102 	orrs.w	r1, r8, r2
 801eb0a:	ec57 6b10 	vmov	r6, r7, d0
 801eb0e:	d115      	bne.n	801eb3c <__ieee754_pow+0x4c>
 801eb10:	19b3      	adds	r3, r6, r6
 801eb12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801eb16:	4152      	adcs	r2, r2
 801eb18:	4299      	cmp	r1, r3
 801eb1a:	4b89      	ldr	r3, [pc, #548]	; (801ed40 <__ieee754_pow+0x250>)
 801eb1c:	4193      	sbcs	r3, r2
 801eb1e:	f080 84d2 	bcs.w	801f4c6 <__ieee754_pow+0x9d6>
 801eb22:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eb26:	4630      	mov	r0, r6
 801eb28:	4639      	mov	r1, r7
 801eb2a:	f7e1 fbd9 	bl	80002e0 <__adddf3>
 801eb2e:	ec41 0b10 	vmov	d0, r0, r1
 801eb32:	b009      	add	sp, #36	; 0x24
 801eb34:	ecbd 8b06 	vpop	{d8-d10}
 801eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb3c:	4b81      	ldr	r3, [pc, #516]	; (801ed44 <__ieee754_pow+0x254>)
 801eb3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801eb42:	429c      	cmp	r4, r3
 801eb44:	ee10 aa10 	vmov	sl, s0
 801eb48:	463d      	mov	r5, r7
 801eb4a:	dc06      	bgt.n	801eb5a <__ieee754_pow+0x6a>
 801eb4c:	d101      	bne.n	801eb52 <__ieee754_pow+0x62>
 801eb4e:	2e00      	cmp	r6, #0
 801eb50:	d1e7      	bne.n	801eb22 <__ieee754_pow+0x32>
 801eb52:	4598      	cmp	r8, r3
 801eb54:	dc01      	bgt.n	801eb5a <__ieee754_pow+0x6a>
 801eb56:	d10f      	bne.n	801eb78 <__ieee754_pow+0x88>
 801eb58:	b172      	cbz	r2, 801eb78 <__ieee754_pow+0x88>
 801eb5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801eb5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801eb62:	ea55 050a 	orrs.w	r5, r5, sl
 801eb66:	d1dc      	bne.n	801eb22 <__ieee754_pow+0x32>
 801eb68:	e9dd 3200 	ldrd	r3, r2, [sp]
 801eb6c:	18db      	adds	r3, r3, r3
 801eb6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801eb72:	4152      	adcs	r2, r2
 801eb74:	429d      	cmp	r5, r3
 801eb76:	e7d0      	b.n	801eb1a <__ieee754_pow+0x2a>
 801eb78:	2d00      	cmp	r5, #0
 801eb7a:	da3b      	bge.n	801ebf4 <__ieee754_pow+0x104>
 801eb7c:	4b72      	ldr	r3, [pc, #456]	; (801ed48 <__ieee754_pow+0x258>)
 801eb7e:	4598      	cmp	r8, r3
 801eb80:	dc51      	bgt.n	801ec26 <__ieee754_pow+0x136>
 801eb82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801eb86:	4598      	cmp	r8, r3
 801eb88:	f340 84ac 	ble.w	801f4e4 <__ieee754_pow+0x9f4>
 801eb8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801eb90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801eb94:	2b14      	cmp	r3, #20
 801eb96:	dd0f      	ble.n	801ebb8 <__ieee754_pow+0xc8>
 801eb98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801eb9c:	fa22 f103 	lsr.w	r1, r2, r3
 801eba0:	fa01 f303 	lsl.w	r3, r1, r3
 801eba4:	4293      	cmp	r3, r2
 801eba6:	f040 849d 	bne.w	801f4e4 <__ieee754_pow+0x9f4>
 801ebaa:	f001 0101 	and.w	r1, r1, #1
 801ebae:	f1c1 0302 	rsb	r3, r1, #2
 801ebb2:	9304      	str	r3, [sp, #16]
 801ebb4:	b182      	cbz	r2, 801ebd8 <__ieee754_pow+0xe8>
 801ebb6:	e05f      	b.n	801ec78 <__ieee754_pow+0x188>
 801ebb8:	2a00      	cmp	r2, #0
 801ebba:	d15b      	bne.n	801ec74 <__ieee754_pow+0x184>
 801ebbc:	f1c3 0314 	rsb	r3, r3, #20
 801ebc0:	fa48 f103 	asr.w	r1, r8, r3
 801ebc4:	fa01 f303 	lsl.w	r3, r1, r3
 801ebc8:	4543      	cmp	r3, r8
 801ebca:	f040 8488 	bne.w	801f4de <__ieee754_pow+0x9ee>
 801ebce:	f001 0101 	and.w	r1, r1, #1
 801ebd2:	f1c1 0302 	rsb	r3, r1, #2
 801ebd6:	9304      	str	r3, [sp, #16]
 801ebd8:	4b5c      	ldr	r3, [pc, #368]	; (801ed4c <__ieee754_pow+0x25c>)
 801ebda:	4598      	cmp	r8, r3
 801ebdc:	d132      	bne.n	801ec44 <__ieee754_pow+0x154>
 801ebde:	f1b9 0f00 	cmp.w	r9, #0
 801ebe2:	f280 8478 	bge.w	801f4d6 <__ieee754_pow+0x9e6>
 801ebe6:	4959      	ldr	r1, [pc, #356]	; (801ed4c <__ieee754_pow+0x25c>)
 801ebe8:	4632      	mov	r2, r6
 801ebea:	463b      	mov	r3, r7
 801ebec:	2000      	movs	r0, #0
 801ebee:	f7e1 fe57 	bl	80008a0 <__aeabi_ddiv>
 801ebf2:	e79c      	b.n	801eb2e <__ieee754_pow+0x3e>
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	9304      	str	r3, [sp, #16]
 801ebf8:	2a00      	cmp	r2, #0
 801ebfa:	d13d      	bne.n	801ec78 <__ieee754_pow+0x188>
 801ebfc:	4b51      	ldr	r3, [pc, #324]	; (801ed44 <__ieee754_pow+0x254>)
 801ebfe:	4598      	cmp	r8, r3
 801ec00:	d1ea      	bne.n	801ebd8 <__ieee754_pow+0xe8>
 801ec02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ec06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ec0a:	ea53 030a 	orrs.w	r3, r3, sl
 801ec0e:	f000 845a 	beq.w	801f4c6 <__ieee754_pow+0x9d6>
 801ec12:	4b4f      	ldr	r3, [pc, #316]	; (801ed50 <__ieee754_pow+0x260>)
 801ec14:	429c      	cmp	r4, r3
 801ec16:	dd08      	ble.n	801ec2a <__ieee754_pow+0x13a>
 801ec18:	f1b9 0f00 	cmp.w	r9, #0
 801ec1c:	f2c0 8457 	blt.w	801f4ce <__ieee754_pow+0x9de>
 801ec20:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec24:	e783      	b.n	801eb2e <__ieee754_pow+0x3e>
 801ec26:	2302      	movs	r3, #2
 801ec28:	e7e5      	b.n	801ebf6 <__ieee754_pow+0x106>
 801ec2a:	f1b9 0f00 	cmp.w	r9, #0
 801ec2e:	f04f 0000 	mov.w	r0, #0
 801ec32:	f04f 0100 	mov.w	r1, #0
 801ec36:	f6bf af7a 	bge.w	801eb2e <__ieee754_pow+0x3e>
 801ec3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ec3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ec42:	e774      	b.n	801eb2e <__ieee754_pow+0x3e>
 801ec44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ec48:	d106      	bne.n	801ec58 <__ieee754_pow+0x168>
 801ec4a:	4632      	mov	r2, r6
 801ec4c:	463b      	mov	r3, r7
 801ec4e:	4630      	mov	r0, r6
 801ec50:	4639      	mov	r1, r7
 801ec52:	f7e1 fcfb 	bl	800064c <__aeabi_dmul>
 801ec56:	e76a      	b.n	801eb2e <__ieee754_pow+0x3e>
 801ec58:	4b3e      	ldr	r3, [pc, #248]	; (801ed54 <__ieee754_pow+0x264>)
 801ec5a:	4599      	cmp	r9, r3
 801ec5c:	d10c      	bne.n	801ec78 <__ieee754_pow+0x188>
 801ec5e:	2d00      	cmp	r5, #0
 801ec60:	db0a      	blt.n	801ec78 <__ieee754_pow+0x188>
 801ec62:	ec47 6b10 	vmov	d0, r6, r7
 801ec66:	b009      	add	sp, #36	; 0x24
 801ec68:	ecbd 8b06 	vpop	{d8-d10}
 801ec6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec70:	f000 bc6c 	b.w	801f54c <__ieee754_sqrt>
 801ec74:	2300      	movs	r3, #0
 801ec76:	9304      	str	r3, [sp, #16]
 801ec78:	ec47 6b10 	vmov	d0, r6, r7
 801ec7c:	f000 ff80 	bl	801fb80 <fabs>
 801ec80:	ec51 0b10 	vmov	r0, r1, d0
 801ec84:	f1ba 0f00 	cmp.w	sl, #0
 801ec88:	d129      	bne.n	801ecde <__ieee754_pow+0x1ee>
 801ec8a:	b124      	cbz	r4, 801ec96 <__ieee754_pow+0x1a6>
 801ec8c:	4b2f      	ldr	r3, [pc, #188]	; (801ed4c <__ieee754_pow+0x25c>)
 801ec8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ec92:	429a      	cmp	r2, r3
 801ec94:	d123      	bne.n	801ecde <__ieee754_pow+0x1ee>
 801ec96:	f1b9 0f00 	cmp.w	r9, #0
 801ec9a:	da05      	bge.n	801eca8 <__ieee754_pow+0x1b8>
 801ec9c:	4602      	mov	r2, r0
 801ec9e:	460b      	mov	r3, r1
 801eca0:	2000      	movs	r0, #0
 801eca2:	492a      	ldr	r1, [pc, #168]	; (801ed4c <__ieee754_pow+0x25c>)
 801eca4:	f7e1 fdfc 	bl	80008a0 <__aeabi_ddiv>
 801eca8:	2d00      	cmp	r5, #0
 801ecaa:	f6bf af40 	bge.w	801eb2e <__ieee754_pow+0x3e>
 801ecae:	9b04      	ldr	r3, [sp, #16]
 801ecb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ecb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ecb8:	4323      	orrs	r3, r4
 801ecba:	d108      	bne.n	801ecce <__ieee754_pow+0x1de>
 801ecbc:	4602      	mov	r2, r0
 801ecbe:	460b      	mov	r3, r1
 801ecc0:	4610      	mov	r0, r2
 801ecc2:	4619      	mov	r1, r3
 801ecc4:	f7e1 fb0a 	bl	80002dc <__aeabi_dsub>
 801ecc8:	4602      	mov	r2, r0
 801ecca:	460b      	mov	r3, r1
 801eccc:	e78f      	b.n	801ebee <__ieee754_pow+0xfe>
 801ecce:	9b04      	ldr	r3, [sp, #16]
 801ecd0:	2b01      	cmp	r3, #1
 801ecd2:	f47f af2c 	bne.w	801eb2e <__ieee754_pow+0x3e>
 801ecd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ecda:	4619      	mov	r1, r3
 801ecdc:	e727      	b.n	801eb2e <__ieee754_pow+0x3e>
 801ecde:	0feb      	lsrs	r3, r5, #31
 801ece0:	3b01      	subs	r3, #1
 801ece2:	9306      	str	r3, [sp, #24]
 801ece4:	9a06      	ldr	r2, [sp, #24]
 801ece6:	9b04      	ldr	r3, [sp, #16]
 801ece8:	4313      	orrs	r3, r2
 801ecea:	d102      	bne.n	801ecf2 <__ieee754_pow+0x202>
 801ecec:	4632      	mov	r2, r6
 801ecee:	463b      	mov	r3, r7
 801ecf0:	e7e6      	b.n	801ecc0 <__ieee754_pow+0x1d0>
 801ecf2:	4b19      	ldr	r3, [pc, #100]	; (801ed58 <__ieee754_pow+0x268>)
 801ecf4:	4598      	cmp	r8, r3
 801ecf6:	f340 80fb 	ble.w	801eef0 <__ieee754_pow+0x400>
 801ecfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ecfe:	4598      	cmp	r8, r3
 801ed00:	4b13      	ldr	r3, [pc, #76]	; (801ed50 <__ieee754_pow+0x260>)
 801ed02:	dd0c      	ble.n	801ed1e <__ieee754_pow+0x22e>
 801ed04:	429c      	cmp	r4, r3
 801ed06:	dc0f      	bgt.n	801ed28 <__ieee754_pow+0x238>
 801ed08:	f1b9 0f00 	cmp.w	r9, #0
 801ed0c:	da0f      	bge.n	801ed2e <__ieee754_pow+0x23e>
 801ed0e:	2000      	movs	r0, #0
 801ed10:	b009      	add	sp, #36	; 0x24
 801ed12:	ecbd 8b06 	vpop	{d8-d10}
 801ed16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed1a:	f000 bf06 	b.w	801fb2a <__math_oflow>
 801ed1e:	429c      	cmp	r4, r3
 801ed20:	dbf2      	blt.n	801ed08 <__ieee754_pow+0x218>
 801ed22:	4b0a      	ldr	r3, [pc, #40]	; (801ed4c <__ieee754_pow+0x25c>)
 801ed24:	429c      	cmp	r4, r3
 801ed26:	dd19      	ble.n	801ed5c <__ieee754_pow+0x26c>
 801ed28:	f1b9 0f00 	cmp.w	r9, #0
 801ed2c:	dcef      	bgt.n	801ed0e <__ieee754_pow+0x21e>
 801ed2e:	2000      	movs	r0, #0
 801ed30:	b009      	add	sp, #36	; 0x24
 801ed32:	ecbd 8b06 	vpop	{d8-d10}
 801ed36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed3a:	f000 beed 	b.w	801fb18 <__math_uflow>
 801ed3e:	bf00      	nop
 801ed40:	fff00000 	.word	0xfff00000
 801ed44:	7ff00000 	.word	0x7ff00000
 801ed48:	433fffff 	.word	0x433fffff
 801ed4c:	3ff00000 	.word	0x3ff00000
 801ed50:	3fefffff 	.word	0x3fefffff
 801ed54:	3fe00000 	.word	0x3fe00000
 801ed58:	41e00000 	.word	0x41e00000
 801ed5c:	4b60      	ldr	r3, [pc, #384]	; (801eee0 <__ieee754_pow+0x3f0>)
 801ed5e:	2200      	movs	r2, #0
 801ed60:	f7e1 fabc 	bl	80002dc <__aeabi_dsub>
 801ed64:	a354      	add	r3, pc, #336	; (adr r3, 801eeb8 <__ieee754_pow+0x3c8>)
 801ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed6a:	4604      	mov	r4, r0
 801ed6c:	460d      	mov	r5, r1
 801ed6e:	f7e1 fc6d 	bl	800064c <__aeabi_dmul>
 801ed72:	a353      	add	r3, pc, #332	; (adr r3, 801eec0 <__ieee754_pow+0x3d0>)
 801ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed78:	4606      	mov	r6, r0
 801ed7a:	460f      	mov	r7, r1
 801ed7c:	4620      	mov	r0, r4
 801ed7e:	4629      	mov	r1, r5
 801ed80:	f7e1 fc64 	bl	800064c <__aeabi_dmul>
 801ed84:	4b57      	ldr	r3, [pc, #348]	; (801eee4 <__ieee754_pow+0x3f4>)
 801ed86:	4682      	mov	sl, r0
 801ed88:	468b      	mov	fp, r1
 801ed8a:	2200      	movs	r2, #0
 801ed8c:	4620      	mov	r0, r4
 801ed8e:	4629      	mov	r1, r5
 801ed90:	f7e1 fc5c 	bl	800064c <__aeabi_dmul>
 801ed94:	4602      	mov	r2, r0
 801ed96:	460b      	mov	r3, r1
 801ed98:	a14b      	add	r1, pc, #300	; (adr r1, 801eec8 <__ieee754_pow+0x3d8>)
 801ed9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed9e:	f7e1 fa9d 	bl	80002dc <__aeabi_dsub>
 801eda2:	4622      	mov	r2, r4
 801eda4:	462b      	mov	r3, r5
 801eda6:	f7e1 fc51 	bl	800064c <__aeabi_dmul>
 801edaa:	4602      	mov	r2, r0
 801edac:	460b      	mov	r3, r1
 801edae:	2000      	movs	r0, #0
 801edb0:	494d      	ldr	r1, [pc, #308]	; (801eee8 <__ieee754_pow+0x3f8>)
 801edb2:	f7e1 fa93 	bl	80002dc <__aeabi_dsub>
 801edb6:	4622      	mov	r2, r4
 801edb8:	4680      	mov	r8, r0
 801edba:	4689      	mov	r9, r1
 801edbc:	462b      	mov	r3, r5
 801edbe:	4620      	mov	r0, r4
 801edc0:	4629      	mov	r1, r5
 801edc2:	f7e1 fc43 	bl	800064c <__aeabi_dmul>
 801edc6:	4602      	mov	r2, r0
 801edc8:	460b      	mov	r3, r1
 801edca:	4640      	mov	r0, r8
 801edcc:	4649      	mov	r1, r9
 801edce:	f7e1 fc3d 	bl	800064c <__aeabi_dmul>
 801edd2:	a33f      	add	r3, pc, #252	; (adr r3, 801eed0 <__ieee754_pow+0x3e0>)
 801edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edd8:	f7e1 fc38 	bl	800064c <__aeabi_dmul>
 801eddc:	4602      	mov	r2, r0
 801edde:	460b      	mov	r3, r1
 801ede0:	4650      	mov	r0, sl
 801ede2:	4659      	mov	r1, fp
 801ede4:	f7e1 fa7a 	bl	80002dc <__aeabi_dsub>
 801ede8:	4602      	mov	r2, r0
 801edea:	460b      	mov	r3, r1
 801edec:	4680      	mov	r8, r0
 801edee:	4689      	mov	r9, r1
 801edf0:	4630      	mov	r0, r6
 801edf2:	4639      	mov	r1, r7
 801edf4:	f7e1 fa74 	bl	80002e0 <__adddf3>
 801edf8:	2000      	movs	r0, #0
 801edfa:	4632      	mov	r2, r6
 801edfc:	463b      	mov	r3, r7
 801edfe:	4604      	mov	r4, r0
 801ee00:	460d      	mov	r5, r1
 801ee02:	f7e1 fa6b 	bl	80002dc <__aeabi_dsub>
 801ee06:	4602      	mov	r2, r0
 801ee08:	460b      	mov	r3, r1
 801ee0a:	4640      	mov	r0, r8
 801ee0c:	4649      	mov	r1, r9
 801ee0e:	f7e1 fa65 	bl	80002dc <__aeabi_dsub>
 801ee12:	9b04      	ldr	r3, [sp, #16]
 801ee14:	9a06      	ldr	r2, [sp, #24]
 801ee16:	3b01      	subs	r3, #1
 801ee18:	4313      	orrs	r3, r2
 801ee1a:	4682      	mov	sl, r0
 801ee1c:	468b      	mov	fp, r1
 801ee1e:	f040 81e7 	bne.w	801f1f0 <__ieee754_pow+0x700>
 801ee22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801eed8 <__ieee754_pow+0x3e8>
 801ee26:	eeb0 8a47 	vmov.f32	s16, s14
 801ee2a:	eef0 8a67 	vmov.f32	s17, s15
 801ee2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ee32:	2600      	movs	r6, #0
 801ee34:	4632      	mov	r2, r6
 801ee36:	463b      	mov	r3, r7
 801ee38:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ee3c:	f7e1 fa4e 	bl	80002dc <__aeabi_dsub>
 801ee40:	4622      	mov	r2, r4
 801ee42:	462b      	mov	r3, r5
 801ee44:	f7e1 fc02 	bl	800064c <__aeabi_dmul>
 801ee48:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee4c:	4680      	mov	r8, r0
 801ee4e:	4689      	mov	r9, r1
 801ee50:	4650      	mov	r0, sl
 801ee52:	4659      	mov	r1, fp
 801ee54:	f7e1 fbfa 	bl	800064c <__aeabi_dmul>
 801ee58:	4602      	mov	r2, r0
 801ee5a:	460b      	mov	r3, r1
 801ee5c:	4640      	mov	r0, r8
 801ee5e:	4649      	mov	r1, r9
 801ee60:	f7e1 fa3e 	bl	80002e0 <__adddf3>
 801ee64:	4632      	mov	r2, r6
 801ee66:	463b      	mov	r3, r7
 801ee68:	4680      	mov	r8, r0
 801ee6a:	4689      	mov	r9, r1
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	4629      	mov	r1, r5
 801ee70:	f7e1 fbec 	bl	800064c <__aeabi_dmul>
 801ee74:	460b      	mov	r3, r1
 801ee76:	4604      	mov	r4, r0
 801ee78:	460d      	mov	r5, r1
 801ee7a:	4602      	mov	r2, r0
 801ee7c:	4649      	mov	r1, r9
 801ee7e:	4640      	mov	r0, r8
 801ee80:	f7e1 fa2e 	bl	80002e0 <__adddf3>
 801ee84:	4b19      	ldr	r3, [pc, #100]	; (801eeec <__ieee754_pow+0x3fc>)
 801ee86:	4299      	cmp	r1, r3
 801ee88:	ec45 4b19 	vmov	d9, r4, r5
 801ee8c:	4606      	mov	r6, r0
 801ee8e:	460f      	mov	r7, r1
 801ee90:	468b      	mov	fp, r1
 801ee92:	f340 82f1 	ble.w	801f478 <__ieee754_pow+0x988>
 801ee96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ee9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ee9e:	4303      	orrs	r3, r0
 801eea0:	f000 81e4 	beq.w	801f26c <__ieee754_pow+0x77c>
 801eea4:	ec51 0b18 	vmov	r0, r1, d8
 801eea8:	2200      	movs	r2, #0
 801eeaa:	2300      	movs	r3, #0
 801eeac:	f7e1 fe40 	bl	8000b30 <__aeabi_dcmplt>
 801eeb0:	3800      	subs	r0, #0
 801eeb2:	bf18      	it	ne
 801eeb4:	2001      	movne	r0, #1
 801eeb6:	e72b      	b.n	801ed10 <__ieee754_pow+0x220>
 801eeb8:	60000000 	.word	0x60000000
 801eebc:	3ff71547 	.word	0x3ff71547
 801eec0:	f85ddf44 	.word	0xf85ddf44
 801eec4:	3e54ae0b 	.word	0x3e54ae0b
 801eec8:	55555555 	.word	0x55555555
 801eecc:	3fd55555 	.word	0x3fd55555
 801eed0:	652b82fe 	.word	0x652b82fe
 801eed4:	3ff71547 	.word	0x3ff71547
 801eed8:	00000000 	.word	0x00000000
 801eedc:	bff00000 	.word	0xbff00000
 801eee0:	3ff00000 	.word	0x3ff00000
 801eee4:	3fd00000 	.word	0x3fd00000
 801eee8:	3fe00000 	.word	0x3fe00000
 801eeec:	408fffff 	.word	0x408fffff
 801eef0:	4bd5      	ldr	r3, [pc, #852]	; (801f248 <__ieee754_pow+0x758>)
 801eef2:	402b      	ands	r3, r5
 801eef4:	2200      	movs	r2, #0
 801eef6:	b92b      	cbnz	r3, 801ef04 <__ieee754_pow+0x414>
 801eef8:	4bd4      	ldr	r3, [pc, #848]	; (801f24c <__ieee754_pow+0x75c>)
 801eefa:	f7e1 fba7 	bl	800064c <__aeabi_dmul>
 801eefe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ef02:	460c      	mov	r4, r1
 801ef04:	1523      	asrs	r3, r4, #20
 801ef06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ef0a:	4413      	add	r3, r2
 801ef0c:	9305      	str	r3, [sp, #20]
 801ef0e:	4bd0      	ldr	r3, [pc, #832]	; (801f250 <__ieee754_pow+0x760>)
 801ef10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ef14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ef18:	429c      	cmp	r4, r3
 801ef1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ef1e:	dd08      	ble.n	801ef32 <__ieee754_pow+0x442>
 801ef20:	4bcc      	ldr	r3, [pc, #816]	; (801f254 <__ieee754_pow+0x764>)
 801ef22:	429c      	cmp	r4, r3
 801ef24:	f340 8162 	ble.w	801f1ec <__ieee754_pow+0x6fc>
 801ef28:	9b05      	ldr	r3, [sp, #20]
 801ef2a:	3301      	adds	r3, #1
 801ef2c:	9305      	str	r3, [sp, #20]
 801ef2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ef32:	2400      	movs	r4, #0
 801ef34:	00e3      	lsls	r3, r4, #3
 801ef36:	9307      	str	r3, [sp, #28]
 801ef38:	4bc7      	ldr	r3, [pc, #796]	; (801f258 <__ieee754_pow+0x768>)
 801ef3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ef3e:	ed93 7b00 	vldr	d7, [r3]
 801ef42:	4629      	mov	r1, r5
 801ef44:	ec53 2b17 	vmov	r2, r3, d7
 801ef48:	eeb0 9a47 	vmov.f32	s18, s14
 801ef4c:	eef0 9a67 	vmov.f32	s19, s15
 801ef50:	4682      	mov	sl, r0
 801ef52:	f7e1 f9c3 	bl	80002dc <__aeabi_dsub>
 801ef56:	4652      	mov	r2, sl
 801ef58:	4606      	mov	r6, r0
 801ef5a:	460f      	mov	r7, r1
 801ef5c:	462b      	mov	r3, r5
 801ef5e:	ec51 0b19 	vmov	r0, r1, d9
 801ef62:	f7e1 f9bd 	bl	80002e0 <__adddf3>
 801ef66:	4602      	mov	r2, r0
 801ef68:	460b      	mov	r3, r1
 801ef6a:	2000      	movs	r0, #0
 801ef6c:	49bb      	ldr	r1, [pc, #748]	; (801f25c <__ieee754_pow+0x76c>)
 801ef6e:	f7e1 fc97 	bl	80008a0 <__aeabi_ddiv>
 801ef72:	ec41 0b1a 	vmov	d10, r0, r1
 801ef76:	4602      	mov	r2, r0
 801ef78:	460b      	mov	r3, r1
 801ef7a:	4630      	mov	r0, r6
 801ef7c:	4639      	mov	r1, r7
 801ef7e:	f7e1 fb65 	bl	800064c <__aeabi_dmul>
 801ef82:	2300      	movs	r3, #0
 801ef84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef88:	9302      	str	r3, [sp, #8]
 801ef8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ef8e:	46ab      	mov	fp, r5
 801ef90:	106d      	asrs	r5, r5, #1
 801ef92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ef96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ef9a:	ec41 0b18 	vmov	d8, r0, r1
 801ef9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801efa2:	2200      	movs	r2, #0
 801efa4:	4640      	mov	r0, r8
 801efa6:	4649      	mov	r1, r9
 801efa8:	4614      	mov	r4, r2
 801efaa:	461d      	mov	r5, r3
 801efac:	f7e1 fb4e 	bl	800064c <__aeabi_dmul>
 801efb0:	4602      	mov	r2, r0
 801efb2:	460b      	mov	r3, r1
 801efb4:	4630      	mov	r0, r6
 801efb6:	4639      	mov	r1, r7
 801efb8:	f7e1 f990 	bl	80002dc <__aeabi_dsub>
 801efbc:	ec53 2b19 	vmov	r2, r3, d9
 801efc0:	4606      	mov	r6, r0
 801efc2:	460f      	mov	r7, r1
 801efc4:	4620      	mov	r0, r4
 801efc6:	4629      	mov	r1, r5
 801efc8:	f7e1 f988 	bl	80002dc <__aeabi_dsub>
 801efcc:	4602      	mov	r2, r0
 801efce:	460b      	mov	r3, r1
 801efd0:	4650      	mov	r0, sl
 801efd2:	4659      	mov	r1, fp
 801efd4:	f7e1 f982 	bl	80002dc <__aeabi_dsub>
 801efd8:	4642      	mov	r2, r8
 801efda:	464b      	mov	r3, r9
 801efdc:	f7e1 fb36 	bl	800064c <__aeabi_dmul>
 801efe0:	4602      	mov	r2, r0
 801efe2:	460b      	mov	r3, r1
 801efe4:	4630      	mov	r0, r6
 801efe6:	4639      	mov	r1, r7
 801efe8:	f7e1 f978 	bl	80002dc <__aeabi_dsub>
 801efec:	ec53 2b1a 	vmov	r2, r3, d10
 801eff0:	f7e1 fb2c 	bl	800064c <__aeabi_dmul>
 801eff4:	ec53 2b18 	vmov	r2, r3, d8
 801eff8:	ec41 0b19 	vmov	d9, r0, r1
 801effc:	ec51 0b18 	vmov	r0, r1, d8
 801f000:	f7e1 fb24 	bl	800064c <__aeabi_dmul>
 801f004:	a37c      	add	r3, pc, #496	; (adr r3, 801f1f8 <__ieee754_pow+0x708>)
 801f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f00a:	4604      	mov	r4, r0
 801f00c:	460d      	mov	r5, r1
 801f00e:	f7e1 fb1d 	bl	800064c <__aeabi_dmul>
 801f012:	a37b      	add	r3, pc, #492	; (adr r3, 801f200 <__ieee754_pow+0x710>)
 801f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f018:	f7e1 f962 	bl	80002e0 <__adddf3>
 801f01c:	4622      	mov	r2, r4
 801f01e:	462b      	mov	r3, r5
 801f020:	f7e1 fb14 	bl	800064c <__aeabi_dmul>
 801f024:	a378      	add	r3, pc, #480	; (adr r3, 801f208 <__ieee754_pow+0x718>)
 801f026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f02a:	f7e1 f959 	bl	80002e0 <__adddf3>
 801f02e:	4622      	mov	r2, r4
 801f030:	462b      	mov	r3, r5
 801f032:	f7e1 fb0b 	bl	800064c <__aeabi_dmul>
 801f036:	a376      	add	r3, pc, #472	; (adr r3, 801f210 <__ieee754_pow+0x720>)
 801f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f03c:	f7e1 f950 	bl	80002e0 <__adddf3>
 801f040:	4622      	mov	r2, r4
 801f042:	462b      	mov	r3, r5
 801f044:	f7e1 fb02 	bl	800064c <__aeabi_dmul>
 801f048:	a373      	add	r3, pc, #460	; (adr r3, 801f218 <__ieee754_pow+0x728>)
 801f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f04e:	f7e1 f947 	bl	80002e0 <__adddf3>
 801f052:	4622      	mov	r2, r4
 801f054:	462b      	mov	r3, r5
 801f056:	f7e1 faf9 	bl	800064c <__aeabi_dmul>
 801f05a:	a371      	add	r3, pc, #452	; (adr r3, 801f220 <__ieee754_pow+0x730>)
 801f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f060:	f7e1 f93e 	bl	80002e0 <__adddf3>
 801f064:	4622      	mov	r2, r4
 801f066:	4606      	mov	r6, r0
 801f068:	460f      	mov	r7, r1
 801f06a:	462b      	mov	r3, r5
 801f06c:	4620      	mov	r0, r4
 801f06e:	4629      	mov	r1, r5
 801f070:	f7e1 faec 	bl	800064c <__aeabi_dmul>
 801f074:	4602      	mov	r2, r0
 801f076:	460b      	mov	r3, r1
 801f078:	4630      	mov	r0, r6
 801f07a:	4639      	mov	r1, r7
 801f07c:	f7e1 fae6 	bl	800064c <__aeabi_dmul>
 801f080:	4642      	mov	r2, r8
 801f082:	4604      	mov	r4, r0
 801f084:	460d      	mov	r5, r1
 801f086:	464b      	mov	r3, r9
 801f088:	ec51 0b18 	vmov	r0, r1, d8
 801f08c:	f7e1 f928 	bl	80002e0 <__adddf3>
 801f090:	ec53 2b19 	vmov	r2, r3, d9
 801f094:	f7e1 fada 	bl	800064c <__aeabi_dmul>
 801f098:	4622      	mov	r2, r4
 801f09a:	462b      	mov	r3, r5
 801f09c:	f7e1 f920 	bl	80002e0 <__adddf3>
 801f0a0:	4642      	mov	r2, r8
 801f0a2:	4682      	mov	sl, r0
 801f0a4:	468b      	mov	fp, r1
 801f0a6:	464b      	mov	r3, r9
 801f0a8:	4640      	mov	r0, r8
 801f0aa:	4649      	mov	r1, r9
 801f0ac:	f7e1 face 	bl	800064c <__aeabi_dmul>
 801f0b0:	4b6b      	ldr	r3, [pc, #428]	; (801f260 <__ieee754_pow+0x770>)
 801f0b2:	2200      	movs	r2, #0
 801f0b4:	4606      	mov	r6, r0
 801f0b6:	460f      	mov	r7, r1
 801f0b8:	f7e1 f912 	bl	80002e0 <__adddf3>
 801f0bc:	4652      	mov	r2, sl
 801f0be:	465b      	mov	r3, fp
 801f0c0:	f7e1 f90e 	bl	80002e0 <__adddf3>
 801f0c4:	2000      	movs	r0, #0
 801f0c6:	4604      	mov	r4, r0
 801f0c8:	460d      	mov	r5, r1
 801f0ca:	4602      	mov	r2, r0
 801f0cc:	460b      	mov	r3, r1
 801f0ce:	4640      	mov	r0, r8
 801f0d0:	4649      	mov	r1, r9
 801f0d2:	f7e1 fabb 	bl	800064c <__aeabi_dmul>
 801f0d6:	4b62      	ldr	r3, [pc, #392]	; (801f260 <__ieee754_pow+0x770>)
 801f0d8:	4680      	mov	r8, r0
 801f0da:	4689      	mov	r9, r1
 801f0dc:	2200      	movs	r2, #0
 801f0de:	4620      	mov	r0, r4
 801f0e0:	4629      	mov	r1, r5
 801f0e2:	f7e1 f8fb 	bl	80002dc <__aeabi_dsub>
 801f0e6:	4632      	mov	r2, r6
 801f0e8:	463b      	mov	r3, r7
 801f0ea:	f7e1 f8f7 	bl	80002dc <__aeabi_dsub>
 801f0ee:	4602      	mov	r2, r0
 801f0f0:	460b      	mov	r3, r1
 801f0f2:	4650      	mov	r0, sl
 801f0f4:	4659      	mov	r1, fp
 801f0f6:	f7e1 f8f1 	bl	80002dc <__aeabi_dsub>
 801f0fa:	ec53 2b18 	vmov	r2, r3, d8
 801f0fe:	f7e1 faa5 	bl	800064c <__aeabi_dmul>
 801f102:	4622      	mov	r2, r4
 801f104:	4606      	mov	r6, r0
 801f106:	460f      	mov	r7, r1
 801f108:	462b      	mov	r3, r5
 801f10a:	ec51 0b19 	vmov	r0, r1, d9
 801f10e:	f7e1 fa9d 	bl	800064c <__aeabi_dmul>
 801f112:	4602      	mov	r2, r0
 801f114:	460b      	mov	r3, r1
 801f116:	4630      	mov	r0, r6
 801f118:	4639      	mov	r1, r7
 801f11a:	f7e1 f8e1 	bl	80002e0 <__adddf3>
 801f11e:	4606      	mov	r6, r0
 801f120:	460f      	mov	r7, r1
 801f122:	4602      	mov	r2, r0
 801f124:	460b      	mov	r3, r1
 801f126:	4640      	mov	r0, r8
 801f128:	4649      	mov	r1, r9
 801f12a:	f7e1 f8d9 	bl	80002e0 <__adddf3>
 801f12e:	a33e      	add	r3, pc, #248	; (adr r3, 801f228 <__ieee754_pow+0x738>)
 801f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f134:	2000      	movs	r0, #0
 801f136:	4604      	mov	r4, r0
 801f138:	460d      	mov	r5, r1
 801f13a:	f7e1 fa87 	bl	800064c <__aeabi_dmul>
 801f13e:	4642      	mov	r2, r8
 801f140:	ec41 0b18 	vmov	d8, r0, r1
 801f144:	464b      	mov	r3, r9
 801f146:	4620      	mov	r0, r4
 801f148:	4629      	mov	r1, r5
 801f14a:	f7e1 f8c7 	bl	80002dc <__aeabi_dsub>
 801f14e:	4602      	mov	r2, r0
 801f150:	460b      	mov	r3, r1
 801f152:	4630      	mov	r0, r6
 801f154:	4639      	mov	r1, r7
 801f156:	f7e1 f8c1 	bl	80002dc <__aeabi_dsub>
 801f15a:	a335      	add	r3, pc, #212	; (adr r3, 801f230 <__ieee754_pow+0x740>)
 801f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f160:	f7e1 fa74 	bl	800064c <__aeabi_dmul>
 801f164:	a334      	add	r3, pc, #208	; (adr r3, 801f238 <__ieee754_pow+0x748>)
 801f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f16a:	4606      	mov	r6, r0
 801f16c:	460f      	mov	r7, r1
 801f16e:	4620      	mov	r0, r4
 801f170:	4629      	mov	r1, r5
 801f172:	f7e1 fa6b 	bl	800064c <__aeabi_dmul>
 801f176:	4602      	mov	r2, r0
 801f178:	460b      	mov	r3, r1
 801f17a:	4630      	mov	r0, r6
 801f17c:	4639      	mov	r1, r7
 801f17e:	f7e1 f8af 	bl	80002e0 <__adddf3>
 801f182:	9a07      	ldr	r2, [sp, #28]
 801f184:	4b37      	ldr	r3, [pc, #220]	; (801f264 <__ieee754_pow+0x774>)
 801f186:	4413      	add	r3, r2
 801f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f18c:	f7e1 f8a8 	bl	80002e0 <__adddf3>
 801f190:	4682      	mov	sl, r0
 801f192:	9805      	ldr	r0, [sp, #20]
 801f194:	468b      	mov	fp, r1
 801f196:	f7e1 f9ef 	bl	8000578 <__aeabi_i2d>
 801f19a:	9a07      	ldr	r2, [sp, #28]
 801f19c:	4b32      	ldr	r3, [pc, #200]	; (801f268 <__ieee754_pow+0x778>)
 801f19e:	4413      	add	r3, r2
 801f1a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f1a4:	4606      	mov	r6, r0
 801f1a6:	460f      	mov	r7, r1
 801f1a8:	4652      	mov	r2, sl
 801f1aa:	465b      	mov	r3, fp
 801f1ac:	ec51 0b18 	vmov	r0, r1, d8
 801f1b0:	f7e1 f896 	bl	80002e0 <__adddf3>
 801f1b4:	4642      	mov	r2, r8
 801f1b6:	464b      	mov	r3, r9
 801f1b8:	f7e1 f892 	bl	80002e0 <__adddf3>
 801f1bc:	4632      	mov	r2, r6
 801f1be:	463b      	mov	r3, r7
 801f1c0:	f7e1 f88e 	bl	80002e0 <__adddf3>
 801f1c4:	2000      	movs	r0, #0
 801f1c6:	4632      	mov	r2, r6
 801f1c8:	463b      	mov	r3, r7
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	460d      	mov	r5, r1
 801f1ce:	f7e1 f885 	bl	80002dc <__aeabi_dsub>
 801f1d2:	4642      	mov	r2, r8
 801f1d4:	464b      	mov	r3, r9
 801f1d6:	f7e1 f881 	bl	80002dc <__aeabi_dsub>
 801f1da:	ec53 2b18 	vmov	r2, r3, d8
 801f1de:	f7e1 f87d 	bl	80002dc <__aeabi_dsub>
 801f1e2:	4602      	mov	r2, r0
 801f1e4:	460b      	mov	r3, r1
 801f1e6:	4650      	mov	r0, sl
 801f1e8:	4659      	mov	r1, fp
 801f1ea:	e610      	b.n	801ee0e <__ieee754_pow+0x31e>
 801f1ec:	2401      	movs	r4, #1
 801f1ee:	e6a1      	b.n	801ef34 <__ieee754_pow+0x444>
 801f1f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801f240 <__ieee754_pow+0x750>
 801f1f4:	e617      	b.n	801ee26 <__ieee754_pow+0x336>
 801f1f6:	bf00      	nop
 801f1f8:	4a454eef 	.word	0x4a454eef
 801f1fc:	3fca7e28 	.word	0x3fca7e28
 801f200:	93c9db65 	.word	0x93c9db65
 801f204:	3fcd864a 	.word	0x3fcd864a
 801f208:	a91d4101 	.word	0xa91d4101
 801f20c:	3fd17460 	.word	0x3fd17460
 801f210:	518f264d 	.word	0x518f264d
 801f214:	3fd55555 	.word	0x3fd55555
 801f218:	db6fabff 	.word	0xdb6fabff
 801f21c:	3fdb6db6 	.word	0x3fdb6db6
 801f220:	33333303 	.word	0x33333303
 801f224:	3fe33333 	.word	0x3fe33333
 801f228:	e0000000 	.word	0xe0000000
 801f22c:	3feec709 	.word	0x3feec709
 801f230:	dc3a03fd 	.word	0xdc3a03fd
 801f234:	3feec709 	.word	0x3feec709
 801f238:	145b01f5 	.word	0x145b01f5
 801f23c:	be3e2fe0 	.word	0xbe3e2fe0
 801f240:	00000000 	.word	0x00000000
 801f244:	3ff00000 	.word	0x3ff00000
 801f248:	7ff00000 	.word	0x7ff00000
 801f24c:	43400000 	.word	0x43400000
 801f250:	0003988e 	.word	0x0003988e
 801f254:	000bb679 	.word	0x000bb679
 801f258:	08026418 	.word	0x08026418
 801f25c:	3ff00000 	.word	0x3ff00000
 801f260:	40080000 	.word	0x40080000
 801f264:	08026438 	.word	0x08026438
 801f268:	08026428 	.word	0x08026428
 801f26c:	a3b5      	add	r3, pc, #724	; (adr r3, 801f544 <__ieee754_pow+0xa54>)
 801f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f272:	4640      	mov	r0, r8
 801f274:	4649      	mov	r1, r9
 801f276:	f7e1 f833 	bl	80002e0 <__adddf3>
 801f27a:	4622      	mov	r2, r4
 801f27c:	ec41 0b1a 	vmov	d10, r0, r1
 801f280:	462b      	mov	r3, r5
 801f282:	4630      	mov	r0, r6
 801f284:	4639      	mov	r1, r7
 801f286:	f7e1 f829 	bl	80002dc <__aeabi_dsub>
 801f28a:	4602      	mov	r2, r0
 801f28c:	460b      	mov	r3, r1
 801f28e:	ec51 0b1a 	vmov	r0, r1, d10
 801f292:	f7e1 fc6b 	bl	8000b6c <__aeabi_dcmpgt>
 801f296:	2800      	cmp	r0, #0
 801f298:	f47f ae04 	bne.w	801eea4 <__ieee754_pow+0x3b4>
 801f29c:	4aa4      	ldr	r2, [pc, #656]	; (801f530 <__ieee754_pow+0xa40>)
 801f29e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f2a2:	4293      	cmp	r3, r2
 801f2a4:	f340 8108 	ble.w	801f4b8 <__ieee754_pow+0x9c8>
 801f2a8:	151b      	asrs	r3, r3, #20
 801f2aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f2ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f2b2:	fa4a f303 	asr.w	r3, sl, r3
 801f2b6:	445b      	add	r3, fp
 801f2b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f2bc:	4e9d      	ldr	r6, [pc, #628]	; (801f534 <__ieee754_pow+0xa44>)
 801f2be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f2c2:	4116      	asrs	r6, r2
 801f2c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801f2c8:	2000      	movs	r0, #0
 801f2ca:	ea23 0106 	bic.w	r1, r3, r6
 801f2ce:	f1c2 0214 	rsb	r2, r2, #20
 801f2d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f2d6:	fa4a fa02 	asr.w	sl, sl, r2
 801f2da:	f1bb 0f00 	cmp.w	fp, #0
 801f2de:	4602      	mov	r2, r0
 801f2e0:	460b      	mov	r3, r1
 801f2e2:	4620      	mov	r0, r4
 801f2e4:	4629      	mov	r1, r5
 801f2e6:	bfb8      	it	lt
 801f2e8:	f1ca 0a00 	rsblt	sl, sl, #0
 801f2ec:	f7e0 fff6 	bl	80002dc <__aeabi_dsub>
 801f2f0:	ec41 0b19 	vmov	d9, r0, r1
 801f2f4:	4642      	mov	r2, r8
 801f2f6:	464b      	mov	r3, r9
 801f2f8:	ec51 0b19 	vmov	r0, r1, d9
 801f2fc:	f7e0 fff0 	bl	80002e0 <__adddf3>
 801f300:	a37b      	add	r3, pc, #492	; (adr r3, 801f4f0 <__ieee754_pow+0xa00>)
 801f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f306:	2000      	movs	r0, #0
 801f308:	4604      	mov	r4, r0
 801f30a:	460d      	mov	r5, r1
 801f30c:	f7e1 f99e 	bl	800064c <__aeabi_dmul>
 801f310:	ec53 2b19 	vmov	r2, r3, d9
 801f314:	4606      	mov	r6, r0
 801f316:	460f      	mov	r7, r1
 801f318:	4620      	mov	r0, r4
 801f31a:	4629      	mov	r1, r5
 801f31c:	f7e0 ffde 	bl	80002dc <__aeabi_dsub>
 801f320:	4602      	mov	r2, r0
 801f322:	460b      	mov	r3, r1
 801f324:	4640      	mov	r0, r8
 801f326:	4649      	mov	r1, r9
 801f328:	f7e0 ffd8 	bl	80002dc <__aeabi_dsub>
 801f32c:	a372      	add	r3, pc, #456	; (adr r3, 801f4f8 <__ieee754_pow+0xa08>)
 801f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f332:	f7e1 f98b 	bl	800064c <__aeabi_dmul>
 801f336:	a372      	add	r3, pc, #456	; (adr r3, 801f500 <__ieee754_pow+0xa10>)
 801f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f33c:	4680      	mov	r8, r0
 801f33e:	4689      	mov	r9, r1
 801f340:	4620      	mov	r0, r4
 801f342:	4629      	mov	r1, r5
 801f344:	f7e1 f982 	bl	800064c <__aeabi_dmul>
 801f348:	4602      	mov	r2, r0
 801f34a:	460b      	mov	r3, r1
 801f34c:	4640      	mov	r0, r8
 801f34e:	4649      	mov	r1, r9
 801f350:	f7e0 ffc6 	bl	80002e0 <__adddf3>
 801f354:	4604      	mov	r4, r0
 801f356:	460d      	mov	r5, r1
 801f358:	4602      	mov	r2, r0
 801f35a:	460b      	mov	r3, r1
 801f35c:	4630      	mov	r0, r6
 801f35e:	4639      	mov	r1, r7
 801f360:	f7e0 ffbe 	bl	80002e0 <__adddf3>
 801f364:	4632      	mov	r2, r6
 801f366:	463b      	mov	r3, r7
 801f368:	4680      	mov	r8, r0
 801f36a:	4689      	mov	r9, r1
 801f36c:	f7e0 ffb6 	bl	80002dc <__aeabi_dsub>
 801f370:	4602      	mov	r2, r0
 801f372:	460b      	mov	r3, r1
 801f374:	4620      	mov	r0, r4
 801f376:	4629      	mov	r1, r5
 801f378:	f7e0 ffb0 	bl	80002dc <__aeabi_dsub>
 801f37c:	4642      	mov	r2, r8
 801f37e:	4606      	mov	r6, r0
 801f380:	460f      	mov	r7, r1
 801f382:	464b      	mov	r3, r9
 801f384:	4640      	mov	r0, r8
 801f386:	4649      	mov	r1, r9
 801f388:	f7e1 f960 	bl	800064c <__aeabi_dmul>
 801f38c:	a35e      	add	r3, pc, #376	; (adr r3, 801f508 <__ieee754_pow+0xa18>)
 801f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f392:	4604      	mov	r4, r0
 801f394:	460d      	mov	r5, r1
 801f396:	f7e1 f959 	bl	800064c <__aeabi_dmul>
 801f39a:	a35d      	add	r3, pc, #372	; (adr r3, 801f510 <__ieee754_pow+0xa20>)
 801f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a0:	f7e0 ff9c 	bl	80002dc <__aeabi_dsub>
 801f3a4:	4622      	mov	r2, r4
 801f3a6:	462b      	mov	r3, r5
 801f3a8:	f7e1 f950 	bl	800064c <__aeabi_dmul>
 801f3ac:	a35a      	add	r3, pc, #360	; (adr r3, 801f518 <__ieee754_pow+0xa28>)
 801f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3b2:	f7e0 ff95 	bl	80002e0 <__adddf3>
 801f3b6:	4622      	mov	r2, r4
 801f3b8:	462b      	mov	r3, r5
 801f3ba:	f7e1 f947 	bl	800064c <__aeabi_dmul>
 801f3be:	a358      	add	r3, pc, #352	; (adr r3, 801f520 <__ieee754_pow+0xa30>)
 801f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3c4:	f7e0 ff8a 	bl	80002dc <__aeabi_dsub>
 801f3c8:	4622      	mov	r2, r4
 801f3ca:	462b      	mov	r3, r5
 801f3cc:	f7e1 f93e 	bl	800064c <__aeabi_dmul>
 801f3d0:	a355      	add	r3, pc, #340	; (adr r3, 801f528 <__ieee754_pow+0xa38>)
 801f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3d6:	f7e0 ff83 	bl	80002e0 <__adddf3>
 801f3da:	4622      	mov	r2, r4
 801f3dc:	462b      	mov	r3, r5
 801f3de:	f7e1 f935 	bl	800064c <__aeabi_dmul>
 801f3e2:	4602      	mov	r2, r0
 801f3e4:	460b      	mov	r3, r1
 801f3e6:	4640      	mov	r0, r8
 801f3e8:	4649      	mov	r1, r9
 801f3ea:	f7e0 ff77 	bl	80002dc <__aeabi_dsub>
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	460d      	mov	r5, r1
 801f3f2:	4602      	mov	r2, r0
 801f3f4:	460b      	mov	r3, r1
 801f3f6:	4640      	mov	r0, r8
 801f3f8:	4649      	mov	r1, r9
 801f3fa:	f7e1 f927 	bl	800064c <__aeabi_dmul>
 801f3fe:	2200      	movs	r2, #0
 801f400:	ec41 0b19 	vmov	d9, r0, r1
 801f404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f408:	4620      	mov	r0, r4
 801f40a:	4629      	mov	r1, r5
 801f40c:	f7e0 ff66 	bl	80002dc <__aeabi_dsub>
 801f410:	4602      	mov	r2, r0
 801f412:	460b      	mov	r3, r1
 801f414:	ec51 0b19 	vmov	r0, r1, d9
 801f418:	f7e1 fa42 	bl	80008a0 <__aeabi_ddiv>
 801f41c:	4632      	mov	r2, r6
 801f41e:	4604      	mov	r4, r0
 801f420:	460d      	mov	r5, r1
 801f422:	463b      	mov	r3, r7
 801f424:	4640      	mov	r0, r8
 801f426:	4649      	mov	r1, r9
 801f428:	f7e1 f910 	bl	800064c <__aeabi_dmul>
 801f42c:	4632      	mov	r2, r6
 801f42e:	463b      	mov	r3, r7
 801f430:	f7e0 ff56 	bl	80002e0 <__adddf3>
 801f434:	4602      	mov	r2, r0
 801f436:	460b      	mov	r3, r1
 801f438:	4620      	mov	r0, r4
 801f43a:	4629      	mov	r1, r5
 801f43c:	f7e0 ff4e 	bl	80002dc <__aeabi_dsub>
 801f440:	4642      	mov	r2, r8
 801f442:	464b      	mov	r3, r9
 801f444:	f7e0 ff4a 	bl	80002dc <__aeabi_dsub>
 801f448:	460b      	mov	r3, r1
 801f44a:	4602      	mov	r2, r0
 801f44c:	493a      	ldr	r1, [pc, #232]	; (801f538 <__ieee754_pow+0xa48>)
 801f44e:	2000      	movs	r0, #0
 801f450:	f7e0 ff44 	bl	80002dc <__aeabi_dsub>
 801f454:	ec41 0b10 	vmov	d0, r0, r1
 801f458:	ee10 3a90 	vmov	r3, s1
 801f45c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f464:	da2b      	bge.n	801f4be <__ieee754_pow+0x9ce>
 801f466:	4650      	mov	r0, sl
 801f468:	f000 fb9e 	bl	801fba8 <scalbn>
 801f46c:	ec51 0b10 	vmov	r0, r1, d0
 801f470:	ec53 2b18 	vmov	r2, r3, d8
 801f474:	f7ff bbed 	b.w	801ec52 <__ieee754_pow+0x162>
 801f478:	4b30      	ldr	r3, [pc, #192]	; (801f53c <__ieee754_pow+0xa4c>)
 801f47a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801f47e:	429e      	cmp	r6, r3
 801f480:	f77f af0c 	ble.w	801f29c <__ieee754_pow+0x7ac>
 801f484:	4b2e      	ldr	r3, [pc, #184]	; (801f540 <__ieee754_pow+0xa50>)
 801f486:	440b      	add	r3, r1
 801f488:	4303      	orrs	r3, r0
 801f48a:	d009      	beq.n	801f4a0 <__ieee754_pow+0x9b0>
 801f48c:	ec51 0b18 	vmov	r0, r1, d8
 801f490:	2200      	movs	r2, #0
 801f492:	2300      	movs	r3, #0
 801f494:	f7e1 fb4c 	bl	8000b30 <__aeabi_dcmplt>
 801f498:	3800      	subs	r0, #0
 801f49a:	bf18      	it	ne
 801f49c:	2001      	movne	r0, #1
 801f49e:	e447      	b.n	801ed30 <__ieee754_pow+0x240>
 801f4a0:	4622      	mov	r2, r4
 801f4a2:	462b      	mov	r3, r5
 801f4a4:	f7e0 ff1a 	bl	80002dc <__aeabi_dsub>
 801f4a8:	4642      	mov	r2, r8
 801f4aa:	464b      	mov	r3, r9
 801f4ac:	f7e1 fb54 	bl	8000b58 <__aeabi_dcmpge>
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	f43f aef3 	beq.w	801f29c <__ieee754_pow+0x7ac>
 801f4b6:	e7e9      	b.n	801f48c <__ieee754_pow+0x99c>
 801f4b8:	f04f 0a00 	mov.w	sl, #0
 801f4bc:	e71a      	b.n	801f2f4 <__ieee754_pow+0x804>
 801f4be:	ec51 0b10 	vmov	r0, r1, d0
 801f4c2:	4619      	mov	r1, r3
 801f4c4:	e7d4      	b.n	801f470 <__ieee754_pow+0x980>
 801f4c6:	491c      	ldr	r1, [pc, #112]	; (801f538 <__ieee754_pow+0xa48>)
 801f4c8:	2000      	movs	r0, #0
 801f4ca:	f7ff bb30 	b.w	801eb2e <__ieee754_pow+0x3e>
 801f4ce:	2000      	movs	r0, #0
 801f4d0:	2100      	movs	r1, #0
 801f4d2:	f7ff bb2c 	b.w	801eb2e <__ieee754_pow+0x3e>
 801f4d6:	4630      	mov	r0, r6
 801f4d8:	4639      	mov	r1, r7
 801f4da:	f7ff bb28 	b.w	801eb2e <__ieee754_pow+0x3e>
 801f4de:	9204      	str	r2, [sp, #16]
 801f4e0:	f7ff bb7a 	b.w	801ebd8 <__ieee754_pow+0xe8>
 801f4e4:	2300      	movs	r3, #0
 801f4e6:	f7ff bb64 	b.w	801ebb2 <__ieee754_pow+0xc2>
 801f4ea:	bf00      	nop
 801f4ec:	f3af 8000 	nop.w
 801f4f0:	00000000 	.word	0x00000000
 801f4f4:	3fe62e43 	.word	0x3fe62e43
 801f4f8:	fefa39ef 	.word	0xfefa39ef
 801f4fc:	3fe62e42 	.word	0x3fe62e42
 801f500:	0ca86c39 	.word	0x0ca86c39
 801f504:	be205c61 	.word	0xbe205c61
 801f508:	72bea4d0 	.word	0x72bea4d0
 801f50c:	3e663769 	.word	0x3e663769
 801f510:	c5d26bf1 	.word	0xc5d26bf1
 801f514:	3ebbbd41 	.word	0x3ebbbd41
 801f518:	af25de2c 	.word	0xaf25de2c
 801f51c:	3f11566a 	.word	0x3f11566a
 801f520:	16bebd93 	.word	0x16bebd93
 801f524:	3f66c16c 	.word	0x3f66c16c
 801f528:	5555553e 	.word	0x5555553e
 801f52c:	3fc55555 	.word	0x3fc55555
 801f530:	3fe00000 	.word	0x3fe00000
 801f534:	000fffff 	.word	0x000fffff
 801f538:	3ff00000 	.word	0x3ff00000
 801f53c:	4090cbff 	.word	0x4090cbff
 801f540:	3f6f3400 	.word	0x3f6f3400
 801f544:	652b82fe 	.word	0x652b82fe
 801f548:	3c971547 	.word	0x3c971547

0801f54c <__ieee754_sqrt>:
 801f54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f550:	ec55 4b10 	vmov	r4, r5, d0
 801f554:	4e55      	ldr	r6, [pc, #340]	; (801f6ac <__ieee754_sqrt+0x160>)
 801f556:	43ae      	bics	r6, r5
 801f558:	ee10 0a10 	vmov	r0, s0
 801f55c:	ee10 3a10 	vmov	r3, s0
 801f560:	462a      	mov	r2, r5
 801f562:	4629      	mov	r1, r5
 801f564:	d110      	bne.n	801f588 <__ieee754_sqrt+0x3c>
 801f566:	ee10 2a10 	vmov	r2, s0
 801f56a:	462b      	mov	r3, r5
 801f56c:	f7e1 f86e 	bl	800064c <__aeabi_dmul>
 801f570:	4602      	mov	r2, r0
 801f572:	460b      	mov	r3, r1
 801f574:	4620      	mov	r0, r4
 801f576:	4629      	mov	r1, r5
 801f578:	f7e0 feb2 	bl	80002e0 <__adddf3>
 801f57c:	4604      	mov	r4, r0
 801f57e:	460d      	mov	r5, r1
 801f580:	ec45 4b10 	vmov	d0, r4, r5
 801f584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f588:	2d00      	cmp	r5, #0
 801f58a:	dc10      	bgt.n	801f5ae <__ieee754_sqrt+0x62>
 801f58c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f590:	4330      	orrs	r0, r6
 801f592:	d0f5      	beq.n	801f580 <__ieee754_sqrt+0x34>
 801f594:	b15d      	cbz	r5, 801f5ae <__ieee754_sqrt+0x62>
 801f596:	ee10 2a10 	vmov	r2, s0
 801f59a:	462b      	mov	r3, r5
 801f59c:	ee10 0a10 	vmov	r0, s0
 801f5a0:	f7e0 fe9c 	bl	80002dc <__aeabi_dsub>
 801f5a4:	4602      	mov	r2, r0
 801f5a6:	460b      	mov	r3, r1
 801f5a8:	f7e1 f97a 	bl	80008a0 <__aeabi_ddiv>
 801f5ac:	e7e6      	b.n	801f57c <__ieee754_sqrt+0x30>
 801f5ae:	1512      	asrs	r2, r2, #20
 801f5b0:	d074      	beq.n	801f69c <__ieee754_sqrt+0x150>
 801f5b2:	07d4      	lsls	r4, r2, #31
 801f5b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801f5b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801f5bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801f5c0:	bf5e      	ittt	pl
 801f5c2:	0fda      	lsrpl	r2, r3, #31
 801f5c4:	005b      	lslpl	r3, r3, #1
 801f5c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801f5ca:	2400      	movs	r4, #0
 801f5cc:	0fda      	lsrs	r2, r3, #31
 801f5ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f5d2:	107f      	asrs	r7, r7, #1
 801f5d4:	005b      	lsls	r3, r3, #1
 801f5d6:	2516      	movs	r5, #22
 801f5d8:	4620      	mov	r0, r4
 801f5da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f5de:	1886      	adds	r6, r0, r2
 801f5e0:	428e      	cmp	r6, r1
 801f5e2:	bfde      	ittt	le
 801f5e4:	1b89      	suble	r1, r1, r6
 801f5e6:	18b0      	addle	r0, r6, r2
 801f5e8:	18a4      	addle	r4, r4, r2
 801f5ea:	0049      	lsls	r1, r1, #1
 801f5ec:	3d01      	subs	r5, #1
 801f5ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801f5f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801f5f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f5fa:	d1f0      	bne.n	801f5de <__ieee754_sqrt+0x92>
 801f5fc:	462a      	mov	r2, r5
 801f5fe:	f04f 0e20 	mov.w	lr, #32
 801f602:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f606:	4281      	cmp	r1, r0
 801f608:	eb06 0c05 	add.w	ip, r6, r5
 801f60c:	dc02      	bgt.n	801f614 <__ieee754_sqrt+0xc8>
 801f60e:	d113      	bne.n	801f638 <__ieee754_sqrt+0xec>
 801f610:	459c      	cmp	ip, r3
 801f612:	d811      	bhi.n	801f638 <__ieee754_sqrt+0xec>
 801f614:	f1bc 0f00 	cmp.w	ip, #0
 801f618:	eb0c 0506 	add.w	r5, ip, r6
 801f61c:	da43      	bge.n	801f6a6 <__ieee754_sqrt+0x15a>
 801f61e:	2d00      	cmp	r5, #0
 801f620:	db41      	blt.n	801f6a6 <__ieee754_sqrt+0x15a>
 801f622:	f100 0801 	add.w	r8, r0, #1
 801f626:	1a09      	subs	r1, r1, r0
 801f628:	459c      	cmp	ip, r3
 801f62a:	bf88      	it	hi
 801f62c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801f630:	eba3 030c 	sub.w	r3, r3, ip
 801f634:	4432      	add	r2, r6
 801f636:	4640      	mov	r0, r8
 801f638:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801f63c:	f1be 0e01 	subs.w	lr, lr, #1
 801f640:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801f644:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f648:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f64c:	d1db      	bne.n	801f606 <__ieee754_sqrt+0xba>
 801f64e:	430b      	orrs	r3, r1
 801f650:	d006      	beq.n	801f660 <__ieee754_sqrt+0x114>
 801f652:	1c50      	adds	r0, r2, #1
 801f654:	bf13      	iteet	ne
 801f656:	3201      	addne	r2, #1
 801f658:	3401      	addeq	r4, #1
 801f65a:	4672      	moveq	r2, lr
 801f65c:	f022 0201 	bicne.w	r2, r2, #1
 801f660:	1063      	asrs	r3, r4, #1
 801f662:	0852      	lsrs	r2, r2, #1
 801f664:	07e1      	lsls	r1, r4, #31
 801f666:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f66a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f66e:	bf48      	it	mi
 801f670:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801f674:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801f678:	4614      	mov	r4, r2
 801f67a:	e781      	b.n	801f580 <__ieee754_sqrt+0x34>
 801f67c:	0ad9      	lsrs	r1, r3, #11
 801f67e:	3815      	subs	r0, #21
 801f680:	055b      	lsls	r3, r3, #21
 801f682:	2900      	cmp	r1, #0
 801f684:	d0fa      	beq.n	801f67c <__ieee754_sqrt+0x130>
 801f686:	02cd      	lsls	r5, r1, #11
 801f688:	d50a      	bpl.n	801f6a0 <__ieee754_sqrt+0x154>
 801f68a:	f1c2 0420 	rsb	r4, r2, #32
 801f68e:	fa23 f404 	lsr.w	r4, r3, r4
 801f692:	1e55      	subs	r5, r2, #1
 801f694:	4093      	lsls	r3, r2
 801f696:	4321      	orrs	r1, r4
 801f698:	1b42      	subs	r2, r0, r5
 801f69a:	e78a      	b.n	801f5b2 <__ieee754_sqrt+0x66>
 801f69c:	4610      	mov	r0, r2
 801f69e:	e7f0      	b.n	801f682 <__ieee754_sqrt+0x136>
 801f6a0:	0049      	lsls	r1, r1, #1
 801f6a2:	3201      	adds	r2, #1
 801f6a4:	e7ef      	b.n	801f686 <__ieee754_sqrt+0x13a>
 801f6a6:	4680      	mov	r8, r0
 801f6a8:	e7bd      	b.n	801f626 <__ieee754_sqrt+0xda>
 801f6aa:	bf00      	nop
 801f6ac:	7ff00000 	.word	0x7ff00000

0801f6b0 <__ieee754_expf>:
 801f6b0:	ee10 2a10 	vmov	r2, s0
 801f6b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801f6b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f6bc:	d902      	bls.n	801f6c4 <__ieee754_expf+0x14>
 801f6be:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f6c2:	4770      	bx	lr
 801f6c4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801f6c8:	d106      	bne.n	801f6d8 <__ieee754_expf+0x28>
 801f6ca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801f804 <__ieee754_expf+0x154>
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	bf18      	it	ne
 801f6d2:	eeb0 0a67 	vmovne.f32	s0, s15
 801f6d6:	4770      	bx	lr
 801f6d8:	484b      	ldr	r0, [pc, #300]	; (801f808 <__ieee754_expf+0x158>)
 801f6da:	4282      	cmp	r2, r0
 801f6dc:	dd02      	ble.n	801f6e4 <__ieee754_expf+0x34>
 801f6de:	2000      	movs	r0, #0
 801f6e0:	f000 ba48 	b.w	801fb74 <__math_oflowf>
 801f6e4:	2a00      	cmp	r2, #0
 801f6e6:	da05      	bge.n	801f6f4 <__ieee754_expf+0x44>
 801f6e8:	4a48      	ldr	r2, [pc, #288]	; (801f80c <__ieee754_expf+0x15c>)
 801f6ea:	4291      	cmp	r1, r2
 801f6ec:	d902      	bls.n	801f6f4 <__ieee754_expf+0x44>
 801f6ee:	2000      	movs	r0, #0
 801f6f0:	f000 ba3a 	b.w	801fb68 <__math_uflowf>
 801f6f4:	4a46      	ldr	r2, [pc, #280]	; (801f810 <__ieee754_expf+0x160>)
 801f6f6:	4291      	cmp	r1, r2
 801f6f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f6fc:	d952      	bls.n	801f7a4 <__ieee754_expf+0xf4>
 801f6fe:	4a45      	ldr	r2, [pc, #276]	; (801f814 <__ieee754_expf+0x164>)
 801f700:	4291      	cmp	r1, r2
 801f702:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801f706:	d834      	bhi.n	801f772 <__ieee754_expf+0xc2>
 801f708:	4943      	ldr	r1, [pc, #268]	; (801f818 <__ieee754_expf+0x168>)
 801f70a:	4411      	add	r1, r2
 801f70c:	ed91 7a00 	vldr	s14, [r1]
 801f710:	4942      	ldr	r1, [pc, #264]	; (801f81c <__ieee754_expf+0x16c>)
 801f712:	440a      	add	r2, r1
 801f714:	edd2 7a00 	vldr	s15, [r2]
 801f718:	ee30 7a47 	vsub.f32	s14, s0, s14
 801f71c:	f1c3 0201 	rsb	r2, r3, #1
 801f720:	1ad2      	subs	r2, r2, r3
 801f722:	ee37 0a67 	vsub.f32	s0, s14, s15
 801f726:	ee20 6a00 	vmul.f32	s12, s0, s0
 801f72a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801f820 <__ieee754_expf+0x170>
 801f72e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801f824 <__ieee754_expf+0x174>
 801f732:	eee6 6a05 	vfma.f32	s13, s12, s10
 801f736:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801f828 <__ieee754_expf+0x178>
 801f73a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801f73e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801f82c <__ieee754_expf+0x17c>
 801f742:	eee5 6a06 	vfma.f32	s13, s10, s12
 801f746:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801f830 <__ieee754_expf+0x180>
 801f74a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801f74e:	eef0 6a40 	vmov.f32	s13, s0
 801f752:	eee5 6a46 	vfms.f32	s13, s10, s12
 801f756:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f75a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801f75e:	bb92      	cbnz	r2, 801f7c6 <__ieee754_expf+0x116>
 801f760:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801f764:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801f768:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f76c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801f770:	4770      	bx	lr
 801f772:	4b30      	ldr	r3, [pc, #192]	; (801f834 <__ieee754_expf+0x184>)
 801f774:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801f838 <__ieee754_expf+0x188>
 801f778:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f83c <__ieee754_expf+0x18c>
 801f77c:	4413      	add	r3, r2
 801f77e:	edd3 7a00 	vldr	s15, [r3]
 801f782:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f786:	eeb0 7a40 	vmov.f32	s14, s0
 801f78a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f78e:	ee17 2a90 	vmov	r2, s15
 801f792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f796:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f79a:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f840 <__ieee754_expf+0x190>
 801f79e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f7a2:	e7be      	b.n	801f722 <__ieee754_expf+0x72>
 801f7a4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801f7a8:	d20b      	bcs.n	801f7c2 <__ieee754_expf+0x112>
 801f7aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 801f844 <__ieee754_expf+0x194>
 801f7ae:	ee70 6a26 	vadd.f32	s13, s0, s13
 801f7b2:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ba:	dd02      	ble.n	801f7c2 <__ieee754_expf+0x112>
 801f7bc:	ee30 0a25 	vadd.f32	s0, s0, s11
 801f7c0:	4770      	bx	lr
 801f7c2:	2200      	movs	r2, #0
 801f7c4:	e7af      	b.n	801f726 <__ieee754_expf+0x76>
 801f7c6:	ee76 6a66 	vsub.f32	s13, s12, s13
 801f7ca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801f7ce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801f7d2:	bfb8      	it	lt
 801f7d4:	3264      	addlt	r2, #100	; 0x64
 801f7d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f7da:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f7de:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801f7e2:	ee17 3a90 	vmov	r3, s15
 801f7e6:	bfab      	itete	ge
 801f7e8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801f7ec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801f7f0:	ee00 3a10 	vmovge	s0, r3
 801f7f4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801f848 <__ieee754_expf+0x198>
 801f7f8:	bfbc      	itt	lt
 801f7fa:	ee00 3a10 	vmovlt	s0, r3
 801f7fe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801f802:	4770      	bx	lr
 801f804:	00000000 	.word	0x00000000
 801f808:	42b17217 	.word	0x42b17217
 801f80c:	42cff1b5 	.word	0x42cff1b5
 801f810:	3eb17218 	.word	0x3eb17218
 801f814:	3f851591 	.word	0x3f851591
 801f818:	08026450 	.word	0x08026450
 801f81c:	08026458 	.word	0x08026458
 801f820:	3331bb4c 	.word	0x3331bb4c
 801f824:	b5ddea0e 	.word	0xb5ddea0e
 801f828:	388ab355 	.word	0x388ab355
 801f82c:	bb360b61 	.word	0xbb360b61
 801f830:	3e2aaaab 	.word	0x3e2aaaab
 801f834:	08026448 	.word	0x08026448
 801f838:	3fb8aa3b 	.word	0x3fb8aa3b
 801f83c:	3f317180 	.word	0x3f317180
 801f840:	3717f7d1 	.word	0x3717f7d1
 801f844:	7149f2ca 	.word	0x7149f2ca
 801f848:	0d800000 	.word	0x0d800000

0801f84c <__ieee754_logf>:
 801f84c:	ee10 3a10 	vmov	r3, s0
 801f850:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f854:	d106      	bne.n	801f864 <__ieee754_logf+0x18>
 801f856:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801f9ec <__ieee754_logf+0x1a0>
 801f85a:	eddf 7a65 	vldr	s15, [pc, #404]	; 801f9f0 <__ieee754_logf+0x1a4>
 801f85e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801f862:	4770      	bx	lr
 801f864:	2b00      	cmp	r3, #0
 801f866:	da02      	bge.n	801f86e <__ieee754_logf+0x22>
 801f868:	ee30 7a40 	vsub.f32	s14, s0, s0
 801f86c:	e7f5      	b.n	801f85a <__ieee754_logf+0xe>
 801f86e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f872:	db02      	blt.n	801f87a <__ieee754_logf+0x2e>
 801f874:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f878:	4770      	bx	lr
 801f87a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f87e:	bfb8      	it	lt
 801f880:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801f9f4 <__ieee754_logf+0x1a8>
 801f884:	485c      	ldr	r0, [pc, #368]	; (801f9f8 <__ieee754_logf+0x1ac>)
 801f886:	bfbe      	ittt	lt
 801f888:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801f88c:	f06f 0118 	mvnlt.w	r1, #24
 801f890:	ee17 3a90 	vmovlt	r3, s15
 801f894:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801f898:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f89c:	4418      	add	r0, r3
 801f89e:	bfa8      	it	ge
 801f8a0:	2100      	movge	r1, #0
 801f8a2:	3a7f      	subs	r2, #127	; 0x7f
 801f8a4:	440a      	add	r2, r1
 801f8a6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801f8aa:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801f8ae:	4319      	orrs	r1, r3
 801f8b0:	ee00 1a10 	vmov	s0, r1
 801f8b4:	4951      	ldr	r1, [pc, #324]	; (801f9fc <__ieee754_logf+0x1b0>)
 801f8b6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801f8ba:	f103 000f 	add.w	r0, r3, #15
 801f8be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f8c2:	4001      	ands	r1, r0
 801f8c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f8c8:	bb89      	cbnz	r1, 801f92e <__ieee754_logf+0xe2>
 801f8ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801f8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8d2:	d10f      	bne.n	801f8f4 <__ieee754_logf+0xa8>
 801f8d4:	2a00      	cmp	r2, #0
 801f8d6:	f000 8085 	beq.w	801f9e4 <__ieee754_logf+0x198>
 801f8da:	ee07 2a90 	vmov	s15, r2
 801f8de:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801fa00 <__ieee754_logf+0x1b4>
 801f8e2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801fa04 <__ieee754_logf+0x1b8>
 801f8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f8ea:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f8ee:	eea7 0a87 	vfma.f32	s0, s15, s14
 801f8f2:	4770      	bx	lr
 801f8f4:	eddf 6a44 	vldr	s13, [pc, #272]	; 801fa08 <__ieee754_logf+0x1bc>
 801f8f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f8fc:	eee0 7a66 	vfms.f32	s15, s0, s13
 801f900:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f904:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f908:	b912      	cbnz	r2, 801f910 <__ieee754_logf+0xc4>
 801f90a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f90e:	4770      	bx	lr
 801f910:	ee07 2a90 	vmov	s15, r2
 801f914:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801fa00 <__ieee754_logf+0x1b4>
 801f918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f91c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f920:	ee37 0a40 	vsub.f32	s0, s14, s0
 801f924:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801fa04 <__ieee754_logf+0x1b8>
 801f928:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801f92c:	4770      	bx	lr
 801f92e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801f932:	ee70 7a27 	vadd.f32	s15, s0, s15
 801f936:	eddf 5a35 	vldr	s11, [pc, #212]	; 801fa0c <__ieee754_logf+0x1c0>
 801f93a:	eddf 4a35 	vldr	s9, [pc, #212]	; 801fa10 <__ieee754_logf+0x1c4>
 801f93e:	4935      	ldr	r1, [pc, #212]	; (801fa14 <__ieee754_logf+0x1c8>)
 801f940:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801f944:	4419      	add	r1, r3
 801f946:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801f94a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801f94e:	430b      	orrs	r3, r1
 801f950:	2b00      	cmp	r3, #0
 801f952:	ee07 2a90 	vmov	s15, r2
 801f956:	ee26 5a06 	vmul.f32	s10, s12, s12
 801f95a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f95e:	ee25 7a05 	vmul.f32	s14, s10, s10
 801f962:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801fa18 <__ieee754_logf+0x1cc>
 801f966:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f96a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801fa1c <__ieee754_logf+0x1d0>
 801f96e:	eee7 5a87 	vfma.f32	s11, s15, s14
 801f972:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801fa20 <__ieee754_logf+0x1d4>
 801f976:	eee7 7a24 	vfma.f32	s15, s14, s9
 801f97a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801fa24 <__ieee754_logf+0x1d8>
 801f97e:	eee7 4a87 	vfma.f32	s9, s15, s14
 801f982:	eddf 7a29 	vldr	s15, [pc, #164]	; 801fa28 <__ieee754_logf+0x1dc>
 801f986:	eee4 7a87 	vfma.f32	s15, s9, s14
 801f98a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f98e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801f992:	dd1c      	ble.n	801f9ce <__ieee754_logf+0x182>
 801f994:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f998:	ee20 7a07 	vmul.f32	s14, s0, s14
 801f99c:	ee27 7a00 	vmul.f32	s14, s14, s0
 801f9a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f9a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f9a8:	b922      	cbnz	r2, 801f9b4 <__ieee754_logf+0x168>
 801f9aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f9ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f9b2:	4770      	bx	lr
 801f9b4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801fa00 <__ieee754_logf+0x1b4>
 801f9b8:	eee6 7a86 	vfma.f32	s15, s13, s12
 801f9bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f9c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f9c4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801fa04 <__ieee754_logf+0x1b8>
 801f9c8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801f9cc:	4770      	bx	lr
 801f9ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f9d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f9d6:	2a00      	cmp	r2, #0
 801f9d8:	d0e9      	beq.n	801f9ae <__ieee754_logf+0x162>
 801f9da:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801fa00 <__ieee754_logf+0x1b4>
 801f9de:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801f9e2:	e7ed      	b.n	801f9c0 <__ieee754_logf+0x174>
 801f9e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801f9f0 <__ieee754_logf+0x1a4>
 801f9e8:	4770      	bx	lr
 801f9ea:	bf00      	nop
 801f9ec:	cc000000 	.word	0xcc000000
 801f9f0:	00000000 	.word	0x00000000
 801f9f4:	4c000000 	.word	0x4c000000
 801f9f8:	004afb20 	.word	0x004afb20
 801f9fc:	007ffff0 	.word	0x007ffff0
 801fa00:	3717f7d1 	.word	0x3717f7d1
 801fa04:	3f317180 	.word	0x3f317180
 801fa08:	3eaaaaab 	.word	0x3eaaaaab
 801fa0c:	3e1cd04f 	.word	0x3e1cd04f
 801fa10:	3e178897 	.word	0x3e178897
 801fa14:	ffcf5c30 	.word	0xffcf5c30
 801fa18:	3e638e29 	.word	0x3e638e29
 801fa1c:	3ecccccd 	.word	0x3ecccccd
 801fa20:	3e3a3325 	.word	0x3e3a3325
 801fa24:	3e924925 	.word	0x3e924925
 801fa28:	3f2aaaab 	.word	0x3f2aaaab

0801fa2c <__ieee754_log10f>:
 801fa2c:	b508      	push	{r3, lr}
 801fa2e:	ee10 2a10 	vmov	r2, s0
 801fa32:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801fa36:	ed2d 8b02 	vpush	{d8}
 801fa3a:	d108      	bne.n	801fa4e <__ieee754_log10f+0x22>
 801fa3c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801fac4 <__ieee754_log10f+0x98>
 801fa40:	eddf 7a21 	vldr	s15, [pc, #132]	; 801fac8 <__ieee754_log10f+0x9c>
 801fa44:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801fa48:	ecbd 8b02 	vpop	{d8}
 801fa4c:	bd08      	pop	{r3, pc}
 801fa4e:	2a00      	cmp	r2, #0
 801fa50:	da02      	bge.n	801fa58 <__ieee754_log10f+0x2c>
 801fa52:	ee30 7a40 	vsub.f32	s14, s0, s0
 801fa56:	e7f3      	b.n	801fa40 <__ieee754_log10f+0x14>
 801fa58:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801fa5c:	db02      	blt.n	801fa64 <__ieee754_log10f+0x38>
 801fa5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fa62:	e7f1      	b.n	801fa48 <__ieee754_log10f+0x1c>
 801fa64:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801fa68:	bfbf      	itttt	lt
 801fa6a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801facc <__ieee754_log10f+0xa0>
 801fa6e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801fa72:	f06f 0118 	mvnlt.w	r1, #24
 801fa76:	ee17 2a90 	vmovlt	r2, s15
 801fa7a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801fa7e:	bfa8      	it	ge
 801fa80:	2100      	movge	r1, #0
 801fa82:	3b7f      	subs	r3, #127	; 0x7f
 801fa84:	440b      	add	r3, r1
 801fa86:	0fd9      	lsrs	r1, r3, #31
 801fa88:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801fa8c:	ee07 3a90 	vmov	s15, r3
 801fa90:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801fa94:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801fa98:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801fa9c:	ee00 3a10 	vmov	s0, r3
 801faa0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801faa4:	f7ff fed2 	bl	801f84c <__ieee754_logf>
 801faa8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801fad0 <__ieee754_log10f+0xa4>
 801faac:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fab0:	eddf 7a08 	vldr	s15, [pc, #32]	; 801fad4 <__ieee754_log10f+0xa8>
 801fab4:	eea8 0a27 	vfma.f32	s0, s16, s15
 801fab8:	eddf 7a07 	vldr	s15, [pc, #28]	; 801fad8 <__ieee754_log10f+0xac>
 801fabc:	eea8 0a27 	vfma.f32	s0, s16, s15
 801fac0:	e7c2      	b.n	801fa48 <__ieee754_log10f+0x1c>
 801fac2:	bf00      	nop
 801fac4:	cc000000 	.word	0xcc000000
 801fac8:	00000000 	.word	0x00000000
 801facc:	4c000000 	.word	0x4c000000
 801fad0:	3ede5bd9 	.word	0x3ede5bd9
 801fad4:	355427db 	.word	0x355427db
 801fad8:	3e9a2080 	.word	0x3e9a2080

0801fadc <with_errno>:
 801fadc:	b570      	push	{r4, r5, r6, lr}
 801fade:	4604      	mov	r4, r0
 801fae0:	460d      	mov	r5, r1
 801fae2:	4616      	mov	r6, r2
 801fae4:	f000 f928 	bl	801fd38 <__errno>
 801fae8:	4629      	mov	r1, r5
 801faea:	6006      	str	r6, [r0, #0]
 801faec:	4620      	mov	r0, r4
 801faee:	bd70      	pop	{r4, r5, r6, pc}

0801faf0 <xflow>:
 801faf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801faf2:	4614      	mov	r4, r2
 801faf4:	461d      	mov	r5, r3
 801faf6:	b108      	cbz	r0, 801fafc <xflow+0xc>
 801faf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fafc:	e9cd 2300 	strd	r2, r3, [sp]
 801fb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fb04:	4620      	mov	r0, r4
 801fb06:	4629      	mov	r1, r5
 801fb08:	f7e0 fda0 	bl	800064c <__aeabi_dmul>
 801fb0c:	2222      	movs	r2, #34	; 0x22
 801fb0e:	b003      	add	sp, #12
 801fb10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb14:	f7ff bfe2 	b.w	801fadc <with_errno>

0801fb18 <__math_uflow>:
 801fb18:	b508      	push	{r3, lr}
 801fb1a:	2200      	movs	r2, #0
 801fb1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801fb20:	f7ff ffe6 	bl	801faf0 <xflow>
 801fb24:	ec41 0b10 	vmov	d0, r0, r1
 801fb28:	bd08      	pop	{r3, pc}

0801fb2a <__math_oflow>:
 801fb2a:	b508      	push	{r3, lr}
 801fb2c:	2200      	movs	r2, #0
 801fb2e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801fb32:	f7ff ffdd 	bl	801faf0 <xflow>
 801fb36:	ec41 0b10 	vmov	d0, r0, r1
 801fb3a:	bd08      	pop	{r3, pc}

0801fb3c <with_errnof>:
 801fb3c:	b513      	push	{r0, r1, r4, lr}
 801fb3e:	4604      	mov	r4, r0
 801fb40:	ed8d 0a01 	vstr	s0, [sp, #4]
 801fb44:	f000 f8f8 	bl	801fd38 <__errno>
 801fb48:	ed9d 0a01 	vldr	s0, [sp, #4]
 801fb4c:	6004      	str	r4, [r0, #0]
 801fb4e:	b002      	add	sp, #8
 801fb50:	bd10      	pop	{r4, pc}

0801fb52 <xflowf>:
 801fb52:	b130      	cbz	r0, 801fb62 <xflowf+0x10>
 801fb54:	eef1 7a40 	vneg.f32	s15, s0
 801fb58:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fb5c:	2022      	movs	r0, #34	; 0x22
 801fb5e:	f7ff bfed 	b.w	801fb3c <with_errnof>
 801fb62:	eef0 7a40 	vmov.f32	s15, s0
 801fb66:	e7f7      	b.n	801fb58 <xflowf+0x6>

0801fb68 <__math_uflowf>:
 801fb68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fb70 <__math_uflowf+0x8>
 801fb6c:	f7ff bff1 	b.w	801fb52 <xflowf>
 801fb70:	10000000 	.word	0x10000000

0801fb74 <__math_oflowf>:
 801fb74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fb7c <__math_oflowf+0x8>
 801fb78:	f7ff bfeb 	b.w	801fb52 <xflowf>
 801fb7c:	70000000 	.word	0x70000000

0801fb80 <fabs>:
 801fb80:	ec51 0b10 	vmov	r0, r1, d0
 801fb84:	ee10 2a10 	vmov	r2, s0
 801fb88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fb8c:	ec43 2b10 	vmov	d0, r2, r3
 801fb90:	4770      	bx	lr

0801fb92 <finite>:
 801fb92:	b082      	sub	sp, #8
 801fb94:	ed8d 0b00 	vstr	d0, [sp]
 801fb98:	9801      	ldr	r0, [sp, #4]
 801fb9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801fb9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801fba2:	0fc0      	lsrs	r0, r0, #31
 801fba4:	b002      	add	sp, #8
 801fba6:	4770      	bx	lr

0801fba8 <scalbn>:
 801fba8:	b570      	push	{r4, r5, r6, lr}
 801fbaa:	ec55 4b10 	vmov	r4, r5, d0
 801fbae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801fbb2:	4606      	mov	r6, r0
 801fbb4:	462b      	mov	r3, r5
 801fbb6:	b99a      	cbnz	r2, 801fbe0 <scalbn+0x38>
 801fbb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fbbc:	4323      	orrs	r3, r4
 801fbbe:	d036      	beq.n	801fc2e <scalbn+0x86>
 801fbc0:	4b39      	ldr	r3, [pc, #228]	; (801fca8 <scalbn+0x100>)
 801fbc2:	4629      	mov	r1, r5
 801fbc4:	ee10 0a10 	vmov	r0, s0
 801fbc8:	2200      	movs	r2, #0
 801fbca:	f7e0 fd3f 	bl	800064c <__aeabi_dmul>
 801fbce:	4b37      	ldr	r3, [pc, #220]	; (801fcac <scalbn+0x104>)
 801fbd0:	429e      	cmp	r6, r3
 801fbd2:	4604      	mov	r4, r0
 801fbd4:	460d      	mov	r5, r1
 801fbd6:	da10      	bge.n	801fbfa <scalbn+0x52>
 801fbd8:	a32b      	add	r3, pc, #172	; (adr r3, 801fc88 <scalbn+0xe0>)
 801fbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbde:	e03a      	b.n	801fc56 <scalbn+0xae>
 801fbe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801fbe4:	428a      	cmp	r2, r1
 801fbe6:	d10c      	bne.n	801fc02 <scalbn+0x5a>
 801fbe8:	ee10 2a10 	vmov	r2, s0
 801fbec:	4620      	mov	r0, r4
 801fbee:	4629      	mov	r1, r5
 801fbf0:	f7e0 fb76 	bl	80002e0 <__adddf3>
 801fbf4:	4604      	mov	r4, r0
 801fbf6:	460d      	mov	r5, r1
 801fbf8:	e019      	b.n	801fc2e <scalbn+0x86>
 801fbfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fbfe:	460b      	mov	r3, r1
 801fc00:	3a36      	subs	r2, #54	; 0x36
 801fc02:	4432      	add	r2, r6
 801fc04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fc08:	428a      	cmp	r2, r1
 801fc0a:	dd08      	ble.n	801fc1e <scalbn+0x76>
 801fc0c:	2d00      	cmp	r5, #0
 801fc0e:	a120      	add	r1, pc, #128	; (adr r1, 801fc90 <scalbn+0xe8>)
 801fc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc14:	da1c      	bge.n	801fc50 <scalbn+0xa8>
 801fc16:	a120      	add	r1, pc, #128	; (adr r1, 801fc98 <scalbn+0xf0>)
 801fc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc1c:	e018      	b.n	801fc50 <scalbn+0xa8>
 801fc1e:	2a00      	cmp	r2, #0
 801fc20:	dd08      	ble.n	801fc34 <scalbn+0x8c>
 801fc22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fc26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fc2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fc2e:	ec45 4b10 	vmov	d0, r4, r5
 801fc32:	bd70      	pop	{r4, r5, r6, pc}
 801fc34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fc38:	da19      	bge.n	801fc6e <scalbn+0xc6>
 801fc3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fc3e:	429e      	cmp	r6, r3
 801fc40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801fc44:	dd0a      	ble.n	801fc5c <scalbn+0xb4>
 801fc46:	a112      	add	r1, pc, #72	; (adr r1, 801fc90 <scalbn+0xe8>)
 801fc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d1e2      	bne.n	801fc16 <scalbn+0x6e>
 801fc50:	a30f      	add	r3, pc, #60	; (adr r3, 801fc90 <scalbn+0xe8>)
 801fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc56:	f7e0 fcf9 	bl	800064c <__aeabi_dmul>
 801fc5a:	e7cb      	b.n	801fbf4 <scalbn+0x4c>
 801fc5c:	a10a      	add	r1, pc, #40	; (adr r1, 801fc88 <scalbn+0xe0>)
 801fc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d0b8      	beq.n	801fbd8 <scalbn+0x30>
 801fc66:	a10e      	add	r1, pc, #56	; (adr r1, 801fca0 <scalbn+0xf8>)
 801fc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc6c:	e7b4      	b.n	801fbd8 <scalbn+0x30>
 801fc6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fc72:	3236      	adds	r2, #54	; 0x36
 801fc74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fc78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fc7c:	4620      	mov	r0, r4
 801fc7e:	4b0c      	ldr	r3, [pc, #48]	; (801fcb0 <scalbn+0x108>)
 801fc80:	2200      	movs	r2, #0
 801fc82:	e7e8      	b.n	801fc56 <scalbn+0xae>
 801fc84:	f3af 8000 	nop.w
 801fc88:	c2f8f359 	.word	0xc2f8f359
 801fc8c:	01a56e1f 	.word	0x01a56e1f
 801fc90:	8800759c 	.word	0x8800759c
 801fc94:	7e37e43c 	.word	0x7e37e43c
 801fc98:	8800759c 	.word	0x8800759c
 801fc9c:	fe37e43c 	.word	0xfe37e43c
 801fca0:	c2f8f359 	.word	0xc2f8f359
 801fca4:	81a56e1f 	.word	0x81a56e1f
 801fca8:	43500000 	.word	0x43500000
 801fcac:	ffff3cb0 	.word	0xffff3cb0
 801fcb0:	3c900000 	.word	0x3c900000

0801fcb4 <finitef>:
 801fcb4:	b082      	sub	sp, #8
 801fcb6:	ed8d 0a01 	vstr	s0, [sp, #4]
 801fcba:	9801      	ldr	r0, [sp, #4]
 801fcbc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fcc0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801fcc4:	bfac      	ite	ge
 801fcc6:	2000      	movge	r0, #0
 801fcc8:	2001      	movlt	r0, #1
 801fcca:	b002      	add	sp, #8
 801fccc:	4770      	bx	lr
	...

0801fcd0 <nanf>:
 801fcd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fcd8 <nanf+0x8>
 801fcd4:	4770      	bx	lr
 801fcd6:	bf00      	nop
 801fcd8:	7fc00000 	.word	0x7fc00000

0801fcdc <abort>:
 801fcdc:	b508      	push	{r3, lr}
 801fcde:	2006      	movs	r0, #6
 801fce0:	f000 fd54 	bl	802078c <raise>
 801fce4:	2001      	movs	r0, #1
 801fce6:	f7e3 fc73 	bl	80035d0 <_exit>
	...

0801fcec <__assert_func>:
 801fcec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fcee:	4614      	mov	r4, r2
 801fcf0:	461a      	mov	r2, r3
 801fcf2:	4b09      	ldr	r3, [pc, #36]	; (801fd18 <__assert_func+0x2c>)
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	4605      	mov	r5, r0
 801fcf8:	68d8      	ldr	r0, [r3, #12]
 801fcfa:	b14c      	cbz	r4, 801fd10 <__assert_func+0x24>
 801fcfc:	4b07      	ldr	r3, [pc, #28]	; (801fd1c <__assert_func+0x30>)
 801fcfe:	9100      	str	r1, [sp, #0]
 801fd00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fd04:	4906      	ldr	r1, [pc, #24]	; (801fd20 <__assert_func+0x34>)
 801fd06:	462b      	mov	r3, r5
 801fd08:	f000 f81c 	bl	801fd44 <fiprintf>
 801fd0c:	f7ff ffe6 	bl	801fcdc <abort>
 801fd10:	4b04      	ldr	r3, [pc, #16]	; (801fd24 <__assert_func+0x38>)
 801fd12:	461c      	mov	r4, r3
 801fd14:	e7f3      	b.n	801fcfe <__assert_func+0x12>
 801fd16:	bf00      	nop
 801fd18:	200025ac 	.word	0x200025ac
 801fd1c:	08026460 	.word	0x08026460
 801fd20:	0802646d 	.word	0x0802646d
 801fd24:	0802649b 	.word	0x0802649b

0801fd28 <calloc>:
 801fd28:	4b02      	ldr	r3, [pc, #8]	; (801fd34 <calloc+0xc>)
 801fd2a:	460a      	mov	r2, r1
 801fd2c:	4601      	mov	r1, r0
 801fd2e:	6818      	ldr	r0, [r3, #0]
 801fd30:	f000 b882 	b.w	801fe38 <_calloc_r>
 801fd34:	200025ac 	.word	0x200025ac

0801fd38 <__errno>:
 801fd38:	4b01      	ldr	r3, [pc, #4]	; (801fd40 <__errno+0x8>)
 801fd3a:	6818      	ldr	r0, [r3, #0]
 801fd3c:	4770      	bx	lr
 801fd3e:	bf00      	nop
 801fd40:	200025ac 	.word	0x200025ac

0801fd44 <fiprintf>:
 801fd44:	b40e      	push	{r1, r2, r3}
 801fd46:	b503      	push	{r0, r1, lr}
 801fd48:	4601      	mov	r1, r0
 801fd4a:	ab03      	add	r3, sp, #12
 801fd4c:	4805      	ldr	r0, [pc, #20]	; (801fd64 <fiprintf+0x20>)
 801fd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd52:	6800      	ldr	r0, [r0, #0]
 801fd54:	9301      	str	r3, [sp, #4]
 801fd56:	f000 f98f 	bl	8020078 <_vfiprintf_r>
 801fd5a:	b002      	add	sp, #8
 801fd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd60:	b003      	add	sp, #12
 801fd62:	4770      	bx	lr
 801fd64:	200025ac 	.word	0x200025ac

0801fd68 <__libc_init_array>:
 801fd68:	b570      	push	{r4, r5, r6, lr}
 801fd6a:	4d0d      	ldr	r5, [pc, #52]	; (801fda0 <__libc_init_array+0x38>)
 801fd6c:	4c0d      	ldr	r4, [pc, #52]	; (801fda4 <__libc_init_array+0x3c>)
 801fd6e:	1b64      	subs	r4, r4, r5
 801fd70:	10a4      	asrs	r4, r4, #2
 801fd72:	2600      	movs	r6, #0
 801fd74:	42a6      	cmp	r6, r4
 801fd76:	d109      	bne.n	801fd8c <__libc_init_array+0x24>
 801fd78:	4d0b      	ldr	r5, [pc, #44]	; (801fda8 <__libc_init_array+0x40>)
 801fd7a:	4c0c      	ldr	r4, [pc, #48]	; (801fdac <__libc_init_array+0x44>)
 801fd7c:	f001 fa68 	bl	8021250 <_init>
 801fd80:	1b64      	subs	r4, r4, r5
 801fd82:	10a4      	asrs	r4, r4, #2
 801fd84:	2600      	movs	r6, #0
 801fd86:	42a6      	cmp	r6, r4
 801fd88:	d105      	bne.n	801fd96 <__libc_init_array+0x2e>
 801fd8a:	bd70      	pop	{r4, r5, r6, pc}
 801fd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd90:	4798      	blx	r3
 801fd92:	3601      	adds	r6, #1
 801fd94:	e7ee      	b.n	801fd74 <__libc_init_array+0xc>
 801fd96:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd9a:	4798      	blx	r3
 801fd9c:	3601      	adds	r6, #1
 801fd9e:	e7f2      	b.n	801fd86 <__libc_init_array+0x1e>
 801fda0:	0802653c 	.word	0x0802653c
 801fda4:	0802653c 	.word	0x0802653c
 801fda8:	0802653c 	.word	0x0802653c
 801fdac:	08026544 	.word	0x08026544

0801fdb0 <__retarget_lock_init_recursive>:
 801fdb0:	4770      	bx	lr

0801fdb2 <__retarget_lock_acquire_recursive>:
 801fdb2:	4770      	bx	lr

0801fdb4 <__retarget_lock_release_recursive>:
 801fdb4:	4770      	bx	lr
	...

0801fdb8 <malloc>:
 801fdb8:	4b02      	ldr	r3, [pc, #8]	; (801fdc4 <malloc+0xc>)
 801fdba:	4601      	mov	r1, r0
 801fdbc:	6818      	ldr	r0, [r3, #0]
 801fdbe:	f000 b8bd 	b.w	801ff3c <_malloc_r>
 801fdc2:	bf00      	nop
 801fdc4:	200025ac 	.word	0x200025ac

0801fdc8 <free>:
 801fdc8:	4b02      	ldr	r3, [pc, #8]	; (801fdd4 <free+0xc>)
 801fdca:	4601      	mov	r1, r0
 801fdcc:	6818      	ldr	r0, [r3, #0]
 801fdce:	f000 b849 	b.w	801fe64 <_free_r>
 801fdd2:	bf00      	nop
 801fdd4:	200025ac 	.word	0x200025ac

0801fdd8 <memcpy>:
 801fdd8:	440a      	add	r2, r1
 801fdda:	4291      	cmp	r1, r2
 801fddc:	f100 33ff 	add.w	r3, r0, #4294967295
 801fde0:	d100      	bne.n	801fde4 <memcpy+0xc>
 801fde2:	4770      	bx	lr
 801fde4:	b510      	push	{r4, lr}
 801fde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fdea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fdee:	4291      	cmp	r1, r2
 801fdf0:	d1f9      	bne.n	801fde6 <memcpy+0xe>
 801fdf2:	bd10      	pop	{r4, pc}

0801fdf4 <memmove>:
 801fdf4:	4288      	cmp	r0, r1
 801fdf6:	b510      	push	{r4, lr}
 801fdf8:	eb01 0402 	add.w	r4, r1, r2
 801fdfc:	d902      	bls.n	801fe04 <memmove+0x10>
 801fdfe:	4284      	cmp	r4, r0
 801fe00:	4623      	mov	r3, r4
 801fe02:	d807      	bhi.n	801fe14 <memmove+0x20>
 801fe04:	1e43      	subs	r3, r0, #1
 801fe06:	42a1      	cmp	r1, r4
 801fe08:	d008      	beq.n	801fe1c <memmove+0x28>
 801fe0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fe0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fe12:	e7f8      	b.n	801fe06 <memmove+0x12>
 801fe14:	4402      	add	r2, r0
 801fe16:	4601      	mov	r1, r0
 801fe18:	428a      	cmp	r2, r1
 801fe1a:	d100      	bne.n	801fe1e <memmove+0x2a>
 801fe1c:	bd10      	pop	{r4, pc}
 801fe1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fe22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fe26:	e7f7      	b.n	801fe18 <memmove+0x24>

0801fe28 <memset>:
 801fe28:	4402      	add	r2, r0
 801fe2a:	4603      	mov	r3, r0
 801fe2c:	4293      	cmp	r3, r2
 801fe2e:	d100      	bne.n	801fe32 <memset+0xa>
 801fe30:	4770      	bx	lr
 801fe32:	f803 1b01 	strb.w	r1, [r3], #1
 801fe36:	e7f9      	b.n	801fe2c <memset+0x4>

0801fe38 <_calloc_r>:
 801fe38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe3a:	fba1 2402 	umull	r2, r4, r1, r2
 801fe3e:	b94c      	cbnz	r4, 801fe54 <_calloc_r+0x1c>
 801fe40:	4611      	mov	r1, r2
 801fe42:	9201      	str	r2, [sp, #4]
 801fe44:	f000 f87a 	bl	801ff3c <_malloc_r>
 801fe48:	9a01      	ldr	r2, [sp, #4]
 801fe4a:	4605      	mov	r5, r0
 801fe4c:	b930      	cbnz	r0, 801fe5c <_calloc_r+0x24>
 801fe4e:	4628      	mov	r0, r5
 801fe50:	b003      	add	sp, #12
 801fe52:	bd30      	pop	{r4, r5, pc}
 801fe54:	220c      	movs	r2, #12
 801fe56:	6002      	str	r2, [r0, #0]
 801fe58:	2500      	movs	r5, #0
 801fe5a:	e7f8      	b.n	801fe4e <_calloc_r+0x16>
 801fe5c:	4621      	mov	r1, r4
 801fe5e:	f7ff ffe3 	bl	801fe28 <memset>
 801fe62:	e7f4      	b.n	801fe4e <_calloc_r+0x16>

0801fe64 <_free_r>:
 801fe64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe66:	2900      	cmp	r1, #0
 801fe68:	d044      	beq.n	801fef4 <_free_r+0x90>
 801fe6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe6e:	9001      	str	r0, [sp, #4]
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	f1a1 0404 	sub.w	r4, r1, #4
 801fe76:	bfb8      	it	lt
 801fe78:	18e4      	addlt	r4, r4, r3
 801fe7a:	f000 ff9f 	bl	8020dbc <__malloc_lock>
 801fe7e:	4a1e      	ldr	r2, [pc, #120]	; (801fef8 <_free_r+0x94>)
 801fe80:	9801      	ldr	r0, [sp, #4]
 801fe82:	6813      	ldr	r3, [r2, #0]
 801fe84:	b933      	cbnz	r3, 801fe94 <_free_r+0x30>
 801fe86:	6063      	str	r3, [r4, #4]
 801fe88:	6014      	str	r4, [r2, #0]
 801fe8a:	b003      	add	sp, #12
 801fe8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fe90:	f000 bf9a 	b.w	8020dc8 <__malloc_unlock>
 801fe94:	42a3      	cmp	r3, r4
 801fe96:	d908      	bls.n	801feaa <_free_r+0x46>
 801fe98:	6825      	ldr	r5, [r4, #0]
 801fe9a:	1961      	adds	r1, r4, r5
 801fe9c:	428b      	cmp	r3, r1
 801fe9e:	bf01      	itttt	eq
 801fea0:	6819      	ldreq	r1, [r3, #0]
 801fea2:	685b      	ldreq	r3, [r3, #4]
 801fea4:	1949      	addeq	r1, r1, r5
 801fea6:	6021      	streq	r1, [r4, #0]
 801fea8:	e7ed      	b.n	801fe86 <_free_r+0x22>
 801feaa:	461a      	mov	r2, r3
 801feac:	685b      	ldr	r3, [r3, #4]
 801feae:	b10b      	cbz	r3, 801feb4 <_free_r+0x50>
 801feb0:	42a3      	cmp	r3, r4
 801feb2:	d9fa      	bls.n	801feaa <_free_r+0x46>
 801feb4:	6811      	ldr	r1, [r2, #0]
 801feb6:	1855      	adds	r5, r2, r1
 801feb8:	42a5      	cmp	r5, r4
 801feba:	d10b      	bne.n	801fed4 <_free_r+0x70>
 801febc:	6824      	ldr	r4, [r4, #0]
 801febe:	4421      	add	r1, r4
 801fec0:	1854      	adds	r4, r2, r1
 801fec2:	42a3      	cmp	r3, r4
 801fec4:	6011      	str	r1, [r2, #0]
 801fec6:	d1e0      	bne.n	801fe8a <_free_r+0x26>
 801fec8:	681c      	ldr	r4, [r3, #0]
 801feca:	685b      	ldr	r3, [r3, #4]
 801fecc:	6053      	str	r3, [r2, #4]
 801fece:	4421      	add	r1, r4
 801fed0:	6011      	str	r1, [r2, #0]
 801fed2:	e7da      	b.n	801fe8a <_free_r+0x26>
 801fed4:	d902      	bls.n	801fedc <_free_r+0x78>
 801fed6:	230c      	movs	r3, #12
 801fed8:	6003      	str	r3, [r0, #0]
 801feda:	e7d6      	b.n	801fe8a <_free_r+0x26>
 801fedc:	6825      	ldr	r5, [r4, #0]
 801fede:	1961      	adds	r1, r4, r5
 801fee0:	428b      	cmp	r3, r1
 801fee2:	bf04      	itt	eq
 801fee4:	6819      	ldreq	r1, [r3, #0]
 801fee6:	685b      	ldreq	r3, [r3, #4]
 801fee8:	6063      	str	r3, [r4, #4]
 801feea:	bf04      	itt	eq
 801feec:	1949      	addeq	r1, r1, r5
 801feee:	6021      	streq	r1, [r4, #0]
 801fef0:	6054      	str	r4, [r2, #4]
 801fef2:	e7ca      	b.n	801fe8a <_free_r+0x26>
 801fef4:	b003      	add	sp, #12
 801fef6:	bd30      	pop	{r4, r5, pc}
 801fef8:	20002d38 	.word	0x20002d38

0801fefc <sbrk_aligned>:
 801fefc:	b570      	push	{r4, r5, r6, lr}
 801fefe:	4e0e      	ldr	r6, [pc, #56]	; (801ff38 <sbrk_aligned+0x3c>)
 801ff00:	460c      	mov	r4, r1
 801ff02:	6831      	ldr	r1, [r6, #0]
 801ff04:	4605      	mov	r5, r0
 801ff06:	b911      	cbnz	r1, 801ff0e <sbrk_aligned+0x12>
 801ff08:	f000 fc08 	bl	802071c <_sbrk_r>
 801ff0c:	6030      	str	r0, [r6, #0]
 801ff0e:	4621      	mov	r1, r4
 801ff10:	4628      	mov	r0, r5
 801ff12:	f000 fc03 	bl	802071c <_sbrk_r>
 801ff16:	1c43      	adds	r3, r0, #1
 801ff18:	d00a      	beq.n	801ff30 <sbrk_aligned+0x34>
 801ff1a:	1cc4      	adds	r4, r0, #3
 801ff1c:	f024 0403 	bic.w	r4, r4, #3
 801ff20:	42a0      	cmp	r0, r4
 801ff22:	d007      	beq.n	801ff34 <sbrk_aligned+0x38>
 801ff24:	1a21      	subs	r1, r4, r0
 801ff26:	4628      	mov	r0, r5
 801ff28:	f000 fbf8 	bl	802071c <_sbrk_r>
 801ff2c:	3001      	adds	r0, #1
 801ff2e:	d101      	bne.n	801ff34 <sbrk_aligned+0x38>
 801ff30:	f04f 34ff 	mov.w	r4, #4294967295
 801ff34:	4620      	mov	r0, r4
 801ff36:	bd70      	pop	{r4, r5, r6, pc}
 801ff38:	20002d3c 	.word	0x20002d3c

0801ff3c <_malloc_r>:
 801ff3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff40:	1ccd      	adds	r5, r1, #3
 801ff42:	f025 0503 	bic.w	r5, r5, #3
 801ff46:	3508      	adds	r5, #8
 801ff48:	2d0c      	cmp	r5, #12
 801ff4a:	bf38      	it	cc
 801ff4c:	250c      	movcc	r5, #12
 801ff4e:	2d00      	cmp	r5, #0
 801ff50:	4607      	mov	r7, r0
 801ff52:	db01      	blt.n	801ff58 <_malloc_r+0x1c>
 801ff54:	42a9      	cmp	r1, r5
 801ff56:	d905      	bls.n	801ff64 <_malloc_r+0x28>
 801ff58:	230c      	movs	r3, #12
 801ff5a:	603b      	str	r3, [r7, #0]
 801ff5c:	2600      	movs	r6, #0
 801ff5e:	4630      	mov	r0, r6
 801ff60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff64:	4e2e      	ldr	r6, [pc, #184]	; (8020020 <_malloc_r+0xe4>)
 801ff66:	f000 ff29 	bl	8020dbc <__malloc_lock>
 801ff6a:	6833      	ldr	r3, [r6, #0]
 801ff6c:	461c      	mov	r4, r3
 801ff6e:	bb34      	cbnz	r4, 801ffbe <_malloc_r+0x82>
 801ff70:	4629      	mov	r1, r5
 801ff72:	4638      	mov	r0, r7
 801ff74:	f7ff ffc2 	bl	801fefc <sbrk_aligned>
 801ff78:	1c43      	adds	r3, r0, #1
 801ff7a:	4604      	mov	r4, r0
 801ff7c:	d14d      	bne.n	802001a <_malloc_r+0xde>
 801ff7e:	6834      	ldr	r4, [r6, #0]
 801ff80:	4626      	mov	r6, r4
 801ff82:	2e00      	cmp	r6, #0
 801ff84:	d140      	bne.n	8020008 <_malloc_r+0xcc>
 801ff86:	6823      	ldr	r3, [r4, #0]
 801ff88:	4631      	mov	r1, r6
 801ff8a:	4638      	mov	r0, r7
 801ff8c:	eb04 0803 	add.w	r8, r4, r3
 801ff90:	f000 fbc4 	bl	802071c <_sbrk_r>
 801ff94:	4580      	cmp	r8, r0
 801ff96:	d13a      	bne.n	802000e <_malloc_r+0xd2>
 801ff98:	6821      	ldr	r1, [r4, #0]
 801ff9a:	3503      	adds	r5, #3
 801ff9c:	1a6d      	subs	r5, r5, r1
 801ff9e:	f025 0503 	bic.w	r5, r5, #3
 801ffa2:	3508      	adds	r5, #8
 801ffa4:	2d0c      	cmp	r5, #12
 801ffa6:	bf38      	it	cc
 801ffa8:	250c      	movcc	r5, #12
 801ffaa:	4629      	mov	r1, r5
 801ffac:	4638      	mov	r0, r7
 801ffae:	f7ff ffa5 	bl	801fefc <sbrk_aligned>
 801ffb2:	3001      	adds	r0, #1
 801ffb4:	d02b      	beq.n	802000e <_malloc_r+0xd2>
 801ffb6:	6823      	ldr	r3, [r4, #0]
 801ffb8:	442b      	add	r3, r5
 801ffba:	6023      	str	r3, [r4, #0]
 801ffbc:	e00e      	b.n	801ffdc <_malloc_r+0xa0>
 801ffbe:	6822      	ldr	r2, [r4, #0]
 801ffc0:	1b52      	subs	r2, r2, r5
 801ffc2:	d41e      	bmi.n	8020002 <_malloc_r+0xc6>
 801ffc4:	2a0b      	cmp	r2, #11
 801ffc6:	d916      	bls.n	801fff6 <_malloc_r+0xba>
 801ffc8:	1961      	adds	r1, r4, r5
 801ffca:	42a3      	cmp	r3, r4
 801ffcc:	6025      	str	r5, [r4, #0]
 801ffce:	bf18      	it	ne
 801ffd0:	6059      	strne	r1, [r3, #4]
 801ffd2:	6863      	ldr	r3, [r4, #4]
 801ffd4:	bf08      	it	eq
 801ffd6:	6031      	streq	r1, [r6, #0]
 801ffd8:	5162      	str	r2, [r4, r5]
 801ffda:	604b      	str	r3, [r1, #4]
 801ffdc:	4638      	mov	r0, r7
 801ffde:	f104 060b 	add.w	r6, r4, #11
 801ffe2:	f000 fef1 	bl	8020dc8 <__malloc_unlock>
 801ffe6:	f026 0607 	bic.w	r6, r6, #7
 801ffea:	1d23      	adds	r3, r4, #4
 801ffec:	1af2      	subs	r2, r6, r3
 801ffee:	d0b6      	beq.n	801ff5e <_malloc_r+0x22>
 801fff0:	1b9b      	subs	r3, r3, r6
 801fff2:	50a3      	str	r3, [r4, r2]
 801fff4:	e7b3      	b.n	801ff5e <_malloc_r+0x22>
 801fff6:	6862      	ldr	r2, [r4, #4]
 801fff8:	42a3      	cmp	r3, r4
 801fffa:	bf0c      	ite	eq
 801fffc:	6032      	streq	r2, [r6, #0]
 801fffe:	605a      	strne	r2, [r3, #4]
 8020000:	e7ec      	b.n	801ffdc <_malloc_r+0xa0>
 8020002:	4623      	mov	r3, r4
 8020004:	6864      	ldr	r4, [r4, #4]
 8020006:	e7b2      	b.n	801ff6e <_malloc_r+0x32>
 8020008:	4634      	mov	r4, r6
 802000a:	6876      	ldr	r6, [r6, #4]
 802000c:	e7b9      	b.n	801ff82 <_malloc_r+0x46>
 802000e:	230c      	movs	r3, #12
 8020010:	603b      	str	r3, [r7, #0]
 8020012:	4638      	mov	r0, r7
 8020014:	f000 fed8 	bl	8020dc8 <__malloc_unlock>
 8020018:	e7a1      	b.n	801ff5e <_malloc_r+0x22>
 802001a:	6025      	str	r5, [r4, #0]
 802001c:	e7de      	b.n	801ffdc <_malloc_r+0xa0>
 802001e:	bf00      	nop
 8020020:	20002d38 	.word	0x20002d38

08020024 <__sfputc_r>:
 8020024:	6893      	ldr	r3, [r2, #8]
 8020026:	3b01      	subs	r3, #1
 8020028:	2b00      	cmp	r3, #0
 802002a:	b410      	push	{r4}
 802002c:	6093      	str	r3, [r2, #8]
 802002e:	da08      	bge.n	8020042 <__sfputc_r+0x1e>
 8020030:	6994      	ldr	r4, [r2, #24]
 8020032:	42a3      	cmp	r3, r4
 8020034:	db01      	blt.n	802003a <__sfputc_r+0x16>
 8020036:	290a      	cmp	r1, #10
 8020038:	d103      	bne.n	8020042 <__sfputc_r+0x1e>
 802003a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802003e:	f000 bbe1 	b.w	8020804 <__swbuf_r>
 8020042:	6813      	ldr	r3, [r2, #0]
 8020044:	1c58      	adds	r0, r3, #1
 8020046:	6010      	str	r0, [r2, #0]
 8020048:	7019      	strb	r1, [r3, #0]
 802004a:	4608      	mov	r0, r1
 802004c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020050:	4770      	bx	lr

08020052 <__sfputs_r>:
 8020052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020054:	4606      	mov	r6, r0
 8020056:	460f      	mov	r7, r1
 8020058:	4614      	mov	r4, r2
 802005a:	18d5      	adds	r5, r2, r3
 802005c:	42ac      	cmp	r4, r5
 802005e:	d101      	bne.n	8020064 <__sfputs_r+0x12>
 8020060:	2000      	movs	r0, #0
 8020062:	e007      	b.n	8020074 <__sfputs_r+0x22>
 8020064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020068:	463a      	mov	r2, r7
 802006a:	4630      	mov	r0, r6
 802006c:	f7ff ffda 	bl	8020024 <__sfputc_r>
 8020070:	1c43      	adds	r3, r0, #1
 8020072:	d1f3      	bne.n	802005c <__sfputs_r+0xa>
 8020074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020078 <_vfiprintf_r>:
 8020078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802007c:	460d      	mov	r5, r1
 802007e:	b09d      	sub	sp, #116	; 0x74
 8020080:	4614      	mov	r4, r2
 8020082:	4698      	mov	r8, r3
 8020084:	4606      	mov	r6, r0
 8020086:	b118      	cbz	r0, 8020090 <_vfiprintf_r+0x18>
 8020088:	6983      	ldr	r3, [r0, #24]
 802008a:	b90b      	cbnz	r3, 8020090 <_vfiprintf_r+0x18>
 802008c:	f000 fd94 	bl	8020bb8 <__sinit>
 8020090:	4b89      	ldr	r3, [pc, #548]	; (80202b8 <_vfiprintf_r+0x240>)
 8020092:	429d      	cmp	r5, r3
 8020094:	d11b      	bne.n	80200ce <_vfiprintf_r+0x56>
 8020096:	6875      	ldr	r5, [r6, #4]
 8020098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802009a:	07d9      	lsls	r1, r3, #31
 802009c:	d405      	bmi.n	80200aa <_vfiprintf_r+0x32>
 802009e:	89ab      	ldrh	r3, [r5, #12]
 80200a0:	059a      	lsls	r2, r3, #22
 80200a2:	d402      	bmi.n	80200aa <_vfiprintf_r+0x32>
 80200a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80200a6:	f7ff fe84 	bl	801fdb2 <__retarget_lock_acquire_recursive>
 80200aa:	89ab      	ldrh	r3, [r5, #12]
 80200ac:	071b      	lsls	r3, r3, #28
 80200ae:	d501      	bpl.n	80200b4 <_vfiprintf_r+0x3c>
 80200b0:	692b      	ldr	r3, [r5, #16]
 80200b2:	b9eb      	cbnz	r3, 80200f0 <_vfiprintf_r+0x78>
 80200b4:	4629      	mov	r1, r5
 80200b6:	4630      	mov	r0, r6
 80200b8:	f000 fbf6 	bl	80208a8 <__swsetup_r>
 80200bc:	b1c0      	cbz	r0, 80200f0 <_vfiprintf_r+0x78>
 80200be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80200c0:	07dc      	lsls	r4, r3, #31
 80200c2:	d50e      	bpl.n	80200e2 <_vfiprintf_r+0x6a>
 80200c4:	f04f 30ff 	mov.w	r0, #4294967295
 80200c8:	b01d      	add	sp, #116	; 0x74
 80200ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200ce:	4b7b      	ldr	r3, [pc, #492]	; (80202bc <_vfiprintf_r+0x244>)
 80200d0:	429d      	cmp	r5, r3
 80200d2:	d101      	bne.n	80200d8 <_vfiprintf_r+0x60>
 80200d4:	68b5      	ldr	r5, [r6, #8]
 80200d6:	e7df      	b.n	8020098 <_vfiprintf_r+0x20>
 80200d8:	4b79      	ldr	r3, [pc, #484]	; (80202c0 <_vfiprintf_r+0x248>)
 80200da:	429d      	cmp	r5, r3
 80200dc:	bf08      	it	eq
 80200de:	68f5      	ldreq	r5, [r6, #12]
 80200e0:	e7da      	b.n	8020098 <_vfiprintf_r+0x20>
 80200e2:	89ab      	ldrh	r3, [r5, #12]
 80200e4:	0598      	lsls	r0, r3, #22
 80200e6:	d4ed      	bmi.n	80200c4 <_vfiprintf_r+0x4c>
 80200e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80200ea:	f7ff fe63 	bl	801fdb4 <__retarget_lock_release_recursive>
 80200ee:	e7e9      	b.n	80200c4 <_vfiprintf_r+0x4c>
 80200f0:	2300      	movs	r3, #0
 80200f2:	9309      	str	r3, [sp, #36]	; 0x24
 80200f4:	2320      	movs	r3, #32
 80200f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80200fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80200fe:	2330      	movs	r3, #48	; 0x30
 8020100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80202c4 <_vfiprintf_r+0x24c>
 8020104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020108:	f04f 0901 	mov.w	r9, #1
 802010c:	4623      	mov	r3, r4
 802010e:	469a      	mov	sl, r3
 8020110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020114:	b10a      	cbz	r2, 802011a <_vfiprintf_r+0xa2>
 8020116:	2a25      	cmp	r2, #37	; 0x25
 8020118:	d1f9      	bne.n	802010e <_vfiprintf_r+0x96>
 802011a:	ebba 0b04 	subs.w	fp, sl, r4
 802011e:	d00b      	beq.n	8020138 <_vfiprintf_r+0xc0>
 8020120:	465b      	mov	r3, fp
 8020122:	4622      	mov	r2, r4
 8020124:	4629      	mov	r1, r5
 8020126:	4630      	mov	r0, r6
 8020128:	f7ff ff93 	bl	8020052 <__sfputs_r>
 802012c:	3001      	adds	r0, #1
 802012e:	f000 80aa 	beq.w	8020286 <_vfiprintf_r+0x20e>
 8020132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020134:	445a      	add	r2, fp
 8020136:	9209      	str	r2, [sp, #36]	; 0x24
 8020138:	f89a 3000 	ldrb.w	r3, [sl]
 802013c:	2b00      	cmp	r3, #0
 802013e:	f000 80a2 	beq.w	8020286 <_vfiprintf_r+0x20e>
 8020142:	2300      	movs	r3, #0
 8020144:	f04f 32ff 	mov.w	r2, #4294967295
 8020148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802014c:	f10a 0a01 	add.w	sl, sl, #1
 8020150:	9304      	str	r3, [sp, #16]
 8020152:	9307      	str	r3, [sp, #28]
 8020154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020158:	931a      	str	r3, [sp, #104]	; 0x68
 802015a:	4654      	mov	r4, sl
 802015c:	2205      	movs	r2, #5
 802015e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020162:	4858      	ldr	r0, [pc, #352]	; (80202c4 <_vfiprintf_r+0x24c>)
 8020164:	f7e0 f854 	bl	8000210 <memchr>
 8020168:	9a04      	ldr	r2, [sp, #16]
 802016a:	b9d8      	cbnz	r0, 80201a4 <_vfiprintf_r+0x12c>
 802016c:	06d1      	lsls	r1, r2, #27
 802016e:	bf44      	itt	mi
 8020170:	2320      	movmi	r3, #32
 8020172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020176:	0713      	lsls	r3, r2, #28
 8020178:	bf44      	itt	mi
 802017a:	232b      	movmi	r3, #43	; 0x2b
 802017c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020180:	f89a 3000 	ldrb.w	r3, [sl]
 8020184:	2b2a      	cmp	r3, #42	; 0x2a
 8020186:	d015      	beq.n	80201b4 <_vfiprintf_r+0x13c>
 8020188:	9a07      	ldr	r2, [sp, #28]
 802018a:	4654      	mov	r4, sl
 802018c:	2000      	movs	r0, #0
 802018e:	f04f 0c0a 	mov.w	ip, #10
 8020192:	4621      	mov	r1, r4
 8020194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020198:	3b30      	subs	r3, #48	; 0x30
 802019a:	2b09      	cmp	r3, #9
 802019c:	d94e      	bls.n	802023c <_vfiprintf_r+0x1c4>
 802019e:	b1b0      	cbz	r0, 80201ce <_vfiprintf_r+0x156>
 80201a0:	9207      	str	r2, [sp, #28]
 80201a2:	e014      	b.n	80201ce <_vfiprintf_r+0x156>
 80201a4:	eba0 0308 	sub.w	r3, r0, r8
 80201a8:	fa09 f303 	lsl.w	r3, r9, r3
 80201ac:	4313      	orrs	r3, r2
 80201ae:	9304      	str	r3, [sp, #16]
 80201b0:	46a2      	mov	sl, r4
 80201b2:	e7d2      	b.n	802015a <_vfiprintf_r+0xe2>
 80201b4:	9b03      	ldr	r3, [sp, #12]
 80201b6:	1d19      	adds	r1, r3, #4
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	9103      	str	r1, [sp, #12]
 80201bc:	2b00      	cmp	r3, #0
 80201be:	bfbb      	ittet	lt
 80201c0:	425b      	neglt	r3, r3
 80201c2:	f042 0202 	orrlt.w	r2, r2, #2
 80201c6:	9307      	strge	r3, [sp, #28]
 80201c8:	9307      	strlt	r3, [sp, #28]
 80201ca:	bfb8      	it	lt
 80201cc:	9204      	strlt	r2, [sp, #16]
 80201ce:	7823      	ldrb	r3, [r4, #0]
 80201d0:	2b2e      	cmp	r3, #46	; 0x2e
 80201d2:	d10c      	bne.n	80201ee <_vfiprintf_r+0x176>
 80201d4:	7863      	ldrb	r3, [r4, #1]
 80201d6:	2b2a      	cmp	r3, #42	; 0x2a
 80201d8:	d135      	bne.n	8020246 <_vfiprintf_r+0x1ce>
 80201da:	9b03      	ldr	r3, [sp, #12]
 80201dc:	1d1a      	adds	r2, r3, #4
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	9203      	str	r2, [sp, #12]
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	bfb8      	it	lt
 80201e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80201ea:	3402      	adds	r4, #2
 80201ec:	9305      	str	r3, [sp, #20]
 80201ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80202d4 <_vfiprintf_r+0x25c>
 80201f2:	7821      	ldrb	r1, [r4, #0]
 80201f4:	2203      	movs	r2, #3
 80201f6:	4650      	mov	r0, sl
 80201f8:	f7e0 f80a 	bl	8000210 <memchr>
 80201fc:	b140      	cbz	r0, 8020210 <_vfiprintf_r+0x198>
 80201fe:	2340      	movs	r3, #64	; 0x40
 8020200:	eba0 000a 	sub.w	r0, r0, sl
 8020204:	fa03 f000 	lsl.w	r0, r3, r0
 8020208:	9b04      	ldr	r3, [sp, #16]
 802020a:	4303      	orrs	r3, r0
 802020c:	3401      	adds	r4, #1
 802020e:	9304      	str	r3, [sp, #16]
 8020210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020214:	482c      	ldr	r0, [pc, #176]	; (80202c8 <_vfiprintf_r+0x250>)
 8020216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802021a:	2206      	movs	r2, #6
 802021c:	f7df fff8 	bl	8000210 <memchr>
 8020220:	2800      	cmp	r0, #0
 8020222:	d03f      	beq.n	80202a4 <_vfiprintf_r+0x22c>
 8020224:	4b29      	ldr	r3, [pc, #164]	; (80202cc <_vfiprintf_r+0x254>)
 8020226:	bb1b      	cbnz	r3, 8020270 <_vfiprintf_r+0x1f8>
 8020228:	9b03      	ldr	r3, [sp, #12]
 802022a:	3307      	adds	r3, #7
 802022c:	f023 0307 	bic.w	r3, r3, #7
 8020230:	3308      	adds	r3, #8
 8020232:	9303      	str	r3, [sp, #12]
 8020234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020236:	443b      	add	r3, r7
 8020238:	9309      	str	r3, [sp, #36]	; 0x24
 802023a:	e767      	b.n	802010c <_vfiprintf_r+0x94>
 802023c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020240:	460c      	mov	r4, r1
 8020242:	2001      	movs	r0, #1
 8020244:	e7a5      	b.n	8020192 <_vfiprintf_r+0x11a>
 8020246:	2300      	movs	r3, #0
 8020248:	3401      	adds	r4, #1
 802024a:	9305      	str	r3, [sp, #20]
 802024c:	4619      	mov	r1, r3
 802024e:	f04f 0c0a 	mov.w	ip, #10
 8020252:	4620      	mov	r0, r4
 8020254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020258:	3a30      	subs	r2, #48	; 0x30
 802025a:	2a09      	cmp	r2, #9
 802025c:	d903      	bls.n	8020266 <_vfiprintf_r+0x1ee>
 802025e:	2b00      	cmp	r3, #0
 8020260:	d0c5      	beq.n	80201ee <_vfiprintf_r+0x176>
 8020262:	9105      	str	r1, [sp, #20]
 8020264:	e7c3      	b.n	80201ee <_vfiprintf_r+0x176>
 8020266:	fb0c 2101 	mla	r1, ip, r1, r2
 802026a:	4604      	mov	r4, r0
 802026c:	2301      	movs	r3, #1
 802026e:	e7f0      	b.n	8020252 <_vfiprintf_r+0x1da>
 8020270:	ab03      	add	r3, sp, #12
 8020272:	9300      	str	r3, [sp, #0]
 8020274:	462a      	mov	r2, r5
 8020276:	4b16      	ldr	r3, [pc, #88]	; (80202d0 <_vfiprintf_r+0x258>)
 8020278:	a904      	add	r1, sp, #16
 802027a:	4630      	mov	r0, r6
 802027c:	f3af 8000 	nop.w
 8020280:	4607      	mov	r7, r0
 8020282:	1c78      	adds	r0, r7, #1
 8020284:	d1d6      	bne.n	8020234 <_vfiprintf_r+0x1bc>
 8020286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020288:	07d9      	lsls	r1, r3, #31
 802028a:	d405      	bmi.n	8020298 <_vfiprintf_r+0x220>
 802028c:	89ab      	ldrh	r3, [r5, #12]
 802028e:	059a      	lsls	r2, r3, #22
 8020290:	d402      	bmi.n	8020298 <_vfiprintf_r+0x220>
 8020292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020294:	f7ff fd8e 	bl	801fdb4 <__retarget_lock_release_recursive>
 8020298:	89ab      	ldrh	r3, [r5, #12]
 802029a:	065b      	lsls	r3, r3, #25
 802029c:	f53f af12 	bmi.w	80200c4 <_vfiprintf_r+0x4c>
 80202a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80202a2:	e711      	b.n	80200c8 <_vfiprintf_r+0x50>
 80202a4:	ab03      	add	r3, sp, #12
 80202a6:	9300      	str	r3, [sp, #0]
 80202a8:	462a      	mov	r2, r5
 80202aa:	4b09      	ldr	r3, [pc, #36]	; (80202d0 <_vfiprintf_r+0x258>)
 80202ac:	a904      	add	r1, sp, #16
 80202ae:	4630      	mov	r0, r6
 80202b0:	f000 f880 	bl	80203b4 <_printf_i>
 80202b4:	e7e4      	b.n	8020280 <_vfiprintf_r+0x208>
 80202b6:	bf00      	nop
 80202b8:	080264f4 	.word	0x080264f4
 80202bc:	08026514 	.word	0x08026514
 80202c0:	080264d4 	.word	0x080264d4
 80202c4:	080264a0 	.word	0x080264a0
 80202c8:	080264aa 	.word	0x080264aa
 80202cc:	00000000 	.word	0x00000000
 80202d0:	08020053 	.word	0x08020053
 80202d4:	080264a6 	.word	0x080264a6

080202d8 <_printf_common>:
 80202d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202dc:	4616      	mov	r6, r2
 80202de:	4699      	mov	r9, r3
 80202e0:	688a      	ldr	r2, [r1, #8]
 80202e2:	690b      	ldr	r3, [r1, #16]
 80202e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80202e8:	4293      	cmp	r3, r2
 80202ea:	bfb8      	it	lt
 80202ec:	4613      	movlt	r3, r2
 80202ee:	6033      	str	r3, [r6, #0]
 80202f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80202f4:	4607      	mov	r7, r0
 80202f6:	460c      	mov	r4, r1
 80202f8:	b10a      	cbz	r2, 80202fe <_printf_common+0x26>
 80202fa:	3301      	adds	r3, #1
 80202fc:	6033      	str	r3, [r6, #0]
 80202fe:	6823      	ldr	r3, [r4, #0]
 8020300:	0699      	lsls	r1, r3, #26
 8020302:	bf42      	ittt	mi
 8020304:	6833      	ldrmi	r3, [r6, #0]
 8020306:	3302      	addmi	r3, #2
 8020308:	6033      	strmi	r3, [r6, #0]
 802030a:	6825      	ldr	r5, [r4, #0]
 802030c:	f015 0506 	ands.w	r5, r5, #6
 8020310:	d106      	bne.n	8020320 <_printf_common+0x48>
 8020312:	f104 0a19 	add.w	sl, r4, #25
 8020316:	68e3      	ldr	r3, [r4, #12]
 8020318:	6832      	ldr	r2, [r6, #0]
 802031a:	1a9b      	subs	r3, r3, r2
 802031c:	42ab      	cmp	r3, r5
 802031e:	dc26      	bgt.n	802036e <_printf_common+0x96>
 8020320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020324:	1e13      	subs	r3, r2, #0
 8020326:	6822      	ldr	r2, [r4, #0]
 8020328:	bf18      	it	ne
 802032a:	2301      	movne	r3, #1
 802032c:	0692      	lsls	r2, r2, #26
 802032e:	d42b      	bmi.n	8020388 <_printf_common+0xb0>
 8020330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020334:	4649      	mov	r1, r9
 8020336:	4638      	mov	r0, r7
 8020338:	47c0      	blx	r8
 802033a:	3001      	adds	r0, #1
 802033c:	d01e      	beq.n	802037c <_printf_common+0xa4>
 802033e:	6823      	ldr	r3, [r4, #0]
 8020340:	68e5      	ldr	r5, [r4, #12]
 8020342:	6832      	ldr	r2, [r6, #0]
 8020344:	f003 0306 	and.w	r3, r3, #6
 8020348:	2b04      	cmp	r3, #4
 802034a:	bf08      	it	eq
 802034c:	1aad      	subeq	r5, r5, r2
 802034e:	68a3      	ldr	r3, [r4, #8]
 8020350:	6922      	ldr	r2, [r4, #16]
 8020352:	bf0c      	ite	eq
 8020354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020358:	2500      	movne	r5, #0
 802035a:	4293      	cmp	r3, r2
 802035c:	bfc4      	itt	gt
 802035e:	1a9b      	subgt	r3, r3, r2
 8020360:	18ed      	addgt	r5, r5, r3
 8020362:	2600      	movs	r6, #0
 8020364:	341a      	adds	r4, #26
 8020366:	42b5      	cmp	r5, r6
 8020368:	d11a      	bne.n	80203a0 <_printf_common+0xc8>
 802036a:	2000      	movs	r0, #0
 802036c:	e008      	b.n	8020380 <_printf_common+0xa8>
 802036e:	2301      	movs	r3, #1
 8020370:	4652      	mov	r2, sl
 8020372:	4649      	mov	r1, r9
 8020374:	4638      	mov	r0, r7
 8020376:	47c0      	blx	r8
 8020378:	3001      	adds	r0, #1
 802037a:	d103      	bne.n	8020384 <_printf_common+0xac>
 802037c:	f04f 30ff 	mov.w	r0, #4294967295
 8020380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020384:	3501      	adds	r5, #1
 8020386:	e7c6      	b.n	8020316 <_printf_common+0x3e>
 8020388:	18e1      	adds	r1, r4, r3
 802038a:	1c5a      	adds	r2, r3, #1
 802038c:	2030      	movs	r0, #48	; 0x30
 802038e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020392:	4422      	add	r2, r4
 8020394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802039c:	3302      	adds	r3, #2
 802039e:	e7c7      	b.n	8020330 <_printf_common+0x58>
 80203a0:	2301      	movs	r3, #1
 80203a2:	4622      	mov	r2, r4
 80203a4:	4649      	mov	r1, r9
 80203a6:	4638      	mov	r0, r7
 80203a8:	47c0      	blx	r8
 80203aa:	3001      	adds	r0, #1
 80203ac:	d0e6      	beq.n	802037c <_printf_common+0xa4>
 80203ae:	3601      	adds	r6, #1
 80203b0:	e7d9      	b.n	8020366 <_printf_common+0x8e>
	...

080203b4 <_printf_i>:
 80203b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80203b8:	7e0f      	ldrb	r7, [r1, #24]
 80203ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80203bc:	2f78      	cmp	r7, #120	; 0x78
 80203be:	4691      	mov	r9, r2
 80203c0:	4680      	mov	r8, r0
 80203c2:	460c      	mov	r4, r1
 80203c4:	469a      	mov	sl, r3
 80203c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80203ca:	d807      	bhi.n	80203dc <_printf_i+0x28>
 80203cc:	2f62      	cmp	r7, #98	; 0x62
 80203ce:	d80a      	bhi.n	80203e6 <_printf_i+0x32>
 80203d0:	2f00      	cmp	r7, #0
 80203d2:	f000 80d8 	beq.w	8020586 <_printf_i+0x1d2>
 80203d6:	2f58      	cmp	r7, #88	; 0x58
 80203d8:	f000 80a3 	beq.w	8020522 <_printf_i+0x16e>
 80203dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80203e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80203e4:	e03a      	b.n	802045c <_printf_i+0xa8>
 80203e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80203ea:	2b15      	cmp	r3, #21
 80203ec:	d8f6      	bhi.n	80203dc <_printf_i+0x28>
 80203ee:	a101      	add	r1, pc, #4	; (adr r1, 80203f4 <_printf_i+0x40>)
 80203f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80203f4:	0802044d 	.word	0x0802044d
 80203f8:	08020461 	.word	0x08020461
 80203fc:	080203dd 	.word	0x080203dd
 8020400:	080203dd 	.word	0x080203dd
 8020404:	080203dd 	.word	0x080203dd
 8020408:	080203dd 	.word	0x080203dd
 802040c:	08020461 	.word	0x08020461
 8020410:	080203dd 	.word	0x080203dd
 8020414:	080203dd 	.word	0x080203dd
 8020418:	080203dd 	.word	0x080203dd
 802041c:	080203dd 	.word	0x080203dd
 8020420:	0802056d 	.word	0x0802056d
 8020424:	08020491 	.word	0x08020491
 8020428:	0802054f 	.word	0x0802054f
 802042c:	080203dd 	.word	0x080203dd
 8020430:	080203dd 	.word	0x080203dd
 8020434:	0802058f 	.word	0x0802058f
 8020438:	080203dd 	.word	0x080203dd
 802043c:	08020491 	.word	0x08020491
 8020440:	080203dd 	.word	0x080203dd
 8020444:	080203dd 	.word	0x080203dd
 8020448:	08020557 	.word	0x08020557
 802044c:	682b      	ldr	r3, [r5, #0]
 802044e:	1d1a      	adds	r2, r3, #4
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	602a      	str	r2, [r5, #0]
 8020454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802045c:	2301      	movs	r3, #1
 802045e:	e0a3      	b.n	80205a8 <_printf_i+0x1f4>
 8020460:	6820      	ldr	r0, [r4, #0]
 8020462:	6829      	ldr	r1, [r5, #0]
 8020464:	0606      	lsls	r6, r0, #24
 8020466:	f101 0304 	add.w	r3, r1, #4
 802046a:	d50a      	bpl.n	8020482 <_printf_i+0xce>
 802046c:	680e      	ldr	r6, [r1, #0]
 802046e:	602b      	str	r3, [r5, #0]
 8020470:	2e00      	cmp	r6, #0
 8020472:	da03      	bge.n	802047c <_printf_i+0xc8>
 8020474:	232d      	movs	r3, #45	; 0x2d
 8020476:	4276      	negs	r6, r6
 8020478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802047c:	485e      	ldr	r0, [pc, #376]	; (80205f8 <_printf_i+0x244>)
 802047e:	230a      	movs	r3, #10
 8020480:	e019      	b.n	80204b6 <_printf_i+0x102>
 8020482:	680e      	ldr	r6, [r1, #0]
 8020484:	602b      	str	r3, [r5, #0]
 8020486:	f010 0f40 	tst.w	r0, #64	; 0x40
 802048a:	bf18      	it	ne
 802048c:	b236      	sxthne	r6, r6
 802048e:	e7ef      	b.n	8020470 <_printf_i+0xbc>
 8020490:	682b      	ldr	r3, [r5, #0]
 8020492:	6820      	ldr	r0, [r4, #0]
 8020494:	1d19      	adds	r1, r3, #4
 8020496:	6029      	str	r1, [r5, #0]
 8020498:	0601      	lsls	r1, r0, #24
 802049a:	d501      	bpl.n	80204a0 <_printf_i+0xec>
 802049c:	681e      	ldr	r6, [r3, #0]
 802049e:	e002      	b.n	80204a6 <_printf_i+0xf2>
 80204a0:	0646      	lsls	r6, r0, #25
 80204a2:	d5fb      	bpl.n	802049c <_printf_i+0xe8>
 80204a4:	881e      	ldrh	r6, [r3, #0]
 80204a6:	4854      	ldr	r0, [pc, #336]	; (80205f8 <_printf_i+0x244>)
 80204a8:	2f6f      	cmp	r7, #111	; 0x6f
 80204aa:	bf0c      	ite	eq
 80204ac:	2308      	moveq	r3, #8
 80204ae:	230a      	movne	r3, #10
 80204b0:	2100      	movs	r1, #0
 80204b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80204b6:	6865      	ldr	r5, [r4, #4]
 80204b8:	60a5      	str	r5, [r4, #8]
 80204ba:	2d00      	cmp	r5, #0
 80204bc:	bfa2      	ittt	ge
 80204be:	6821      	ldrge	r1, [r4, #0]
 80204c0:	f021 0104 	bicge.w	r1, r1, #4
 80204c4:	6021      	strge	r1, [r4, #0]
 80204c6:	b90e      	cbnz	r6, 80204cc <_printf_i+0x118>
 80204c8:	2d00      	cmp	r5, #0
 80204ca:	d04d      	beq.n	8020568 <_printf_i+0x1b4>
 80204cc:	4615      	mov	r5, r2
 80204ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80204d2:	fb03 6711 	mls	r7, r3, r1, r6
 80204d6:	5dc7      	ldrb	r7, [r0, r7]
 80204d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80204dc:	4637      	mov	r7, r6
 80204de:	42bb      	cmp	r3, r7
 80204e0:	460e      	mov	r6, r1
 80204e2:	d9f4      	bls.n	80204ce <_printf_i+0x11a>
 80204e4:	2b08      	cmp	r3, #8
 80204e6:	d10b      	bne.n	8020500 <_printf_i+0x14c>
 80204e8:	6823      	ldr	r3, [r4, #0]
 80204ea:	07de      	lsls	r6, r3, #31
 80204ec:	d508      	bpl.n	8020500 <_printf_i+0x14c>
 80204ee:	6923      	ldr	r3, [r4, #16]
 80204f0:	6861      	ldr	r1, [r4, #4]
 80204f2:	4299      	cmp	r1, r3
 80204f4:	bfde      	ittt	le
 80204f6:	2330      	movle	r3, #48	; 0x30
 80204f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80204fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020500:	1b52      	subs	r2, r2, r5
 8020502:	6122      	str	r2, [r4, #16]
 8020504:	f8cd a000 	str.w	sl, [sp]
 8020508:	464b      	mov	r3, r9
 802050a:	aa03      	add	r2, sp, #12
 802050c:	4621      	mov	r1, r4
 802050e:	4640      	mov	r0, r8
 8020510:	f7ff fee2 	bl	80202d8 <_printf_common>
 8020514:	3001      	adds	r0, #1
 8020516:	d14c      	bne.n	80205b2 <_printf_i+0x1fe>
 8020518:	f04f 30ff 	mov.w	r0, #4294967295
 802051c:	b004      	add	sp, #16
 802051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020522:	4835      	ldr	r0, [pc, #212]	; (80205f8 <_printf_i+0x244>)
 8020524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020528:	6829      	ldr	r1, [r5, #0]
 802052a:	6823      	ldr	r3, [r4, #0]
 802052c:	f851 6b04 	ldr.w	r6, [r1], #4
 8020530:	6029      	str	r1, [r5, #0]
 8020532:	061d      	lsls	r5, r3, #24
 8020534:	d514      	bpl.n	8020560 <_printf_i+0x1ac>
 8020536:	07df      	lsls	r7, r3, #31
 8020538:	bf44      	itt	mi
 802053a:	f043 0320 	orrmi.w	r3, r3, #32
 802053e:	6023      	strmi	r3, [r4, #0]
 8020540:	b91e      	cbnz	r6, 802054a <_printf_i+0x196>
 8020542:	6823      	ldr	r3, [r4, #0]
 8020544:	f023 0320 	bic.w	r3, r3, #32
 8020548:	6023      	str	r3, [r4, #0]
 802054a:	2310      	movs	r3, #16
 802054c:	e7b0      	b.n	80204b0 <_printf_i+0xfc>
 802054e:	6823      	ldr	r3, [r4, #0]
 8020550:	f043 0320 	orr.w	r3, r3, #32
 8020554:	6023      	str	r3, [r4, #0]
 8020556:	2378      	movs	r3, #120	; 0x78
 8020558:	4828      	ldr	r0, [pc, #160]	; (80205fc <_printf_i+0x248>)
 802055a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802055e:	e7e3      	b.n	8020528 <_printf_i+0x174>
 8020560:	0659      	lsls	r1, r3, #25
 8020562:	bf48      	it	mi
 8020564:	b2b6      	uxthmi	r6, r6
 8020566:	e7e6      	b.n	8020536 <_printf_i+0x182>
 8020568:	4615      	mov	r5, r2
 802056a:	e7bb      	b.n	80204e4 <_printf_i+0x130>
 802056c:	682b      	ldr	r3, [r5, #0]
 802056e:	6826      	ldr	r6, [r4, #0]
 8020570:	6961      	ldr	r1, [r4, #20]
 8020572:	1d18      	adds	r0, r3, #4
 8020574:	6028      	str	r0, [r5, #0]
 8020576:	0635      	lsls	r5, r6, #24
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	d501      	bpl.n	8020580 <_printf_i+0x1cc>
 802057c:	6019      	str	r1, [r3, #0]
 802057e:	e002      	b.n	8020586 <_printf_i+0x1d2>
 8020580:	0670      	lsls	r0, r6, #25
 8020582:	d5fb      	bpl.n	802057c <_printf_i+0x1c8>
 8020584:	8019      	strh	r1, [r3, #0]
 8020586:	2300      	movs	r3, #0
 8020588:	6123      	str	r3, [r4, #16]
 802058a:	4615      	mov	r5, r2
 802058c:	e7ba      	b.n	8020504 <_printf_i+0x150>
 802058e:	682b      	ldr	r3, [r5, #0]
 8020590:	1d1a      	adds	r2, r3, #4
 8020592:	602a      	str	r2, [r5, #0]
 8020594:	681d      	ldr	r5, [r3, #0]
 8020596:	6862      	ldr	r2, [r4, #4]
 8020598:	2100      	movs	r1, #0
 802059a:	4628      	mov	r0, r5
 802059c:	f7df fe38 	bl	8000210 <memchr>
 80205a0:	b108      	cbz	r0, 80205a6 <_printf_i+0x1f2>
 80205a2:	1b40      	subs	r0, r0, r5
 80205a4:	6060      	str	r0, [r4, #4]
 80205a6:	6863      	ldr	r3, [r4, #4]
 80205a8:	6123      	str	r3, [r4, #16]
 80205aa:	2300      	movs	r3, #0
 80205ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80205b0:	e7a8      	b.n	8020504 <_printf_i+0x150>
 80205b2:	6923      	ldr	r3, [r4, #16]
 80205b4:	462a      	mov	r2, r5
 80205b6:	4649      	mov	r1, r9
 80205b8:	4640      	mov	r0, r8
 80205ba:	47d0      	blx	sl
 80205bc:	3001      	adds	r0, #1
 80205be:	d0ab      	beq.n	8020518 <_printf_i+0x164>
 80205c0:	6823      	ldr	r3, [r4, #0]
 80205c2:	079b      	lsls	r3, r3, #30
 80205c4:	d413      	bmi.n	80205ee <_printf_i+0x23a>
 80205c6:	68e0      	ldr	r0, [r4, #12]
 80205c8:	9b03      	ldr	r3, [sp, #12]
 80205ca:	4298      	cmp	r0, r3
 80205cc:	bfb8      	it	lt
 80205ce:	4618      	movlt	r0, r3
 80205d0:	e7a4      	b.n	802051c <_printf_i+0x168>
 80205d2:	2301      	movs	r3, #1
 80205d4:	4632      	mov	r2, r6
 80205d6:	4649      	mov	r1, r9
 80205d8:	4640      	mov	r0, r8
 80205da:	47d0      	blx	sl
 80205dc:	3001      	adds	r0, #1
 80205de:	d09b      	beq.n	8020518 <_printf_i+0x164>
 80205e0:	3501      	adds	r5, #1
 80205e2:	68e3      	ldr	r3, [r4, #12]
 80205e4:	9903      	ldr	r1, [sp, #12]
 80205e6:	1a5b      	subs	r3, r3, r1
 80205e8:	42ab      	cmp	r3, r5
 80205ea:	dcf2      	bgt.n	80205d2 <_printf_i+0x21e>
 80205ec:	e7eb      	b.n	80205c6 <_printf_i+0x212>
 80205ee:	2500      	movs	r5, #0
 80205f0:	f104 0619 	add.w	r6, r4, #25
 80205f4:	e7f5      	b.n	80205e2 <_printf_i+0x22e>
 80205f6:	bf00      	nop
 80205f8:	080264b1 	.word	0x080264b1
 80205fc:	080264c2 	.word	0x080264c2

08020600 <iprintf>:
 8020600:	b40f      	push	{r0, r1, r2, r3}
 8020602:	4b0a      	ldr	r3, [pc, #40]	; (802062c <iprintf+0x2c>)
 8020604:	b513      	push	{r0, r1, r4, lr}
 8020606:	681c      	ldr	r4, [r3, #0]
 8020608:	b124      	cbz	r4, 8020614 <iprintf+0x14>
 802060a:	69a3      	ldr	r3, [r4, #24]
 802060c:	b913      	cbnz	r3, 8020614 <iprintf+0x14>
 802060e:	4620      	mov	r0, r4
 8020610:	f000 fad2 	bl	8020bb8 <__sinit>
 8020614:	ab05      	add	r3, sp, #20
 8020616:	9a04      	ldr	r2, [sp, #16]
 8020618:	68a1      	ldr	r1, [r4, #8]
 802061a:	9301      	str	r3, [sp, #4]
 802061c:	4620      	mov	r0, r4
 802061e:	f7ff fd2b 	bl	8020078 <_vfiprintf_r>
 8020622:	b002      	add	sp, #8
 8020624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020628:	b004      	add	sp, #16
 802062a:	4770      	bx	lr
 802062c:	200025ac 	.word	0x200025ac

08020630 <_puts_r>:
 8020630:	b570      	push	{r4, r5, r6, lr}
 8020632:	460e      	mov	r6, r1
 8020634:	4605      	mov	r5, r0
 8020636:	b118      	cbz	r0, 8020640 <_puts_r+0x10>
 8020638:	6983      	ldr	r3, [r0, #24]
 802063a:	b90b      	cbnz	r3, 8020640 <_puts_r+0x10>
 802063c:	f000 fabc 	bl	8020bb8 <__sinit>
 8020640:	69ab      	ldr	r3, [r5, #24]
 8020642:	68ac      	ldr	r4, [r5, #8]
 8020644:	b913      	cbnz	r3, 802064c <_puts_r+0x1c>
 8020646:	4628      	mov	r0, r5
 8020648:	f000 fab6 	bl	8020bb8 <__sinit>
 802064c:	4b2c      	ldr	r3, [pc, #176]	; (8020700 <_puts_r+0xd0>)
 802064e:	429c      	cmp	r4, r3
 8020650:	d120      	bne.n	8020694 <_puts_r+0x64>
 8020652:	686c      	ldr	r4, [r5, #4]
 8020654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020656:	07db      	lsls	r3, r3, #31
 8020658:	d405      	bmi.n	8020666 <_puts_r+0x36>
 802065a:	89a3      	ldrh	r3, [r4, #12]
 802065c:	0598      	lsls	r0, r3, #22
 802065e:	d402      	bmi.n	8020666 <_puts_r+0x36>
 8020660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020662:	f7ff fba6 	bl	801fdb2 <__retarget_lock_acquire_recursive>
 8020666:	89a3      	ldrh	r3, [r4, #12]
 8020668:	0719      	lsls	r1, r3, #28
 802066a:	d51d      	bpl.n	80206a8 <_puts_r+0x78>
 802066c:	6923      	ldr	r3, [r4, #16]
 802066e:	b1db      	cbz	r3, 80206a8 <_puts_r+0x78>
 8020670:	3e01      	subs	r6, #1
 8020672:	68a3      	ldr	r3, [r4, #8]
 8020674:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020678:	3b01      	subs	r3, #1
 802067a:	60a3      	str	r3, [r4, #8]
 802067c:	bb39      	cbnz	r1, 80206ce <_puts_r+0x9e>
 802067e:	2b00      	cmp	r3, #0
 8020680:	da38      	bge.n	80206f4 <_puts_r+0xc4>
 8020682:	4622      	mov	r2, r4
 8020684:	210a      	movs	r1, #10
 8020686:	4628      	mov	r0, r5
 8020688:	f000 f8bc 	bl	8020804 <__swbuf_r>
 802068c:	3001      	adds	r0, #1
 802068e:	d011      	beq.n	80206b4 <_puts_r+0x84>
 8020690:	250a      	movs	r5, #10
 8020692:	e011      	b.n	80206b8 <_puts_r+0x88>
 8020694:	4b1b      	ldr	r3, [pc, #108]	; (8020704 <_puts_r+0xd4>)
 8020696:	429c      	cmp	r4, r3
 8020698:	d101      	bne.n	802069e <_puts_r+0x6e>
 802069a:	68ac      	ldr	r4, [r5, #8]
 802069c:	e7da      	b.n	8020654 <_puts_r+0x24>
 802069e:	4b1a      	ldr	r3, [pc, #104]	; (8020708 <_puts_r+0xd8>)
 80206a0:	429c      	cmp	r4, r3
 80206a2:	bf08      	it	eq
 80206a4:	68ec      	ldreq	r4, [r5, #12]
 80206a6:	e7d5      	b.n	8020654 <_puts_r+0x24>
 80206a8:	4621      	mov	r1, r4
 80206aa:	4628      	mov	r0, r5
 80206ac:	f000 f8fc 	bl	80208a8 <__swsetup_r>
 80206b0:	2800      	cmp	r0, #0
 80206b2:	d0dd      	beq.n	8020670 <_puts_r+0x40>
 80206b4:	f04f 35ff 	mov.w	r5, #4294967295
 80206b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80206ba:	07da      	lsls	r2, r3, #31
 80206bc:	d405      	bmi.n	80206ca <_puts_r+0x9a>
 80206be:	89a3      	ldrh	r3, [r4, #12]
 80206c0:	059b      	lsls	r3, r3, #22
 80206c2:	d402      	bmi.n	80206ca <_puts_r+0x9a>
 80206c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80206c6:	f7ff fb75 	bl	801fdb4 <__retarget_lock_release_recursive>
 80206ca:	4628      	mov	r0, r5
 80206cc:	bd70      	pop	{r4, r5, r6, pc}
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	da04      	bge.n	80206dc <_puts_r+0xac>
 80206d2:	69a2      	ldr	r2, [r4, #24]
 80206d4:	429a      	cmp	r2, r3
 80206d6:	dc06      	bgt.n	80206e6 <_puts_r+0xb6>
 80206d8:	290a      	cmp	r1, #10
 80206da:	d004      	beq.n	80206e6 <_puts_r+0xb6>
 80206dc:	6823      	ldr	r3, [r4, #0]
 80206de:	1c5a      	adds	r2, r3, #1
 80206e0:	6022      	str	r2, [r4, #0]
 80206e2:	7019      	strb	r1, [r3, #0]
 80206e4:	e7c5      	b.n	8020672 <_puts_r+0x42>
 80206e6:	4622      	mov	r2, r4
 80206e8:	4628      	mov	r0, r5
 80206ea:	f000 f88b 	bl	8020804 <__swbuf_r>
 80206ee:	3001      	adds	r0, #1
 80206f0:	d1bf      	bne.n	8020672 <_puts_r+0x42>
 80206f2:	e7df      	b.n	80206b4 <_puts_r+0x84>
 80206f4:	6823      	ldr	r3, [r4, #0]
 80206f6:	250a      	movs	r5, #10
 80206f8:	1c5a      	adds	r2, r3, #1
 80206fa:	6022      	str	r2, [r4, #0]
 80206fc:	701d      	strb	r5, [r3, #0]
 80206fe:	e7db      	b.n	80206b8 <_puts_r+0x88>
 8020700:	080264f4 	.word	0x080264f4
 8020704:	08026514 	.word	0x08026514
 8020708:	080264d4 	.word	0x080264d4

0802070c <puts>:
 802070c:	4b02      	ldr	r3, [pc, #8]	; (8020718 <puts+0xc>)
 802070e:	4601      	mov	r1, r0
 8020710:	6818      	ldr	r0, [r3, #0]
 8020712:	f7ff bf8d 	b.w	8020630 <_puts_r>
 8020716:	bf00      	nop
 8020718:	200025ac 	.word	0x200025ac

0802071c <_sbrk_r>:
 802071c:	b538      	push	{r3, r4, r5, lr}
 802071e:	4d06      	ldr	r5, [pc, #24]	; (8020738 <_sbrk_r+0x1c>)
 8020720:	2300      	movs	r3, #0
 8020722:	4604      	mov	r4, r0
 8020724:	4608      	mov	r0, r1
 8020726:	602b      	str	r3, [r5, #0]
 8020728:	f7e2 ffca 	bl	80036c0 <_sbrk>
 802072c:	1c43      	adds	r3, r0, #1
 802072e:	d102      	bne.n	8020736 <_sbrk_r+0x1a>
 8020730:	682b      	ldr	r3, [r5, #0]
 8020732:	b103      	cbz	r3, 8020736 <_sbrk_r+0x1a>
 8020734:	6023      	str	r3, [r4, #0]
 8020736:	bd38      	pop	{r3, r4, r5, pc}
 8020738:	20002d40 	.word	0x20002d40

0802073c <_raise_r>:
 802073c:	291f      	cmp	r1, #31
 802073e:	b538      	push	{r3, r4, r5, lr}
 8020740:	4604      	mov	r4, r0
 8020742:	460d      	mov	r5, r1
 8020744:	d904      	bls.n	8020750 <_raise_r+0x14>
 8020746:	2316      	movs	r3, #22
 8020748:	6003      	str	r3, [r0, #0]
 802074a:	f04f 30ff 	mov.w	r0, #4294967295
 802074e:	bd38      	pop	{r3, r4, r5, pc}
 8020750:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020752:	b112      	cbz	r2, 802075a <_raise_r+0x1e>
 8020754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020758:	b94b      	cbnz	r3, 802076e <_raise_r+0x32>
 802075a:	4620      	mov	r0, r4
 802075c:	f000 f830 	bl	80207c0 <_getpid_r>
 8020760:	462a      	mov	r2, r5
 8020762:	4601      	mov	r1, r0
 8020764:	4620      	mov	r0, r4
 8020766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802076a:	f000 b817 	b.w	802079c <_kill_r>
 802076e:	2b01      	cmp	r3, #1
 8020770:	d00a      	beq.n	8020788 <_raise_r+0x4c>
 8020772:	1c59      	adds	r1, r3, #1
 8020774:	d103      	bne.n	802077e <_raise_r+0x42>
 8020776:	2316      	movs	r3, #22
 8020778:	6003      	str	r3, [r0, #0]
 802077a:	2001      	movs	r0, #1
 802077c:	e7e7      	b.n	802074e <_raise_r+0x12>
 802077e:	2400      	movs	r4, #0
 8020780:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020784:	4628      	mov	r0, r5
 8020786:	4798      	blx	r3
 8020788:	2000      	movs	r0, #0
 802078a:	e7e0      	b.n	802074e <_raise_r+0x12>

0802078c <raise>:
 802078c:	4b02      	ldr	r3, [pc, #8]	; (8020798 <raise+0xc>)
 802078e:	4601      	mov	r1, r0
 8020790:	6818      	ldr	r0, [r3, #0]
 8020792:	f7ff bfd3 	b.w	802073c <_raise_r>
 8020796:	bf00      	nop
 8020798:	200025ac 	.word	0x200025ac

0802079c <_kill_r>:
 802079c:	b538      	push	{r3, r4, r5, lr}
 802079e:	4d07      	ldr	r5, [pc, #28]	; (80207bc <_kill_r+0x20>)
 80207a0:	2300      	movs	r3, #0
 80207a2:	4604      	mov	r4, r0
 80207a4:	4608      	mov	r0, r1
 80207a6:	4611      	mov	r1, r2
 80207a8:	602b      	str	r3, [r5, #0]
 80207aa:	f7e2 ff01 	bl	80035b0 <_kill>
 80207ae:	1c43      	adds	r3, r0, #1
 80207b0:	d102      	bne.n	80207b8 <_kill_r+0x1c>
 80207b2:	682b      	ldr	r3, [r5, #0]
 80207b4:	b103      	cbz	r3, 80207b8 <_kill_r+0x1c>
 80207b6:	6023      	str	r3, [r4, #0]
 80207b8:	bd38      	pop	{r3, r4, r5, pc}
 80207ba:	bf00      	nop
 80207bc:	20002d40 	.word	0x20002d40

080207c0 <_getpid_r>:
 80207c0:	f7e2 beee 	b.w	80035a0 <_getpid>

080207c4 <_vsiprintf_r>:
 80207c4:	b500      	push	{lr}
 80207c6:	b09b      	sub	sp, #108	; 0x6c
 80207c8:	9100      	str	r1, [sp, #0]
 80207ca:	9104      	str	r1, [sp, #16]
 80207cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80207d0:	9105      	str	r1, [sp, #20]
 80207d2:	9102      	str	r1, [sp, #8]
 80207d4:	4905      	ldr	r1, [pc, #20]	; (80207ec <_vsiprintf_r+0x28>)
 80207d6:	9103      	str	r1, [sp, #12]
 80207d8:	4669      	mov	r1, sp
 80207da:	f000 fb85 	bl	8020ee8 <_svfiprintf_r>
 80207de:	9b00      	ldr	r3, [sp, #0]
 80207e0:	2200      	movs	r2, #0
 80207e2:	701a      	strb	r2, [r3, #0]
 80207e4:	b01b      	add	sp, #108	; 0x6c
 80207e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80207ea:	bf00      	nop
 80207ec:	ffff0208 	.word	0xffff0208

080207f0 <vsiprintf>:
 80207f0:	4613      	mov	r3, r2
 80207f2:	460a      	mov	r2, r1
 80207f4:	4601      	mov	r1, r0
 80207f6:	4802      	ldr	r0, [pc, #8]	; (8020800 <vsiprintf+0x10>)
 80207f8:	6800      	ldr	r0, [r0, #0]
 80207fa:	f7ff bfe3 	b.w	80207c4 <_vsiprintf_r>
 80207fe:	bf00      	nop
 8020800:	200025ac 	.word	0x200025ac

08020804 <__swbuf_r>:
 8020804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020806:	460e      	mov	r6, r1
 8020808:	4614      	mov	r4, r2
 802080a:	4605      	mov	r5, r0
 802080c:	b118      	cbz	r0, 8020816 <__swbuf_r+0x12>
 802080e:	6983      	ldr	r3, [r0, #24]
 8020810:	b90b      	cbnz	r3, 8020816 <__swbuf_r+0x12>
 8020812:	f000 f9d1 	bl	8020bb8 <__sinit>
 8020816:	4b21      	ldr	r3, [pc, #132]	; (802089c <__swbuf_r+0x98>)
 8020818:	429c      	cmp	r4, r3
 802081a:	d12b      	bne.n	8020874 <__swbuf_r+0x70>
 802081c:	686c      	ldr	r4, [r5, #4]
 802081e:	69a3      	ldr	r3, [r4, #24]
 8020820:	60a3      	str	r3, [r4, #8]
 8020822:	89a3      	ldrh	r3, [r4, #12]
 8020824:	071a      	lsls	r2, r3, #28
 8020826:	d52f      	bpl.n	8020888 <__swbuf_r+0x84>
 8020828:	6923      	ldr	r3, [r4, #16]
 802082a:	b36b      	cbz	r3, 8020888 <__swbuf_r+0x84>
 802082c:	6923      	ldr	r3, [r4, #16]
 802082e:	6820      	ldr	r0, [r4, #0]
 8020830:	1ac0      	subs	r0, r0, r3
 8020832:	6963      	ldr	r3, [r4, #20]
 8020834:	b2f6      	uxtb	r6, r6
 8020836:	4283      	cmp	r3, r0
 8020838:	4637      	mov	r7, r6
 802083a:	dc04      	bgt.n	8020846 <__swbuf_r+0x42>
 802083c:	4621      	mov	r1, r4
 802083e:	4628      	mov	r0, r5
 8020840:	f000 f926 	bl	8020a90 <_fflush_r>
 8020844:	bb30      	cbnz	r0, 8020894 <__swbuf_r+0x90>
 8020846:	68a3      	ldr	r3, [r4, #8]
 8020848:	3b01      	subs	r3, #1
 802084a:	60a3      	str	r3, [r4, #8]
 802084c:	6823      	ldr	r3, [r4, #0]
 802084e:	1c5a      	adds	r2, r3, #1
 8020850:	6022      	str	r2, [r4, #0]
 8020852:	701e      	strb	r6, [r3, #0]
 8020854:	6963      	ldr	r3, [r4, #20]
 8020856:	3001      	adds	r0, #1
 8020858:	4283      	cmp	r3, r0
 802085a:	d004      	beq.n	8020866 <__swbuf_r+0x62>
 802085c:	89a3      	ldrh	r3, [r4, #12]
 802085e:	07db      	lsls	r3, r3, #31
 8020860:	d506      	bpl.n	8020870 <__swbuf_r+0x6c>
 8020862:	2e0a      	cmp	r6, #10
 8020864:	d104      	bne.n	8020870 <__swbuf_r+0x6c>
 8020866:	4621      	mov	r1, r4
 8020868:	4628      	mov	r0, r5
 802086a:	f000 f911 	bl	8020a90 <_fflush_r>
 802086e:	b988      	cbnz	r0, 8020894 <__swbuf_r+0x90>
 8020870:	4638      	mov	r0, r7
 8020872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020874:	4b0a      	ldr	r3, [pc, #40]	; (80208a0 <__swbuf_r+0x9c>)
 8020876:	429c      	cmp	r4, r3
 8020878:	d101      	bne.n	802087e <__swbuf_r+0x7a>
 802087a:	68ac      	ldr	r4, [r5, #8]
 802087c:	e7cf      	b.n	802081e <__swbuf_r+0x1a>
 802087e:	4b09      	ldr	r3, [pc, #36]	; (80208a4 <__swbuf_r+0xa0>)
 8020880:	429c      	cmp	r4, r3
 8020882:	bf08      	it	eq
 8020884:	68ec      	ldreq	r4, [r5, #12]
 8020886:	e7ca      	b.n	802081e <__swbuf_r+0x1a>
 8020888:	4621      	mov	r1, r4
 802088a:	4628      	mov	r0, r5
 802088c:	f000 f80c 	bl	80208a8 <__swsetup_r>
 8020890:	2800      	cmp	r0, #0
 8020892:	d0cb      	beq.n	802082c <__swbuf_r+0x28>
 8020894:	f04f 37ff 	mov.w	r7, #4294967295
 8020898:	e7ea      	b.n	8020870 <__swbuf_r+0x6c>
 802089a:	bf00      	nop
 802089c:	080264f4 	.word	0x080264f4
 80208a0:	08026514 	.word	0x08026514
 80208a4:	080264d4 	.word	0x080264d4

080208a8 <__swsetup_r>:
 80208a8:	4b32      	ldr	r3, [pc, #200]	; (8020974 <__swsetup_r+0xcc>)
 80208aa:	b570      	push	{r4, r5, r6, lr}
 80208ac:	681d      	ldr	r5, [r3, #0]
 80208ae:	4606      	mov	r6, r0
 80208b0:	460c      	mov	r4, r1
 80208b2:	b125      	cbz	r5, 80208be <__swsetup_r+0x16>
 80208b4:	69ab      	ldr	r3, [r5, #24]
 80208b6:	b913      	cbnz	r3, 80208be <__swsetup_r+0x16>
 80208b8:	4628      	mov	r0, r5
 80208ba:	f000 f97d 	bl	8020bb8 <__sinit>
 80208be:	4b2e      	ldr	r3, [pc, #184]	; (8020978 <__swsetup_r+0xd0>)
 80208c0:	429c      	cmp	r4, r3
 80208c2:	d10f      	bne.n	80208e4 <__swsetup_r+0x3c>
 80208c4:	686c      	ldr	r4, [r5, #4]
 80208c6:	89a3      	ldrh	r3, [r4, #12]
 80208c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80208cc:	0719      	lsls	r1, r3, #28
 80208ce:	d42c      	bmi.n	802092a <__swsetup_r+0x82>
 80208d0:	06dd      	lsls	r5, r3, #27
 80208d2:	d411      	bmi.n	80208f8 <__swsetup_r+0x50>
 80208d4:	2309      	movs	r3, #9
 80208d6:	6033      	str	r3, [r6, #0]
 80208d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80208dc:	81a3      	strh	r3, [r4, #12]
 80208de:	f04f 30ff 	mov.w	r0, #4294967295
 80208e2:	e03e      	b.n	8020962 <__swsetup_r+0xba>
 80208e4:	4b25      	ldr	r3, [pc, #148]	; (802097c <__swsetup_r+0xd4>)
 80208e6:	429c      	cmp	r4, r3
 80208e8:	d101      	bne.n	80208ee <__swsetup_r+0x46>
 80208ea:	68ac      	ldr	r4, [r5, #8]
 80208ec:	e7eb      	b.n	80208c6 <__swsetup_r+0x1e>
 80208ee:	4b24      	ldr	r3, [pc, #144]	; (8020980 <__swsetup_r+0xd8>)
 80208f0:	429c      	cmp	r4, r3
 80208f2:	bf08      	it	eq
 80208f4:	68ec      	ldreq	r4, [r5, #12]
 80208f6:	e7e6      	b.n	80208c6 <__swsetup_r+0x1e>
 80208f8:	0758      	lsls	r0, r3, #29
 80208fa:	d512      	bpl.n	8020922 <__swsetup_r+0x7a>
 80208fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80208fe:	b141      	cbz	r1, 8020912 <__swsetup_r+0x6a>
 8020900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020904:	4299      	cmp	r1, r3
 8020906:	d002      	beq.n	802090e <__swsetup_r+0x66>
 8020908:	4630      	mov	r0, r6
 802090a:	f7ff faab 	bl	801fe64 <_free_r>
 802090e:	2300      	movs	r3, #0
 8020910:	6363      	str	r3, [r4, #52]	; 0x34
 8020912:	89a3      	ldrh	r3, [r4, #12]
 8020914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020918:	81a3      	strh	r3, [r4, #12]
 802091a:	2300      	movs	r3, #0
 802091c:	6063      	str	r3, [r4, #4]
 802091e:	6923      	ldr	r3, [r4, #16]
 8020920:	6023      	str	r3, [r4, #0]
 8020922:	89a3      	ldrh	r3, [r4, #12]
 8020924:	f043 0308 	orr.w	r3, r3, #8
 8020928:	81a3      	strh	r3, [r4, #12]
 802092a:	6923      	ldr	r3, [r4, #16]
 802092c:	b94b      	cbnz	r3, 8020942 <__swsetup_r+0x9a>
 802092e:	89a3      	ldrh	r3, [r4, #12]
 8020930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020938:	d003      	beq.n	8020942 <__swsetup_r+0x9a>
 802093a:	4621      	mov	r1, r4
 802093c:	4630      	mov	r0, r6
 802093e:	f000 f9fd 	bl	8020d3c <__smakebuf_r>
 8020942:	89a0      	ldrh	r0, [r4, #12]
 8020944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020948:	f010 0301 	ands.w	r3, r0, #1
 802094c:	d00a      	beq.n	8020964 <__swsetup_r+0xbc>
 802094e:	2300      	movs	r3, #0
 8020950:	60a3      	str	r3, [r4, #8]
 8020952:	6963      	ldr	r3, [r4, #20]
 8020954:	425b      	negs	r3, r3
 8020956:	61a3      	str	r3, [r4, #24]
 8020958:	6923      	ldr	r3, [r4, #16]
 802095a:	b943      	cbnz	r3, 802096e <__swsetup_r+0xc6>
 802095c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020960:	d1ba      	bne.n	80208d8 <__swsetup_r+0x30>
 8020962:	bd70      	pop	{r4, r5, r6, pc}
 8020964:	0781      	lsls	r1, r0, #30
 8020966:	bf58      	it	pl
 8020968:	6963      	ldrpl	r3, [r4, #20]
 802096a:	60a3      	str	r3, [r4, #8]
 802096c:	e7f4      	b.n	8020958 <__swsetup_r+0xb0>
 802096e:	2000      	movs	r0, #0
 8020970:	e7f7      	b.n	8020962 <__swsetup_r+0xba>
 8020972:	bf00      	nop
 8020974:	200025ac 	.word	0x200025ac
 8020978:	080264f4 	.word	0x080264f4
 802097c:	08026514 	.word	0x08026514
 8020980:	080264d4 	.word	0x080264d4

08020984 <__sflush_r>:
 8020984:	898a      	ldrh	r2, [r1, #12]
 8020986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802098a:	4605      	mov	r5, r0
 802098c:	0710      	lsls	r0, r2, #28
 802098e:	460c      	mov	r4, r1
 8020990:	d458      	bmi.n	8020a44 <__sflush_r+0xc0>
 8020992:	684b      	ldr	r3, [r1, #4]
 8020994:	2b00      	cmp	r3, #0
 8020996:	dc05      	bgt.n	80209a4 <__sflush_r+0x20>
 8020998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802099a:	2b00      	cmp	r3, #0
 802099c:	dc02      	bgt.n	80209a4 <__sflush_r+0x20>
 802099e:	2000      	movs	r0, #0
 80209a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80209a6:	2e00      	cmp	r6, #0
 80209a8:	d0f9      	beq.n	802099e <__sflush_r+0x1a>
 80209aa:	2300      	movs	r3, #0
 80209ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80209b0:	682f      	ldr	r7, [r5, #0]
 80209b2:	602b      	str	r3, [r5, #0]
 80209b4:	d032      	beq.n	8020a1c <__sflush_r+0x98>
 80209b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80209b8:	89a3      	ldrh	r3, [r4, #12]
 80209ba:	075a      	lsls	r2, r3, #29
 80209bc:	d505      	bpl.n	80209ca <__sflush_r+0x46>
 80209be:	6863      	ldr	r3, [r4, #4]
 80209c0:	1ac0      	subs	r0, r0, r3
 80209c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80209c4:	b10b      	cbz	r3, 80209ca <__sflush_r+0x46>
 80209c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80209c8:	1ac0      	subs	r0, r0, r3
 80209ca:	2300      	movs	r3, #0
 80209cc:	4602      	mov	r2, r0
 80209ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80209d0:	6a21      	ldr	r1, [r4, #32]
 80209d2:	4628      	mov	r0, r5
 80209d4:	47b0      	blx	r6
 80209d6:	1c43      	adds	r3, r0, #1
 80209d8:	89a3      	ldrh	r3, [r4, #12]
 80209da:	d106      	bne.n	80209ea <__sflush_r+0x66>
 80209dc:	6829      	ldr	r1, [r5, #0]
 80209de:	291d      	cmp	r1, #29
 80209e0:	d82c      	bhi.n	8020a3c <__sflush_r+0xb8>
 80209e2:	4a2a      	ldr	r2, [pc, #168]	; (8020a8c <__sflush_r+0x108>)
 80209e4:	40ca      	lsrs	r2, r1
 80209e6:	07d6      	lsls	r6, r2, #31
 80209e8:	d528      	bpl.n	8020a3c <__sflush_r+0xb8>
 80209ea:	2200      	movs	r2, #0
 80209ec:	6062      	str	r2, [r4, #4]
 80209ee:	04d9      	lsls	r1, r3, #19
 80209f0:	6922      	ldr	r2, [r4, #16]
 80209f2:	6022      	str	r2, [r4, #0]
 80209f4:	d504      	bpl.n	8020a00 <__sflush_r+0x7c>
 80209f6:	1c42      	adds	r2, r0, #1
 80209f8:	d101      	bne.n	80209fe <__sflush_r+0x7a>
 80209fa:	682b      	ldr	r3, [r5, #0]
 80209fc:	b903      	cbnz	r3, 8020a00 <__sflush_r+0x7c>
 80209fe:	6560      	str	r0, [r4, #84]	; 0x54
 8020a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020a02:	602f      	str	r7, [r5, #0]
 8020a04:	2900      	cmp	r1, #0
 8020a06:	d0ca      	beq.n	802099e <__sflush_r+0x1a>
 8020a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a0c:	4299      	cmp	r1, r3
 8020a0e:	d002      	beq.n	8020a16 <__sflush_r+0x92>
 8020a10:	4628      	mov	r0, r5
 8020a12:	f7ff fa27 	bl	801fe64 <_free_r>
 8020a16:	2000      	movs	r0, #0
 8020a18:	6360      	str	r0, [r4, #52]	; 0x34
 8020a1a:	e7c1      	b.n	80209a0 <__sflush_r+0x1c>
 8020a1c:	6a21      	ldr	r1, [r4, #32]
 8020a1e:	2301      	movs	r3, #1
 8020a20:	4628      	mov	r0, r5
 8020a22:	47b0      	blx	r6
 8020a24:	1c41      	adds	r1, r0, #1
 8020a26:	d1c7      	bne.n	80209b8 <__sflush_r+0x34>
 8020a28:	682b      	ldr	r3, [r5, #0]
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	d0c4      	beq.n	80209b8 <__sflush_r+0x34>
 8020a2e:	2b1d      	cmp	r3, #29
 8020a30:	d001      	beq.n	8020a36 <__sflush_r+0xb2>
 8020a32:	2b16      	cmp	r3, #22
 8020a34:	d101      	bne.n	8020a3a <__sflush_r+0xb6>
 8020a36:	602f      	str	r7, [r5, #0]
 8020a38:	e7b1      	b.n	802099e <__sflush_r+0x1a>
 8020a3a:	89a3      	ldrh	r3, [r4, #12]
 8020a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a40:	81a3      	strh	r3, [r4, #12]
 8020a42:	e7ad      	b.n	80209a0 <__sflush_r+0x1c>
 8020a44:	690f      	ldr	r7, [r1, #16]
 8020a46:	2f00      	cmp	r7, #0
 8020a48:	d0a9      	beq.n	802099e <__sflush_r+0x1a>
 8020a4a:	0793      	lsls	r3, r2, #30
 8020a4c:	680e      	ldr	r6, [r1, #0]
 8020a4e:	bf08      	it	eq
 8020a50:	694b      	ldreq	r3, [r1, #20]
 8020a52:	600f      	str	r7, [r1, #0]
 8020a54:	bf18      	it	ne
 8020a56:	2300      	movne	r3, #0
 8020a58:	eba6 0807 	sub.w	r8, r6, r7
 8020a5c:	608b      	str	r3, [r1, #8]
 8020a5e:	f1b8 0f00 	cmp.w	r8, #0
 8020a62:	dd9c      	ble.n	802099e <__sflush_r+0x1a>
 8020a64:	6a21      	ldr	r1, [r4, #32]
 8020a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020a68:	4643      	mov	r3, r8
 8020a6a:	463a      	mov	r2, r7
 8020a6c:	4628      	mov	r0, r5
 8020a6e:	47b0      	blx	r6
 8020a70:	2800      	cmp	r0, #0
 8020a72:	dc06      	bgt.n	8020a82 <__sflush_r+0xfe>
 8020a74:	89a3      	ldrh	r3, [r4, #12]
 8020a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a7a:	81a3      	strh	r3, [r4, #12]
 8020a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a80:	e78e      	b.n	80209a0 <__sflush_r+0x1c>
 8020a82:	4407      	add	r7, r0
 8020a84:	eba8 0800 	sub.w	r8, r8, r0
 8020a88:	e7e9      	b.n	8020a5e <__sflush_r+0xda>
 8020a8a:	bf00      	nop
 8020a8c:	20400001 	.word	0x20400001

08020a90 <_fflush_r>:
 8020a90:	b538      	push	{r3, r4, r5, lr}
 8020a92:	690b      	ldr	r3, [r1, #16]
 8020a94:	4605      	mov	r5, r0
 8020a96:	460c      	mov	r4, r1
 8020a98:	b913      	cbnz	r3, 8020aa0 <_fflush_r+0x10>
 8020a9a:	2500      	movs	r5, #0
 8020a9c:	4628      	mov	r0, r5
 8020a9e:	bd38      	pop	{r3, r4, r5, pc}
 8020aa0:	b118      	cbz	r0, 8020aaa <_fflush_r+0x1a>
 8020aa2:	6983      	ldr	r3, [r0, #24]
 8020aa4:	b90b      	cbnz	r3, 8020aaa <_fflush_r+0x1a>
 8020aa6:	f000 f887 	bl	8020bb8 <__sinit>
 8020aaa:	4b14      	ldr	r3, [pc, #80]	; (8020afc <_fflush_r+0x6c>)
 8020aac:	429c      	cmp	r4, r3
 8020aae:	d11b      	bne.n	8020ae8 <_fflush_r+0x58>
 8020ab0:	686c      	ldr	r4, [r5, #4]
 8020ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ab6:	2b00      	cmp	r3, #0
 8020ab8:	d0ef      	beq.n	8020a9a <_fflush_r+0xa>
 8020aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020abc:	07d0      	lsls	r0, r2, #31
 8020abe:	d404      	bmi.n	8020aca <_fflush_r+0x3a>
 8020ac0:	0599      	lsls	r1, r3, #22
 8020ac2:	d402      	bmi.n	8020aca <_fflush_r+0x3a>
 8020ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ac6:	f7ff f974 	bl	801fdb2 <__retarget_lock_acquire_recursive>
 8020aca:	4628      	mov	r0, r5
 8020acc:	4621      	mov	r1, r4
 8020ace:	f7ff ff59 	bl	8020984 <__sflush_r>
 8020ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ad4:	07da      	lsls	r2, r3, #31
 8020ad6:	4605      	mov	r5, r0
 8020ad8:	d4e0      	bmi.n	8020a9c <_fflush_r+0xc>
 8020ada:	89a3      	ldrh	r3, [r4, #12]
 8020adc:	059b      	lsls	r3, r3, #22
 8020ade:	d4dd      	bmi.n	8020a9c <_fflush_r+0xc>
 8020ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ae2:	f7ff f967 	bl	801fdb4 <__retarget_lock_release_recursive>
 8020ae6:	e7d9      	b.n	8020a9c <_fflush_r+0xc>
 8020ae8:	4b05      	ldr	r3, [pc, #20]	; (8020b00 <_fflush_r+0x70>)
 8020aea:	429c      	cmp	r4, r3
 8020aec:	d101      	bne.n	8020af2 <_fflush_r+0x62>
 8020aee:	68ac      	ldr	r4, [r5, #8]
 8020af0:	e7df      	b.n	8020ab2 <_fflush_r+0x22>
 8020af2:	4b04      	ldr	r3, [pc, #16]	; (8020b04 <_fflush_r+0x74>)
 8020af4:	429c      	cmp	r4, r3
 8020af6:	bf08      	it	eq
 8020af8:	68ec      	ldreq	r4, [r5, #12]
 8020afa:	e7da      	b.n	8020ab2 <_fflush_r+0x22>
 8020afc:	080264f4 	.word	0x080264f4
 8020b00:	08026514 	.word	0x08026514
 8020b04:	080264d4 	.word	0x080264d4

08020b08 <std>:
 8020b08:	2300      	movs	r3, #0
 8020b0a:	b510      	push	{r4, lr}
 8020b0c:	4604      	mov	r4, r0
 8020b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8020b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020b16:	6083      	str	r3, [r0, #8]
 8020b18:	8181      	strh	r1, [r0, #12]
 8020b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8020b1c:	81c2      	strh	r2, [r0, #14]
 8020b1e:	6183      	str	r3, [r0, #24]
 8020b20:	4619      	mov	r1, r3
 8020b22:	2208      	movs	r2, #8
 8020b24:	305c      	adds	r0, #92	; 0x5c
 8020b26:	f7ff f97f 	bl	801fe28 <memset>
 8020b2a:	4b05      	ldr	r3, [pc, #20]	; (8020b40 <std+0x38>)
 8020b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8020b2e:	4b05      	ldr	r3, [pc, #20]	; (8020b44 <std+0x3c>)
 8020b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8020b32:	4b05      	ldr	r3, [pc, #20]	; (8020b48 <std+0x40>)
 8020b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020b36:	4b05      	ldr	r3, [pc, #20]	; (8020b4c <std+0x44>)
 8020b38:	6224      	str	r4, [r4, #32]
 8020b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8020b3c:	bd10      	pop	{r4, pc}
 8020b3e:	bf00      	nop
 8020b40:	080210e9 	.word	0x080210e9
 8020b44:	0802110b 	.word	0x0802110b
 8020b48:	08021143 	.word	0x08021143
 8020b4c:	08021167 	.word	0x08021167

08020b50 <_cleanup_r>:
 8020b50:	4901      	ldr	r1, [pc, #4]	; (8020b58 <_cleanup_r+0x8>)
 8020b52:	f000 b8af 	b.w	8020cb4 <_fwalk_reent>
 8020b56:	bf00      	nop
 8020b58:	08020a91 	.word	0x08020a91

08020b5c <__sfmoreglue>:
 8020b5c:	b570      	push	{r4, r5, r6, lr}
 8020b5e:	2268      	movs	r2, #104	; 0x68
 8020b60:	1e4d      	subs	r5, r1, #1
 8020b62:	4355      	muls	r5, r2
 8020b64:	460e      	mov	r6, r1
 8020b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020b6a:	f7ff f9e7 	bl	801ff3c <_malloc_r>
 8020b6e:	4604      	mov	r4, r0
 8020b70:	b140      	cbz	r0, 8020b84 <__sfmoreglue+0x28>
 8020b72:	2100      	movs	r1, #0
 8020b74:	e9c0 1600 	strd	r1, r6, [r0]
 8020b78:	300c      	adds	r0, #12
 8020b7a:	60a0      	str	r0, [r4, #8]
 8020b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020b80:	f7ff f952 	bl	801fe28 <memset>
 8020b84:	4620      	mov	r0, r4
 8020b86:	bd70      	pop	{r4, r5, r6, pc}

08020b88 <__sfp_lock_acquire>:
 8020b88:	4801      	ldr	r0, [pc, #4]	; (8020b90 <__sfp_lock_acquire+0x8>)
 8020b8a:	f7ff b912 	b.w	801fdb2 <__retarget_lock_acquire_recursive>
 8020b8e:	bf00      	nop
 8020b90:	20002d35 	.word	0x20002d35

08020b94 <__sfp_lock_release>:
 8020b94:	4801      	ldr	r0, [pc, #4]	; (8020b9c <__sfp_lock_release+0x8>)
 8020b96:	f7ff b90d 	b.w	801fdb4 <__retarget_lock_release_recursive>
 8020b9a:	bf00      	nop
 8020b9c:	20002d35 	.word	0x20002d35

08020ba0 <__sinit_lock_acquire>:
 8020ba0:	4801      	ldr	r0, [pc, #4]	; (8020ba8 <__sinit_lock_acquire+0x8>)
 8020ba2:	f7ff b906 	b.w	801fdb2 <__retarget_lock_acquire_recursive>
 8020ba6:	bf00      	nop
 8020ba8:	20002d36 	.word	0x20002d36

08020bac <__sinit_lock_release>:
 8020bac:	4801      	ldr	r0, [pc, #4]	; (8020bb4 <__sinit_lock_release+0x8>)
 8020bae:	f7ff b901 	b.w	801fdb4 <__retarget_lock_release_recursive>
 8020bb2:	bf00      	nop
 8020bb4:	20002d36 	.word	0x20002d36

08020bb8 <__sinit>:
 8020bb8:	b510      	push	{r4, lr}
 8020bba:	4604      	mov	r4, r0
 8020bbc:	f7ff fff0 	bl	8020ba0 <__sinit_lock_acquire>
 8020bc0:	69a3      	ldr	r3, [r4, #24]
 8020bc2:	b11b      	cbz	r3, 8020bcc <__sinit+0x14>
 8020bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020bc8:	f7ff bff0 	b.w	8020bac <__sinit_lock_release>
 8020bcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020bd0:	6523      	str	r3, [r4, #80]	; 0x50
 8020bd2:	4b13      	ldr	r3, [pc, #76]	; (8020c20 <__sinit+0x68>)
 8020bd4:	4a13      	ldr	r2, [pc, #76]	; (8020c24 <__sinit+0x6c>)
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8020bda:	42a3      	cmp	r3, r4
 8020bdc:	bf04      	itt	eq
 8020bde:	2301      	moveq	r3, #1
 8020be0:	61a3      	streq	r3, [r4, #24]
 8020be2:	4620      	mov	r0, r4
 8020be4:	f000 f820 	bl	8020c28 <__sfp>
 8020be8:	6060      	str	r0, [r4, #4]
 8020bea:	4620      	mov	r0, r4
 8020bec:	f000 f81c 	bl	8020c28 <__sfp>
 8020bf0:	60a0      	str	r0, [r4, #8]
 8020bf2:	4620      	mov	r0, r4
 8020bf4:	f000 f818 	bl	8020c28 <__sfp>
 8020bf8:	2200      	movs	r2, #0
 8020bfa:	60e0      	str	r0, [r4, #12]
 8020bfc:	2104      	movs	r1, #4
 8020bfe:	6860      	ldr	r0, [r4, #4]
 8020c00:	f7ff ff82 	bl	8020b08 <std>
 8020c04:	68a0      	ldr	r0, [r4, #8]
 8020c06:	2201      	movs	r2, #1
 8020c08:	2109      	movs	r1, #9
 8020c0a:	f7ff ff7d 	bl	8020b08 <std>
 8020c0e:	68e0      	ldr	r0, [r4, #12]
 8020c10:	2202      	movs	r2, #2
 8020c12:	2112      	movs	r1, #18
 8020c14:	f7ff ff78 	bl	8020b08 <std>
 8020c18:	2301      	movs	r3, #1
 8020c1a:	61a3      	str	r3, [r4, #24]
 8020c1c:	e7d2      	b.n	8020bc4 <__sinit+0xc>
 8020c1e:	bf00      	nop
 8020c20:	0802649c 	.word	0x0802649c
 8020c24:	08020b51 	.word	0x08020b51

08020c28 <__sfp>:
 8020c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c2a:	4607      	mov	r7, r0
 8020c2c:	f7ff ffac 	bl	8020b88 <__sfp_lock_acquire>
 8020c30:	4b1e      	ldr	r3, [pc, #120]	; (8020cac <__sfp+0x84>)
 8020c32:	681e      	ldr	r6, [r3, #0]
 8020c34:	69b3      	ldr	r3, [r6, #24]
 8020c36:	b913      	cbnz	r3, 8020c3e <__sfp+0x16>
 8020c38:	4630      	mov	r0, r6
 8020c3a:	f7ff ffbd 	bl	8020bb8 <__sinit>
 8020c3e:	3648      	adds	r6, #72	; 0x48
 8020c40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020c44:	3b01      	subs	r3, #1
 8020c46:	d503      	bpl.n	8020c50 <__sfp+0x28>
 8020c48:	6833      	ldr	r3, [r6, #0]
 8020c4a:	b30b      	cbz	r3, 8020c90 <__sfp+0x68>
 8020c4c:	6836      	ldr	r6, [r6, #0]
 8020c4e:	e7f7      	b.n	8020c40 <__sfp+0x18>
 8020c50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020c54:	b9d5      	cbnz	r5, 8020c8c <__sfp+0x64>
 8020c56:	4b16      	ldr	r3, [pc, #88]	; (8020cb0 <__sfp+0x88>)
 8020c58:	60e3      	str	r3, [r4, #12]
 8020c5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020c5e:	6665      	str	r5, [r4, #100]	; 0x64
 8020c60:	f7ff f8a6 	bl	801fdb0 <__retarget_lock_init_recursive>
 8020c64:	f7ff ff96 	bl	8020b94 <__sfp_lock_release>
 8020c68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020c6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020c70:	6025      	str	r5, [r4, #0]
 8020c72:	61a5      	str	r5, [r4, #24]
 8020c74:	2208      	movs	r2, #8
 8020c76:	4629      	mov	r1, r5
 8020c78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020c7c:	f7ff f8d4 	bl	801fe28 <memset>
 8020c80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020c84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020c88:	4620      	mov	r0, r4
 8020c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c8c:	3468      	adds	r4, #104	; 0x68
 8020c8e:	e7d9      	b.n	8020c44 <__sfp+0x1c>
 8020c90:	2104      	movs	r1, #4
 8020c92:	4638      	mov	r0, r7
 8020c94:	f7ff ff62 	bl	8020b5c <__sfmoreglue>
 8020c98:	4604      	mov	r4, r0
 8020c9a:	6030      	str	r0, [r6, #0]
 8020c9c:	2800      	cmp	r0, #0
 8020c9e:	d1d5      	bne.n	8020c4c <__sfp+0x24>
 8020ca0:	f7ff ff78 	bl	8020b94 <__sfp_lock_release>
 8020ca4:	230c      	movs	r3, #12
 8020ca6:	603b      	str	r3, [r7, #0]
 8020ca8:	e7ee      	b.n	8020c88 <__sfp+0x60>
 8020caa:	bf00      	nop
 8020cac:	0802649c 	.word	0x0802649c
 8020cb0:	ffff0001 	.word	0xffff0001

08020cb4 <_fwalk_reent>:
 8020cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020cb8:	4606      	mov	r6, r0
 8020cba:	4688      	mov	r8, r1
 8020cbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020cc0:	2700      	movs	r7, #0
 8020cc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020cc6:	f1b9 0901 	subs.w	r9, r9, #1
 8020cca:	d505      	bpl.n	8020cd8 <_fwalk_reent+0x24>
 8020ccc:	6824      	ldr	r4, [r4, #0]
 8020cce:	2c00      	cmp	r4, #0
 8020cd0:	d1f7      	bne.n	8020cc2 <_fwalk_reent+0xe>
 8020cd2:	4638      	mov	r0, r7
 8020cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020cd8:	89ab      	ldrh	r3, [r5, #12]
 8020cda:	2b01      	cmp	r3, #1
 8020cdc:	d907      	bls.n	8020cee <_fwalk_reent+0x3a>
 8020cde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020ce2:	3301      	adds	r3, #1
 8020ce4:	d003      	beq.n	8020cee <_fwalk_reent+0x3a>
 8020ce6:	4629      	mov	r1, r5
 8020ce8:	4630      	mov	r0, r6
 8020cea:	47c0      	blx	r8
 8020cec:	4307      	orrs	r7, r0
 8020cee:	3568      	adds	r5, #104	; 0x68
 8020cf0:	e7e9      	b.n	8020cc6 <_fwalk_reent+0x12>

08020cf2 <__swhatbuf_r>:
 8020cf2:	b570      	push	{r4, r5, r6, lr}
 8020cf4:	460e      	mov	r6, r1
 8020cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020cfa:	2900      	cmp	r1, #0
 8020cfc:	b096      	sub	sp, #88	; 0x58
 8020cfe:	4614      	mov	r4, r2
 8020d00:	461d      	mov	r5, r3
 8020d02:	da08      	bge.n	8020d16 <__swhatbuf_r+0x24>
 8020d04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020d08:	2200      	movs	r2, #0
 8020d0a:	602a      	str	r2, [r5, #0]
 8020d0c:	061a      	lsls	r2, r3, #24
 8020d0e:	d410      	bmi.n	8020d32 <__swhatbuf_r+0x40>
 8020d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020d14:	e00e      	b.n	8020d34 <__swhatbuf_r+0x42>
 8020d16:	466a      	mov	r2, sp
 8020d18:	f000 fa4c 	bl	80211b4 <_fstat_r>
 8020d1c:	2800      	cmp	r0, #0
 8020d1e:	dbf1      	blt.n	8020d04 <__swhatbuf_r+0x12>
 8020d20:	9a01      	ldr	r2, [sp, #4]
 8020d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020d2a:	425a      	negs	r2, r3
 8020d2c:	415a      	adcs	r2, r3
 8020d2e:	602a      	str	r2, [r5, #0]
 8020d30:	e7ee      	b.n	8020d10 <__swhatbuf_r+0x1e>
 8020d32:	2340      	movs	r3, #64	; 0x40
 8020d34:	2000      	movs	r0, #0
 8020d36:	6023      	str	r3, [r4, #0]
 8020d38:	b016      	add	sp, #88	; 0x58
 8020d3a:	bd70      	pop	{r4, r5, r6, pc}

08020d3c <__smakebuf_r>:
 8020d3c:	898b      	ldrh	r3, [r1, #12]
 8020d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020d40:	079d      	lsls	r5, r3, #30
 8020d42:	4606      	mov	r6, r0
 8020d44:	460c      	mov	r4, r1
 8020d46:	d507      	bpl.n	8020d58 <__smakebuf_r+0x1c>
 8020d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020d4c:	6023      	str	r3, [r4, #0]
 8020d4e:	6123      	str	r3, [r4, #16]
 8020d50:	2301      	movs	r3, #1
 8020d52:	6163      	str	r3, [r4, #20]
 8020d54:	b002      	add	sp, #8
 8020d56:	bd70      	pop	{r4, r5, r6, pc}
 8020d58:	ab01      	add	r3, sp, #4
 8020d5a:	466a      	mov	r2, sp
 8020d5c:	f7ff ffc9 	bl	8020cf2 <__swhatbuf_r>
 8020d60:	9900      	ldr	r1, [sp, #0]
 8020d62:	4605      	mov	r5, r0
 8020d64:	4630      	mov	r0, r6
 8020d66:	f7ff f8e9 	bl	801ff3c <_malloc_r>
 8020d6a:	b948      	cbnz	r0, 8020d80 <__smakebuf_r+0x44>
 8020d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d70:	059a      	lsls	r2, r3, #22
 8020d72:	d4ef      	bmi.n	8020d54 <__smakebuf_r+0x18>
 8020d74:	f023 0303 	bic.w	r3, r3, #3
 8020d78:	f043 0302 	orr.w	r3, r3, #2
 8020d7c:	81a3      	strh	r3, [r4, #12]
 8020d7e:	e7e3      	b.n	8020d48 <__smakebuf_r+0xc>
 8020d80:	4b0d      	ldr	r3, [pc, #52]	; (8020db8 <__smakebuf_r+0x7c>)
 8020d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8020d84:	89a3      	ldrh	r3, [r4, #12]
 8020d86:	6020      	str	r0, [r4, #0]
 8020d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d8c:	81a3      	strh	r3, [r4, #12]
 8020d8e:	9b00      	ldr	r3, [sp, #0]
 8020d90:	6163      	str	r3, [r4, #20]
 8020d92:	9b01      	ldr	r3, [sp, #4]
 8020d94:	6120      	str	r0, [r4, #16]
 8020d96:	b15b      	cbz	r3, 8020db0 <__smakebuf_r+0x74>
 8020d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d9c:	4630      	mov	r0, r6
 8020d9e:	f000 fa1b 	bl	80211d8 <_isatty_r>
 8020da2:	b128      	cbz	r0, 8020db0 <__smakebuf_r+0x74>
 8020da4:	89a3      	ldrh	r3, [r4, #12]
 8020da6:	f023 0303 	bic.w	r3, r3, #3
 8020daa:	f043 0301 	orr.w	r3, r3, #1
 8020dae:	81a3      	strh	r3, [r4, #12]
 8020db0:	89a0      	ldrh	r0, [r4, #12]
 8020db2:	4305      	orrs	r5, r0
 8020db4:	81a5      	strh	r5, [r4, #12]
 8020db6:	e7cd      	b.n	8020d54 <__smakebuf_r+0x18>
 8020db8:	08020b51 	.word	0x08020b51

08020dbc <__malloc_lock>:
 8020dbc:	4801      	ldr	r0, [pc, #4]	; (8020dc4 <__malloc_lock+0x8>)
 8020dbe:	f7fe bff8 	b.w	801fdb2 <__retarget_lock_acquire_recursive>
 8020dc2:	bf00      	nop
 8020dc4:	20002d34 	.word	0x20002d34

08020dc8 <__malloc_unlock>:
 8020dc8:	4801      	ldr	r0, [pc, #4]	; (8020dd0 <__malloc_unlock+0x8>)
 8020dca:	f7fe bff3 	b.w	801fdb4 <__retarget_lock_release_recursive>
 8020dce:	bf00      	nop
 8020dd0:	20002d34 	.word	0x20002d34

08020dd4 <_realloc_r>:
 8020dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dd8:	4680      	mov	r8, r0
 8020dda:	4614      	mov	r4, r2
 8020ddc:	460e      	mov	r6, r1
 8020dde:	b921      	cbnz	r1, 8020dea <_realloc_r+0x16>
 8020de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020de4:	4611      	mov	r1, r2
 8020de6:	f7ff b8a9 	b.w	801ff3c <_malloc_r>
 8020dea:	b92a      	cbnz	r2, 8020df8 <_realloc_r+0x24>
 8020dec:	f7ff f83a 	bl	801fe64 <_free_r>
 8020df0:	4625      	mov	r5, r4
 8020df2:	4628      	mov	r0, r5
 8020df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020df8:	f000 fa10 	bl	802121c <_malloc_usable_size_r>
 8020dfc:	4284      	cmp	r4, r0
 8020dfe:	4607      	mov	r7, r0
 8020e00:	d802      	bhi.n	8020e08 <_realloc_r+0x34>
 8020e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020e06:	d812      	bhi.n	8020e2e <_realloc_r+0x5a>
 8020e08:	4621      	mov	r1, r4
 8020e0a:	4640      	mov	r0, r8
 8020e0c:	f7ff f896 	bl	801ff3c <_malloc_r>
 8020e10:	4605      	mov	r5, r0
 8020e12:	2800      	cmp	r0, #0
 8020e14:	d0ed      	beq.n	8020df2 <_realloc_r+0x1e>
 8020e16:	42bc      	cmp	r4, r7
 8020e18:	4622      	mov	r2, r4
 8020e1a:	4631      	mov	r1, r6
 8020e1c:	bf28      	it	cs
 8020e1e:	463a      	movcs	r2, r7
 8020e20:	f7fe ffda 	bl	801fdd8 <memcpy>
 8020e24:	4631      	mov	r1, r6
 8020e26:	4640      	mov	r0, r8
 8020e28:	f7ff f81c 	bl	801fe64 <_free_r>
 8020e2c:	e7e1      	b.n	8020df2 <_realloc_r+0x1e>
 8020e2e:	4635      	mov	r5, r6
 8020e30:	e7df      	b.n	8020df2 <_realloc_r+0x1e>

08020e32 <__ssputs_r>:
 8020e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020e36:	688e      	ldr	r6, [r1, #8]
 8020e38:	429e      	cmp	r6, r3
 8020e3a:	4682      	mov	sl, r0
 8020e3c:	460c      	mov	r4, r1
 8020e3e:	4690      	mov	r8, r2
 8020e40:	461f      	mov	r7, r3
 8020e42:	d838      	bhi.n	8020eb6 <__ssputs_r+0x84>
 8020e44:	898a      	ldrh	r2, [r1, #12]
 8020e46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020e4a:	d032      	beq.n	8020eb2 <__ssputs_r+0x80>
 8020e4c:	6825      	ldr	r5, [r4, #0]
 8020e4e:	6909      	ldr	r1, [r1, #16]
 8020e50:	eba5 0901 	sub.w	r9, r5, r1
 8020e54:	6965      	ldr	r5, [r4, #20]
 8020e56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020e5e:	3301      	adds	r3, #1
 8020e60:	444b      	add	r3, r9
 8020e62:	106d      	asrs	r5, r5, #1
 8020e64:	429d      	cmp	r5, r3
 8020e66:	bf38      	it	cc
 8020e68:	461d      	movcc	r5, r3
 8020e6a:	0553      	lsls	r3, r2, #21
 8020e6c:	d531      	bpl.n	8020ed2 <__ssputs_r+0xa0>
 8020e6e:	4629      	mov	r1, r5
 8020e70:	f7ff f864 	bl	801ff3c <_malloc_r>
 8020e74:	4606      	mov	r6, r0
 8020e76:	b950      	cbnz	r0, 8020e8e <__ssputs_r+0x5c>
 8020e78:	230c      	movs	r3, #12
 8020e7a:	f8ca 3000 	str.w	r3, [sl]
 8020e7e:	89a3      	ldrh	r3, [r4, #12]
 8020e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020e84:	81a3      	strh	r3, [r4, #12]
 8020e86:	f04f 30ff 	mov.w	r0, #4294967295
 8020e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e8e:	6921      	ldr	r1, [r4, #16]
 8020e90:	464a      	mov	r2, r9
 8020e92:	f7fe ffa1 	bl	801fdd8 <memcpy>
 8020e96:	89a3      	ldrh	r3, [r4, #12]
 8020e98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ea0:	81a3      	strh	r3, [r4, #12]
 8020ea2:	6126      	str	r6, [r4, #16]
 8020ea4:	6165      	str	r5, [r4, #20]
 8020ea6:	444e      	add	r6, r9
 8020ea8:	eba5 0509 	sub.w	r5, r5, r9
 8020eac:	6026      	str	r6, [r4, #0]
 8020eae:	60a5      	str	r5, [r4, #8]
 8020eb0:	463e      	mov	r6, r7
 8020eb2:	42be      	cmp	r6, r7
 8020eb4:	d900      	bls.n	8020eb8 <__ssputs_r+0x86>
 8020eb6:	463e      	mov	r6, r7
 8020eb8:	6820      	ldr	r0, [r4, #0]
 8020eba:	4632      	mov	r2, r6
 8020ebc:	4641      	mov	r1, r8
 8020ebe:	f7fe ff99 	bl	801fdf4 <memmove>
 8020ec2:	68a3      	ldr	r3, [r4, #8]
 8020ec4:	1b9b      	subs	r3, r3, r6
 8020ec6:	60a3      	str	r3, [r4, #8]
 8020ec8:	6823      	ldr	r3, [r4, #0]
 8020eca:	4433      	add	r3, r6
 8020ecc:	6023      	str	r3, [r4, #0]
 8020ece:	2000      	movs	r0, #0
 8020ed0:	e7db      	b.n	8020e8a <__ssputs_r+0x58>
 8020ed2:	462a      	mov	r2, r5
 8020ed4:	f7ff ff7e 	bl	8020dd4 <_realloc_r>
 8020ed8:	4606      	mov	r6, r0
 8020eda:	2800      	cmp	r0, #0
 8020edc:	d1e1      	bne.n	8020ea2 <__ssputs_r+0x70>
 8020ede:	6921      	ldr	r1, [r4, #16]
 8020ee0:	4650      	mov	r0, sl
 8020ee2:	f7fe ffbf 	bl	801fe64 <_free_r>
 8020ee6:	e7c7      	b.n	8020e78 <__ssputs_r+0x46>

08020ee8 <_svfiprintf_r>:
 8020ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eec:	4698      	mov	r8, r3
 8020eee:	898b      	ldrh	r3, [r1, #12]
 8020ef0:	061b      	lsls	r3, r3, #24
 8020ef2:	b09d      	sub	sp, #116	; 0x74
 8020ef4:	4607      	mov	r7, r0
 8020ef6:	460d      	mov	r5, r1
 8020ef8:	4614      	mov	r4, r2
 8020efa:	d50e      	bpl.n	8020f1a <_svfiprintf_r+0x32>
 8020efc:	690b      	ldr	r3, [r1, #16]
 8020efe:	b963      	cbnz	r3, 8020f1a <_svfiprintf_r+0x32>
 8020f00:	2140      	movs	r1, #64	; 0x40
 8020f02:	f7ff f81b 	bl	801ff3c <_malloc_r>
 8020f06:	6028      	str	r0, [r5, #0]
 8020f08:	6128      	str	r0, [r5, #16]
 8020f0a:	b920      	cbnz	r0, 8020f16 <_svfiprintf_r+0x2e>
 8020f0c:	230c      	movs	r3, #12
 8020f0e:	603b      	str	r3, [r7, #0]
 8020f10:	f04f 30ff 	mov.w	r0, #4294967295
 8020f14:	e0d1      	b.n	80210ba <_svfiprintf_r+0x1d2>
 8020f16:	2340      	movs	r3, #64	; 0x40
 8020f18:	616b      	str	r3, [r5, #20]
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8020f1e:	2320      	movs	r3, #32
 8020f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8020f28:	2330      	movs	r3, #48	; 0x30
 8020f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80210d4 <_svfiprintf_r+0x1ec>
 8020f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020f32:	f04f 0901 	mov.w	r9, #1
 8020f36:	4623      	mov	r3, r4
 8020f38:	469a      	mov	sl, r3
 8020f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f3e:	b10a      	cbz	r2, 8020f44 <_svfiprintf_r+0x5c>
 8020f40:	2a25      	cmp	r2, #37	; 0x25
 8020f42:	d1f9      	bne.n	8020f38 <_svfiprintf_r+0x50>
 8020f44:	ebba 0b04 	subs.w	fp, sl, r4
 8020f48:	d00b      	beq.n	8020f62 <_svfiprintf_r+0x7a>
 8020f4a:	465b      	mov	r3, fp
 8020f4c:	4622      	mov	r2, r4
 8020f4e:	4629      	mov	r1, r5
 8020f50:	4638      	mov	r0, r7
 8020f52:	f7ff ff6e 	bl	8020e32 <__ssputs_r>
 8020f56:	3001      	adds	r0, #1
 8020f58:	f000 80aa 	beq.w	80210b0 <_svfiprintf_r+0x1c8>
 8020f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f5e:	445a      	add	r2, fp
 8020f60:	9209      	str	r2, [sp, #36]	; 0x24
 8020f62:	f89a 3000 	ldrb.w	r3, [sl]
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	f000 80a2 	beq.w	80210b0 <_svfiprintf_r+0x1c8>
 8020f6c:	2300      	movs	r3, #0
 8020f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8020f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020f76:	f10a 0a01 	add.w	sl, sl, #1
 8020f7a:	9304      	str	r3, [sp, #16]
 8020f7c:	9307      	str	r3, [sp, #28]
 8020f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020f82:	931a      	str	r3, [sp, #104]	; 0x68
 8020f84:	4654      	mov	r4, sl
 8020f86:	2205      	movs	r2, #5
 8020f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f8c:	4851      	ldr	r0, [pc, #324]	; (80210d4 <_svfiprintf_r+0x1ec>)
 8020f8e:	f7df f93f 	bl	8000210 <memchr>
 8020f92:	9a04      	ldr	r2, [sp, #16]
 8020f94:	b9d8      	cbnz	r0, 8020fce <_svfiprintf_r+0xe6>
 8020f96:	06d0      	lsls	r0, r2, #27
 8020f98:	bf44      	itt	mi
 8020f9a:	2320      	movmi	r3, #32
 8020f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020fa0:	0711      	lsls	r1, r2, #28
 8020fa2:	bf44      	itt	mi
 8020fa4:	232b      	movmi	r3, #43	; 0x2b
 8020fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020faa:	f89a 3000 	ldrb.w	r3, [sl]
 8020fae:	2b2a      	cmp	r3, #42	; 0x2a
 8020fb0:	d015      	beq.n	8020fde <_svfiprintf_r+0xf6>
 8020fb2:	9a07      	ldr	r2, [sp, #28]
 8020fb4:	4654      	mov	r4, sl
 8020fb6:	2000      	movs	r0, #0
 8020fb8:	f04f 0c0a 	mov.w	ip, #10
 8020fbc:	4621      	mov	r1, r4
 8020fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020fc2:	3b30      	subs	r3, #48	; 0x30
 8020fc4:	2b09      	cmp	r3, #9
 8020fc6:	d94e      	bls.n	8021066 <_svfiprintf_r+0x17e>
 8020fc8:	b1b0      	cbz	r0, 8020ff8 <_svfiprintf_r+0x110>
 8020fca:	9207      	str	r2, [sp, #28]
 8020fcc:	e014      	b.n	8020ff8 <_svfiprintf_r+0x110>
 8020fce:	eba0 0308 	sub.w	r3, r0, r8
 8020fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8020fd6:	4313      	orrs	r3, r2
 8020fd8:	9304      	str	r3, [sp, #16]
 8020fda:	46a2      	mov	sl, r4
 8020fdc:	e7d2      	b.n	8020f84 <_svfiprintf_r+0x9c>
 8020fde:	9b03      	ldr	r3, [sp, #12]
 8020fe0:	1d19      	adds	r1, r3, #4
 8020fe2:	681b      	ldr	r3, [r3, #0]
 8020fe4:	9103      	str	r1, [sp, #12]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	bfbb      	ittet	lt
 8020fea:	425b      	neglt	r3, r3
 8020fec:	f042 0202 	orrlt.w	r2, r2, #2
 8020ff0:	9307      	strge	r3, [sp, #28]
 8020ff2:	9307      	strlt	r3, [sp, #28]
 8020ff4:	bfb8      	it	lt
 8020ff6:	9204      	strlt	r2, [sp, #16]
 8020ff8:	7823      	ldrb	r3, [r4, #0]
 8020ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8020ffc:	d10c      	bne.n	8021018 <_svfiprintf_r+0x130>
 8020ffe:	7863      	ldrb	r3, [r4, #1]
 8021000:	2b2a      	cmp	r3, #42	; 0x2a
 8021002:	d135      	bne.n	8021070 <_svfiprintf_r+0x188>
 8021004:	9b03      	ldr	r3, [sp, #12]
 8021006:	1d1a      	adds	r2, r3, #4
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	9203      	str	r2, [sp, #12]
 802100c:	2b00      	cmp	r3, #0
 802100e:	bfb8      	it	lt
 8021010:	f04f 33ff 	movlt.w	r3, #4294967295
 8021014:	3402      	adds	r4, #2
 8021016:	9305      	str	r3, [sp, #20]
 8021018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80210e4 <_svfiprintf_r+0x1fc>
 802101c:	7821      	ldrb	r1, [r4, #0]
 802101e:	2203      	movs	r2, #3
 8021020:	4650      	mov	r0, sl
 8021022:	f7df f8f5 	bl	8000210 <memchr>
 8021026:	b140      	cbz	r0, 802103a <_svfiprintf_r+0x152>
 8021028:	2340      	movs	r3, #64	; 0x40
 802102a:	eba0 000a 	sub.w	r0, r0, sl
 802102e:	fa03 f000 	lsl.w	r0, r3, r0
 8021032:	9b04      	ldr	r3, [sp, #16]
 8021034:	4303      	orrs	r3, r0
 8021036:	3401      	adds	r4, #1
 8021038:	9304      	str	r3, [sp, #16]
 802103a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802103e:	4826      	ldr	r0, [pc, #152]	; (80210d8 <_svfiprintf_r+0x1f0>)
 8021040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021044:	2206      	movs	r2, #6
 8021046:	f7df f8e3 	bl	8000210 <memchr>
 802104a:	2800      	cmp	r0, #0
 802104c:	d038      	beq.n	80210c0 <_svfiprintf_r+0x1d8>
 802104e:	4b23      	ldr	r3, [pc, #140]	; (80210dc <_svfiprintf_r+0x1f4>)
 8021050:	bb1b      	cbnz	r3, 802109a <_svfiprintf_r+0x1b2>
 8021052:	9b03      	ldr	r3, [sp, #12]
 8021054:	3307      	adds	r3, #7
 8021056:	f023 0307 	bic.w	r3, r3, #7
 802105a:	3308      	adds	r3, #8
 802105c:	9303      	str	r3, [sp, #12]
 802105e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021060:	4433      	add	r3, r6
 8021062:	9309      	str	r3, [sp, #36]	; 0x24
 8021064:	e767      	b.n	8020f36 <_svfiprintf_r+0x4e>
 8021066:	fb0c 3202 	mla	r2, ip, r2, r3
 802106a:	460c      	mov	r4, r1
 802106c:	2001      	movs	r0, #1
 802106e:	e7a5      	b.n	8020fbc <_svfiprintf_r+0xd4>
 8021070:	2300      	movs	r3, #0
 8021072:	3401      	adds	r4, #1
 8021074:	9305      	str	r3, [sp, #20]
 8021076:	4619      	mov	r1, r3
 8021078:	f04f 0c0a 	mov.w	ip, #10
 802107c:	4620      	mov	r0, r4
 802107e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021082:	3a30      	subs	r2, #48	; 0x30
 8021084:	2a09      	cmp	r2, #9
 8021086:	d903      	bls.n	8021090 <_svfiprintf_r+0x1a8>
 8021088:	2b00      	cmp	r3, #0
 802108a:	d0c5      	beq.n	8021018 <_svfiprintf_r+0x130>
 802108c:	9105      	str	r1, [sp, #20]
 802108e:	e7c3      	b.n	8021018 <_svfiprintf_r+0x130>
 8021090:	fb0c 2101 	mla	r1, ip, r1, r2
 8021094:	4604      	mov	r4, r0
 8021096:	2301      	movs	r3, #1
 8021098:	e7f0      	b.n	802107c <_svfiprintf_r+0x194>
 802109a:	ab03      	add	r3, sp, #12
 802109c:	9300      	str	r3, [sp, #0]
 802109e:	462a      	mov	r2, r5
 80210a0:	4b0f      	ldr	r3, [pc, #60]	; (80210e0 <_svfiprintf_r+0x1f8>)
 80210a2:	a904      	add	r1, sp, #16
 80210a4:	4638      	mov	r0, r7
 80210a6:	f3af 8000 	nop.w
 80210aa:	1c42      	adds	r2, r0, #1
 80210ac:	4606      	mov	r6, r0
 80210ae:	d1d6      	bne.n	802105e <_svfiprintf_r+0x176>
 80210b0:	89ab      	ldrh	r3, [r5, #12]
 80210b2:	065b      	lsls	r3, r3, #25
 80210b4:	f53f af2c 	bmi.w	8020f10 <_svfiprintf_r+0x28>
 80210b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80210ba:	b01d      	add	sp, #116	; 0x74
 80210bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210c0:	ab03      	add	r3, sp, #12
 80210c2:	9300      	str	r3, [sp, #0]
 80210c4:	462a      	mov	r2, r5
 80210c6:	4b06      	ldr	r3, [pc, #24]	; (80210e0 <_svfiprintf_r+0x1f8>)
 80210c8:	a904      	add	r1, sp, #16
 80210ca:	4638      	mov	r0, r7
 80210cc:	f7ff f972 	bl	80203b4 <_printf_i>
 80210d0:	e7eb      	b.n	80210aa <_svfiprintf_r+0x1c2>
 80210d2:	bf00      	nop
 80210d4:	080264a0 	.word	0x080264a0
 80210d8:	080264aa 	.word	0x080264aa
 80210dc:	00000000 	.word	0x00000000
 80210e0:	08020e33 	.word	0x08020e33
 80210e4:	080264a6 	.word	0x080264a6

080210e8 <__sread>:
 80210e8:	b510      	push	{r4, lr}
 80210ea:	460c      	mov	r4, r1
 80210ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210f0:	f000 f89c 	bl	802122c <_read_r>
 80210f4:	2800      	cmp	r0, #0
 80210f6:	bfab      	itete	ge
 80210f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80210fa:	89a3      	ldrhlt	r3, [r4, #12]
 80210fc:	181b      	addge	r3, r3, r0
 80210fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021102:	bfac      	ite	ge
 8021104:	6563      	strge	r3, [r4, #84]	; 0x54
 8021106:	81a3      	strhlt	r3, [r4, #12]
 8021108:	bd10      	pop	{r4, pc}

0802110a <__swrite>:
 802110a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802110e:	461f      	mov	r7, r3
 8021110:	898b      	ldrh	r3, [r1, #12]
 8021112:	05db      	lsls	r3, r3, #23
 8021114:	4605      	mov	r5, r0
 8021116:	460c      	mov	r4, r1
 8021118:	4616      	mov	r6, r2
 802111a:	d505      	bpl.n	8021128 <__swrite+0x1e>
 802111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021120:	2302      	movs	r3, #2
 8021122:	2200      	movs	r2, #0
 8021124:	f000 f868 	bl	80211f8 <_lseek_r>
 8021128:	89a3      	ldrh	r3, [r4, #12]
 802112a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802112e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021132:	81a3      	strh	r3, [r4, #12]
 8021134:	4632      	mov	r2, r6
 8021136:	463b      	mov	r3, r7
 8021138:	4628      	mov	r0, r5
 802113a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802113e:	f000 b817 	b.w	8021170 <_write_r>

08021142 <__sseek>:
 8021142:	b510      	push	{r4, lr}
 8021144:	460c      	mov	r4, r1
 8021146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802114a:	f000 f855 	bl	80211f8 <_lseek_r>
 802114e:	1c43      	adds	r3, r0, #1
 8021150:	89a3      	ldrh	r3, [r4, #12]
 8021152:	bf15      	itete	ne
 8021154:	6560      	strne	r0, [r4, #84]	; 0x54
 8021156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802115a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802115e:	81a3      	strheq	r3, [r4, #12]
 8021160:	bf18      	it	ne
 8021162:	81a3      	strhne	r3, [r4, #12]
 8021164:	bd10      	pop	{r4, pc}

08021166 <__sclose>:
 8021166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802116a:	f000 b813 	b.w	8021194 <_close_r>
	...

08021170 <_write_r>:
 8021170:	b538      	push	{r3, r4, r5, lr}
 8021172:	4d07      	ldr	r5, [pc, #28]	; (8021190 <_write_r+0x20>)
 8021174:	4604      	mov	r4, r0
 8021176:	4608      	mov	r0, r1
 8021178:	4611      	mov	r1, r2
 802117a:	2200      	movs	r2, #0
 802117c:	602a      	str	r2, [r5, #0]
 802117e:	461a      	mov	r2, r3
 8021180:	f7e2 fa4d 	bl	800361e <_write>
 8021184:	1c43      	adds	r3, r0, #1
 8021186:	d102      	bne.n	802118e <_write_r+0x1e>
 8021188:	682b      	ldr	r3, [r5, #0]
 802118a:	b103      	cbz	r3, 802118e <_write_r+0x1e>
 802118c:	6023      	str	r3, [r4, #0]
 802118e:	bd38      	pop	{r3, r4, r5, pc}
 8021190:	20002d40 	.word	0x20002d40

08021194 <_close_r>:
 8021194:	b538      	push	{r3, r4, r5, lr}
 8021196:	4d06      	ldr	r5, [pc, #24]	; (80211b0 <_close_r+0x1c>)
 8021198:	2300      	movs	r3, #0
 802119a:	4604      	mov	r4, r0
 802119c:	4608      	mov	r0, r1
 802119e:	602b      	str	r3, [r5, #0]
 80211a0:	f7e2 fa59 	bl	8003656 <_close>
 80211a4:	1c43      	adds	r3, r0, #1
 80211a6:	d102      	bne.n	80211ae <_close_r+0x1a>
 80211a8:	682b      	ldr	r3, [r5, #0]
 80211aa:	b103      	cbz	r3, 80211ae <_close_r+0x1a>
 80211ac:	6023      	str	r3, [r4, #0]
 80211ae:	bd38      	pop	{r3, r4, r5, pc}
 80211b0:	20002d40 	.word	0x20002d40

080211b4 <_fstat_r>:
 80211b4:	b538      	push	{r3, r4, r5, lr}
 80211b6:	4d07      	ldr	r5, [pc, #28]	; (80211d4 <_fstat_r+0x20>)
 80211b8:	2300      	movs	r3, #0
 80211ba:	4604      	mov	r4, r0
 80211bc:	4608      	mov	r0, r1
 80211be:	4611      	mov	r1, r2
 80211c0:	602b      	str	r3, [r5, #0]
 80211c2:	f7e2 fa54 	bl	800366e <_fstat>
 80211c6:	1c43      	adds	r3, r0, #1
 80211c8:	d102      	bne.n	80211d0 <_fstat_r+0x1c>
 80211ca:	682b      	ldr	r3, [r5, #0]
 80211cc:	b103      	cbz	r3, 80211d0 <_fstat_r+0x1c>
 80211ce:	6023      	str	r3, [r4, #0]
 80211d0:	bd38      	pop	{r3, r4, r5, pc}
 80211d2:	bf00      	nop
 80211d4:	20002d40 	.word	0x20002d40

080211d8 <_isatty_r>:
 80211d8:	b538      	push	{r3, r4, r5, lr}
 80211da:	4d06      	ldr	r5, [pc, #24]	; (80211f4 <_isatty_r+0x1c>)
 80211dc:	2300      	movs	r3, #0
 80211de:	4604      	mov	r4, r0
 80211e0:	4608      	mov	r0, r1
 80211e2:	602b      	str	r3, [r5, #0]
 80211e4:	f7e2 fa53 	bl	800368e <_isatty>
 80211e8:	1c43      	adds	r3, r0, #1
 80211ea:	d102      	bne.n	80211f2 <_isatty_r+0x1a>
 80211ec:	682b      	ldr	r3, [r5, #0]
 80211ee:	b103      	cbz	r3, 80211f2 <_isatty_r+0x1a>
 80211f0:	6023      	str	r3, [r4, #0]
 80211f2:	bd38      	pop	{r3, r4, r5, pc}
 80211f4:	20002d40 	.word	0x20002d40

080211f8 <_lseek_r>:
 80211f8:	b538      	push	{r3, r4, r5, lr}
 80211fa:	4d07      	ldr	r5, [pc, #28]	; (8021218 <_lseek_r+0x20>)
 80211fc:	4604      	mov	r4, r0
 80211fe:	4608      	mov	r0, r1
 8021200:	4611      	mov	r1, r2
 8021202:	2200      	movs	r2, #0
 8021204:	602a      	str	r2, [r5, #0]
 8021206:	461a      	mov	r2, r3
 8021208:	f7e2 fa4c 	bl	80036a4 <_lseek>
 802120c:	1c43      	adds	r3, r0, #1
 802120e:	d102      	bne.n	8021216 <_lseek_r+0x1e>
 8021210:	682b      	ldr	r3, [r5, #0]
 8021212:	b103      	cbz	r3, 8021216 <_lseek_r+0x1e>
 8021214:	6023      	str	r3, [r4, #0]
 8021216:	bd38      	pop	{r3, r4, r5, pc}
 8021218:	20002d40 	.word	0x20002d40

0802121c <_malloc_usable_size_r>:
 802121c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021220:	1f18      	subs	r0, r3, #4
 8021222:	2b00      	cmp	r3, #0
 8021224:	bfbc      	itt	lt
 8021226:	580b      	ldrlt	r3, [r1, r0]
 8021228:	18c0      	addlt	r0, r0, r3
 802122a:	4770      	bx	lr

0802122c <_read_r>:
 802122c:	b538      	push	{r3, r4, r5, lr}
 802122e:	4d07      	ldr	r5, [pc, #28]	; (802124c <_read_r+0x20>)
 8021230:	4604      	mov	r4, r0
 8021232:	4608      	mov	r0, r1
 8021234:	4611      	mov	r1, r2
 8021236:	2200      	movs	r2, #0
 8021238:	602a      	str	r2, [r5, #0]
 802123a:	461a      	mov	r2, r3
 802123c:	f7e2 f9d2 	bl	80035e4 <_read>
 8021240:	1c43      	adds	r3, r0, #1
 8021242:	d102      	bne.n	802124a <_read_r+0x1e>
 8021244:	682b      	ldr	r3, [r5, #0]
 8021246:	b103      	cbz	r3, 802124a <_read_r+0x1e>
 8021248:	6023      	str	r3, [r4, #0]
 802124a:	bd38      	pop	{r3, r4, r5, pc}
 802124c:	20002d40 	.word	0x20002d40

08021250 <_init>:
 8021250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021252:	bf00      	nop
 8021254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021256:	bc08      	pop	{r3}
 8021258:	469e      	mov	lr, r3
 802125a:	4770      	bx	lr

0802125c <_fini>:
 802125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802125e:	bf00      	nop
 8021260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021262:	bc08      	pop	{r3}
 8021264:	469e      	mov	lr, r3
 8021266:	4770      	bx	lr
