/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.07.2022 06:58:14

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 94144;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteEvalTensor tflEvalTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 2304, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data2[32*3*3*3] = { 
  /* [0][0][][] */ -77,87,76, 5,-28,-89, 116,12,-63, 
  /* [0][1][][] */ -109,113,-6, 32,-45,-18, -57,-3,53, 
  /* [0][2][][] */ 127,-31,25, 109,-33,-5, -88,90,32, 
  /* [1][0][][] */ 30,36,-23, 127,-6,-106, 109,-77,26, 
  /* [1][1][][] */ 23,-44,-68, 123,-114,-10, 53,108,-53, 
  /* [1][2][][] */ 90,-96,-125, 74,86,117, 5,-62,-10, 
  /* [2][0][][] */ -3,-127,-45, 73,36,-74, -37,-91,88, 
  /* [2][1][][] */ -17,-90,-62, -44,71,72, -49,2,16, 
  /* [2][2][][] */ 21,111,-107, 78,-52,50, -70,100,-95, 
  /* [3][0][][] */ -116,127,-21, 32,35,24, 102,-69,-11, 
  /* [3][1][][] */ -70,-26,93, -30,-33,1, -16,-37,36, 
  /* [3][2][][] */ -107,-103,14, 79,48,108, 106,14,-67, 
  /* [4][0][][] */ -10,106,-119, 1,33,26, 30,118,112, 
  /* [4][1][][] */ 100,-62,63, -11,-114,115, -23,47,31, 
  /* [4][2][][] */ -54,83,-59, 70,40,89, -102,54,127, 
  /* [5][0][][] */ 63,6,59, 118,61,-5, 7,-44,-111, 
  /* [5][1][][] */ 5,-66,-21, -104,-71,49, -90,-21,-87, 
  /* [5][2][][] */ 7,-127,1, 29,106,68, 69,-7,79, 
  /* [6][0][][] */ -80,-14,-80, 29,54,-68, -27,94,-39, 
  /* [6][1][][] */ 18,-16,-13, -9,-19,-80, 34,-101,53, 
  /* [6][2][][] */ -64,25,-70, 14,39,-29, -82,91,-127, 
  /* [7][0][][] */ -36,56,-27, 44,-70,99, 119,107,55, 
  /* [7][1][][] */ 127,-4,-121, 96,-77,28, -15,120,98, 
  /* [7][2][][] */ 29,-115,-114, 68,-99,-30, -4,14,-55, 
  /* [8][0][][] */ 43,-86,-84, 125,-7,67, 124,-63,-19, 
  /* [8][1][][] */ -89,23,86, -29,-54,-64, -61,-127,42, 
  /* [8][2][][] */ 2,10,-69, 44,-76,70, -112,67,87, 
  /* [9][0][][] */ 6,9,95, 65,31,69, 86,127,-69, 
  /* [9][1][][] */ -9,46,101, 125,-120,80, 118,42,20, 
  /* [9][2][][] */ 59,91,1, -113,78,41, -100,-87,29, 
  /* [10][0][][] */ -102,-100,-56, 33,-7,16, -46,-19,-89, 
  /* [10][1][][] */ -54,-76,118, -80,-14,-36, -57,20,-12, 
  /* [10][2][][] */ -35,79,-123, -91,-127,94, 29,-52,-4, 
  /* [11][0][][] */ 109,-108,35, 120,-4,91, 2,54,-63, 
  /* [11][1][][] */ 108,11,112, 90,-108,103, 90,2,38, 
  /* [11][2][][] */ 93,-127,-93, -25,-45,22, 70,-59,-38, 
  /* [12][0][][] */ 57,-61,24, 66,-75,-8, 53,-83,-38, 
  /* [12][1][][] */ 127,70,33, -2,-22,-78, -83,114,24, 
  /* [12][2][][] */ 9,-95,-31, -50,41,19, 0,-17,-68, 
  /* [13][0][][] */ 7,-31,-114, -12,90,26, -67,42,-16, 
  /* [13][1][][] */ -55,-80,71, 90,-85,-77, -127,10,106, 
  /* [13][2][][] */ 61,100,24, -43,-122,78, -68,-49,92, 
  /* [14][0][][] */ -72,-6,127, -38,-20,24, -101,-78,122, 
  /* [14][1][][] */ -106,-61,47, -15,18,38, 84,-54,-25, 
  /* [14][2][][] */ -102,109,106, -41,95,26, -76,10,-105, 
  /* [15][0][][] */ -71,-87,55, 127,17,-20, 82,91,-86, 
  /* [15][1][][] */ -54,-10,6, -11,-47,-10, -49,86,115, 
  /* [15][2][][] */ 83,93,-108, 18,15,60, 11,104,76, 
  /* [16][0][][] */ -97,52,-24, -37,-54,-21, -121,-79,127, 
  /* [16][1][][] */ -6,97,97, 117,-31,24, 85,-118,-54, 
  /* [16][2][][] */ -60,-74,-17, 92,-76,-23, -75,32,-99, 
  /* [17][0][][] */ -51,17,31, -26,50,-64, 5,-24,-46, 
  /* [17][1][][] */ 27,12,109, -7,-44,-34, 109,-46,-62, 
  /* [17][2][][] */ -52,127,30, -20,-40,-69, -72,-101,72, 
  /* [18][0][][] */ -78,-122,-8, -34,-23,-40, 20,-89,-32, 
  /* [18][1][][] */ 43,-45,-36, 101,65,-94, -74,-86,-13, 
  /* [18][2][][] */ 19,-31,112, 127,39,16, -42,-38,113, 
  /* [19][0][][] */ -40,-3,37, 99,-111,110, -32,20,-32, 
  /* [19][1][][] */ -17,31,98, -127,-52,-21, 77,-25,94, 
  /* [19][2][][] */ 6,104,127, 81,29,78, 36,-94,-119, 
  /* [20][0][][] */ -76,32,50, 5,-15,28, -6,-1,-102, 
  /* [20][1][][] */ -66,-28,-105, 26,-98,-55, -67,-81,118, 
  /* [20][2][][] */ 121,56,116, -98,79,-30, 35,127,31, 
  /* [21][0][][] */ 28,-39,-4, -59,-49,87, 127,124,-39, 
  /* [21][1][][] */ -60,-112,34, -68,-37,112, -75,76,76, 
  /* [21][2][][] */ 64,38,-23, 89,-12,25, 96,26,90, 
  /* [22][0][][] */ -120,127,-45, 56,6,21, -98,-116,-7, 
  /* [22][1][][] */ -85,-19,-45, 33,-97,-104, 111,-86,35, 
  /* [22][2][][] */ -1,-14,54, 110,38,-9, -4,-16,91, 
  /* [23][0][][] */ -34,-34,-101, -3,98,121, -78,-90,-32, 
  /* [23][1][][] */ 62,-20,91, -38,82,39, 125,87,56, 
  /* [23][2][][] */ -127,61,-99, 87,-124,-55, -55,-19,111, 
  /* [24][0][][] */ 73,81,84, -108,-51,45, 7,15,58, 
  /* [24][1][][] */ -127,-54,-104, -19,123,-19, -60,-25,105, 
  /* [24][2][][] */ -86,-41,75, 28,-18,40, 114,-105,-72, 
  /* [25][0][][] */ -68,-112,-103, 75,-24,-102, 9,-58,-69, 
  /* [25][1][][] */ 27,48,-58, 76,-92,-42, 56,-79,112, 
  /* [25][2][][] */ 100,127,115, -108,-9,90, -110,39,-86, 
  /* [26][0][][] */ 118,109,127, -114,86,77, -102,32,76, 
  /* [26][1][][] */ -18,64,-99, -63,-56,53, 7,103,53, 
  /* [26][2][][] */ -80,1,-6, 57,-39,-55, -39,12,44, 
  /* [27][0][][] */ 125,89,11, -70,-49,-90, -20,21,10, 
  /* [27][1][][] */ -76,-82,33, 70,127,-90, -92,5,-73, 
  /* [27][2][][] */ 11,-87,-58, 48,100,-89, 92,-104,99, 
  /* [28][0][][] */ 72,32,118, -91,-49,-95, -52,-82,-101, 
  /* [28][1][][] */ 75,-5,-66, -114,-37,115, 127,66,118, 
  /* [28][2][][] */ 17,-11,68, -49,-59,-84, 61,-100,79, 
  /* [29][0][][] */ 25,-42,20, 31,95,-19, -59,65,93, 
  /* [29][1][][] */ -37,115,59, -122,-20,-100, -94,64,111, 
  /* [29][2][][] */ 58,25,-95, 110,117,127, 21,-50,8, 
  /* [30][0][][] */ -107,39,45, 28,-90,72, -34,-103,101, 
  /* [30][1][][] */ 76,62,-127, 18,101,108, 32,-66,-55, 
  /* [30][2][][] */ 45,35,-15, 33,22,1, 67,1,-16, 
  /* [31][0][][] */ 67,50,-39, 15,-114,115, -119,-65,-83, 
  /* [31][1][][] */ 40,72,73, 27,-127,-118, -98,-55,1, 
  /* [31][2][][] */ -114,-91,-47, 94,-36,52, -39,-49,62, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 32,3,3,3 } };
const TfArray<32, float> quant2_scale = { 32, { 0.0011707498924806714, 0.0010456620948389173, 0.0011420741211622953, 0.0010911725694313645, 0.0010880363406613469, 0.0010797152062878013, 0.0011577713303267956, 0.0010987793793901801, 0.00098355673253536224, 0.00098664266988635063, 0.0010244367877021432, 0.0010636275401338935, 0.0011665080673992634, 0.0011314396979287267, 0.0010328596690669656, 0.001102304900996387, 0.00099266937468200922, 0.0010756978299468756, 0.0010248324833810329, 0.001128095667809248, 0.0011310254922136664, 0.0010299355490133166, 0.001090693986043334, 0.0010314288083463907, 0.0010559386573731899, 0.0011258514132350683, 0.0010822939220815897, 0.0011705850483849645, 0.0010369038209319115, 0.0010829248931258917, 0.0011362847872078419, 0.0010530037106946111, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[32] = { 3269, 3679, -380, 364, -2764, 288, -1047, 2294, -909, 2637, 2211, 614, 3986, -2578, 3129, 2119, 3440, 1215, 2920, -2987, 1687, -2246, 1778, 316, 572, -960, -358, 1734, 1301, -2806, -2304, -1211, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 4.5911760935268831e-06, 4.1006360333994962e-06, 4.4787225306208711e-06, 4.2791084524651524e-06, 4.2668093556130771e-06, 4.2341775952081662e-06, 4.5402798605209682e-06, 4.3089389691886026e-06, 3.85708563044318e-06, 3.8691873669449706e-06, 4.0173995330405887e-06, 4.1710886762302835e-06, 4.5745418901788071e-06, 4.4370185605657753e-06, 4.050430106872227e-06, 4.3227646528976038e-06, 3.8928214962652419e-06, 4.2184233279840555e-06, 4.0189511310018133e-06, 4.4239050112082623e-06, 4.4353942030284088e-06, 4.038963197672274e-06, 4.2772317101480439e-06, 4.044818979309639e-06, 4.1409361983824056e-06, 4.4151038309792057e-06, 4.2442902667971794e-06, 4.5905298975412734e-06, 4.0662898754817434e-06, 4.2467645471333526e-06, 4.4560188143805135e-06, 4.1294265429314692e-06, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[16*3*3*32] = { 
  /* [0][0][][] */ -64,-51,-64,117,-31,-97,106,-61,108,-11,-103,-28,-36,-90,69,-50,70,-65,101,89,56,105,83,25,121,-25,-54,81,1,-39,-67,85, 12,-7,101,12,-46,-47,-64,-116,-70,48,-117,37,91,86,57,38,12,8,-98,113,70,-87,12,84,53,14,-54,-9,8,-62,-116,-94, -103,-16,-90,26,-50,44,37,103,-66,83,72,64,-43,-9,-45,58,51,-68,33,12,34,75,-103,59,65,-87,52,-113,-79,-59,-82,22, 
  /* [0][1][][] */ 70,-78,-55,122,71,-21,67,-120,-55,-14,-105,-44,-95,-47,92,82,-12,92,-53,76,119,100,20,3,69,17,11,35,29,97,43,-94, 38,-127,52,-40,11,36,109,2,16,97,-34,-73,-106,19,104,80,108,-64,-19,42,-84,55,35,-7,-76,-52,-101,-103,-79,-53,-4,-48, 54,-2,-21,57,58,75,28,-110,-80,73,83,73,-66,-36,7,96,-111,-1,78,-6,-77,-26,26,76,66,-5,84,68,-81,15,-24,20, 
  /* [0][2][][] */ 5,-43,-77,-57,-93,85,44,61,-120,-39,100,-57,-105,-66,-57,-2,29,-9,72,60,53,-21,40,-8,-86,-30,-8,3,63,-27,-111,-110, -19,-94,-59,-49,1,-46,41,88,-83,-44,91,112,42,-80,9,61,20,-34,93,51,39,10,-3,58,82,-40,-37,48,-55,-88,-108,-18, -51,17,108,-5,-17,97,-30,91,56,37,69,98,109,38,-41,98,-31,-25,58,86,99,106,-17,100,28,-96,83,-79,-35,-64,-34,37, 
  /* [1][0][][] */ -70,106,-96,-79,7,-33,69,43,-92,-55,-58,20,-87,48,4,-15,55,105,44,108,83,-25,-72,25,110,-97,-12,79,62,46,24,38, -55,70,110,-2,27,-11,-95,-65,-37,-23,109,-17,-32,-74,114,112,92,-1,75,87,-77,11,-69,-69,-41,82,-41,-17,36,-100,-78,29, -63,47,16,66,82,-45,122,-5,-11,72,41,-47,32,96,110,-1,94,118,-94,-63,89,-54,99,92,37,46,58,-34,-89,-113,-55,0, 
  /* [1][1][][] */ -91,16,-5,-68,54,-11,19,-91,56,39,3,-61,58,88,89,-14,14,-34,-32,87,-58,44,42,22,0,-57,117,-24,38,21,-56,-45, -108,12,88,-1,46,-105,3,9,-40,-7,62,-73,39,43,83,-18,42,-82,-117,97,-9,-60,-18,86,73,-72,23,19,67,-107,46,70, -9,-73,13,-38,-54,-70,88,53,-4,-36,-8,-41,64,-60,80,117,58,-48,46,-48,-46,63,-43,90,-100,-58,48,93,84,33,114,-30, 
  /* [1][2][][] */ 12,28,-17,-5,113,-107,110,43,2,0,-100,108,-100,-28,-68,-57,75,0,-32,-93,54,-29,35,-105,-12,-47,-36,21,-117,71,102,56, 127,-57,-20,97,79,-81,19,74,-84,95,-90,-58,69,36,86,-50,-96,-75,-5,127,42,-65,-81,109,92,98,26,-95,-33,93,-110,-27, -29,-72,49,-73,61,-86,-35,56,64,82,15,-53,39,0,-19,-106,14,29,-117,-31,-86,-42,-104,18,116,65,66,-119,49,107,83,107, 
  /* [2][0][][] */ -86,79,-74,-77,17,93,-80,-107,92,-2,-35,106,41,-49,-72,73,-40,-84,-58,-93,15,30,37,11,63,81,109,127,67,103,3,-67, 68,-35,-64,-30,42,-59,-57,12,51,-19,71,95,22,65,-85,79,2,65,86,-57,49,102,53,0,53,19,-14,62,46,99,-20,-37, 34,109,84,-50,-78,-63,45,91,-50,-101,-78,-2,118,70,-98,7,55,38,-10,77,-100,33,-66,-98,59,-56,84,98,53,71,93,25, 
  /* [2][1][][] */ -36,93,-20,-3,4,100,-59,-103,111,-45,-124,-33,22,96,-69,-89,65,-61,-112,-21,-8,-61,-9,87,119,50,65,106,23,48,14,117, -24,41,-29,87,81,-2,-55,-28,-31,29,-81,5,-80,71,46,-102,46,-22,-89,-108,77,-101,-81,-89,-83,-96,-15,-84,-93,-23,84,59, 114,-83,82,94,76,65,25,-46,103,-5,-95,-107,4,-80,-26,106,-11,-34,42,-28,74,-36,69,50,33,-9,-72,-58,-118,38,-105,-3, 
  /* [2][2][][] */ -41,102,75,17,-32,125,-26,-97,93,-46,-48,-21,103,-70,-87,-45,-35,108,98,55,52,-72,3,29,110,98,29,26,57,87,-96,-81, 15,-36,-110,-113,24,-82,-15,88,-66,107,33,107,123,34,-27,36,40,66,57,22,-73,75,-9,-12,79,-61,89,68,19,34,31,-108, 126,-20,-17,97,-4,-3,111,106,57,-31,91,-37,73,2,89,-44,68,69,-53,-82,15,-47,0,48,-11,-105,-7,61,50,71,-11,-57, 
  /* [3][0][][] */ -63,55,17,8,-31,96,-31,119,-30,-20,9,117,91,83,68,0,-2,-100,52,18,-65,77,83,-60,-17,-87,-48,112,96,-35,2,107, 26,119,104,17,-31,6,41,28,-32,-26,-51,48,14,-23,-18,35,-121,-96,59,103,-109,89,-96,-120,-123,69,71,84,-55,-43,108,-39, -58,63,58,-108,-2,93,90,110,27,-92,-106,118,-51,-84,48,-72,-61,-88,109,94,83,87,-37,-71,-79,4,5,-8,80,-73,5,94, 
  /* [3][1][][] */ 21,-64,72,73,-85,92,51,-14,-9,113,-74,52,-27,-25,-42,-10,-19,-28,46,63,69,59,21,-32,-97,68,-111,-61,-87,108,-94,1, -34,105,-65,-3,-83,-89,-76,-45,90,17,-9,63,120,24,-120,-37,99,10,-84,42,73,55,-83,34,69,-109,-107,-91,-34,-66,64,-121, 110,88,5,16,-97,-31,-36,-5,-85,-39,-113,34,38,61,6,-17,-123,-77,89,-66,-99,-45,100,78,94,-39,49,41,36,-102,-108,-13, 
  /* [3][2][][] */ 12,32,-47,-72,88,-85,89,-15,8,42,79,-58,42,47,75,120,38,102,6,-90,-75,-18,-6,-88,-93,-60,97,112,-21,89,-71,-117, 19,-60,-101,55,-46,38,35,127,-52,86,-40,-55,117,43,-36,16,4,-50,109,-44,-12,117,14,36,87,17,-95,-71,-22,-28,-5,-41, 71,-10,-23,16,23,112,109,9,-34,107,-89,20,-6,66,-85,120,-35,-116,-93,93,-36,-87,44,-20,4,-60,-54,77,-80,-21,-72,11, 
  /* [4][0][][] */ 23,38,89,-1,59,-64,-35,69,-97,-16,23,-27,-38,-80,34,104,98,-95,94,98,-53,98,-75,94,-36,52,-109,10,-71,-19,-100,-96, -73,-46,5,-80,67,69,-108,-21,-33,-103,-31,88,-83,-22,-26,-21,-7,-45,19,17,-105,-17,-93,3,24,32,-105,68,-79,-40,-43,86, -19,84,112,16,97,-14,-33,-72,-88,3,-66,-81,53,-15,4,-20,-22,30,81,-76,74,-6,91,-47,-82,30,95,70,-1,-59,-33,56, 
  /* [4][1][][] */ -91,-8,67,-64,-90,-3,-40,62,-9,93,57,52,-2,18,-107,-79,-16,87,100,-37,-60,-41,-46,-70,112,-11,-24,100,84,40,-21,-30, -18,91,-106,-38,-101,83,106,-55,9,8,44,-54,-51,-10,-105,58,-59,111,-44,62,-52,10,46,-10,-15,1,-96,90,-11,75,75,-3, 90,-89,58,0,-75,-90,106,-81,114,-28,56,89,49,-60,70,-63,-53,-52,112,-70,-101,-112,16,127,1,-68,68,27,111,-46,-43,-12, 
  /* [4][2][][] */ 40,48,-109,-104,30,-17,72,-27,-23,-48,44,78,52,82,31,-43,53,26,-94,-5,-92,104,28,-12,-30,16,105,-68,73,-99,91,6, -68,-45,-95,-25,64,105,38,61,55,89,-14,30,124,-44,48,-2,63,100,-91,-114,-106,-104,8,95,41,-51,-46,64,-12,67,87,112, 99,-30,-16,93,19,-39,113,79,31,-14,60,-72,-43,-42,17,-28,-19,79,-22,-94,-40,38,-100,-73,116,35,-62,-62,34,15,-80,-4, 
  /* [5][0][][] */ 66,-64,-98,52,75,110,29,93,-57,-89,-85,44,49,103,-55,-67,-34,13,47,-3,83,1,-73,75,-70,74,58,26,-88,-58,-15,87, -13,-25,10,-51,38,-13,-56,-80,-67,109,0,26,-41,31,127,66,-61,-101,10,100,-45,100,-112,3,10,107,21,-53,91,81,73,6, -85,-8,67,74,23,87,86,-9,-30,-67,20,-47,66,-93,-55,-59,-20,83,-81,108,2,-100,44,32,16,-4,-1,109,32,72,-49,-1, 
  /* [5][1][][] */ 34,-84,21,-105,44,93,-53,41,67,-64,101,-40,62,-50,-38,-26,-42,112,-3,-3,-94,59,-63,-3,-19,86,-35,6,19,-104,-110,-78, -5,-89,-18,106,72,-10,37,7,-72,-1,-56,-16,-96,92,88,-84,-94,59,-73,86,-25,-52,-11,-18,71,52,-8,-69,112,-61,24,-61, -99,-103,67,-74,-65,-91,81,31,-91,21,-92,69,-68,-39,-7,-16,-7,-58,-51,3,89,71,10,-34,41,17,-42,-100,106,-89,47,-104, 
  /* [5][2][][] */ -90,-105,-81,-64,96,0,-112,1,-32,-44,72,81,-1,-78,50,-40,89,-19,-100,3,-32,-2,30,116,-52,47,10,51,-80,105,94,104, -8,-88,-41,-37,-61,91,-55,21,96,-58,35,81,60,-46,69,103,92,1,97,60,45,66,-71,-63,-80,28,103,-62,58,-65,94,-91, 40,-21,30,86,99,-8,36,37,59,21,72,-103,10,-8,57,-42,61,-43,26,50,120,61,-28,96,63,40,33,-23,-18,33,93,23, 
  /* [6][0][][] */ 90,23,62,99,26,62,-53,82,53,8,40,-94,-5,122,0,-99,-46,91,1,-33,87,-58,-7,-15,36,22,8,-81,-98,33,24,-70, 110,-16,-72,59,0,21,110,-96,-73,15,-16,-18,-30,58,48,-86,-9,4,29,0,88,89,-33,118,63,101,-76,-39,-106,115,-31,40, 38,17,-66,37,69,40,9,88,-106,80,106,-84,3,-52,19,84,-57,-41,-63,-70,82,66,98,14,-16,-84,115,-67,72,-88,-99,-27, 
  /* [6][1][][] */ -20,-21,42,-71,23,57,68,-62,39,21,99,23,35,34,15,-91,-61,51,28,-91,-55,5,-70,-59,72,-96,-89,5,-46,76,66,71, 38,60,-114,1,82,-49,111,76,83,3,-106,-56,-94,-55,127,-5,-94,-70,63,90,82,-87,-15,19,77,-81,77,89,-37,-57,-106,-36, 25,-91,-43,55,35,-27,-83,46,-63,32,53,74,-47,71,-1,3,30,76,-44,-14,-70,62,-33,74,65,24,91,-17,-47,-22,-58,-75, 
  /* [6][2][][] */ 82,25,100,102,20,-9,60,14,-49,39,66,-8,22,33,-65,-42,-32,93,90,-56,6,-22,41,-43,41,-54,-60,-83,65,-60,33,-75, -1,45,2,3,56,-20,-113,-54,17,22,-31,-69,-60,-50,-24,-30,-48,7,55,39,111,-98,16,65,-43,38,-34,37,56,10,7,33, 94,90,46,-107,106,20,76,14,-74,-69,96,-101,-25,-36,109,-74,-38,114,104,-34,-20,-68,-80,48,-16,-93,-53,22,-20,-27,25,-64, 
  /* [7][0][][] */ -52,-67,100,-18,-38,115,87,41,65,-87,-61,34,122,70,89,-107,-98,-99,-72,14,63,32,-63,101,63,14,-62,55,96,102,5,-31, -36,78,115,52,37,-54,22,-23,70,-103,-66,105,122,-8,25,-102,74,102,111,27,60,-105,-91,75,-80,17,1,112,-76,-41,-50,-8, 61,11,105,-117,-5,8,-17,36,-18,-70,96,-59,-22,-109,36,-67,-33,-22,-88,-59,87,-86,-89,83,60,-54,-85,37,50,-93,9,14, 
  /* [7][1][][] */ 17,84,-93,-17,59,-35,-108,-28,-19,-8,-56,-69,-92,41,97,-61,-11,-75,-102,-94,46,69,-96,81,117,-68,15,72,24,85,34,-6, -71,-80,50,-2,9,-102,95,82,-69,-34,-52,-51,77,80,55,-3,101,110,-25,-73,60,108,102,87,81,-93,-24,10,56,-105,-118,-55, 84,31,-51,-74,108,-76,-105,70,113,109,-126,88,-97,-4,91,63,65,24,87,-81,89,110,-23,56,84,114,-29,108,110,-45,-48,29, 
  /* [7][2][][] */ 65,44,84,-105,104,16,103,-47,75,13,-57,-114,70,115,-13,4,-92,-27,49,39,-97,-94,22,-40,7,-93,114,63,66,-79,36,14, -84,-1,111,-86,54,-34,-108,9,-63,54,78,-83,8,12,120,101,-85,36,-49,-44,-15,-32,-63,22,56,76,73,100,127,63,-46,-53, -62,-72,-39,-51,-93,66,57,-44,54,52,73,-83,-91,-56,-48,37,65,61,36,-46,-31,33,59,120,90,-62,-7,40,127,60,-92,-84, 
  /* [8][0][][] */ -70,-46,94,-29,-52,-18,9,106,-7,-37,-95,114,93,26,46,68,-7,-89,60,-104,-27,-74,105,27,-59,-93,-86,-43,59,-101,24,67, 95,-40,26,-26,65,66,-48,97,-35,70,-51,85,-57,-26,41,-1,-16,-23,-74,93,-114,-111,49,17,-63,68,15,-68,-92,-88,-89,-86, -34,3,-92,-21,-80,-64,-53,-40,53,-53,32,-76,-56,4,-59,84,68,-79,70,-21,5,-100,34,86,93,88,86,-13,-87,-98,82,-64, 
  /* [8][1][][] */ -2,62,-83,3,-60,-53,17,-80,-100,51,-39,41,84,1,-127,1,-67,-20,66,28,69,-78,-85,-16,-87,-63,-64,-88,42,101,60,-82, 85,18,-60,97,5,101,72,-92,97,-61,19,22,-39,-113,-42,-14,-65,-102,43,-48,0,35,69,107,87,96,-72,49,-36,-23,80,73, 114,48,84,36,43,-60,-92,80,-71,86,-2,74,30,110,-40,118,-103,-38,42,-67,-69,-72,67,-78,39,67,-66,-62,2,83,-96,18, 
  /* [8][2][][] */ 109,-43,-120,118,85,116,29,94,-57,36,-76,49,73,43,105,-29,107,-117,-26,-71,-65,17,-102,-117,-86,-78,-90,-41,-51,20,-22,82, 4,96,-83,-95,114,-109,53,82,-54,-89,-67,-61,10,-34,42,3,89,-82,89,111,-5,0,-102,-17,-110,-51,-26,112,-39,86,98,-29, 107,-68,50,5,-97,-106,-51,-12,-57,104,5,-52,122,-41,28,-56,-15,-3,-34,-63,23,49,-58,14,-92,105,70,86,42,-49,4,102, 
  /* [9][0][][] */ -24,-86,37,-9,91,101,-95,-20,7,116,101,-89,36,65,125,-51,-77,6,100,23,42,-15,67,40,-68,81,57,114,98,19,-24,-66, 20,62,27,40,-18,118,61,14,-15,-29,-37,4,69,73,-91,58,20,9,35,-6,-12,107,60,106,-65,-29,-97,-64,103,-28,54,118, 100,-112,-97,-89,24,66,20,-62,6,58,60,-95,-44,75,-42,-98,-11,119,70,-35,97,-77,54,-28,93,106,82,98,-60,75,-76,33, 
  /* [9][1][][] */ -14,71,81,75,112,-81,34,-23,77,27,-77,37,53,-43,-16,-46,-107,60,-54,61,13,-41,97,72,-85,-65,37,-80,-49,53,15,67, 104,-22,-106,-43,-103,16,9,-7,123,50,3,-91,-52,-58,122,29,-49,-69,39,-101,55,-27,58,-26,-84,9,-33,-69,46,29,-91,-98, -13,45,-34,-41,-72,-45,58,-46,-26,-38,-31,-18,-97,114,24,51,93,-72,-23,18,-62,-28,-88,-52,114,-28,-9,-3,58,-40,17,-22, 
  /* [9][2][][] */ 43,23,-58,-19,76,14,63,-15,77,69,-3,-95,67,3,13,-30,112,97,66,-16,124,27,60,120,38,119,-23,-88,-2,35,-32,-94, 119,-33,22,-28,121,0,59,-85,-54,-42,-28,23,40,-29,58,80,-90,31,62,20,-63,43,77,60,59,48,80,26,-61,-16,-83,-72, 116,-45,-57,-38,67,30,-35,-47,34,2,70,-86,79,-38,39,116,-4,111,-53,53,64,74,66,59,127,-2,53,-81,-34,-69,-25,36, 
  /* [10][0][][] */ 4,21,73,3,-2,-95,-46,42,116,25,14,46,117,38,109,-89,15,-2,-6,-106,-37,-31,110,-37,66,103,75,88,-63,-43,-68,46, 36,-103,-53,1,3,-67,-106,13,-112,103,51,-80,36,-94,-9,116,-26,-57,-67,108,40,25,7,37,51,-61,84,-2,-111,25,-4,-40, 47,42,108,-78,-72,-86,-82,-74,22,-60,59,66,-78,-16,-32,1,110,-6,25,-69,35,64,102,-103,-34,-40,100,11,63,57,-23,98, 
  /* [10][1][][] */ 45,-11,48,25,47,88,-68,112,50,80,-82,-46,-46,115,-29,-34,94,-95,92,34,-83,-88,107,-16,47,64,-44,65,-88,101,72,38, 116,-65,85,11,-89,125,15,-104,-26,-13,-15,-16,-49,-82,109,-97,-51,56,66,-15,-57,-49,-83,9,-95,3,81,37,98,-94,-76,-36, -9,-28,49,57,-49,-53,-29,33,78,-85,12,50,-108,-6,56,7,-80,-49,-46,117,-54,-40,62,116,-83,27,63,-84,54,-95,68,-108, 
  /* [10][2][][] */ 87,-6,-76,56,-98,89,-36,14,-95,-46,-80,47,41,87,43,-68,67,-83,125,93,8,106,-34,63,68,-62,47,127,111,3,54,5, 12,-1,-23,52,63,-64,67,43,-59,15,-82,94,-21,-73,-90,66,-11,-28,69,-93,-93,-104,36,98,51,-112,-91,-85,-105,24,-101,51, 88,16,-77,-15,-35,97,-36,-82,-41,48,90,45,18,50,-25,-95,75,-108,83,50,-65,27,-105,-100,63,72,-17,50,70,2,-75,21, 
  /* [11][0][][] */ 27,-55,-27,80,-22,-80,74,14,-41,99,74,-38,-56,-13,19,125,57,38,-118,96,106,-91,87,33,-28,24,-55,76,20,96,14,28, -61,-53,102,40,-19,13,45,-85,64,-56,-39,-64,11,39,38,36,-120,-121,-36,95,78,45,10,-110,-78,-17,5,0,-42,-60,-67,-42, -86,18,55,68,84,1,100,-43,85,45,-34,-108,-16,-57,-97,28,63,-24,70,-13,-9,-22,-118,-16,-32,105,117,127,24,118,127,88, 
  /* [11][1][][] */ 115,66,-99,26,-64,25,105,21,90,-104,-86,-96,-110,119,-25,43,12,-92,-116,30,29,32,78,-60,-16,73,-61,-4,65,6,-113,-36, 70,-32,-83,-105,115,-73,-58,56,-61,-101,25,-96,85,-10,-62,18,29,-117,-63,-54,-113,-109,-32,-98,91,11,-21,-9,-89,23,56,49, -93,-28,-71,-99,108,-80,70,-37,-98,-60,5,-40,73,-60,-41,-110,-95,-91,21,23,-98,-6,33,14,47,-9,115,0,-47,50,111,30, 
  /* [11][2][][] */ -42,-18,-62,-54,68,-120,-54,-13,-2,120,112,-93,-73,-29,82,3,107,51,-22,-17,-105,89,7,-48,-82,-53,-50,86,112,103,-71,-107, 57,-3,-118,-15,-56,124,0,83,-107,-51,-109,123,114,69,-77,-70,39,2,-114,-101,-60,117,-24,-17,68,11,-75,84,20,-67,-106,51, -49,78,75,-31,23,62,110,79,-56,-96,-105,0,9,9,126,23,42,-86,74,0,-70,40,-80,-104,76,-9,-96,-52,-8,10,54,9, 
  /* [12][0][][] */ 75,16,-100,-36,43,75,51,-91,-35,-15,92,-1,72,-98,54,44,4,41,-68,-66,-35,56,-6,63,-104,70,-3,52,49,80,-29,14, 57,-20,67,-121,20,30,-101,49,99,-4,-115,43,16,-79,-103,65,-34,-75,95,4,-27,0,-38,91,-37,-65,-41,25,-68,-43,-75,-63, -42,65,-21,44,-54,-76,-79,-17,119,15,16,37,-53,35,-65,-43,36,19,-29,17,-111,99,-18,-100,-68,26,-114,47,-38,91,79,-34, 
  /* [12][1][][] */ -52,100,38,-116,5,-5,-14,37,16,88,76,93,127,5,69,-53,79,43,-5,92,87,55,-90,-63,-29,-41,-95,-10,95,-18,-56,86, -30,120,69,44,-13,26,-31,78,-76,70,-31,-107,58,35,-45,77,-37,-21,47,-18,82,-39,89,96,46,78,-32,-31,93,-38,-25,19, 65,81,-51,-47,-78,-18,5,-84,85,19,-80,39,56,-80,-54,-107,101,-92,109,63,-109,-32,-68,-32,-18,-11,65,-26,-78,93,69,-45, 
  /* [12][2][][] */ 24,-26,47,-105,89,22,108,-11,47,78,58,111,-4,49,-113,-22,74,83,-16,-108,-40,92,75,68,16,79,-27,89,19,31,102,-71, 36,57,-88,38,-42,54,-3,-95,-35,-79,-83,53,62,47,-109,46,-87,89,-51,13,85,-22,35,-32,81,-18,-58,-40,-76,-43,7,67, 12,-46,-44,68,28,-78,-71,20,97,101,53,-32,2,66,7,-22,-1,-99,56,-91,-14,-17,36,36,36,-30,74,68,-18,-22,94,101, 
  /* [13][0][][] */ -11,20,-71,82,-81,-66,-20,-79,-75,-38,41,-35,67,13,-80,-72,-28,-93,-61,65,8,47,79,-28,83,-21,72,4,32,-1,97,55, -42,43,49,-89,-5,93,-40,44,108,-98,37,-72,-42,9,109,21,30,26,-4,-24,-23,47,119,12,54,-34,-35,-32,97,9,73,-77, -87,9,78,-19,72,56,-15,52,-42,-46,-31,104,61,37,27,8,-69,-68,-40,6,96,-86,-92,34,-65,-4,66,-13,70,50,25,115, 
  /* [13][1][][] */ 62,-53,34,-14,-26,80,-47,77,-2,44,96,29,-31,-11,68,-93,43,-104,87,-13,36,-73,-106,0,-67,32,73,-45,83,107,-68,18, 30,34,-79,24,-15,-4,-86,53,9,-35,83,-2,-12,92,34,-14,-93,99,113,-30,-53,113,47,21,92,-110,-53,62,31,92,35,92, -15,-51,-57,-42,77,106,66,-92,73,53,-19,-92,87,-94,-60,100,-9,110,110,-53,-23,-68,-41,73,127,-58,-38,89,68,-92,-19,-78, 
  /* [13][2][][] */ 93,-52,8,59,-92,88,62,-7,-50,-25,-67,107,-28,68,95,63,76,94,-81,-97,53,-60,-105,7,-83,-18,-51,99,49,25,-42,-99, 111,-95,-4,-33,-98,-18,-93,26,31,72,40,-46,54,-66,-83,63,-5,26,86,102,86,-17,86,94,-15,-3,23,-106,122,100,-46,-36, -13,-112,25,109,86,-81,-62,-30,-52,31,-59,-90,0,-45,-87,-101,35,119,-63,-22,-64,110,20,-78,24,33,62,94,68,31,25,-84, 
  /* [14][0][][] */ 2,13,73,46,-106,107,-59,-116,32,52,-102,10,103,4,5,-53,-43,94,72,-75,-2,55,8,-6,-84,2,108,-63,47,-51,64,11, -97,93,62,-31,-51,-86,35,78,58,111,-109,81,-61,-106,79,-2,68,35,2,105,-16,-67,-17,85,84,103,118,-37,61,-95,-86,119, 68,6,100,-23,90,18,3,-78,-23,46,38,55,-29,-76,-38,-3,80,-51,-50,119,58,36,-102,75,61,45,48,31,3,33,-110,-48, 
  /* [14][1][][] */ 73,79,4,-76,92,-96,51,-18,65,71,98,15,-70,-41,109,9,-93,89,106,-3,32,107,64,15,-15,107,-54,101,45,79,94,72, -111,60,87,-70,51,74,99,25,15,-90,25,-12,-121,118,56,-54,47,-115,107,-5,64,-57,-33,3,127,36,50,65,43,-98,97,9, -88,-105,-85,-91,-55,76,-95,44,60,-21,28,-93,97,-72,-66,-24,11,33,46,-100,19,44,-58,64,56,18,-105,-86,-4,75,63,-121, 
  /* [14][2][][] */ 25,-34,99,100,-45,-104,-111,-8,87,-87,-10,-41,-17,-38,-58,-16,38,-13,-8,-21,86,-105,-13,10,106,-101,111,29,-59,66,-94,-48, -101,23,78,-57,-94,-43,-69,59,7,-40,84,51,3,-14,32,-93,41,81,18,-107,9,-27,101,-25,103,-19,-9,43,71,-37,-47,-57, -34,21,15,58,-81,110,58,-31,92,-38,7,-66,73,1,81,16,-80,-53,-60,91,21,19,-41,86,-69,-107,-62,85,16,39,-105,105, 
  /* [15][0][][] */ 102,47,-9,74,-55,-104,-75,-13,-27,33,-2,-93,94,77,115,19,85,-61,50,-88,-20,49,-66,36,-1,30,29,-98,-70,-40,30,-33, 4,40,-43,-65,-39,69,19,112,20,-70,40,-63,-29,97,94,42,-88,-16,12,23,64,0,-118,52,101,74,117,-37,40,17,-38,-41, 72,-29,-60,-10,-22,73,98,105,106,-110,1,20,74,-13,-34,109,-118,43,15,42,20,44,64,51,114,-23,-41,-45,-78,-103,-63,71, 
  /* [15][1][][] */ -63,-9,66,-36,-69,-109,-79,-95,52,77,68,-79,48,44,93,51,86,48,109,-29,-87,-27,88,-31,52,-76,32,93,107,15,-1,-80, 45,98,30,50,-78,-86,-85,-51,-78,15,-6,19,-84,2,18,-70,-94,-3,-113,53,-1,40,38,-55,77,-12,-10,114,-42,-69,64,50, -69,18,65,21,44,-9,11,-118,109,-83,42,-59,14,37,-79,-34,-22,-11,-81,16,-11,-66,14,-41,-40,-11,-86,-75,69,67,-71,122, 
  /* [15][2][][] */ 116,-88,92,80,93,-11,122,120,-104,-39,-26,-81,26,-60,58,31,79,-80,127,-94,63,-50,-42,-69,93,-81,-30,-96,-73,43,-103,7, 88,74,28,106,15,61,-34,58,-44,-109,73,-19,90,-76,-25,38,-82,69,12,-92,-37,-10,-92,40,78,37,75,-23,121,37,-53,61, 112,-74,108,53,7,-51,-39,20,82,42,106,-24,-21,33,76,88,114,87,-59,60,-13,117,61,-86,57,-90,47,-23,-46,-68,-50,-2, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0010024788789451122, 0.00098378641996532679, 0.00099686556495726109, 0.0010202197590842843, 0.0010465321829542518, 0.0010553169995546341, 0.0010559753281995654, 0.00098231015726923943, 0.0010273943189531565, 0.0010263330768793821, 0.0010161511600017548, 0.0009741135872900486, 0.0010525669204071164, 0.0010779007570818067, 0.0010132683673873544, 0.0010032029822468758, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { -2326, -2298, -3768, 4393, 2712, -3536, 516, 1928, 4802, 554, 525, 1629, 1130, 325, -2232, 797, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 3.3704479847074253e-06, 3.3076016734412406e-06, 3.3515752875246108e-06, 3.430094693612773e-06, 3.5185601063858485e-06, 3.5480957194522489e-06, 3.5503089748090133e-06, 3.3026383334799903e-06, 3.4542163120931946e-06, 3.4506483643781394e-06, 3.4164156659244327e-06, 3.2750806440162705e-06, 3.5388495689403499e-06, 3.6240248846297618e-06, 3.406723408261314e-06, 3.372882474650396e-06, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[2*2304] = { 
  -44, -111, -20, -68, 17, -70, 18, 34, -9, 30, -3, 28, -72, 7, -6, -34, 1, 5, 11, -71, 36, 67, -39, -1, -64, -99, 82, -77, 82, 46, -21, 74, 44, 42, -70, -62, 30, -107, 81, 20, -79, -9, -28, 27, -81, -77, 65, 0, 7, -104, 57, 30, 103, 47, -59, -5, 43, -116, 74, 23, 16, -66, -22, 45, -17, -32, -12, -75, 89, -92, -19, 61, -38, -113, -70, 30, -17, 39, -24, -90, -53, -14, 1, -23, -64, -38, 15, -87, -16, -83, -69, -57, -83, -5, -41, 68, 40, 19, 71, 34, 7, -96, 60, -67, 8, 1, 4, 37, -49, -3, -78, -55, 51, -16, -58, 67, -42, -102, -63, -61, 33, -72, -13, 63, 15, 20, 70, 50, 2, -76, 8, 45, 82, -21, 33, 60, 58, -52, 82, 4, 47, 29, 3, 28, -61, -95, 65, 47, 17, 0, -64, 23, 23, -55, 28, 71, -5, 20, 77, -70, -20, -9, 26, 37, -17, -66, -93, 57, -78, -63, 28, -17, -81, 51, 72, -62, 30, 29, -35, 4, -68, -31, 77, -44, -65, 47, -21, 6, -84, -1, 8, 14, -92, -67, -57, -37, 72, 27, 35, 26, 47, -38, -68, 17, -48, -16, -86, -1, 84, -107, 62, 61, -79, -32, -50, 33, -62, -12, 19, -86, -34, 37, 8, 68, 46, -106, 41, 2, 96, 37, -12, -46, 32, 85, -60, -40, -6, -71, 35, 54, -25, -52, -39, 47, 1, 31, -40, -95, -63, 37, 14, -59, -33, 6, 57, -10, 53, -75, 18, 71, -67, 55, 32, -100, -34, 21, -44, -76, -30, -117, 104, -42, 52, 11, -106, 50, -83, 35, 27, 14, -49, 36, 48, -14, -34, 8, -22, 60, -28, -13, 37, 68, -90, -14, -99, -44, -19, 56, 63, 24, 8, -109, -83, 53, -81, 62, -78, -38, -31, -42, 44, -38, -35, -32, -7, 28, 81, 94, -106, -9, -38, 63, -53, 4, 45, -87, -39, 28, 18, -39, 40, -3, -44, 48, -89, -79, -96, -43, -26, 111, -47, 52, 23, 55, -17, -119, 61, 84, -10, -66, 5, 6, 36, 46, 72, -69, -11, -68, -104, -33, -5, 44, 84, 56, -75, 4, 34, 25, 79, -107, 65, 34, 17, -39, 39, -106, 39, -81, -31, -23, 77, -39, 98, -7, 0, -20, -19, 13, 95, 34, 22, -102, 64, -4, 50, 31, 59, 51, -50, 28, 75, 42, 36, 35, 34, 25, -45, -49, 59, -22, 35, -72, 88, -15, 47, -9, -100, -23, -110, -82, 0, -74, -91, 50, 18, -100, 68, -30, 83, 15, -35, -35, 68, 1, -46, -8, 54, -55, -105, 61, 44, -64, -70, -97, -20, -119, -63, -18, -62, -90, -42, -35, -42, 71, -80, 1, 18, -119, 38, 18, 87, -30, 29, 102, -43, 4, 70, 95, -83, 12, 66, -71, 102, -92, 26, -85, -63, -21, -100, -9, -87, 56, 46, -46, -2, 58, -100, -15, 21, -10, -41, -70, 45, -3, -51, -15, -70, -92, 16, -43, 53, -24, -97, -85, -3, -109, 81, -28, 49, 44, -29, -31, 50, 2, 19, 98, -50, -7, -18, 13, -28, -116, 19, 4, -26, -43, 113, 45, -40, -116, -38, 58, 74, -105, -83, 22, 52, -70, 74, -92, 84, -71, -67, 70, -2, -4, -85, -59, -44, -84, -58, -34, 91, -56, 67, -40, 74, -38, -52, 18, 14, -39, -33, -84, -13, -52, -33, 38, 75, -80, 36, 58, 84, 43, 54, 19, -5, 55, -60, 33, 32, 83, -101, -3, 0, 74, -62, -63, 89, -94, -4, -19, 41, 44, -30, 11, -48, -62, 18, -86, 97, 55, -57, 65, 78, 11, -30, -82, -2, 59, 72, 71, 32, -86, -38, 30, -32, -96, -8, 65, 7, 59, -85, -28, -10, -96, 72, 43, 44, -67, -115, -79, -54, -70, 80, -2, 66, 4, 20, -31, -73, -109, 34, 44, 73, -103, 4, 7, 63, -81, -90, -62, 34, 45, -12, -111, 35, -15, -82, -49, 19, -87, -87, -38, 74, 56, 69, 12, 20, -14, -37, -43, 39, -1, 8, 12, -51, 10, 74, -94, 40, -31, -27, -34, 85, -13, 25, -62, 2, 13, 71, 50, 26, -73, -126, -23, 31, -9, 3, -83, 48, -111, -61, -99, -57, 53, -72, 33, -6, 39, -46, -69, 55, -105, 8, 57, 63, -85, -108, 32, -40, -52, 90, 49, -59, -100, -89, -74, 25, 15, 82, 58, -75, -15, 55, 18, -50, -55, -2, 94, -38, 63, -25, -35, 69, -97, -30, -97, 51, 60, -40, -21, 60, -74, 63, -78, 12, -44, -77, 56, 52, 69, -56, -69, -69, -1, -44, -85, -35, -18, -73, 75, 73, -97, 55, 74, 88, -77, 69, 5, 93, 43, -8, -27, -28, -102, -87, 73, 6, 17, -91, -90, 10, 54, -24, 40, -41, -71, 14, -9, -24, 55, -75, 87, -70, -38, -79, -103, -25, -2, -102, 35, -6, -38, -103, 47, 65, 36, -40, 49, 87, -40, -110, 44, -59, -21, 55, -91, 50, -22, -31, -57, -25, -92, 9, -30, 83, -38, -4, 9, -61, -121, -72, -96, -74, -87, -19, 10, 32, 66, -35, -50, -13, -94, 56, 2, 71, -92, -55, -94, -10, -121, 57, 54, -91, -51, -42, -1, 30, 56, 5, -58, 86, -19, 10, -75, -23, 30, -55, 48, -23, -31, -8, -51, -12, 47, 10, 20, -41, -7, 15, -75, -6, 56, 77, 65, -88, -56, 9, 0, -1, -26, 69, 74, 89, 9, 0, -23, -51, 14, -57, 77, 17, 57, 42, 24, 55, 28, 65, -83, -55, -103, 53, 71, -36, -77, 23, 46, 74, -71, 93, -67, -32, 56, 14, 13, 54, -110, -77, -48, 104, 42, 36, 12, 58, 1, 67, -4, 91, 17, -59, 22, 53, 5, 19, -32, -50, 41, -49, -64, -4, 25, -80, 48, 41, -59, -65, 38, 72, 42, 36, -22, -31, -5, -101, 2, 22, 21, 45, 76, -38, 0, 30, 12, -47, 46, -73, 15, -4, 34, 2, -23, -63, -15, 65, -36, -81, 75, 6, 30, 109, 16, -60, 16, -73, -115, -97, -58, 43, -56, 91, 78, -65, -76, -26, -53, -52, -52, 105, -94, -45, -96, -72, -46, -13, 69, 28, 124, -36, -5, 44, 61, 75, -95, 63, -59, -56, -2, -19, -54, -100, -11, -4, -5, 5, 16, -118, 82, 124, 25, -67, -45, -34, 44, 95, -56, -60, 65, -28, 114, 105, 27, 40, -87, 37, 28, -57, -55, 84, 58, 48, -90, 86, 30, 92, -10, -29, 77, 30, -87, 119, -52, 52, 17, -25, -85, -49, 22, -72, 48, 75, 11, 108, -81, 6, -46, -46, -63, -46, -95, 37, 28, 72, 0, 71, -109, 49, 69, -66, -98, 68, -55, 118, 41, 13, -77, -34, -43, 57, -57, 33, -58, 98, -35, -8, -73, -106, -27, 110, 27, -29, 21, -6, 40, 98, 61, -87, -98, 76, -64, 57, -18, -27, 57, 45, -38, 79, -65, 85, 78, 40, 59, -25, -43, -28, -49, -81, -69, -45, 38, 54, -34, -54, 37, -31, -86, 19, -28, 34, 35, -13, -60, 48, -61, 72, -60, -37, -18, 8, -91, -25, -49, -50, -68, 9, 94, 95, -60, -71, -82, 39, -60, 28, -38, 48, -43, -50, -48, 86, -12, -8, 1, -76, -8, -22, 67, -105, -28, 100, -22, -75, -28, -48, 32, -29, 70, -40, -96, -79, 87, 28, -86, -119, 32, 27, -72, -80, 34, 100, -44, -3, 47, -13, 37, -2, 36, -31, -91, 48, 61, 65, 6, -4, 13, 67, -40, -24, 39, -1, 23, -76, 118, -75, -89, -23, 28, 88, -109, -85, 17, -3, -10, -108, -4, 92, -95, 32, 30, 44, 34, -66, 81, 80, -53, -60, 69, 75, -87, -27, -82, -6, -53, 24, -59, 59, -1, -115, -88, -13, -103, 54, -16, 28, 40, -60, -13, -42, 49, -74, 27, 76, -34, -94, -58, -60, -17, 57, 66, -16, -119, 91, 20, -48, -19, 12, 86, -18, 33, -53, -99, -13, -93, 27, 60, 87, -51, 64, -36, -55, -80, -57, 80, -34, -21, 18, 21, 11, 32, 51, -79, 53, 51, 59, -30, -58, 76, -18, 1, -55, -37, 29, 32, 53, -50, -83, -43, 0, -19, 27, 14, 4, 0, -43, 33, 34, -68, 42, -12, -64, 31, -6, 81, 59, 0, -37, 30, -58, -73, -70, 72, -13, 61, -29, 11, 30, -64, 71, -7, 0, -9, -16, -8, 13, 80, 26, 106, 80, 14, 0, 67, 67, -90, 6, 45, -58, -26, -41, -53, 63, 47, 26, 28, 9, 69, -33, -38, -19, -57, -77, -23, 107, -69, -9, -107, 83, -94, 105, 109, -48, -11, -59, -72, 6, -13, -15, 50, -11, 8, 78, 66, -43, 6, -20, 17, 81, -55, -90, 4, -53, 55, 9, -25, -39, -3, 74, -8, -62, -73, -39, -44, 64, 37, 55, 30, -51, -19, -80, 80, 99, -33, -39, 17, 24, 62, 65, 46, -16, -52, -106, 6, 12, -111, 23, 70, -58, -30, 51, 9, -49, -87, 30, -25, 14, 24, 53, -11, 5, -15, -75, 77, 103, -68, -74, -35, 60, 77, -25, 31, -9, -77, -46, -5, -38, -55, 63, -46, -60, 29, 85, -100, -73, -73, 44, 7, 47, -57, -71, -41, -60, -72, -32, -51, -31, -63, -31, -50, 102, -61, -81, 39, 69, -25, 17, -49, -4, -73, -77, -16, 68, -57, 34, -15, -48, 2, -46, 11, 76, -36, -7, -23, 29, 43, -51, 58, 81, 40, -62, -11, 34, 20, -51, 69, -40, -61, -51, 34, 47, -92, -57, 16, -54, -108, 0, -83, 66, 34, -42, -9, -6, -66, -106, 33, 7, -9, -8, 67, -24, 64, -93, -48, -91, -80, 71, 48, 58, -73, 12, -101, -67, -52, -103, -29, -27, -63, -14, -76, -62, -7, 95, 48, -61, 21, -1, -5, -53, -99, -54, -16, -35, -45, 46, 70, -50, -12, -73, -11, -52, -42, -63, -81, -38, 11, 12, 39, -68, -83, -81, -53, -43, 3, -10, -43, 47, -70, 66, -18, -43, -92, -97, -83, 99, -5, -32, -40, -83, 31, -38, 9, -24, -55, -7, 19, 18, -83, 34, 21, 65, 50, 20, -39, -53, -49, -57, 40, 97, 79, -63, -39, 95, -90, -61, -96, 1, -50, -24, 61, -102, -12, 12, -21, 83, -40, -77, -32, 16, 47, -52, 53, 52, 17, -46, -107, 43, -5, -31, 1, -62, -57, -59, 29, -41, -14, -32, -16, -24, -8, -54, 7, 68, -55, -34, -28, 89, -20, -59, -31, -77, -14, -82, -54, -61, -23, 35, 5, -42, 31, 85, -53, -58, -41, -8, -67, 93, -3, -35, 40, -4, -56, 74, -75, 46, -66, -18, -25, -8, 15, 54, -63, 84, 15, 10, 21, -21, -92, 75, -37, 51, -73, 45, -12, 67, -37, 46, 61, -3, 31, -59, -94, -44, 52, -77, -25, -12, -116, -43, 47, -27, -36, -92, 40, 23, 75, -11, -87, 43, -20, 73, -104, -16, 8, -77, -27, 10, -28, -15, 31, 0, -70, -67, -32, 84, 29, 67, -71, -56, -36, 20, 93, -82, 75, -17, 23, -32, -3, -90, -1, -11, -97, 0, -32, -103, 28, 6, 37, -54, -25, -43, 31, 86, -95, -47, -23, 37, -87, -11, -66, -69, 14, -2, -12, 82, 71, -96, -32, 55, 25, 24, 24, 1, -49, -9, -93, -34, 41, -19, -15, 79, 35, 41, 70, 35, 22, -71, -72, 43, -35, -52, -13, -47, -53, -70, 63, 118, 41, -82, -59, -3, -74, 25, 19, -49, -28, 90, 57, 19, 72, 72, -1, -79, -55, 50, -60, 32, -55, 96, 24, 90, 10, -7, -70, 69, 28, -79, 94, 53, 52, -12, -13, 40, -86, -48, -97, -13, 83, -65, 55, 38, 12, 42, -16, 32, -39, 6, -93, -24, 71, -96, 31, 70, 8, -4, 39, 95, -74, -74, -1, 8, 4, 8, 53, -75, 41, -85, -90, 3, -65, -56, 2, 63, -67, -75, 74, -57, -4, -30, -113, 80, 36, -39, 42, -5, 34, 20, -89, -90, -84, 35, -58, -26, 11, -59, 79, -45, 65, 43, -29, -26, -82, 45, -21, -103, 30, 92, -43, -3, 19, -29, -97, -27, -104, -83, 49, -34, -18, -32, 6, 12, 41, -46, 33, 23, -42, 94, 14, 29, -54, 9, 0, 37, -104, -76, 12, 53, -117, -66, -26, 41, -41, -43, 5, 114, -42, -14, 51, 0, -80, -97, 65, -79, -106, -72, -40, 58, -1, -103, -11, 2, 36, -107, 13, 25, -1, -52, -91, -27, -84, 70, 81, 73, 1, -78, -111, -10, -18, -34, 16, -63, -45, 90, -96, -84, -67, 19, 33, 93, 27, 7, -76, 105, 48, 25, -69, -81, -61, -54, -41, 14, -28, -30, -54, -54, 74, -18, -98, -21, -81, -36, 23, -57, 5, 39, -87, -50, 36, 29, 91, 35, -86, 39, 0, -36, 18, -33, 9, 11, -2, 7, 41, 93, -27, 67, -55, -56, -93, 40, 79, -9, 61, 73, 7, 12, 89, 57, -1, 71, 77, -42, 74, 22, 58, 58, 16, 56, -1, -40, 71, -69, -52, -37, -53, -80, -28, -27, 83, -60, -72, 15, -67, -45, -6, -111, -61, -78, -20, 41, -56, 94, 25, -22, 99, -98, 51, -24, 27, 101, 81, 5, -51, 39, -31, -81, -80, 6, 71, 66, 48, 71, 82, 46, -56, 30, -76, 28, -95, -27, 87, -24, -100, -84, 75, -86, -35, 69, 11, 30, 71, -60, -13, -5, 0, 18, -17, -18, 43, -77, -18, -6, 37, 53, -94, -77, 47, 14, -91, -45, -99, 24, -41, -12, -83, -55, 39, 69, -2, 38, -88, 35, 36, 1, -70, 59, 50, 15, 26, -13, -68, 78, -70, 91, -13, -59, -72, -72, -39, -1, -32, -20, -75, 67, -62, -13, 20, -90, -56, 85, 82, -18, 4, 59, -25, -2, 45, 65, -5, 44, -73, 58, -21, -68, -77, 23, -3, -48, 65, 43, -56, 67, -72, -65, 75, 95, 94, 49, -82, 
  70, -64, 3, 63, 63, 57, 67, 21, 31, 2, 9, -1, 67, -1, -27, -64, 66, -68, 97, 84, -81, -38, -15, -28, -67, 47, 82, 17, -64, -3, 52, 38, -55, -23, 86, -14, -22, 6, -17, -52, -22, 81, 67, 95, 25, -14, 2, 46, 62, 111, 2, 50, -96, -50, 26, 92, 12, -7, 27, -31, -13, -71, 33, 11, -35, 83, -21, -104, -103, 11, 91, 7, 29, -30, -2, -22, -30, 5, -54, 52, -26, 48, 104, -52, 5, -17, 102, 39, -68, -41, 56, -72, 46, 45, 57, -63, 16, 87, 80, -16, -16, 90, 69, 60, 80, 25, -9, -19, -66, -41, 106, 56, -12, -46, 73, -82, -22, -39, 64, 111, 46, 80, 41, 18, -51, -72, -27, -61, -14, 71, 21, 52, -30, -27, -42, -5, 85, 51, 18, 51, -53, 71, 0, -29, 79, 6, 7, 82, 65, -37, 58, -75, 79, 95, 70, -41, 62, -56, -11, -67, 14, 78, 86, 25, 67, 39, 88, 48, -75, -52, 73, -35, -64, 10, 76, -19, 55, 56, 43, 68, -73, -12, 20, 52, -98, 79, 30, 55, 64, 34, -64, -15, 93, 73, -20, -56, 57, -78, -15, -60, 78, -25, 96, 42, 94, 23, 96, 78, 44, 40, 29, -87, 39, -57, 62, -11, -87, 56, -62, 32, 83, -64, -72, -68, 10, 96, 31, 80, 61, 78, 41, -17, -17, 29, 44, -16, 31, -72, 72, 39, -59, 78, 90, 60, -81, -22, -73, 88, 61, 84, 29, -37, 45, 10, -24, -35, 97, 100, 113, -14, 24, 112, 57, 61, -31, -5, -108, 27, 53, 49, -1, 47, -28, -11, -38, -70, -62, -50, 65, -5, -71, -63, 4, -34, 2, -75, 31, -80, 59, 6, 2, -46, -32, -47, 26, 84, -78, -21, 111, 9, 10, -18, 71, 86, -60, -17, 60, -72, -19, -1, 108, -13, -7, -48, 80, -46, 73, -80, -73, 38, -14, 107, 21, -47, 9, 93, -78, 60, -101, -14, -68, -74, 41, 70, -34, 58, 87, -41, -13, -9, -16, 15, -46, 28, -43, 17, 44, 96, 10, -67, -82, -32, 85, 98, -15, -38, -40, 64, 57, 28, -43, -34, 3, 17, -22, 41, 46, -30, 47, -65, -81, -81, -33, 12, -7, 104, -7, 0, 13, 44, -66, -83, 51, 54, 13, 32, 94, 2, -53, 100, -25, 78, 86, -32, -19, 71, 90, -13, 73, 93, 86, 56, 39, 42, -58, -83, 30, 47, -41, -10, 49, -86, -78, 90, 73, -44, 25, 67, 109, -34, 61, -11, 33, 74, -73, 4, 26, -67, 14, 27, -30, -26, -9, -46, 29, 58, -52, -37, 69, 104, -113, 95, 43, -42, -56, 12, -81, 34, 57, 75, 19, -109, 13, 55, -43, 76, -31, 43, 0, -72, 54, 121, 17, 12, 47, -16, 36, -33, 52, 21, 72, 23, -36, -62, -43, 48, -41, 80, -20, 72, -73, 95, 104, -104, -61, -61, -43, 68, -108, 38, -71, -27, 60, -18, 0, 75, -5, -68, 60, -81, -26, 37, -33, 22, -15, -59, -56, 61, 59, -54, 64, -39, 27, 53, -6, -33, -37, 33, 93, 102, 48, 29, 41, -71, -75, -10, 2, 31, 115, 74, 5, -67, 21, 110, 63, -25, 63, 91, -63, -77, 13, 23, -67, 86, 45, 96, -84, 12, -113, 51, 66, -29, 56, 87, 50, -9, 15, -31, -8, 2, -61, -46, 52, -26, -19, -48, 16, 52, -101, 101, -55, 82, -54, 23, 89, -31, -71, 23, 84, 33, 80, 87, -61, -28, -38, 70, 22, -83, 69, 63, -16, 78, 70, 43, -68, -5, 69, 89, -9, 88, 42, 44, 32, 43, 4, 101, 79, 38, -19, 78, 17, -102, 59, 92, -55, -39, -1, -37, -102, 15, 37, 53, 44, -67, -24, 35, 102, 60, -50, -28, -12, 7, -67, -57, -60, -65, -39, -30, -65, 12, -12, -46, -40, 42, 29, 11, 47, -9, 40, 11, 36, 11, -67, 127, 92, 80, -12, -60, -39, -43, 51, 21, -10, -58, -40, 18, -45, 77, -73, 53, 66, 49, -54, 93, -88, -54, -76, -37, 9, 5, -23, 55, -55, 43, 23, 65, -61, -42, 77, -53, -74, -61, -4, -50, -50, 45, 61, -28, 52, 82, 9, -28, 59, 60, -34, -11, 73, 4, 5, 31, 84, 51, -58, 40, -64, -18, 56, 67, 6, 34, 27, -41, 63, 64, -10, -65, 109, 86, -81, -17, 6, 5, -12, 69, -48, -78, -80, 70, 30, -105, 10, 39, 27, -17, -60, 97, -2, 44, -23, 38, 41, 11, 67, -52, -36, 8, -62, 99, 75, 32, -65, -5, 49, 54, 20, -23, -49, 62, -77, 26, 65, -40, 70, 83, 114, -16, -25, -24, -44, -24, -75, 97, 122, 61, 67, 11, -13, -65, 53, 28, 32, 46, 21, -67, -43, -18, -55, -46, -40, -4, 88, 56, -11, -15, 89, 90, -28, -41, -67, 20, 47, -16, 57, 107, -60, 60, 6, 12, -52, 0, 33, -26, 9, -64, -70, 123, 41, -64, -112, 67, 95, -64, 42, 38, -26, -31, -78, 74, 96, -11, -83, 127, -57, 26, 52, 99, -65, -60, -30, -60, 65, -102, 66, -42, 92, 87, -66, 60, -51, 80, -69, 18, -27, 101, 39, -48, -3, 2, -36, 90, 50, 96, -98, -25, 74, -66, -85, -15, -78, -26, 26, -29, -78, -56, -47, 9, 12, 41, -77, 109, -57, 41, -103, 29, 53, 71, 26, -77, 86, -18, -41, -2, -11, -45, -9, 33, 39, 33, -110, -24, 38, 69, -79, -77, -33, -81, -73, 73, 89, -52, -99, -37, 37, -65, -62, 75, -82, 40, 95, 18, -62, -75, -94, 39, -73, -47, -31, 72, 67, 5, 3, 53, -51, -59, 91, -36, -74, 20, -43, -53, 93, 19, 3, -4, -37, -2, 37, -15, 22, -2, 13, -82, -20, -21, 36, -67, 29, -40, -1, 28, -76, 85, 40, -42, -48, -85, -42, -26, -100, 14, -52, 40, -53, 16, 23, -71, -62, 0, -21, -5, 72, 67, -33, -15, -76, 24, 43, 63, 24, 114, -53, 11, 111, 85, 40, 102, 19, -47, 29, 6, -5, -15, 1, -45, 40, -74, 9, -40, -48, -81, -37, 6, 94, 24, 80, -77, -70, 5, 15, 50, 118, 80, -121, 69, 38, 101, -25, -72, -8, -30, 23, 23, -77, 2, -76, -52, -16, 58, 7, 51, -89, -39, -99, 2, -15, 50, 74, 28, -4, -110, -69, 0, 14, -25, 44, 27, 7, -76, 45, 30, 78, 98, 41, -83, 38, -15, 16, 15, -44, -64, -48, 81, -71, -50, 22, -40, -9, 23, 65, -38, -37, -72, -39, 65, 106, -57, -2, -66, 85, 87, -47, 72, 12, 78, 65, -22, 11, -15, 20, 101, 111, -58, -99, 4, -69, -5, -23, 10, 15, -3, 5, 67, -2, 41, -82, -79, -35, -85, -60, -20, -26, -23, 36, 51, -56, 78, -11, -50, 17, -82, 20, -21, -23, -78, -3, -47, -64, -75, 23, 47, 41, 59, -108, -71, -48, -70, 34, 23, -3, 14, 29, -31, -43, 52, -78, 92, -32, 18, 34, 69, -34, -56, 3, 68, 17, -54, 7, -28, 77, -68, -36, -66, -52, 75, -48, 14, -54, -114, -67, 49, 72, 92, 60, 6, 55, 13, -102, 22, 80, -53, -81, 62, -54, -62, 23, -65, 70, 71, -12, -54, -33, 32, -69, -47, 52, 15, 97, -81, -87, 47, -40, -17, -31, 86, 14, -11, 21, 52, -107, 6, 38, 51, -43, 40, -31, -92, 7, 48, 70, 31, -26, -55, 14, -47, -75, 103, 13, -6, 37, -31, -82, 4, 38, -24, 83, 41, 21, 104, 19, 52, -104, 39, 93, -3, -15, 37, -35, -75, 41, -57, -12, 65, -49, -58, -48, -57, 43, 80, 17, 48, 63, -11, 53, -4, 33, 5, -45, 112, -118, 76, 24, -69, 15, -61, -46, -25, 87, -79, -33, -19, 12, -76, 87, -27, -37, 102, 45, -14, 49, 18, -68, 25, 95, -10, 33, -25, -65, 52, 11, -49, -17, 63, -37, 4, 43, 42, 14, 35, -21, 91, 10, -10, -72, -17, 98, 79, -61, 112, 45, 32, -98, 48, -37, 90, -19, -20, 6, -58, -23, 17, 24, -10, -60, 60, 26, 67, -73, 96, -1, 39, -51, 58, -7, -69, 37, -3, -61, -11, -4, 78, 56, 19, -104, 1, 90, 68, 42, 11, 67, -38, 52, 12, 72, 71, 11, 66, 63, -75, -88, 42, 9, 73, -97, -66, 44, -89, -28, -63, 14, -15, 55, 97, 84, 3, -37, 73, 98, 73, 27, -57, -55, 27, -56, 10, 22, 99, -60, -28, 27, -16, -18, -40, -63, 34, 52, 2, 60, -10, 91, -21, 100, 68, 10, -10, 21, 0, -72, 28, 70, -72, 69, 81, -9, -109, -36, 5, 62, -49, -99, -56, 15, 26, 42, 82, -63, 102, 7, 64, -69, -92, 10, 58, -88, -12, 12, 95, 14, 27, -98, -59, 7, 61, -36, 47, 35, -12, 18, -67, -8, 64, -104, -17, 84, -43, -47, -50, 1, 85, 32, 69, -82, 52, 47, 84, -50, 15, 35, 18, -99, 64, 16, 15, -68, -48, -53, -5, -81, -98, -75, -52, -60, 52, 23, -57, -25, 104, 62, -66, -58, 7, 36, -23, 55, -71, -43, -18, 50, -98, 5, 102, 91, -14, -45, 48, -19, -62, 73, 20, -46, -100, 18, 39, 42, 54, 62, -61, -49, 29, 31, 101, -17, 91, 26, 65, -78, 0, -44, -1, -93, -52, -64, 69, 39, 50, 57, 54, 7, 39, 18, -11, -34, 27, -86, 84, 62, 31, 42, -64, 20, 94, -27, -69, 48, 69, 3, -53, -72, -116, -68, 19, 46, 99, -90, 7, -61, -42, 51, 0, 59, -80, -16, -48, 45, -41, 33, 98, 30, 42, 1, 68, 12, 93, -80, 64, 75, -74, 51, 5, 2, -44, 32, 74, -13, -58, 57, 41, -20, 47, -73, 86, -73, -27, 83, 68, -17, -30, 13, 12, -23, 26, 70, -28, 102, -44, -15, -44, -11, -60, 93, 116, -64, 52, -53, 105, 56, -60, 25, 86, 63, 85, -3, 100, 54, -32, 13, 64, -63, -112, 7, 72, -27, -17, 41, 63, -22, -33, -8, 38, -63, -15, 22, 78, 55, 29, 45, 8, -58, -36, 17, 103, -82, 99, 47, 22, -107, -33, 6, -22, 34, -64, 52, 57, -23, 10, -29, -43, -84, -71, 61, -74, 67, -10, -36, -77, 31, -89, -58, 79, 68, 56, -76, -63, -40, 83, -42, -68, 42, 42, -36, -33, 77, -61, 18, 68, 108, 47, -95, 100, 63, 38, -17, 81, 43, -34, -53, -43, -76, 20, 73, -17, 38, 74, 30, 40, 84, -6, -24, 12, -12, 77, 70, -8, -11, -25, 32, 56, 3, -15, 70, -7, 56, 42, 28, 2, 24, -46, -71, -62, 54, -68, -30, -82, -52, 102, 50, 79, 26, 29, -20, 41, -74, 60, 18, 38, -31, -69, -2, -31, 2, -18, 27, 24, 73, 63, -89, 112, 60, -71, 103, -45, 3, 18, -96, 62, -72, 57, -64, 36, -52, 19, 2, 87, 51, 16, 60, -46, -73, 42, 2, -49, 50, 90, -6, -66, -1, -64, 37, -42, -50, -19, -56, -10, 67, -91, -57, -78, -34, 113, -99, 45, 99, 46, 62, 32, 72, 83, 7, 101, 72, 33, -29, -32, 59, 2, -76, 35, 58, 49, 40, 25, 34, 55, -34, 86, 11, -36, 25, -68, 55, -6, -89, -60, -32, -61, 60, 26, -66, 35, 45, 25, -40, -28, -99, 27, -35, 107, -91, -23, -26, -50, -100, -79, -63, 39, 86, 104, -65, 14, -74, 14, 9, 104, -31, 90, -36, -66, -60, 4, 16, 46, -80, 40, 76, -18, -80, 38, -66, -56, -72, -33, 46, -28, -21, -27, -9, 15, -28, -60, -50, -35, -1, 69, -22, 89, -95, 84, 23, -16, -79, -38, -88, -23, 27, 37, 24, 27, 20, -4, -71, 52, 63, -5, -70, 20, 75, 64, 61, -41, 30, -67, -51, 61, 68, 36, -34, -33, -53, -22, -43, -88, -17, 101, 26, 106, -33, -74, 75, -3, -25, -4, -14, 42, -57, 8, 75, 21, 11, -63, -77, -8, 6, 14, -26, -62, 32, 45, -55, -81, -65, -71, 82, 85, 58, -3, -63, 100, -28, -31, 29, 65, -38, 55, 53, -14, -2, -67, 71, -29, -50, 51, -48, -88, -2, 26, -91, -11, 0, 48, 23, 87, -68, 106, -4, 75, -19, 29, -79, 79, 6, -29, 59, -35, -18, -13, 66, 15, 16, 18, 59, 58, -92, 56, 60, -22, 61, -46, 30, -61, -75, -64, -65, -47, 75, 105, 103, 90, -26, -21, 6, -11, 96, 57, -81, -55, -27, -41, 63, -44, 6, -56, -7, 24, 43, 17, 9, -54, -2, -21, -37, -52, 42, 93, -68, -26, -92, 59, -42, 3, 24, 99, -79, 11, 32, -15, 51, 56, -86, -51, 36, 48, -65, 6, 90, -39, -8, 11, -38, 58, -68, -36, 55, -54, 7, 0, -64, 34, 27, 43, -67, -68, 7, -76, 48, -88, -33, 61, 88, -40, 32, -24, 84, -64, 22, 82, -30, -71, -62, 10, 76, 17, -37, 25, 42, -85, -67, 8, -77, -26, -35, -60, -36, -20, 46, -58, -59, 33, 77, 4, -85, 47, 83, 78, 4, 72, -85, -35, -38, -43, -43, -4, -62, 10, -63, -76, 51, -52, -25, 19, 10, -36, 1, -42, -102, 67, -69, 29, 63, 4, 68, 75, 27, 18, 95, 32, -22, -74, -53, 33, -10, -50, -77, 68, 64, -46, -1, 7, 37, 7, 86, -11, 62, 86, 49, 92, -38, -68, 80, -85, 41, 88, -83, 75, 63, -109, -57, -24, -66, 77, -39, 64, -63, 77, 2, 9, 14, 5, -24, -78, 19, 15, -32, -22, 55, -79, 38, 75, -27, 4, -70, -68, 58, -11, 7, -49, 8, -4, -96, -35, 106, -26, -57, -20, -84, -27, 74, -101, 57, 67, 85, 30, -15, 30, 84, -33, -26, -41, 80, -14, 42, 67, -68, -43, 78, 21, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,2304 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00054784287931397557, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[2] = { 8269, -8269, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const TfArray<1, float> quant7_scale = { 1, { 1.8102748526871437e-06, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,48,48,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0033621136099100113, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,24,24,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0033621136099100113, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0033043685834854841, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0033043685834854841, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,2304 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0033043685834854841, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,2 } };
const TfArray<1, float> quant13_scale = { 1, { 0.013466131873428822, } };
const TfArray<1, int> quant13_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,2 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,4,5 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 73728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension9, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension11, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2304, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
